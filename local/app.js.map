{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/fbjs/lib/ExecutionEnvironment.js","webpack:///./node_modules/fbjs/lib/camelize.js","webpack:///./node_modules/fbjs/lib/camelizeStyleName.js","webpack:///./node_modules/fbjs/lib/containsNode.js","webpack:///./node_modules/fbjs/lib/emptyFunction.js","webpack:///./node_modules/fbjs/lib/emptyObject.js","webpack:///./node_modules/fbjs/lib/getActiveElement.js","webpack:///./node_modules/fbjs/lib/hyphenate.js","webpack:///./node_modules/fbjs/lib/hyphenateStyleName.js","webpack:///./node_modules/fbjs/lib/invariant.js","webpack:///./node_modules/fbjs/lib/isNode.js","webpack:///./node_modules/fbjs/lib/isTextNode.js","webpack:///./node_modules/fbjs/lib/shallowEqual.js","webpack:///./node_modules/fbjs/lib/warning.js","webpack:///./node_modules/object-assign/index.js","webpack:///./node_modules/prop-types/checkPropTypes.js","webpack:///./node_modules/prop-types/lib/ReactPropTypesSecret.js","webpack:///./src/App.jsx","webpack:///./src/main.js","webpack:///./src/packages/events/EventPluginHub.js","webpack:///./src/packages/events/EventPluginRegistry.js","webpack:///./src/packages/events/EventPluginUtils.js","webpack:///./src/packages/events/EventPropagators.js","webpack:///./src/packages/events/ReactControlledComponent.js","webpack:///./src/packages/events/ReactGenericBatching.js","webpack:///./src/packages/events/SyntheticEvent.js","webpack:///./src/packages/events/accumulateInto.js","webpack:///./src/packages/events/forEachAccumulated.js","webpack:///./src/packages/react-dom/index.js","webpack:///./src/packages/react-dom/src/client/DOMPropertyOperations.js","webpack:///./src/packages/react-dom/src/client/ReactDOM.js","webpack:///./src/packages/react-dom/src/client/ReactDOMClientInjection.js","webpack:///./src/packages/react-dom/src/client/ReactDOMComponentTree.js","webpack:///./src/packages/react-dom/src/client/ReactDOMFiberComponent.js","webpack:///./src/packages/react-dom/src/client/ReactDOMFiberInput.js","webpack:///./src/packages/react-dom/src/client/ReactDOMFiberOption.js","webpack:///./src/packages/react-dom/src/client/ReactDOMFiberSelect.js","webpack:///./src/packages/react-dom/src/client/ReactDOMFiberTextarea.js","webpack:///./src/packages/react-dom/src/client/ReactDOMSelection.js","webpack:///./src/packages/react-dom/src/client/ReactInputSelection.js","webpack:///./src/packages/react-dom/src/client/getNodeForCharacterOffset.js","webpack:///./src/packages/react-dom/src/client/getTextContentAccessor.js","webpack:///./src/packages/react-dom/src/client/inputValueTracking.js","webpack:///./src/packages/react-dom/src/client/setInnerHTML.js","webpack:///./src/packages/react-dom/src/client/setTextContent.js","webpack:///./src/packages/react-dom/src/client/validateDOMNesting.js","webpack:///./src/packages/react-dom/src/events/BeforeInputEventPlugin.js","webpack:///./src/packages/react-dom/src/events/BrowserEventConstants.js","webpack:///./src/packages/react-dom/src/events/ChangeEventPlugin.js","webpack:///./src/packages/react-dom/src/events/DOMEventPluginOrder.js","webpack:///./src/packages/react-dom/src/events/EnterLeaveEventPlugin.js","webpack:///./src/packages/react-dom/src/events/EventListener.js","webpack:///./src/packages/react-dom/src/events/FallbackCompositionState.js","webpack:///./src/packages/react-dom/src/events/ReactBrowserEventEmitter.js","webpack:///./src/packages/react-dom/src/events/ReactDOMEventListener.js","webpack:///./src/packages/react-dom/src/events/SelectEventPlugin.js","webpack:///./src/packages/react-dom/src/events/SimpleEventPlugin.js","webpack:///./src/packages/react-dom/src/events/SyntheticAnimationEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticClipboardEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticCompositionEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticDragEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticFocusEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticInputEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticKeyboardEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticMouseEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticTouchEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticTransitionEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticUIEvent.js","webpack:///./src/packages/react-dom/src/events/SyntheticWheelEvent.js","webpack:///./src/packages/react-dom/src/events/getEventCharCode.js","webpack:///./src/packages/react-dom/src/events/getEventKey.js","webpack:///./src/packages/react-dom/src/events/getEventModifierState.js","webpack:///./src/packages/react-dom/src/events/getEventTarget.js","webpack:///./src/packages/react-dom/src/events/getVendorPrefixedEventName.js","webpack:///./src/packages/react-dom/src/events/isEventSupported.js","webpack:///./src/packages/react-dom/src/shared/CSSProperty.js","webpack:///./src/packages/react-dom/src/shared/CSSPropertyOperations.js","webpack:///./src/packages/react-dom/src/shared/DOMNamespaces.js","webpack:///./src/packages/react-dom/src/shared/DOMProperty.js","webpack:///./src/packages/react-dom/src/shared/HTMLNodeType.js","webpack:///./src/packages/react-dom/src/shared/ReactControlledValuePropTypes.js","webpack:///./src/packages/react-dom/src/shared/ReactDOMInvalidARIAHook.js","webpack:///./src/packages/react-dom/src/shared/ReactDOMNullInputValuePropHook.js","webpack:///./src/packages/react-dom/src/shared/ReactDOMUnknownPropertyHook.js","webpack:///./src/packages/react-dom/src/shared/assertValidProps.js","webpack:///./src/packages/react-dom/src/shared/checkReact.js","webpack:///./src/packages/react-dom/src/shared/createMicrosoftUnsafeLocalFunction.js","webpack:///./src/packages/react-dom/src/shared/dangerousStyleValue.js","webpack:///./src/packages/react-dom/src/shared/isCustomComponent.js","webpack:///./src/packages/react-dom/src/shared/omittedCloseTags.js","webpack:///./src/packages/react-dom/src/shared/possibleStandardNames.js","webpack:///./src/packages/react-dom/src/shared/validAriaProperties.js","webpack:///./src/packages/react-dom/src/shared/voidElementTags.js","webpack:///./src/packages/react-dom/src/shared/warnValidStyle.js","webpack:///./src/packages/react-reconciler/index.js","webpack:///./src/packages/react-reconciler/reflection.js","webpack:///./src/packages/react-reconciler/src/ReactCapturedValue.js","webpack:///./src/packages/react-reconciler/src/ReactChildFiber.js","webpack:///./src/packages/react-reconciler/src/ReactDebugCurrentFiber.js","webpack:///./src/packages/react-reconciler/src/ReactDebugFiberPerf.js","webpack:///./src/packages/react-reconciler/src/ReactFiber.js","webpack:///./src/packages/react-reconciler/src/ReactFiberBeginWork.js","webpack:///./src/packages/react-reconciler/src/ReactFiberClassComponent.js","webpack:///./src/packages/react-reconciler/src/ReactFiberCommitWork.js","webpack:///./src/packages/react-reconciler/src/ReactFiberCompleteWork.js","webpack:///./src/packages/react-reconciler/src/ReactFiberContext.js","webpack:///./src/packages/react-reconciler/src/ReactFiberDevToolsHook.js","webpack:///./src/packages/react-reconciler/src/ReactFiberErrorDialog.js","webpack:///./src/packages/react-reconciler/src/ReactFiberErrorLogger.js","webpack:///./src/packages/react-reconciler/src/ReactFiberExpirationTime.js","webpack:///./src/packages/react-reconciler/src/ReactFiberHostContext.js","webpack:///./src/packages/react-reconciler/src/ReactFiberHydrationContext.js","webpack:///./src/packages/react-reconciler/src/ReactFiberInstrumentation.js","webpack:///./src/packages/react-reconciler/src/ReactFiberNewContext.js","webpack:///./src/packages/react-reconciler/src/ReactFiberReconciler.js","webpack:///./src/packages/react-reconciler/src/ReactFiberRoot.js","webpack:///./src/packages/react-reconciler/src/ReactFiberScheduler.js","webpack:///./src/packages/react-reconciler/src/ReactFiberStack.js","webpack:///./src/packages/react-reconciler/src/ReactFiberTreeReflection.js","webpack:///./src/packages/react-reconciler/src/ReactFiberUnwindWork.js","webpack:///./src/packages/react-reconciler/src/ReactFiberUpdateQueue.js","webpack:///./src/packages/react-reconciler/src/ReactStrictModeWarnings.js","webpack:///./src/packages/react-reconciler/src/ReactTypeOfMode.js","webpack:///./src/packages/react-reconciler/src/maxSigned31BitInt.js","webpack:///./src/packages/react/index.js","webpack:///./src/packages/react/src/React.js","webpack:///./src/packages/react/src/ReactBaseClasses.js","webpack:///./src/packages/react/src/ReactChildren.js","webpack:///./src/packages/react/src/ReactContext.js","webpack:///./src/packages/react/src/ReactCreateRef.js","webpack:///./src/packages/react/src/ReactCurrentOwner.js","webpack:///./src/packages/react/src/ReactDebugCurrentFrame.js","webpack:///./src/packages/react/src/ReactElement.js","webpack:///./src/packages/react/src/ReactElementValidator.js","webpack:///./src/packages/react/src/ReactNoopUpdateQueue.js","webpack:///./src/packages/react/src/forwardRef.js","webpack:///./src/packages/shared/ReactDOMFrameScheduling.js","webpack:///./src/packages/shared/ReactErrorUtils.js","webpack:///./src/packages/shared/ReactFeatureFlags.js","webpack:///./src/packages/shared/ReactFiberComponentTreeHook.js","webpack:///./src/packages/shared/ReactGlobalSharedState.js","webpack:///./src/packages/shared/ReactInstanceMap.js","webpack:///./src/packages/shared/ReactPortal.js","webpack:///./src/packages/shared/ReactSymbols.js","webpack:///./src/packages/shared/ReactTreeTraversal.js","webpack:///./src/packages/shared/ReactTypeOfSideEffect.js","webpack:///./src/packages/shared/ReactTypeOfWork.js","webpack:///./src/packages/shared/ReactVersion.js","webpack:///./src/packages/shared/describeComponentFrame.js","webpack:///./src/packages/shared/getComponentName.js","webpack:///./src/packages/shared/invokeGuardedCallback.js","webpack:///./src/packages/shared/isTextInputElement.js","webpack:///./src/packages/shared/isValidElementType.js","webpack:///./src/packages/shared/lowPriorityWarning.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sC;;;;;;;;;;;;AChCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,0B;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA,mC;;;;;;;;;;;;ACpCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;;AAEA,8B;;;;;;;;;;;;ACpCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,+B;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA,6B;;;;;;;;;;;;AChBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,kC;;;;;;;;;;;;ACnCA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA,2B;;;;;;;;;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA,oC;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qDAAqD;AACrD,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,0BAA0B;AAC1B;AACA;AACA;;AAEA,2B;;;;;;;;;;;;ACpDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;;;ACrBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,WAAW,EAAE;AACb,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA,4B;;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;;AAEA;AACA;;AAEA,8B;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sFAAsF,aAAa;AACnG;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,4FAA4F,eAAe;AAC3G;AACA;;AAEA;AACA;AACA;AACA;;AAEA,yB;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC;AAChC;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH,kCAAkC;AAClC;AACA;AACA;;AAEA;AACA,EAAE;AACF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,gBAAgB,sBAAsB;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAkB,oBAAoB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;;;;;;;;;;;ACzFA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gGAAgG;AAChG;AACA,SAAS;AACT;AACA;AACA,gGAAgG;AAChG;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;AC1DA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;ACXA;;AAEA;AACA;AACA,CAAC;;AAED,gCAAgC,2CAA2C,gBAAgB,kBAAkB,OAAO,2BAA2B,wDAAwD,gCAAgC,uDAAuD,2DAA2D,EAAE,EAAE,yDAAyD,qEAAqE,6DAA6D,oBAAoB,GAAG,EAAE;;AAEjjB;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD,0CAA0C,0DAA0D,EAAE;;AAEvJ,iDAAiD,aAAa,uFAAuF,EAAE,uFAAuF;;AAE9O,0CAA0C,+DAA+D,qGAAqG,EAAE,yEAAyE,eAAe,yEAAyE,EAAE,EAAE,uHAAuH;;AAE5e;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,moB;;;;;;;;;;;;AC7CzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,2CAA2C,cAAc,umB;;;;;;;;;;;;ACpBzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa,MAAM;AACnB;AACA;AACA;;AAEA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,UAAU;AACtB;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA,iBAAiB,yCAAyC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mpb;;;;;;;;;;;;ACjNzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8EAAgF;AAChF;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2hc;;;;;;;;;;;;AC5LzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW,eAAe;AAC1B,WAAW,QAAQ;AACnB,WAAW,SAAS;AACpB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,eAAe;AAC1B,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2zb;;;;;;;;;;;;AC3LzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,m1T;;;;;;;;;;;;ACzIzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m4K;;;;;;;;;;;;ACvFzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m+J;;;;;;;;;;;;AC3EzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,uCAAuC;AACvC;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,cAAc,QAAQ;AACtB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAEP;AACA;AACA,mBAAmB,uCAAuC;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,IAAI;;AAEnC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,m1uB;;;;;;;;;;;;ACpTzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,YAAY,WAAW;AACvB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mnG;;;;;;;;;;;;AC5DzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,MAAM;AACjB;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+8D;;;;;;;;;;;;ACjCzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,+kC;;;;;;;;;;;;AChBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m0X;;;;;;;;;;;;ACvKzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,YAAY;AACvB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,QAEL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAEP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;;AAGH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+0xF;;;;;;;;;;;;ACx5BzD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q;AACA;AACA;AACA,+EAA+E;AAC/E;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2CAA2C,cAAc,29F;;;;;;;;;;;;ACjEzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,m1L;;;;;;;;;;;;ACtGzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,yJAAyJ,mBAAmB,gBAAgB,8BAA8B;AAC1N,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,+CAA+C;AAC/C;AACA;AACA;AACA,KAAK;AACL;AACA,sDAAsD,eAAe;AACrE,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mBAAmB,uBAAuB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+8uF;;;;;;;;;;;;ACpgCzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,mBAAmB,kBAAkB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,29vB;;;;;;;;;;;;AC/RzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4BAA4B,sBAAsB;AAClD;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mzI;;;;;;;;;;;;ACjFzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,iGAAiG;AACjG;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA,oBAAoB,qBAAqB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,qBAAqB,sBAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB;AACzB;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+jf;;;;;;;;;;;;ACvMzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oCAAoC;AACpC;AACA;AACA,2CAA2C,cAAc,+nW;;;;;;;;;;;;ACjKzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,WAAW,WAAW;AACtB,YAAY;AACZ;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2iZ;;;;;;;;;;;;AChMzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,2CAA2C,cAAc,+xR;;;;;;;;;;;;AC7IzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,uBAAuB;AAClC,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+oH;;;;;;;;;;;;AC5EzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,22D;;;;;;;;;;;;ACtCzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+yQ;;;;;;;;;;;;ACjIzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,m+F;;;;;;;;;;;;ACrDzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mkE;;;;;;;;;;;;ACtCzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA,uCAAuC;AACvC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kCAAkC;AAClC,gBAAgB;;AAEhcAAc,+n2B;;;;;;;;;;;;AC3UzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F,mCAAmC;AACnC;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,WAAW,cAAc;AACzB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uj3B;;;;;;;;;;;;AC9ZzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+jP;;;;;;;;;;;;AC1GzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mxnB;;;;;;;;;;;;AC1SzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uzD;;;;;;;;;;;;ACzBzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uoO;;;;;;;;;;;;ACvGzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,miD;;;;;;;;;;;;ACvBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,qBAAqB;AACtC;AACA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2/J;;;;;;;;;;;;ACtFzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;;AAEA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,22Y;;;;;;;;;;;;AC/KzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH,iBAAiB,kCAAkC;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,2CAA2C,cAAc,+/Z;;;;;;;;;;;;AC1MzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mkZ;;;;;;;;;;;;ACxMzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,MAAM;AACN;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;;AAGH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2jhB;;;;;;;;;;;;AClOzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+6C;;;;;;;;;;;;AC9BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+6C;;;;;;;;;;;;AC7BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+qC;;;;;;;;;;;;AC3BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+oC;;;;;;;;;;;;AC3BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2oC;;;;;;;;;;;;AC3BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mqC;;;;;;;;;;;;AC5BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,mgJ;;;;;;;;;;;;ACrFzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,uhF;;;;;;;;;;;;AChDzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,mvD;;;;;;;;;;;;ACxCzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,m8C;;;;;;;;;;;;AC9BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mhC;;;;;;;;;;;;ACxBzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,EAAE;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,25F;;;;;;;;;;;;AC3CzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,miG;;;;;;;;;;;;ACvDzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+yM;;;;;;;;;;;;ACvHzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mnF;;;;;;;;;;;;AC3CzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,eAAe;AAC3B;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,ugE;;;;;;;;;;;;ACnCzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+xM;;;;;;;;;;;;AC1GzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,SAAS;AACpB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,4CAA4C;AAC5C;AACA;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2xF;;;;;;;;;;;;AClDzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,2CAA2C,cAAc,umL;;;;;;;;;;;;ACpFzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB,WAAW,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mtK;;;;;;;;;;;;AC1FzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m4F;;;;;;;;;;;;AChDzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,kCAAkC,iCAAiC,eAAe,eAAe,gBAAgB,oBAAoB,MAAM,0CAA0C,+BAA+B,aAAa,qBAAqB,mCAAmC,EAAE,EAAE,cAAc,WAAW,UAAU,EAAE,UAAU,MAAM,yCAAyC,EAAE,UAAU,kBAAkB,EAAE,EAAE,aAAa,EAAE,2BAA2B,0BAA0B,YAAY,EAAE,2CAA2C,8BAA8B,EAAE,OAAO,6EAA6E,EAAE,GAAG,EAAE;;AAErpB,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2l5B;;;;;;;;;;;;AClTzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mpC;;;;;;;;;;;;ACrBzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,mlJ;;;;;;;;;;;;AC1DzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,uoR;;;;;;;;;;;;AClHzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,2CAA2C,cAAc,ulG;;;;;;;;;;;;AC3CzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,8KAA8K,iBAAiB;AAC/L,OAAO;AACP,8KAA8K,iBAAiB,wDAAwD,mBAAmB,gBAAgB,8BAA8B;AACxT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2xlB;;;;;;;;;;;;AC5LzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kLAAkL,YAAY;AAC9L;AACA;AACA;AACA;AACA,kMAAkM,6BAA6B;AAC/N;;AAEA;AACA;AACA,2CAA2C,cAAc,+xI;;;;;;;;;;;;ACjDzD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,m7B;;;;;;;;;;;;ACtBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,23D;;;;;;;;;;;;AC/BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,EAAE;AACb,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB;AACxB;;AAEA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,23G;;;;;;;;;;;;AC/CzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+qE;;;;;;;;;;;;ACvCzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2xD;;;;;;;;;;;;ACpCzcAAc,+rqC;;;;;;;;;;;;ACvfzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,unH;;;;;;;;;;;;ACrEzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA,2CAA2C,cAAc,upC;;;;;;;;;;;;AC5BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,4CAA4C;;AAE5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,u4P;;;;;;;;;;;;ACzGzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,u4C;;;;;;;;;;;;AClBzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,CAAC;AACD,2CAA2C,cAAc,muB;;;;;;;;;;;;AC1BzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,24D;;;;;;;;;;;;AC3BzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uEAAuE;AACvE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,iLAAiL,yCAAyC;AAC1N;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACbqBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,UAAU,kDAAkD;AAC5D;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,6BAA6B;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,6BAA6B;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,aAAa;AAC3B;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,iCAAiC;AAC3C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,YAAY;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6CAA6C,MAAM;AACnD;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,uluF;;;;;;;;;;;;ACh9BzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2iJ;;;;;;;;;;;;AC9EzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2tiC;;;;;;;;;;;;ACpdzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+qjC;;;;;;;;;;;;AC3WzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK,QAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAKP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,QAEL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA,yDAAyD;AACzD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,mhmF;;;;;;;;;;;;AC73BzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,+BAA+B;AAC/B;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uGAAuG;;AAEvG;AACA;AACA;AACA;AACA,iDAAiD;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;;AAEvG;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,uGAAuG;;AAEvG;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;;AAEvG;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,+zjF;;;;;;;;;;;;AC/tBzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,QAML;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAMT;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,2BAA2B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,6BAA6B;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,gFAAgF;AAChF,kEAAkE;AAClE;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,uj/D;;;;;;;;;;;;AC/yBzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,mi6C;;;;;;;;;;;;ACjdzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjsBAAsB;AACtB;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA,mEAAmE;AACnE;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,27tB;;;;;;;;;;;;ACrRzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2pL;;;;;;;;;;;;ACzFzD;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mrC;;;;;;;;;;;;ACrBzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG,QAKH;AACA;AACA,2CAA2C,cAAc,+mL;;;;;;;;;;;;ACpEzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA,gCAAgC;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,mrG;;;;;;;;;;;;ACjDzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,2CAA2C,cAAc,+vR;;;;;;;;;;;;AClHzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP,4DAA4D;AAC5D,sFAAsF;AACtF;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+00B;;;;;;;;;;;;ACjUzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,2xC;;;;;;;;;;;;ACpBzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mnK;;;;;;;;;;;;ACvEzD;;AAEA;AACA;AACA,CAAC;;AAED,mDAAmD,gBAAgB,sBAAsB,OAAO,2BAA2B,0BAA0B,yDAAyD,2BAA2B,EAAE,EAAE,EAAE,eAAe,GAAG;AACjQ;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mGAAmG;AACnG;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,KAAK;;;AAGL;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA,+DAA+D;AAC/D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,271B;;;;;;;;;;;;ACzQzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+8I;;;;;;;;;;;;ACzCzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,QAOP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,6DAA6D,mBAAmB;AAChF;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA,kEAAkE;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6NAA6N;AAC7N;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,m3yH;;;;;;;;;;;;ACvjDzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mmK;;;;;;;;;;;;ACxGzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,uCAAuC,6BAA6B,YAAY,EAAE,OAAO,iBAAiB,mBAAmB,uBAAuB,4EAA4E,EAAE,EAAE,sBAAsB,eAAe,EAAE;;AAE3Q,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,uwlB;;;;;;;;;;;;AC1RzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,2CAA2C,cAAc,moX;;;;;;;;;;;;AC1JzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,kCAAkC;AAClC,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,yBAAyB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,uiyB;;;;;;;;;;;;AC/UzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8DAA8D;AAC9D,gFAAgF;AAChF,wFAAwF;AACxF,mFAAmF;AACnF;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;;AAEX;AACA;AACA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,ugrB;;;;;;;;;;;;AChOzD;;AAEA;AACA;AACA,CAAC;AACD,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,u5B;;;;;;;;;;;;AChBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m1B;;;;;;;;;;;;ACnBzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,uiC;;;;;;;;;;;;AChBzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA,2CAA2C,cAAc,+sJ;;;;;;;;;;;;AC/FzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gBAAgB;AAC3B;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2nT;;;;;;;;;;;;AC5IzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW,GAAG;AACd,WAAW,QAAQ;AACnB,WAAW,UAAU;AACrB,WAAW,GAAG;AACd;AACA,YAAY,QAAQ;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,yJAAyJ,yCAAyC;AAClM;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,UAAU;AACrB,WAAW,GAAG;AACd,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,OAAO;AAClB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,iBAAiB;AAC5B,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,WAAW,iBAAiB;AAC5B,WAAW,EAAE;AACb,YAAY,OAAO;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,GAAG;AACd,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,aAAa;AACzB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,29yB;;;;;;;;;;;;ACzWzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uxG;;;;;;;;;;;;ACxDzD;;AAEA;AACA;AACA,CAAC;AACD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,2sC;;;;;;;;;;;;ACxBzD;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+tC;;;;;;;;;;;;AC9BzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+iD;;;;;;;;;;;;AC/BzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb,WAAW,cAAc;AACzB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA,WAAW,EAAE;AACb;AACA,WAAW,EAAE;AACb,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,8BAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,YAAY,QAAQ;AACpB;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+qwB;;;;;;;;;;;;ACxVzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW,aAAa;AACxB;AACA;AACA;;AAEA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m5yB;;;;;;;;;;;;ACrWzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,iDAAiD;AACjD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sOAAsO;AACtO;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,cAAc,QAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,WAAW;AACxB,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,+7N;;;;;;;;;;;;ACtGzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,+oD;;;;;;;;;;;;AClCzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA;AACA,CAAC;AACD;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,+le;;;;;;;;;;;;ACrNzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,EAAE;AACf,aAAa,KAAK;AAClB;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,SAAS;AACtB,aAAa,EAAE;AACf,aAAa,KAAK;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uxO;;;;;;;;;;;;AC3GzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,kDAAkD;AAClD;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,mlH;;;;;;;;;;;;ACzDzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,2CAA2C,cAAc,u9G;;;;;;;;;;;;AC5DzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F,wFAAwF;AACxF;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uxC;;;;;;;;;;;;ACtBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C,cAAc,+zE;;;;;;;;;;;;AC9CzD;;AAEA;AACA;AACA,CAAC;AACD;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,muD;;;;;;;;;;;;AC9BzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,umJ;;;;;;;;;;;;AC3CzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,SAAS;AAChC;AACA;AACA,aAAa,iBAAiB;AAC9B;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,qBAAqB;AACtC;AACA;AACA,8BAA8B,UAAU;AACxC;AACA;AACA;AACA,2CAA2C,cAAc,m0R;;;;;;;;;;;;AC7JzD;;AAEA;AACA;AACA,CAAC;;;AAGD;AACA,sDAAsD;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,m+F;;;;;;;;;;;;ACpCzD;;AAEA;AACA;AACA,CAAC;AACD,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,oCAAoC;AACpC,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m7E;;;;;;;;;;;;AC7BzD;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA,2CAA2C,cAAc,mwB;;;;;;;;;;;;ACZzD;;AAEA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,m9C;;;;;;;;;;;;AClBzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,uvE;;;;;;;;;;;;ACzCzD;;AAEA;AACA;AACA,CAAC;;AAED;;AAEA;;AAEA,sCAAsC,uCAAuC,gBAAgB;;AAE7F;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2pd;;;;;;;;;;;;AClJzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,moF;;;;;;;;;;;;AChDzD;;AAEA;AACA;AACA,CAAC;;AAED,oGAAoG,mBAAmB,EAAE,mBAAmB,8HAA8H,GAAG;AAC7Q;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,cAAc,uuE;;;;;;;;;;;;ACzBzD;;AAEA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,sFAAsF,aAAa;AACnG;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA,4FAA4F,eAAe;AAC3G;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2CAA2C,cAAc,2oH","file":"app.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/main.js\");\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);\n\n/**\n * Simple, lightweight module assisting with the detection and context of\n * Worker. Helps avoid circular dependencies and allows code to reason about\n * whether or not they are in a Worker, even if they never include the main\n * `ReactWorker` dependency.\n */\nvar ExecutionEnvironment = {\n\n  canUseDOM: canUseDOM,\n\n  canUseWorkers: typeof Worker !== 'undefined',\n\n  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),\n\n  canUseViewport: canUseDOM && !!window.screen,\n\n  isInWorker: !canUseDOM // For now, this is true - might change in the future.\n\n};\n\nmodule.exports = ExecutionEnvironment;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar _hyphenPattern = /-(.)/g;\n\n/**\n * Camelcases a hyphenated string, for example:\n *\n *   > camelize('background-color')\n *   < \"backgroundColor\"\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelize(string) {\n  return string.replace(_hyphenPattern, function (_, character) {\n    return character.toUpperCase();\n  });\n}\n\nmodule.exports = camelize;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar camelize = require('./camelize');\n\nvar msPattern = /^-ms-/;\n\n/**\n * Camelcases a hyphenated CSS property name, for example:\n *\n *   > camelizeStyleName('background-color')\n *   < \"backgroundColor\"\n *   > camelizeStyleName('-moz-transition')\n *   < \"MozTransition\"\n *   > camelizeStyleName('-ms-transition')\n *   < \"msTransition\"\n *\n * As Andi Smith suggests\n * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix\n * is converted to lowercase `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction camelizeStyleName(string) {\n  return camelize(string.replace(msPattern, 'ms-'));\n}\n\nmodule.exports = camelizeStyleName;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar isTextNode = require('./isTextNode');\n\n/*eslint-disable no-bitwise */\n\n/**\n * Checks if a given DOM node contains or is another DOM node.\n */\nfunction containsNode(outerNode, innerNode) {\n  if (!outerNode || !innerNode) {\n    return false;\n  } else if (outerNode === innerNode) {\n    return true;\n  } else if (isTextNode(outerNode)) {\n    return false;\n  } else if (isTextNode(innerNode)) {\n    return containsNode(outerNode, innerNode.parentNode);\n  } else if ('contains' in outerNode) {\n    return outerNode.contains(innerNode);\n  } else if (outerNode.compareDocumentPosition) {\n    return !!(outerNode.compareDocumentPosition(innerNode) & 16);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = containsNode;","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction makeEmptyFunction(arg) {\n  return function () {\n    return arg;\n  };\n}\n\n/**\n * This function accepts and discards inputs; it has no side effects. This is\n * primarily useful idiomatically for overridable function endpoints which\n * always need to be callable, since JS lacks a null-call idiom ala Cocoa.\n */\nvar emptyFunction = function emptyFunction() {};\n\nemptyFunction.thatReturns = makeEmptyFunction;\nemptyFunction.thatReturnsFalse = makeEmptyFunction(false);\nemptyFunction.thatReturnsTrue = makeEmptyFunction(true);\nemptyFunction.thatReturnsNull = makeEmptyFunction(null);\nemptyFunction.thatReturnsThis = function () {\n  return this;\n};\nemptyFunction.thatReturnsArgument = function (arg) {\n  return arg;\n};\n\nmodule.exports = emptyFunction;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyObject = {};\n\nif (process.env.NODE_ENV !== 'production') {\n  Object.freeze(emptyObject);\n}\n\nmodule.exports = emptyObject;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/* eslint-disable fb-www/typeof-undefined */\n\n/**\n * Same as document.activeElement but wraps in a try-catch block. In IE it is\n * not safe to call document.activeElement if there is nothing focused.\n *\n * The activeElement will be null only if the document or document body is not\n * yet defined.\n *\n * @param {?DOMDocument} doc Defaults to current document.\n * @return {?DOMElement}\n */\nfunction getActiveElement(doc) /*?DOMElement*/{\n  doc = doc || (typeof document !== 'undefined' ? document : undefined);\n  if (typeof doc === 'undefined') {\n    return null;\n  }\n  try {\n    return doc.activeElement || doc.body;\n  } catch (e) {\n    return doc.body;\n  }\n}\n\nmodule.exports = getActiveElement;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar _uppercasePattern = /([A-Z])/g;\n\n/**\n * Hyphenates a camelcased string, for example:\n *\n *   > hyphenate('backgroundColor')\n *   < \"background-color\"\n *\n * For CSS style names, use `hyphenateStyleName` instead which works properly\n * with all vendor prefixes, including `ms`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenate(string) {\n  return string.replace(_uppercasePattern, '-$1').toLowerCase();\n}\n\nmodule.exports = hyphenate;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n'use strict';\n\nvar hyphenate = require('./hyphenate');\n\nvar msPattern = /^ms-/;\n\n/**\n * Hyphenates a camelcased CSS property name, for example:\n *\n *   > hyphenateStyleName('backgroundColor')\n *   < \"background-color\"\n *   > hyphenateStyleName('MozTransition')\n *   < \"-moz-transition\"\n *   > hyphenateStyleName('msTransition')\n *   < \"-ms-transition\"\n *\n * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix\n * is converted to `-ms-`.\n *\n * @param {string} string\n * @return {string}\n */\nfunction hyphenateStyleName(string) {\n  return hyphenate(string).replace(msPattern, '-ms-');\n}\n\nmodule.exports = hyphenateStyleName;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\n/**\n * Use invariant() to assert state which your program assumes to be true.\n *\n * Provide sprintf-style format (only %s is supported) and arguments\n * to provide information about what broke and what you were\n * expecting.\n *\n * The invariant message will be stripped in production, but the invariant\n * will remain to ensure logic does not differ in production.\n */\n\nvar validateFormat = function validateFormat(format) {};\n\nif (process.env.NODE_ENV !== 'production') {\n  validateFormat = function validateFormat(format) {\n    if (format === undefined) {\n      throw new Error('invariant requires an error message argument');\n    }\n  };\n}\n\nfunction invariant(condition, format, a, b, c, d, e, f) {\n  validateFormat(format);\n\n  if (!condition) {\n    var error;\n    if (format === undefined) {\n      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');\n    } else {\n      var args = [a, b, c, d, e, f];\n      var argIndex = 0;\n      error = new Error(format.replace(/%s/g, function () {\n        return args[argIndex++];\n      }));\n      error.name = 'Invariant Violation';\n    }\n\n    error.framesToPop = 1; // we don't care about invariant's own frame\n    throw error;\n  }\n}\n\nmodule.exports = invariant;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM node.\n */\nfunction isNode(object) {\n  var doc = object ? object.ownerDocument || object : document;\n  var defaultView = doc.defaultView || window;\n  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));\n}\n\nmodule.exports = isNode;","'use strict';\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n */\n\nvar isNode = require('./isNode');\n\n/**\n * @param {*} object The object to check.\n * @return {boolean} Whether or not the object is a DOM text node.\n */\nfunction isTextNode(object) {\n  return isNode(object) && object.nodeType == 3;\n}\n\nmodule.exports = isTextNode;","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @typechecks\n * \n */\n\n/*eslint-disable no-self-compare */\n\n'use strict';\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction is(x, y) {\n  // SameValue algorithm\n  if (x === y) {\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Added the nonzero y check to make Flow happy, but it is redundant\n    return x !== 0 || y !== 0 || 1 / x === 1 / y;\n  } else {\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n  }\n}\n\n/**\n * Performs equality by iterating through keys on an object and returning false\n * when any key has values which are not strictly equal between the arguments.\n * Returns true when the values of all keys are strictly equal.\n */\nfunction shallowEqual(objA, objB) {\n  if (is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n  var keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (var i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = shallowEqual;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n'use strict';\n\nvar emptyFunction = require('./emptyFunction');\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar warning = emptyFunction;\n\nif (process.env.NODE_ENV !== 'production') {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  warning = function warning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n\n    if (format.indexOf('Failed Composite propType: ') === 0) {\n      return; // Ignore CompositeComponent proptype check.\n    }\n\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nif (process.env.NODE_ENV !== 'production') {\n  var invariant = require('fbjs/lib/invariant');\n  var warning = require('fbjs/lib/warning');\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (process.env.NODE_ENV !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (typeSpecs.hasOwnProperty(typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'the `prop-types` package, but received `%s`.', componentName || 'React class', location, typeSpecName, typeof typeSpecs[typeSpecName]);\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = checkPropTypes;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar App = function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    _classCallCheck(this, App);\n\n    return _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).apply(this, arguments));\n  }\n\n  _createClass(App, [{\n    key: 'render',\n    value: function render() {\n      return _react2.default.createElement(\n        'div',\n        null,\n        'sfsdfsfsdsfsfsd'\n      );\n    }\n  }]);\n\n  return App;\n}(_react2.default.Component);\n\nexports.default = App;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9BcHAuanN4Il0sIm5hbWVzIjpbIkFwcCIsIlJlYWN0IiwiQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7Ozs7Ozs7SUFFTUEsRzs7Ozs7Ozs7Ozs7NkJBQ0s7QUFDUCxhQUNFO0FBQUE7QUFBQTtBQUFBO0FBQUEsT0FERjtBQUdEOzs7O0VBTGVDLGdCQUFNQyxTOztrQkFRVEYsRyIsImZpbGUiOiJBcHAuanN4Iiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcblxuY2xhc3MgQXBwIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PnNmc2Rmc2ZzZHNmc2ZzZDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBBcHBcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _App = require('./App');\n\nvar _App2 = _interopRequireDefault(_App);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = (0, _reactDom.render)(_react2.default.createElement(_App2.default, null), document.getElementById('app'));\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9tYWluLmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7O0FBQ0E7Ozs7OztrQkFFZSxzQkFDYiw4QkFBQyxhQUFELE9BRGEsRUFFYkEsU0FBU0MsY0FBVCxDQUF3QixLQUF4QixDQUZhLEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdyZWFjdC1kb20nXG5pbXBvcnQgQXBwIGZyb20gJy4vQXBwJ1xuXG5leHBvcnQgZGVmYXVsdCByZW5kZXIoXG4gIDxBcHAgLz4sXG4gIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKVxuKVxuXG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injection = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.getListener = getListener;\nexports.runEventsInBatch = runEventsInBatch;\nexports.runExtractedEventsInBatch = runExtractedEventsInBatch;\n\nvar _ReactErrorUtils = require('shared/ReactErrorUtils');\n\nvar _ReactErrorUtils2 = _interopRequireDefault(_ReactErrorUtils);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _EventPluginRegistry = require('./EventPluginRegistry');\n\nvar _EventPluginUtils = require('./EventPluginUtils');\n\nvar _accumulateInto = require('./accumulateInto');\n\nvar _accumulateInto2 = _interopRequireDefault(_accumulateInto);\n\nvar _forEachAccumulated = require('./forEachAccumulated');\n\nvar _forEachAccumulated2 = _interopRequireDefault(_forEachAccumulated);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Internal queue of events that have accumulated their dispatches and are\n * waiting to have their dispatches executed.\n */\nvar eventQueue = null;\n\n/**\n * Dispatches an event and releases it back into the pool, unless persistent.\n *\n * @param {?object} event Synthetic event to be dispatched.\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @private\n */\nvar executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {\n  if (event) {\n    (0, _EventPluginUtils.executeDispatchesInOrder)(event, simulated);\n\n    if (!event.isPersistent()) {\n      event.constructor.release(event);\n    }\n  }\n};\nvar executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {\n  return executeDispatchesAndRelease(e, true);\n};\nvar executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {\n  return executeDispatchesAndRelease(e, false);\n};\n\nfunction isInteractive(tag) {\n  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';\n}\n\nfunction shouldPreventMouseEvent(name, type, props) {\n  switch (name) {\n    case 'onClick':\n    case 'onClickCapture':\n    case 'onDoubleClick':\n    case 'onDoubleClickCapture':\n    case 'onMouseDown':\n    case 'onMouseDownCapture':\n    case 'onMouseMove':\n    case 'onMouseMoveCapture':\n    case 'onMouseUp':\n    case 'onMouseUpCapture':\n      return !!(props.disabled && isInteractive(type));\n    default:\n      return false;\n  }\n}\n\n/**\n * This is a unified interface for event plugins to be installed and configured.\n *\n * Event plugins can implement the following properties:\n *\n *   `extractEvents` {function(string, DOMEventTarget, string, object): *}\n *     Required. When a top-level event is fired, this method is expected to\n *     extract synthetic events that will in turn be queued and dispatched.\n *\n *   `eventTypes` {object}\n *     Optional, plugins that fire events must publish a mapping of registration\n *     names that are used to register listeners. Values of this mapping must\n *     be objects that contain `registrationName` or `phasedRegistrationNames`.\n *\n *   `executeDispatch` {function(object, function, string)}\n *     Optional, allows plugins to override how an event gets dispatched. By\n *     default, the listener is simply invoked.\n *\n * Each plugin that is injected into `EventsPluginHub` is immediately operable.\n *\n * @public\n */\n\n/**\n * Methods for injecting dependencies.\n */\nvar injection = exports.injection = {\n  /**\n   * @param {array} InjectedEventPluginOrder\n   * @public\n   */\n  injectEventPluginOrder: _EventPluginRegistry.injectEventPluginOrder,\n\n  /**\n   * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n   */\n  injectEventPluginsByName: _EventPluginRegistry.injectEventPluginsByName\n};\n\n/**\n * @param {object} inst The instance, which is the source of events.\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @return {?function} The stored callback.\n */\nfunction getListener(inst, registrationName) {\n  var listener = void 0;\n\n  // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not\n  // live here; needs to be moved to a better place soon\n  var stateNode = inst.stateNode;\n  if (!stateNode) {\n    // Work in progress (ex: onload events in incremental mode).\n    return null;\n  }\n  var props = (0, _EventPluginUtils.getFiberCurrentPropsFromNode)(stateNode);\n  if (!props) {\n    // Work in progress.\n    return null;\n  }\n  listener = props[registrationName];\n  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {\n    return null;\n  }\n  (0, _invariant2.default)(!listener || typeof listener === 'function', 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener));\n  return listener;\n}\n\n/**\n * Allows registered plugins an opportunity to extract events from top-level\n * native browser events.\n *\n * @return {*} An accumulation of synthetic events.\n * @internal\n */\nfunction extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var events = null;\n  for (var i = 0; i < _EventPluginRegistry.plugins.length; i++) {\n    // Not every plugin in the ordering may be loaded at runtime.\n    var possiblePlugin = _EventPluginRegistry.plugins[i];\n    if (possiblePlugin) {\n      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n      if (extractedEvents) {\n        events = (0, _accumulateInto2.default)(events, extractedEvents);\n      }\n    }\n  }\n  return events;\n}\n\nfunction runEventsInBatch(events, simulated) {\n  if (events !== null) {\n    eventQueue = (0, _accumulateInto2.default)(eventQueue, events);\n  }\n\n  // Set `eventQueue` to null before processing it so that we can tell if more\n  // events get enqueued while processing.\n  var processingEventQueue = eventQueue;\n  eventQueue = null;\n\n  if (!processingEventQueue) {\n    return;\n  }\n\n  if (simulated) {\n    (0, _forEachAccumulated2.default)(processingEventQueue, executeDispatchesAndReleaseSimulated);\n  } else {\n    (0, _forEachAccumulated2.default)(processingEventQueue, executeDispatchesAndReleaseTopLevel);\n  }\n  (0, _invariant2.default)(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.');\n  // This would be a good time to rethrow if any of the event handlers threw.\n  _ReactErrorUtils2.default.rethrowCaughtError();\n}\n\nfunction runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n  runEventsInBatch(events, false);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.possibleRegistrationNames = exports.registrationNameDependencies = exports.registrationNameModules = exports.eventNameDispatchConfigs = exports.plugins = undefined;\nexports.injectEventPluginOrder = injectEventPluginOrder;\nexports.injectEventPluginsByName = injectEventPluginsByName;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Injectable ordering of event plugins.\n */\nvar eventPluginOrder = null;\n\n/**\n * Injectable mapping from names to event plugin modules.\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar namesToPlugins = {};\n\n/**\n * Recomputes the plugin list using the injected plugins and plugin ordering.\n *\n * @private\n */\nfunction recomputePluginOrdering() {\n  if (!eventPluginOrder) {\n    // Wait until an `eventPluginOrder` is injected.\n    return;\n  }\n  for (var pluginName in namesToPlugins) {\n    var pluginModule = namesToPlugins[pluginName];\n    var pluginIndex = eventPluginOrder.indexOf(pluginName);\n    (0, _invariant2.default)(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName);\n    if (plugins[pluginIndex]) {\n      continue;\n    }\n    (0, _invariant2.default)(pluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName);\n    plugins[pluginIndex] = pluginModule;\n    var publishedEvents = pluginModule.eventTypes;\n    for (var eventName in publishedEvents) {\n      (0, _invariant2.default)(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName);\n    }\n  }\n}\n\n/**\n * Publishes an event so that it can be dispatched by the supplied plugin.\n *\n * @param {object} dispatchConfig Dispatch configuration for the event.\n * @param {object} PluginModule Plugin publishing the event.\n * @return {boolean} True if the event was successfully published.\n * @private\n */\nfunction publishEventForPlugin(dispatchConfig, pluginModule, eventName) {\n  (0, _invariant2.default)(!eventNameDispatchConfigs.hasOwnProperty(eventName), 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName);\n  eventNameDispatchConfigs[eventName] = dispatchConfig;\n\n  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;\n  if (phasedRegistrationNames) {\n    for (var phaseName in phasedRegistrationNames) {\n      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {\n        var phasedRegistrationName = phasedRegistrationNames[phaseName];\n        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);\n      }\n    }\n    return true;\n  } else if (dispatchConfig.registrationName) {\n    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Publishes a registration name that is used to identify dispatched events.\n *\n * @param {string} registrationName Registration name to add.\n * @param {object} PluginModule Plugin publishing the event.\n * @private\n */\nfunction publishRegistrationName(registrationName, pluginModule, eventName) {\n  (0, _invariant2.default)(!registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);\n  registrationNameModules[registrationName] = pluginModule;\n  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;\n\n  if (__DEV__) {\n    var lowerCasedName = registrationName.toLowerCase();\n    possibleRegistrationNames[lowerCasedName] = registrationName;\n\n    if (registrationName === 'onDoubleClick') {\n      possibleRegistrationNames.ondblclick = registrationName;\n    }\n  }\n}\n\n/**\n * Registers plugins so that they can extract and dispatch events.\n *\n * @see {EventPluginHub}\n */\n\n/**\n * Ordered list of injected plugins.\n */\nvar plugins = exports.plugins = [];\n\n/**\n * Mapping from event name to dispatch config\n */\nvar eventNameDispatchConfigs = exports.eventNameDispatchConfigs = {};\n\n/**\n * Mapping from registration name to plugin module\n */\nvar registrationNameModules = exports.registrationNameModules = {};\n\n/**\n * Mapping from registration name to event name\n */\nvar registrationNameDependencies = exports.registrationNameDependencies = {};\n\n/**\n * Mapping from lowercase registration names to the properly cased version,\n * used to warn in the case of missing event handlers. Available\n * only in __DEV__.\n * @type {Object}\n */\nvar possibleRegistrationNames = exports.possibleRegistrationNames = __DEV__ ? {} : null;\n// Trust the developer to only use possibleRegistrationNames in __DEV__\n\n/**\n * Injects an ordering of plugins (by plugin name). This allows the ordering\n * to be decoupled from injection of the actual plugins so that ordering is\n * always deterministic regardless of packaging, on-the-fly injection, etc.\n *\n * @param {array} InjectedEventPluginOrder\n * @internal\n * @see {EventPluginHub.injection.injectEventPluginOrder}\n */\nfunction injectEventPluginOrder(injectedEventPluginOrder) {\n  (0, _invariant2.default)(!eventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.');\n  // Clone the ordering so it cannot be dynamically mutated.\n  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);\n  recomputePluginOrdering();\n}\n\n/**\n * Injects plugins to be used by `EventPluginHub`. The plugin names must be\n * in the ordering injected by `injectEventPluginOrder`.\n *\n * Plugins can be injected as part of page initialization or on-the-fly.\n *\n * @param {object} injectedNamesToPlugins Map from names to plugin modules.\n * @internal\n * @see {EventPluginHub.injection.injectEventPluginsByName}\n */\nfunction injectEventPluginsByName(injectedNamesToPlugins) {\n  var isOrderingDirty = false;\n  for (var pluginName in injectedNamesToPlugins) {\n    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {\n      continue;\n    }\n    var pluginModule = injectedNamesToPlugins[pluginName];\n    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {\n      (0, _invariant2.default)(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName);\n      namesToPlugins[pluginName] = pluginModule;\n      isOrderingDirty = true;\n    }\n  }\n  if (isOrderingDirty) {\n    recomputePluginOrdering();\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9ldmVudHMvRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyJdLCJuYW1lcyI6WyJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiZXZlbnRQbHVnaW5PcmRlciIsIm5hbWVzVG9QbHVnaW5zIiwicmVjb21wdXRlUGx1Z2luT3JkZXJpbmciLCJwbHVnaW5OYW1lIiwicGx1Z2luTW9kdWxlIiwicGx1Z2luSW5kZXgiLCJpbmRleE9mIiwicGx1Z2lucyIsImV4dHJhY3RFdmVudHMiLCJwdWJsaXNoZWRFdmVudHMiLCJldmVudFR5cGVzIiwiZXZlbnROYW1lIiwicHVibGlzaEV2ZW50Rm9yUGx1Z2luIiwiZGlzcGF0Y2hDb25maWciLCJldmVudE5hbWVEaXNwYXRjaENvbmZpZ3MiLCJoYXNPd25Qcm9wZXJ0eSIsInBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzIiwicGhhc2VOYW1lIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZSIsInB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lIiwicmVnaXN0cmF0aW9uTmFtZSIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsImRlcGVuZGVuY2llcyIsIl9fREVWX18iLCJsb3dlckNhc2VkTmFtZSIsInRvTG93ZXJDYXNlIiwicG9zc2libGVSZWdpc3RyYXRpb25OYW1lcyIsIm9uZGJsY2xpY2siLCJpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIiLCJBcnJheSIsInByb3RvdHlwZSIsInNsaWNlIiwiY2FsbCIsImluamVjdGVkTmFtZXNUb1BsdWdpbnMiLCJpc09yZGVyaW5nRGlydHkiXSwibWFwcGluZ3MiOiI7Ozs7OztRQXFNZ0JBLHNCLEdBQUFBLHNCO1FBdUJBQyx3QixHQUFBQSx3Qjs7QUE1TWhCOzs7Ozs7QUFLQTs7O0FBR0EsSUFBSUMsbUJBQXFDLElBQXpDOztBQUVBOzs7QUExQkE7Ozs7Ozs7OztBQTZCQSxJQUFN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QztBQUNOLDJCQUNFLENBQUM3QixnQkFESCxFQUVFLHdFQUNFLGtFQUhKO0FBS0E7QUFDQUEscUJBQW1COEIsTUFBTUMsU0FBTixDQUFnQkMsS0FBaEIsQ0FBc0JDLElBQXRCLENBQTJCSix3QkFBM0IsQ0FBbkI7QUFDQTNCO0FBQ0Q7O0FBRUQ7Ozs7Ozs7Ozs7QUFVTyxTQUFTSCx3QkFBVCxDQUNMbUMsc0JBREssRUFFQztBQUNOLE1BQUlDLGtCQUFrQixLQUF0QjtBQUNBLE9BQUssSUFBTWhDLFVBQVgsSUFBeUIrQixzQkFBekIsRUFBaUQ7QUFDL0MsUUFBSSxDQUFDQSx1QkFBdUJuQixjQUF2QixDQUFzQ1osVUFBdEMsQ0FBTCxFQUF3RDtBQUN0RDtBQUNEO0FBQ0QsUUFBTUMsZUFBZThCLHVCQUF1Qi9CLFVBQXZCLENBQXJCO0FBQ0EsUUFDRSxDQUFDRixlQUFlYyxjQUFmLENBQThCWixVQUE5QixDQUFELElBQ0FGLGVBQWVFLFVBQWYsTUFBK0JDLFlBRmpDLEVBR0U7QUFDQSwrQkFDRSxDQUFDSCxlQUFlRSxVQUFmLENBREgsRUFFRSxvRUFDRSw0QkFISixFQUlFQSxVQUpGO0FBTUFGLHFCQUFlRSxVQUFmLElBQTZCQyxZQUE3QjtBQUNBK0Isd0JBQWtCLElBQWxCO0FBQ0Q7QUFDRjtBQUNELE1BQUlBLGVBQUosRUFBcUI7QUFDbkJqQztBQUNEO0FBQ0YiLCJmaWxlIjoiRXZlbnRQbHVnaW5SZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0Rpc3BhdGNoQ29uZmlnfSBmcm9tICcuL1JlYWN0U3ludGhldGljRXZlbnRUeXBlJztcbmltcG9ydCB0eXBlIHtcbiAgQW55TmF0aXZlRXZlbnQsXG4gIFBsdWdpbk5hbWUsXG4gIFBsdWdpbk1vZHVsZSxcbn0gZnJvbSAnLi9QbHVnaW5Nb2R1bGVUeXBlJztcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnO1xuXG50eXBlIE5hbWVzVG9QbHVnaW5zID0ge1trZXk6IFBsdWdpbk5hbWVdOiBQbHVnaW5Nb2R1bGU8QW55TmF0aXZlRXZlbnQ+fTtcbnR5cGUgRXZlbnRQbHVnaW5PcmRlciA9IG51bGwgfCBBcnJheTxQbHVnaW5OYW1lPjtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG9yZGVyaW5nIG9mIGV2ZW50IHBsdWdpbnMuXG4gKi9cbmxldCBldmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpbk9yZGVyID0gbnVsbDtcblxuLyoqXG4gKiBJbmplY3RhYmxlIG1hcHBpbmcgZnJvbSBuYW1lcyB0byBldmVudCBwbHVnaW4gbW9kdWxlcy5cbiAqL1xuY29uc3QgbmFtZXNUb1BsdWdpbnM6IE5hbWVzVG9QbHVnaW5zID0ge307XG5cbi8qKlxuICogUmVjb21wdXRlcyB0aGUgcGx1Z2luIGxpc3QgdXNpbmcgdGhlIGluamVjdGVkIHBsdWdpbnMgYW5kIHBsdWdpbiBvcmRlcmluZy5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpOiB2b2lkIHtcbiAgaWYgKCFldmVudFBsdWdpbk9yZGVyKSB7XG4gICAgLy8gV2FpdCB1bnRpbCBhbiBgZXZlbnRQbHVnaW5PcmRlcmAgaXMgaW5qZWN0ZWQuXG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3QgcGx1Z2luTmFtZSBpbiBuYW1lc1RvUGx1Z2lucykge1xuICAgIGNvbnN0IHBsdWdpbk1vZHVsZSA9IG5hbWVzVG9QbHVnaW5zW3BsdWdpbk5hbWVdO1xuICAgIGNvbnN0IHBsdWdpbkluZGV4ID0gZXZlbnRQbHVnaW5PcmRlci5pbmRleE9mKHBsdWdpbk5hbWUpO1xuICAgIGludmFyaWFudChcbiAgICAgIHBsdWdpbkluZGV4ID4gLTEsXG4gICAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW5zIHRoYXQgZG8gbm90IGV4aXN0IGluICcgK1xuICAgICAgICAndGhlIHBsdWdpbiBvcmRlcmluZywgYCVzYC4nLFxuICAgICAgcGx1Z2luTmFtZSxcbiAgICApO1xuICAgIGlmIChwbHVnaW5zW3BsdWdpbkluZGV4XSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGludmFyaWFudChcbiAgICAgIHBsdWdpbk1vZHVsZS5leHRyYWN0RXZlbnRzLFxuICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEV2ZW50IHBsdWdpbnMgbXVzdCBpbXBsZW1lbnQgYW4gYGV4dHJhY3RFdmVudHNgICcgK1xuICAgICAgICAnbWV0aG9kLCBidXQgYCVzYCBkb2VzIG5vdC4nLFxuICAgICAgcGx1Z2luTmFtZSxcbiAgICApO1xuICAgIHBsdWdpbnNbcGx1Z2luSW5kZXhdID0gcGx1Z2luTW9kdWxlO1xuICAgIGNvbnN0IHB1Ymxpc2hlZEV2ZW50cyA9IHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzO1xuICAgIGZvciAoY29uc3QgZXZlbnROYW1lIGluIHB1Ymxpc2hlZEV2ZW50cykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBwdWJsaXNoRXZlbnRGb3JQbHVnaW4oXG4gICAgICAgICAgcHVibGlzaGVkRXZlbnRzW2V2ZW50TmFtZV0sXG4gICAgICAgICAgcGx1Z2luTW9kdWxlLFxuICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgKSxcbiAgICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IEZhaWxlZCB0byBwdWJsaXNoIGV2ZW50IGAlc2AgZm9yIHBsdWdpbiBgJXNgLicsXG4gICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgcGx1Z2luTmFtZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUHVibGlzaGVzIGFuIGV2ZW50IHNvIHRoYXQgaXQgY2FuIGJlIGRpc3BhdGNoZWQgYnkgdGhlIHN1cHBsaWVkIHBsdWdpbi5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gZGlzcGF0Y2hDb25maWcgRGlzcGF0Y2ggY29uZmlndXJhdGlvbiBmb3IgdGhlIGV2ZW50LlxuICogQHBhcmFtIHtvYmplY3R9IFBsdWdpbk1vZHVsZSBQbHVnaW4gcHVibGlzaGluZyB0aGUgZXZlbnQuXG4gKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBldmVudCB3YXMgc3VjY2Vzc2Z1bGx5IHB1Ymxpc2hlZC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hFdmVudEZvclBsdWdpbihcbiAgZGlzcGF0Y2hDb25maWc6IERpc3BhdGNoQ29uZmlnLFxuICBwbHVnaW5Nb2R1bGU6IFBsdWdpbk1vZHVsZTxBbnlOYXRpdmVFdmVudD4sXG4gIGV2ZW50TmFtZTogc3RyaW5nLFxuKTogYm9vbGVhbiB7XG4gIGludmFyaWFudChcbiAgICAhZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzLmhhc093blByb3BlcnR5KGV2ZW50TmFtZSksXG4gICAgJ0V2ZW50UGx1Z2luSHViOiBNb3JlIHRoYW4gb25lIHBsdWdpbiBhdHRlbXB0ZWQgdG8gcHVibGlzaCB0aGUgc2FtZSAnICtcbiAgICAgICdldmVudCBuYW1lLCBgJXNgLicsXG4gICAgZXZlbnROYW1lLFxuICApO1xuICBldmVudE5hbWVEaXNwYXRjaENvbmZpZ3NbZXZlbnROYW1lXSA9IGRpc3BhdGNoQ29uZmlnO1xuXG4gIGNvbnN0IHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzID0gZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7XG4gIGlmIChwaGFzZWRSZWdpc3RyYXRpb25OYW1lcykge1xuICAgIGZvciAoY29uc3QgcGhhc2VOYW1lIGluIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzKSB7XG4gICAgICBpZiAocGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMuaGFzT3duUHJvcGVydHkocGhhc2VOYW1lKSkge1xuICAgICAgICBjb25zdCBwaGFzZWRSZWdpc3RyYXRpb25OYW1lID0gcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbcGhhc2VOYW1lXTtcbiAgICAgICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZSxcbiAgICAgICAgICBwbHVnaW5Nb2R1bGUsXG4gICAgICAgICAgZXZlbnROYW1lLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBlbHNlIGlmIChkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSB7XG4gICAgcHVibGlzaFJlZ2lzdHJhdGlvbk5hbWUoXG4gICAgICBkaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lLFxuICAgICAgcGx1Z2luTW9kdWxlLFxuICAgICAgZXZlbnROYW1lLFxuICAgICk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIFB1Ymxpc2hlcyBhIHJlZ2lzdHJhdGlvbiBuYW1lIHRoYXQgaXMgdXNlZCB0byBpZGVudGlmeSBkaXNwYXRjaGVkIGV2ZW50cy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVnaXN0cmF0aW9uTmFtZSBSZWdpc3RyYXRpb24gbmFtZSB0byBhZGQuXG4gKiBAcGFyYW0ge29iamVjdH0gUGx1Z2luTW9kdWxlIFBsdWdpbiBwdWJsaXNoaW5nIHRoZSBldmVudC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHB1Ymxpc2hSZWdpc3RyYXRpb25OYW1lKFxuICByZWdpc3RyYXRpb25OYW1lOiBzdHJpbmcsXG4gIHBsdWdpbk1vZHVsZTogUGx1Z2luTW9kdWxlPEFueU5hdGl2ZUV2ZW50PixcbiAgZXZlbnROYW1lOiBzdHJpbmcsXG4pOiB2b2lkIHtcbiAgaW52YXJpYW50KFxuICAgICFyZWdpc3RyYXRpb25OYW1lTW9kdWxlc1tyZWdpc3RyYXRpb25OYW1lXSxcbiAgICAnRXZlbnRQbHVnaW5IdWI6IE1vcmUgdGhhbiBvbmUgcGx1Z2luIGF0dGVtcHRlZCB0byBwdWJsaXNoIHRoZSBzYW1lICcgK1xuICAgICAgJ3JlZ2lzdHJhdGlvbiBuYW1lLCBgJXNgLicsXG4gICAgcmVnaXN0cmF0aW9uTmFtZSxcbiAgKTtcbiAgcmVnaXN0cmF0aW9uTmFtZU1vZHVsZXNbcmVnaXN0cmF0aW9uTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gIHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXNbcmVnaXN0cmF0aW9uTmFtZV0gPVxuICAgIHBsdWdpbk1vZHVsZS5ldmVudFR5cGVzW2V2ZW50TmFtZV0uZGVwZW5kZW5jaWVzO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgbG93ZXJDYXNlZE5hbWUgPSByZWdpc3RyYXRpb25OYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lc1tsb3dlckNhc2VkTmFtZV0gPSByZWdpc3RyYXRpb25OYW1lO1xuXG4gICAgaWYgKHJlZ2lzdHJhdGlvbk5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJykge1xuICAgICAgcG9zc2libGVSZWdpc3RyYXRpb25OYW1lcy5vbmRibGNsaWNrID0gcmVnaXN0cmF0aW9uTmFtZTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBSZWdpc3RlcnMgcGx1Z2lucyBzbyB0aGF0IHRoZXkgY2FuIGV4dHJhY3QgYW5kIGRpc3BhdGNoIGV2ZW50cy5cbiAqXG4gKiBAc2VlIHtFdmVudFBsdWdpbkh1Yn1cbiAqL1xuXG4vKipcbiAqIE9yZGVyZWQgbGlzdCBvZiBpbmplY3RlZCBwbHVnaW5zLlxuICovXG5leHBvcnQgY29uc3QgcGx1Z2lucyA9IFtdO1xuXG4vKipcbiAqIE1hcHBpbmcgZnJvbSBldmVudCBuYW1lIHRvIGRpc3BhdGNoIGNvbmZpZ1xuICovXG5leHBvcnQgY29uc3QgZXZlbnROYW1lRGlzcGF0Y2hDb25maWdzID0ge307XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIHBsdWdpbiBtb2R1bGVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzID0ge307XG5cbi8qKlxuICogTWFwcGluZyBmcm9tIHJlZ2lzdHJhdGlvbiBuYW1lIHRvIGV2ZW50IG5hbWVcbiAqL1xuZXhwb3J0IGNvbnN0IHJlZ2lzdHJhdGlvbk5hbWVEZXBlbmRlbmNpZXMgPSB7fTtcblxuLyoqXG4gKiBNYXBwaW5nIGZyb20gbG93ZXJjYXNlIHJlZ2lzdHJhdGlvbiBuYW1lcyB0byB0aGUgcHJvcGVybHkgY2FzZWQgdmVyc2lvbixcbiAqIHVzZWQgdG8gd2FybiBpbiB0aGUgY2FzZSBvZiBtaXNzaW5nIGV2ZW50IGhhbmRsZXJzLiBBdmFpbGFibGVcbiAqIG9ubHkgaW4gX19ERVZfXy5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjb25zdCBwb3NzaWJsZVJlZ2lzdHJhdGlvbk5hbWVzID0gX19ERVZfXyA/IHt9IDogKG51bGw6IGFueSk7XG4vLyBUcnVzdCB0aGUgZGV2ZWxvcGVyIHRvIG9ubHkgdXNlIHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMgaW4gX19ERVZfX1xuXG4vKipcbiAqIEluamVjdHMgYW4gb3JkZXJpbmcgb2YgcGx1Z2lucyAoYnkgcGx1Z2luIG5hbWUpLiBUaGlzIGFsbG93cyB0aGUgb3JkZXJpbmdcbiAqIHRvIGJlIGRlY291cGxlZCBmcm9tIGluamVjdGlvbiBvZiB0aGUgYWN0dWFsIHBsdWdpbnMgc28gdGhhdCBvcmRlcmluZyBpc1xuICogYWx3YXlzIGRldGVybWluaXN0aWMgcmVnYXJkbGVzcyBvZiBwYWNrYWdpbmcsIG9uLXRoZS1mbHkgaW5qZWN0aW9uLCBldGMuXG4gKlxuICogQHBhcmFtIHthcnJheX0gSW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyXG4gKiBAaW50ZXJuYWxcbiAqIEBzZWUge0V2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5qZWN0RXZlbnRQbHVnaW5PcmRlcihcbiAgaW5qZWN0ZWRFdmVudFBsdWdpbk9yZGVyOiBFdmVudFBsdWdpbk9yZGVyLFxuKTogdm9pZCB7XG4gIGludmFyaWFudChcbiAgICAhZXZlbnRQbHVnaW5PcmRlcixcbiAgICAnRXZlbnRQbHVnaW5SZWdpc3RyeTogQ2Fubm90IGluamVjdCBldmVudCBwbHVnaW4gb3JkZXJpbmcgbW9yZSB0aGFuICcgK1xuICAgICAgJ29uY2UuIFlvdSBhcmUgbGlrZWx5IHRyeWluZyB0byBsb2FkIG1vcmUgdGhhbiBvbmUgY29weSBvZiBSZWFjdC4nLFxuICApO1xuICAvLyBDbG9uZSB0aGUgb3JkZXJpbmcgc28gaXQgY2Fubm90IGJlIGR5bmFtaWNhbGx5IG11dGF0ZWQuXG4gIGV2ZW50UGx1Z2luT3JkZXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChpbmplY3RlZEV2ZW50UGx1Z2luT3JkZXIpO1xuICByZWNvbXB1dGVQbHVnaW5PcmRlcmluZygpO1xufVxuXG4vKipcbiAqIEluamVjdHMgcGx1Z2lucyB0byBiZSB1c2VkIGJ5IGBFdmVudFBsdWdpbkh1YmAuIFRoZSBwbHVnaW4gbmFtZXMgbXVzdCBiZVxuICogaW4gdGhlIG9yZGVyaW5nIGluamVjdGVkIGJ5IGBpbmplY3RFdmVudFBsdWdpbk9yZGVyYC5cbiAqXG4gKiBQbHVnaW5zIGNhbiBiZSBpbmplY3RlZCBhcyBwYXJ0IG9mIHBhZ2UgaW5pdGlhbGl6YXRpb24gb3Igb24tdGhlLWZseS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucyBNYXAgZnJvbSBuYW1lcyB0byBwbHVnaW4gbW9kdWxlcy5cbiAqIEBpbnRlcm5hbFxuICogQHNlZSB7RXZlbnRQbHVnaW5IdWIuaW5qZWN0aW9uLmluamVjdEV2ZW50UGx1Z2luc0J5TmFtZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZShcbiAgaW5qZWN0ZWROYW1lc1RvUGx1Z2luczogTmFtZXNUb1BsdWdpbnMsXG4pOiB2b2lkIHtcbiAgbGV0IGlzT3JkZXJpbmdEaXJ0eSA9IGZhbHNlO1xuICBmb3IgKGNvbnN0IHBsdWdpbk5hbWUgaW4gaW5qZWN0ZWROYW1lc1RvUGx1Z2lucykge1xuICAgIGlmICghaW5qZWN0ZWROYW1lc1RvUGx1Z2lucy5oYXNPd25Qcm9wZXJ0eShwbHVnaW5OYW1lKSkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGNvbnN0IHBsdWdpbk1vZHVsZSA9IGluamVjdGVkTmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV07XG4gICAgaWYgKFxuICAgICAgIW5hbWVzVG9QbHVnaW5zLmhhc093blByb3BlcnR5KHBsdWdpbk5hbWUpIHx8XG4gICAgICBuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSAhPT0gcGx1Z2luTW9kdWxlXG4gICAgKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgICFuYW1lc1RvUGx1Z2luc1twbHVnaW5OYW1lXSxcbiAgICAgICAgJ0V2ZW50UGx1Z2luUmVnaXN0cnk6IENhbm5vdCBpbmplY3QgdHdvIGRpZmZlcmVudCBldmVudCBwbHVnaW5zICcgK1xuICAgICAgICAgICd1c2luZyB0aGUgc2FtZSBuYW1lLCBgJXNgLicsXG4gICAgICAgIHBsdWdpbk5hbWUsXG4gICAgICApO1xuICAgICAgbmFtZXNUb1BsdWdpbnNbcGx1Z2luTmFtZV0gPSBwbHVnaW5Nb2R1bGU7XG4gICAgICBpc09yZGVyaW5nRGlydHkgPSB0cnVlO1xuICAgIH1cbiAgfVxuICBpZiAoaXNPcmRlcmluZ0RpcnR5KSB7XG4gICAgcmVjb21wdXRlUGx1Z2luT3JkZXJpbmcoKTtcbiAgfVxufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injection = exports.getNodeFromInstance = exports.getInstanceFromNode = exports.getFiberCurrentPropsFromNode = undefined;\nexports.isEndish = isEndish;\nexports.isMoveish = isMoveish;\nexports.isStartish = isStartish;\nexports.executeDispatchesInOrder = executeDispatchesInOrder;\nexports.executeDispatchesInOrderStopAtTrue = executeDispatchesInOrderStopAtTrue;\nexports.executeDirectDispatch = executeDirectDispatch;\nexports.hasDispatches = hasDispatches;\n\nvar _ReactErrorUtils = require('shared/ReactErrorUtils');\n\nvar _ReactErrorUtils2 = _interopRequireDefault(_ReactErrorUtils);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getFiberCurrentPropsFromNode = exports.getFiberCurrentPropsFromNode = null; /**\n                                                                                 * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                 *\n                                                                                 * This source code is licensed under the MIT license found in the\n                                                                                 * LICENSE file in the root directory of this source tree.\n                                                                                 */\n\nvar getInstanceFromNode = exports.getInstanceFromNode = null;\nvar getNodeFromInstance = exports.getNodeFromInstance = null;\n\nvar injection = exports.injection = {\n  injectComponentTree: function injectComponentTree(Injected) {\n    exports.getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNode = Injected.getFiberCurrentPropsFromNode;\n    exports.getInstanceFromNode = getInstanceFromNode = Injected.getInstanceFromNode;\n    exports.getNodeFromInstance = getNodeFromInstance = Injected.getNodeFromInstance;\n\n    if (__DEV__) {\n      (0, _warning2.default)(getNodeFromInstance && getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');\n    }\n  }\n};\n\nfunction isEndish(topLevelType) {\n  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';\n}\n\nfunction isMoveish(topLevelType) {\n  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';\n}\nfunction isStartish(topLevelType) {\n  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';\n}\n\nvar validateEventDispatches = void 0;\nif (__DEV__) {\n  validateEventDispatches = function validateEventDispatches(event) {\n    var dispatchListeners = event._dispatchListeners;\n    var dispatchInstances = event._dispatchInstances;\n\n    var listenersIsArr = Array.isArray(dispatchListeners);\n    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;\n\n    var instancesIsArr = Array.isArray(dispatchInstances);\n    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;\n\n    (0, _warning2.default)(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');\n  };\n}\n\n/**\n * Dispatch the event to the listener.\n * @param {SyntheticEvent} event SyntheticEvent to handle\n * @param {boolean} simulated If the event is simulated (changes exn behavior)\n * @param {function} listener Application-level callback\n * @param {*} inst Internal component instance\n */\nfunction executeDispatch(event, simulated, listener, inst) {\n  var type = event.type || 'unknown-event';\n  event.currentTarget = getNodeFromInstance(inst);\n  _ReactErrorUtils2.default.invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);\n  event.currentTarget = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches.\n */\nfunction executeDispatchesInOrder(event, simulated) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);\n    }\n  } else if (dispatchListeners) {\n    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);\n  }\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n}\n\n/**\n * Standard/simple iteration through an event's collected dispatches, but stops\n * at the first dispatch execution returning true, and returns that id.\n *\n * @return {?string} id of the first dispatch execution who's listener returns\n * true, or null if no listener returned true.\n */\nfunction executeDispatchesInOrderStopAtTrueImpl(event) {\n  var dispatchListeners = event._dispatchListeners;\n  var dispatchInstances = event._dispatchInstances;\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  if (Array.isArray(dispatchListeners)) {\n    for (var i = 0; i < dispatchListeners.length; i++) {\n      if (event.isPropagationStopped()) {\n        break;\n      }\n      // Listeners and Instances are two parallel arrays that are always in sync.\n      if (dispatchListeners[i](event, dispatchInstances[i])) {\n        return dispatchInstances[i];\n      }\n    }\n  } else if (dispatchListeners) {\n    if (dispatchListeners(event, dispatchInstances)) {\n      return dispatchInstances;\n    }\n  }\n  return null;\n}\n\n/**\n * @see executeDispatchesInOrderStopAtTrueImpl\n */\nfunction executeDispatchesInOrderStopAtTrue(event) {\n  var ret = executeDispatchesInOrderStopAtTrueImpl(event);\n  event._dispatchInstances = null;\n  event._dispatchListeners = null;\n  return ret;\n}\n\n/**\n * Execution of a \"direct\" dispatch - there must be at most one dispatch\n * accumulated on the event or it is considered an error. It doesn't really make\n * sense for an event with multiple dispatches (bubbled) to keep track of the\n * return values at each dispatch execution, but it does tend to make sense when\n * dealing with \"direct\" dispatches.\n *\n * @return {*} The return value of executing the single dispatch.\n */\nfunction executeDirectDispatch(event) {\n  if (__DEV__) {\n    validateEventDispatches(event);\n  }\n  var dispatchListener = event._dispatchListeners;\n  var dispatchInstance = event._dispatchInstances;\n  (0, _invariant2.default)(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.');\n  event.currentTarget = dispatchListener ? getNodeFromInstance(dispatchInstance) : null;\n  var res = dispatchListener ? dispatchListener(event) : null;\n  event.currentTarget = null;\n  event._dispatchListeners = null;\n  event._dispatchInstances = null;\n  return res;\n}\n\n/**\n * @param {SyntheticEvent} event\n * @return {boolean} True iff number of dispatches accumulated is greater than 0.\n */\nfunction hasDispatches(event) {\n  return !!event._dispatchListeners;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accumulateTwoPhaseDispatches = accumulateTwoPhaseDispatches;\nexports.accumulateTwoPhaseDispatchesSkipTarget = accumulateTwoPhaseDispatchesSkipTarget;\nexports.accumulateEnterLeaveDispatches = accumulateEnterLeaveDispatches;\nexports.accumulateDirectDispatches = accumulateDirectDispatches;\n\nvar _ReactTreeTraversal = require('shared/ReactTreeTraversal');\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _EventPluginHub = require('./EventPluginHub');\n\nvar _accumulateInto = require('./accumulateInto');\n\nvar _accumulateInto2 = _interopRequireDefault(_accumulateInto);\n\nvar _forEachAccumulated = require('./forEachAccumulated');\n\nvar _forEachAccumulated2 = _interopRequireDefault(_forEachAccumulated);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Some event types have a notion of different registration names for different\n * \"phases\" of propagation. This finds listeners by a given phase.\n */\nfunction listenerAtPhase(inst, event, propagationPhase) {\n  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];\n  return (0, _EventPluginHub.getListener)(inst, registrationName);\n}\n\n/**\n * A small set of propagation patterns, each of which will accept a small amount\n * of information, and generate a set of \"dispatch ready event objects\" - which\n * are sets of events that have already been annotated with a set of dispatched\n * listener functions/ids. The API is designed this way to discourage these\n * propagation strategies from actually executing the dispatches, since we\n * always want to collect the entire set of dispatches before executing even a\n * single one.\n */\n\n/**\n * Tags a `SyntheticEvent` with dispatched listeners. Creating this function\n * here, allows us to not have to bind or create functions for each event.\n * Mutating the event's members allows us to not have to create a wrapping\n * \"dispatch\" object that pairs the event with the listener.\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction accumulateDirectionalDispatches(inst, phase, event) {\n  if (__DEV__) {\n    (0, _warning2.default)(inst, 'Dispatching inst must not be null');\n  }\n  var listener = listenerAtPhase(inst, event, phase);\n  if (listener) {\n    event._dispatchListeners = (0, _accumulateInto2.default)(event._dispatchListeners, listener);\n    event._dispatchInstances = (0, _accumulateInto2.default)(event._dispatchInstances, inst);\n  }\n}\n\n/**\n * Collect dispatches (must be entirely collected before dispatching - see unit\n * tests). Lazily allocate the array to conserve memory.  We must loop through\n * each event and perform the traversal for each one. We cannot perform a\n * single traversal for the entire collection of events because each event may\n * have a different target.\n */\nfunction accumulateTwoPhaseDispatchesSingle(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    (0, _ReactTreeTraversal.traverseTwoPhase)(event._targetInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Same as `accumulateTwoPhaseDispatchesSingle`, but skips over the targetID.\n */\nfunction accumulateTwoPhaseDispatchesSingleSkipTarget(event) {\n  if (event && event.dispatchConfig.phasedRegistrationNames) {\n    var targetInst = event._targetInst;\n    var parentInst = targetInst ? (0, _ReactTreeTraversal.getParentInstance)(targetInst) : null;\n    (0, _ReactTreeTraversal.traverseTwoPhase)(parentInst, accumulateDirectionalDispatches, event);\n  }\n}\n\n/**\n * Accumulates without regard to direction, does not look for phased\n * registration names. Same as `accumulateDirectDispatchesSingle` but without\n * requiring that the `dispatchMarker` be the same as the dispatched ID.\n */\nfunction accumulateDispatches(inst, ignoredDirection, event) {\n  if (inst && event && event.dispatchConfig.registrationName) {\n    var registrationName = event.dispatchConfig.registrationName;\n    var listener = (0, _EventPluginHub.getListener)(inst, registrationName);\n    if (listener) {\n      event._dispatchListeners = (0, _accumulateInto2.default)(event._dispatchListeners, listener);\n      event._dispatchInstances = (0, _accumulateInto2.default)(event._dispatchInstances, inst);\n    }\n  }\n}\n\n/**\n * Accumulates dispatches on an `SyntheticEvent`, but only for the\n * `dispatchMarker`.\n * @param {SyntheticEvent} event\n */\nfunction accumulateDirectDispatchesSingle(event) {\n  if (event && event.dispatchConfig.registrationName) {\n    accumulateDispatches(event._targetInst, null, event);\n  }\n}\n\nfunction accumulateTwoPhaseDispatches(events) {\n  (0, _forEachAccumulated2.default)(events, accumulateTwoPhaseDispatchesSingle);\n}\n\nfunction accumulateTwoPhaseDispatchesSkipTarget(events) {\n  (0, _forEachAccumulated2.default)(events, accumulateTwoPhaseDispatchesSingleSkipTarget);\n}\n\nfunction accumulateEnterLeaveDispatches(leave, enter, from, to) {\n  (0, _ReactTreeTraversal.traverseEnterLeave)(from, to, accumulateDispatches, leave, enter);\n}\n\nfunction accumulateDirectDispatches(events) {\n  (0, _forEachAccumulated2.default)(events, accumulateDirectDispatchesSingle);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injection = undefined;\nexports.enqueueStateRestore = enqueueStateRestore;\nexports.needsStateRestore = needsStateRestore;\nexports.restoreStateIfNeeded = restoreStateIfNeeded;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _EventPluginUtils = require('./EventPluginUtils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Use to restore controlled state after a change event has fired.\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar fiberHostComponent = null;\n\nvar ReactControlledComponentInjection = {\n  injectFiberControlledHostComponent: function injectFiberControlledHostComponent(hostComponentImpl) {\n    // The fiber implementation doesn't use dynamic dispatch so we need to\n    // inject the implementation.\n    fiberHostComponent = hostComponentImpl;\n  }\n};\n\nvar restoreTarget = null;\nvar restoreQueue = null;\n\nfunction restoreStateOfTarget(target) {\n  // We perform this translation at the end of the event loop so that we\n  // always receive the correct fiber here\n  var internalInstance = (0, _EventPluginUtils.getInstanceFromNode)(target);\n  if (!internalInstance) {\n    // Unmounted\n    return;\n  }\n  (0, _invariant2.default)(fiberHostComponent && typeof fiberHostComponent.restoreControlledState === 'function', 'Fiber needs to be injected to handle a fiber target for controlled ' + 'events. This error is likely caused by a bug in React. Please file an issue.');\n  var props = (0, _EventPluginUtils.getFiberCurrentPropsFromNode)(internalInstance.stateNode);\n  fiberHostComponent.restoreControlledState(internalInstance.stateNode, internalInstance.type, props);\n}\n\nvar injection = exports.injection = ReactControlledComponentInjection;\n\nfunction enqueueStateRestore(target) {\n  if (restoreTarget) {\n    if (restoreQueue) {\n      restoreQueue.push(target);\n    } else {\n      restoreQueue = [target];\n    }\n  } else {\n    restoreTarget = target;\n  }\n}\n\nfunction needsStateRestore() {\n  return restoreTarget !== null || restoreQueue !== null;\n}\n\nfunction restoreStateIfNeeded() {\n  if (!restoreTarget) {\n    return;\n  }\n  var target = restoreTarget;\n  var queuedTargets = restoreQueue;\n  restoreTarget = null;\n  restoreQueue = null;\n\n  restoreStateOfTarget(target);\n  if (queuedTargets) {\n    for (var i = 0; i < queuedTargets.length; i++) {\n      restoreStateOfTarget(queuedTargets[i]);\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9ldmVudHMvUmVhY3RDb250cm9sbGVkQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiZmliZXJIb3N0Q29tcG9uZW50IiwiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50SW5qZWN0aW9uIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsImhvc3RDb21wb25lbnRJbXBsIiwicmVzdG9yZVRhcmdldCIsInJlc3RvcmVRdWV1ZSIsInJlc3RvcmVTdGF0ZU9mVGFyZ2V0IiwidGFyZ2V0IiwiaW50ZXJuYWxJbnN0YW5jZSIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJwcm9wcyIsInN0YXRlTm9kZSIsInR5cGUiLCJpbmplY3Rpb24iLCJwdXNoIiwicXVldWVkVGFyZ2V0cyIsImkiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7OztRQXFEZ0JBLG1CLEdBQUFBLG1CO1FBWUFDLGlCLEdBQUFBLGlCO1FBSUFDLG9CLEdBQUFBLG9COztBQTlEaEI7Ozs7QUFFQTs7OztBQUtBOztBQWRBOzs7Ozs7O0FBZ0JBLElBQUlDLHFCQUFxQixJQUF6Qjs7QUFFQSxJQUFNQyxvQ0FBb0M7QUFDeENDLHNDQUFvQyw0Q0FBU0MsaUJBQVQsRUFBNEI7QUFDOUQ7QUFDQTtBQUNBSCx5QkFBcUJHLGlCQUFyQjtBQUNEO0FBTHVDLENBQTFDOztBQVFBLElBQUlDLGdCQUFnQixJQUFwQjtBQUNBLElBQUlDLGVBQWUsSUFBbkI7O0FBRUEsU0FBU0Msb0JBQVQsQ0FBOEJDLE1BQTlCLEVBQXNDO0FBQ3BDO0FBQ0E7QUFDQSxNQUFNQyxtQkFBbUIsMkNBQW9CRCxNQUFwQixDQUF6QjtBQUNBLE1BQUksQ0FBQ0MsZ0JBQUwsRUFBdUI7QUFDckI7QUFDQTtBQUNEO0FBQ0QsMkJBQ0VSLHNCQUNFLE9BQU9BLG1CQUFtQlMsc0JBQTFCLEtBQXFELFVBRnpELEVBR0Usd0VBQ0UsOEVBSko7QUFNQSxNQUFNQyxRQUFRLG9EQUE2QkYsaUJBQWlCRyxTQUE5QyxDQUFkO0FBQ0FYLHFCQUFtQlMsc0JBQW5CLENBQ0VELGlCQUFpQkcsU0FEbkIsRUFFRUgsaUJBQWlCSSxJQUZuQixFQUdFRixLQUhGO0FBS0Q7O0FBRU0sSUFBTUcsZ0NBQVlaLGlDQUFsQjs7QUFFQSxTQUFTSixtQkFBVCxDQUE2QlUsTUFBN0IsRUFBcUM7QUFDMUMsTUFBSUgsYUFBSixFQUFtQjtBQUNqQixRQUFJQyxZQUFKLEVBQWtCO0FBQ2hCQSxtQkFBYVMsSUFBYixDQUFrQlAsTUFBbEI7QUFDRCxLQUZELE1BRU87QUFDTEYscUJBQWUsQ0FBQ0UsTUFBRCxDQUFmO0FBQ0Q7QUFDRixHQU5ELE1BTU87QUFDTEgsb0JBQWdCRyxNQUFoQjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU1QsaUJBQVQsR0FBc0M7QUFDM0MsU0FBT00sa0JBQWtCLElBQWxCLElBQTBCQyxpQkFBaUIsSUFBbEQ7QUFDRDs7QUFFTSxTQUFTTixvQkFBVCxHQUFnQztBQUNyQyxNQUFJLENBQUNLLGFBQUwsRUFBb0I7QUFDbEI7QUFDRDtBQUNELE1BQU1HLFNBQVNILGFBQWY7QUFDQSxNQUFNVyxnQkFBZ0JWLFlBQXRCO0FBQ0FELGtCQUFnQixJQUFoQjtBQUNBQyxpQkFBZSxJQUFmOztBQUVBQyx1QkFBcUJDLE1BQXJCO0FBQ0EsTUFBSVEsYUFBSixFQUFtQjtBQUNqQixTQUFLLElBQUlDLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsY0FBY0UsTUFBbEMsRUFBMENELEdBQTFDLEVBQStDO0FBQzdDViwyQkFBcUJTLGNBQWNDLENBQWQsQ0FBckI7QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoiUmVhY3RDb250cm9sbGVkQ29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnO1xuXG5pbXBvcnQge1xuICBnZXRJbnN0YW5jZUZyb21Ob2RlLFxuICBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlLFxufSBmcm9tICcuL0V2ZW50UGx1Z2luVXRpbHMnO1xuXG4vLyBVc2UgdG8gcmVzdG9yZSBjb250cm9sbGVkIHN0YXRlIGFmdGVyIGEgY2hhbmdlIGV2ZW50IGhhcyBmaXJlZC5cblxubGV0IGZpYmVySG9zdENvbXBvbmVudCA9IG51bGw7XG5cbmNvbnN0IFJlYWN0Q29udHJvbGxlZENvbXBvbmVudEluamVjdGlvbiA9IHtcbiAgaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudDogZnVuY3Rpb24oaG9zdENvbXBvbmVudEltcGwpIHtcbiAgICAvLyBUaGUgZmliZXIgaW1wbGVtZW50YXRpb24gZG9lc24ndCB1c2UgZHluYW1pYyBkaXNwYXRjaCBzbyB3ZSBuZWVkIHRvXG4gICAgLy8gaW5qZWN0IHRoZSBpbXBsZW1lbnRhdGlvbi5cbiAgICBmaWJlckhvc3RDb21wb25lbnQgPSBob3N0Q29tcG9uZW50SW1wbDtcbiAgfSxcbn07XG5cbmxldCByZXN0b3JlVGFyZ2V0ID0gbnVsbDtcbmxldCByZXN0b3JlUXVldWUgPSBudWxsO1xuXG5mdW5jdGlvbiByZXN0b3JlU3RhdGVPZlRhcmdldCh0YXJnZXQpIHtcbiAgLy8gV2UgcGVyZm9ybSB0aGlzIHRyYW5zbGF0aW9uIGF0IHRoZSBlbmQgb2YgdGhlIGV2ZW50IGxvb3Agc28gdGhhdCB3ZVxuICAvLyBhbHdheXMgcmVjZWl2ZSB0aGUgY29ycmVjdCBmaWJlciBoZXJlXG4gIGNvbnN0IGludGVybmFsSW5zdGFuY2UgPSBnZXRJbnN0YW5jZUZyb21Ob2RlKHRhcmdldCk7XG4gIGlmICghaW50ZXJuYWxJbnN0YW5jZSkge1xuICAgIC8vIFVubW91bnRlZFxuICAgIHJldHVybjtcbiAgfVxuICBpbnZhcmlhbnQoXG4gICAgZmliZXJIb3N0Q29tcG9uZW50ICYmXG4gICAgICB0eXBlb2YgZmliZXJIb3N0Q29tcG9uZW50LnJlc3RvcmVDb250cm9sbGVkU3RhdGUgPT09ICdmdW5jdGlvbicsXG4gICAgJ0ZpYmVyIG5lZWRzIHRvIGJlIGluamVjdGVkIHRvIGhhbmRsZSBhIGZpYmVyIHRhcmdldCBmb3IgY29udHJvbGxlZCAnICtcbiAgICAgICdldmVudHMuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyxcbiAgKTtcbiAgY29uc3QgcHJvcHMgPSBnZXRGaWJlckN1cnJlbnRQcm9wc0Zyb21Ob2RlKGludGVybmFsSW5zdGFuY2Uuc3RhdGVOb2RlKTtcbiAgZmliZXJIb3N0Q29tcG9uZW50LnJlc3RvcmVDb250cm9sbGVkU3RhdGUoXG4gICAgaW50ZXJuYWxJbnN0YW5jZS5zdGF0ZU5vZGUsXG4gICAgaW50ZXJuYWxJbnN0YW5jZS50eXBlLFxuICAgIHByb3BzLFxuICApO1xufVxuXG5leHBvcnQgY29uc3QgaW5qZWN0aW9uID0gUmVhY3RDb250cm9sbGVkQ29tcG9uZW50SW5qZWN0aW9uO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5xdWV1ZVN0YXRlUmVzdG9yZSh0YXJnZXQpIHtcbiAgaWYgKHJlc3RvcmVUYXJnZXQpIHtcbiAgICBpZiAocmVzdG9yZVF1ZXVlKSB7XG4gICAgICByZXN0b3JlUXVldWUucHVzaCh0YXJnZXQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN0b3JlUXVldWUgPSBbdGFyZ2V0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdG9yZVRhcmdldCA9IHRhcmdldDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbmVlZHNTdGF0ZVJlc3RvcmUoKTogYm9vbGVhbiB7XG4gIHJldHVybiByZXN0b3JlVGFyZ2V0ICE9PSBudWxsIHx8IHJlc3RvcmVRdWV1ZSAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc3RvcmVTdGF0ZUlmTmVlZGVkKCkge1xuICBpZiAoIXJlc3RvcmVUYXJnZXQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgdGFyZ2V0ID0gcmVzdG9yZVRhcmdldDtcbiAgY29uc3QgcXVldWVkVGFyZ2V0cyA9IHJlc3RvcmVRdWV1ZTtcbiAgcmVzdG9yZVRhcmdldCA9IG51bGw7XG4gIHJlc3RvcmVRdWV1ZSA9IG51bGw7XG5cbiAgcmVzdG9yZVN0YXRlT2ZUYXJnZXQodGFyZ2V0KTtcbiAgaWYgKHF1ZXVlZFRhcmdldHMpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlZFRhcmdldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3RvcmVTdGF0ZU9mVGFyZ2V0KHF1ZXVlZFRhcmdldHNbaV0pO1xuICAgIH1cbiAgfVxufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injection = undefined;\nexports.batchedUpdates = batchedUpdates;\nexports.interactiveUpdates = interactiveUpdates;\nexports.flushInteractiveUpdates = flushInteractiveUpdates;\n\nvar _ReactControlledComponent = require('./ReactControlledComponent');\n\n// Used as a way to call batchedUpdates when we don't have a reference to\n// the renderer. Such as when we're dispatching events or if third party\n// libraries need to call batchedUpdates. Eventually, this API will go away when\n// everything is batched by default. We'll then have a similar API to opt-out of\n// scheduled work and instead do synchronous work.\n\n// Defaults\nvar _batchedUpdates = function _batchedUpdates(fn, bookkeeping) {\n  return fn(bookkeeping);\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n\nvar _interactiveUpdates = function _interactiveUpdates(fn, a, b) {\n  return fn(a, b);\n};\nvar _flushInteractiveUpdates = function _flushInteractiveUpdates() {};\n\nvar isBatching = false;\nfunction batchedUpdates(fn, bookkeeping) {\n  if (isBatching) {\n    // If we are currently inside another batch, we need to wait until it\n    // fully completes before restoring state.\n    return fn(bookkeeping);\n  }\n  isBatching = true;\n  try {\n    return _batchedUpdates(fn, bookkeeping);\n  } finally {\n    // Here we wait until all updates have propagated, which is important\n    // when using controlled components within layers:\n    // https://github.com/facebook/react/issues/1698\n    // Then we restore state of any controlled component.\n    isBatching = false;\n    var controlledComponentsHavePendingUpdates = (0, _ReactControlledComponent.needsStateRestore)();\n    if (controlledComponentsHavePendingUpdates) {\n      // If a controlled event was fired, we may need to restore the state of\n      // the DOM node back to the controlled value. This is necessary when React\n      // bails out of the update without touching the DOM.\n      _flushInteractiveUpdates();\n      (0, _ReactControlledComponent.restoreStateIfNeeded)();\n    }\n  }\n}\n\nfunction interactiveUpdates(fn, a, b) {\n  return _interactiveUpdates(fn, a, b);\n}\n\nfunction flushInteractiveUpdates() {\n  return _flushInteractiveUpdates();\n}\n\nvar injection = exports.injection = {\n  injectRenderer: function injectRenderer(renderer) {\n    _batchedUpdates = renderer.batchedUpdates;\n    _interactiveUpdates = renderer.interactiveUpdates;\n    _flushInteractiveUpdates = renderer.flushInteractiveUpdates;\n  }\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9ldmVudHMvUmVhY3RHZW5lcmljQmF0Y2hpbmcuanMiXSwibmFtZXMiOlsiYmF0Y2hlZFVwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsIl9iYXRjaGVkVXBkYXRlcyIsImZuIiwiYm9va2tlZXBpbmciLCJfaW50ZXJhY3RpdmVVcGRhdGVzIiwiYSIsImIiLCJfZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJpc0JhdGNoaW5nIiwiY29udHJvbGxlZENvbXBvbmVudHNIYXZlUGVuZGluZ1VwZGF0ZXMiLCJpbmplY3Rpb24iLCJpbmplY3RSZW5kZXJlciIsInJlbmRlcmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUE0QmdCQSxjLEdBQUFBLGM7UUEwQkFDLGtCLEdBQUFBLGtCO1FBSUFDLHVCLEdBQUFBLHVCOztBQW5EaEI7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUlDLGtCQUFrQix5QkFBU0MsRUFBVCxFQUFhQyxXQUFiLEVBQTBCO0FBQzlDLFNBQU9ELEdBQUdDLFdBQUgsQ0FBUDtBQUNELENBRkQsQyxDQW5CQTs7Ozs7OztBQXNCQSxJQUFJQyxzQkFBc0IsNkJBQVNGLEVBQVQsRUFBYUcsQ0FBYixFQUFnQkMsQ0FBaEIsRUFBbUI7QUFDM0MsU0FBT0osR0FBR0csQ0FBSCxFQUFNQyxDQUFOLENBQVA7QUFDRCxDQUZEO0FBR0EsSUFBSUMsMkJBQTJCLG9DQUFXLENBQUUsQ0FBNUM7O0FBRUEsSUFBSUMsYUFBYSxLQUFqQjtBQUNPLFNBQVNWLGNBQVQsQ0FBd0JJLEVBQXhCLEVBQTRCQyxXQUE1QixFQUF5QztBQUM5QyxNQUFJSyxVQUFKLEVBQWdCO0FBQ2Q7QUFDQTtBQUNBLFdBQU9OLEdBQUdDLFdBQUgsQ0FBUDtBQUNEO0FBQ0RLLGVBQWEsSUFBYjtBQUNBLE1BQUk7QUFDRixXQUFPUCxnQkFBZ0JDLEVBQWhCLEVBQW9CQyxXQUFwQixDQUFQO0FBQ0QsR0FGRCxTQUVVO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQUssaUJBQWEsS0FBYjtBQUNBLFFBQU1DLHlDQUF5QyxrREFBL0M7QUFDQSxRQUFJQSxzQ0FBSixFQUE0QztBQUMxQztBQUNBO0FBQ0E7QUFDQUY7QUFDQTtBQUNEO0FBQ0Y7QUFDRjs7QUFFTSxTQUFTUixrQkFBVCxDQUE0QkcsRUFBNUIsRUFBZ0NHLENBQWhDLEVBQW1DQyxDQUFuQyxFQUFzQztBQUMzQyxTQUFPRixvQkFBb0JGLEVBQXBCLEVBQXdCRyxDQUF4QixFQUEyQkMsQ0FBM0IsQ0FBUDtBQUNEOztBQUVNLFNBQVNOLHVCQUFULEdBQW1DO0FBQ3hDLFNBQU9PLDBCQUFQO0FBQ0Q7O0FBRU0sSUFBTUcsZ0NBQVk7QUFDdkJDLGdCQUR1QiwwQkFDUkMsUUFEUSxFQUNFO0FBQ3ZCWCxzQkFBa0JXLFNBQVNkLGNBQTNCO0FBQ0FNLDBCQUFzQlEsU0FBU2Isa0JBQS9CO0FBQ0FRLCtCQUEyQkssU0FBU1osdUJBQXBDO0FBQ0Q7QUFMc0IsQ0FBbEIiLCJmaWxlIjoiUmVhY3RHZW5lcmljQmF0Y2hpbmcuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge1xuICBuZWVkc1N0YXRlUmVzdG9yZSxcbiAgcmVzdG9yZVN0YXRlSWZOZWVkZWQsXG59IGZyb20gJy4vUmVhY3RDb250cm9sbGVkQ29tcG9uZW50JztcblxuLy8gVXNlZCBhcyBhIHdheSB0byBjYWxsIGJhdGNoZWRVcGRhdGVzIHdoZW4gd2UgZG9uJ3QgaGF2ZSBhIHJlZmVyZW5jZSB0b1xuLy8gdGhlIHJlbmRlcmVyLiBTdWNoIGFzIHdoZW4gd2UncmUgZGlzcGF0Y2hpbmcgZXZlbnRzIG9yIGlmIHRoaXJkIHBhcnR5XG4vLyBsaWJyYXJpZXMgbmVlZCB0byBjYWxsIGJhdGNoZWRVcGRhdGVzLiBFdmVudHVhbGx5LCB0aGlzIEFQSSB3aWxsIGdvIGF3YXkgd2hlblxuLy8gZXZlcnl0aGluZyBpcyBiYXRjaGVkIGJ5IGRlZmF1bHQuIFdlJ2xsIHRoZW4gaGF2ZSBhIHNpbWlsYXIgQVBJIHRvIG9wdC1vdXQgb2Zcbi8vIHNjaGVkdWxlZCB3b3JrIGFuZCBpbnN0ZWFkIGRvIHN5bmNocm9ub3VzIHdvcmsuXG5cbi8vIERlZmF1bHRzXG5sZXQgX2JhdGNoZWRVcGRhdGVzID0gZnVuY3Rpb24oZm4sIGJvb2trZWVwaW5nKSB7XG4gIHJldHVybiBmbihib29ra2VlcGluZyk7XG59O1xubGV0IF9pbnRlcmFjdGl2ZVVwZGF0ZXMgPSBmdW5jdGlvbihmbiwgYSwgYikge1xuICByZXR1cm4gZm4oYSwgYik7XG59O1xubGV0IF9mbHVzaEludGVyYWN0aXZlVXBkYXRlcyA9IGZ1bmN0aW9uKCkge307XG5cbmxldCBpc0JhdGNoaW5nID0gZmFsc2U7XG5leHBvcnQgZnVuY3Rpb24gYmF0Y2hlZFVwZGF0ZXMoZm4sIGJvb2trZWVwaW5nKSB7XG4gIGlmIChpc0JhdGNoaW5nKSB7XG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbnNpZGUgYW5vdGhlciBiYXRjaCwgd2UgbmVlZCB0byB3YWl0IHVudGlsIGl0XG4gICAgLy8gZnVsbHkgY29tcGxldGVzIGJlZm9yZSByZXN0b3Jpbmcgc3RhdGUuXG4gICAgcmV0dXJuIGZuKGJvb2trZWVwaW5nKTtcbiAgfVxuICBpc0JhdGNoaW5nID0gdHJ1ZTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gX2JhdGNoZWRVcGRhdGVzKGZuLCBib29ra2VlcGluZyk7XG4gIH0gZmluYWxseSB7XG4gICAgLy8gSGVyZSB3ZSB3YWl0IHVudGlsIGFsbCB1cGRhdGVzIGhhdmUgcHJvcGFnYXRlZCwgd2hpY2ggaXMgaW1wb3J0YW50XG4gICAgLy8gd2hlbiB1c2luZyBjb250cm9sbGVkIGNvbXBvbmVudHMgd2l0aGluIGxheWVyczpcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE2OThcbiAgICAvLyBUaGVuIHdlIHJlc3RvcmUgc3RhdGUgb2YgYW55IGNvbnRyb2xsZWQgY29tcG9uZW50LlxuICAgIGlzQmF0Y2hpbmcgPSBmYWxzZTtcbiAgICBjb25zdCBjb250cm9sbGVkQ29tcG9uZW50c0hhdmVQZW5kaW5nVXBkYXRlcyA9IG5lZWRzU3RhdGVSZXN0b3JlKCk7XG4gICAgaWYgKGNvbnRyb2xsZWRDb21wb25lbnRzSGF2ZVBlbmRpbmdVcGRhdGVzKSB7XG4gICAgICAvLyBJZiBhIGNvbnRyb2xsZWQgZXZlbnQgd2FzIGZpcmVkLCB3ZSBtYXkgbmVlZCB0byByZXN0b3JlIHRoZSBzdGF0ZSBvZlxuICAgICAgLy8gdGhlIERPTSBub2RlIGJhY2sgdG8gdGhlIGNvbnRyb2xsZWQgdmFsdWUuIFRoaXMgaXMgbmVjZXNzYXJ5IHdoZW4gUmVhY3RcbiAgICAgIC8vIGJhaWxzIG91dCBvZiB0aGUgdXBkYXRlIHdpdGhvdXQgdG91Y2hpbmcgdGhlIERPTS5cbiAgICAgIF9mbHVzaEludGVyYWN0aXZlVXBkYXRlcygpO1xuICAgICAgcmVzdG9yZVN0YXRlSWZOZWVkZWQoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGludGVyYWN0aXZlVXBkYXRlcyhmbiwgYSwgYikge1xuICByZXR1cm4gX2ludGVyYWN0aXZlVXBkYXRlcyhmbiwgYSwgYik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmbHVzaEludGVyYWN0aXZlVXBkYXRlcygpIHtcbiAgcmV0dXJuIF9mbHVzaEludGVyYWN0aXZlVXBkYXRlcygpO1xufVxuXG5leHBvcnQgY29uc3QgaW5qZWN0aW9uID0ge1xuICBpbmplY3RSZW5kZXJlcihyZW5kZXJlcikge1xuICAgIF9iYXRjaGVkVXBkYXRlcyA9IHJlbmRlcmVyLmJhdGNoZWRVcGRhdGVzO1xuICAgIF9pbnRlcmFjdGl2ZVVwZGF0ZXMgPSByZW5kZXJlci5pbnRlcmFjdGl2ZVVwZGF0ZXM7XG4gICAgX2ZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzID0gcmVuZGVyZXIuZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM7XG4gIH0sXG59O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar didWarnForAddedNewProperty = false; /**\n                                         * Copyright (c) 2013-present, Facebook, Inc.\n                                         *\n                                         * This source code is licensed under the MIT license found in the\n                                         * LICENSE file in the root directory of this source tree.\n                                         */\n\n/* eslint valid-typeof: 0 */\n\nvar EVENT_POOL_SIZE = 10;\n\nvar shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar EventInterface = {\n  type: null,\n  target: null,\n  // currentTarget is set when dispatching; no use in copying it here\n  currentTarget: _emptyFunction2.default.thatReturnsNull,\n  eventPhase: null,\n  bubbles: null,\n  cancelable: null,\n  timeStamp: function timeStamp(event) {\n    return event.timeStamp || Date.now();\n  },\n  defaultPrevented: null,\n  isTrusted: null\n};\n\n/**\n * Synthetic events are dispatched by event plugins, typically in response to a\n * top-level event delegation handler.\n *\n * These systems should generally use pooling to reduce the frequency of garbage\n * collection. The system should check `isPersistent` to determine whether the\n * event should be released into the pool after being dispatched. Users that\n * need a persisted event should invoke `persist`.\n *\n * Synthetic events (and subclasses) implement the DOM Level 3 Events API by\n * normalizing browser quirks. Subclasses do not necessarily have to implement a\n * DOM interface; custom application-specific events can also subclass this.\n *\n * @param {object} dispatchConfig Configuration used to dispatch this event.\n * @param {*} targetInst Marker identifying the event target.\n * @param {object} nativeEvent Native browser event.\n * @param {DOMEventTarget} nativeEventTarget Target node.\n */\nfunction SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {\n  if (__DEV__) {\n    // these have a getter/setter for warnings\n    delete this.nativeEvent;\n    delete this.preventDefault;\n    delete this.stopPropagation;\n  }\n\n  this.dispatchConfig = dispatchConfig;\n  this._targetInst = targetInst;\n  this.nativeEvent = nativeEvent;\n\n  var Interface = this.constructor.Interface;\n  for (var propName in Interface) {\n    if (!Interface.hasOwnProperty(propName)) {\n      continue;\n    }\n    if (__DEV__) {\n      delete this[propName]; // this has a getter/setter for warnings\n    }\n    var normalize = Interface[propName];\n    if (normalize) {\n      this[propName] = normalize(nativeEvent);\n    } else {\n      if (propName === 'target') {\n        this.target = nativeEventTarget;\n      } else {\n        this[propName] = nativeEvent[propName];\n      }\n    }\n  }\n\n  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;\n  if (defaultPrevented) {\n    this.isDefaultPrevented = _emptyFunction2.default.thatReturnsTrue;\n  } else {\n    this.isDefaultPrevented = _emptyFunction2.default.thatReturnsFalse;\n  }\n  this.isPropagationStopped = _emptyFunction2.default.thatReturnsFalse;\n  return this;\n}\n\nObject.assign(SyntheticEvent.prototype, {\n  preventDefault: function preventDefault() {\n    this.defaultPrevented = true;\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else if (typeof event.returnValue !== 'unknown') {\n      event.returnValue = false;\n    }\n    this.isDefaultPrevented = _emptyFunction2.default.thatReturnsTrue;\n  },\n\n  stopPropagation: function stopPropagation() {\n    var event = this.nativeEvent;\n    if (!event) {\n      return;\n    }\n\n    if (event.stopPropagation) {\n      event.stopPropagation();\n    } else if (typeof event.cancelBubble !== 'unknown') {\n      // The ChangeEventPlugin registers a \"propertychange\" event for\n      // IE. This event does not support bubbling or cancelling, and\n      // any references to cancelBubble throw \"Member not found\".  A\n      // typeof check of \"unknown\" circumvents this issue (and is also\n      // IE specific).\n      event.cancelBubble = true;\n    }\n\n    this.isPropagationStopped = _emptyFunction2.default.thatReturnsTrue;\n  },\n\n  /**\n   * We release all dispatched `SyntheticEvent`s after each event loop, adding\n   * them back into the pool. This allows a way to hold onto a reference that\n   * won't be added back into the pool.\n   */\n  persist: function persist() {\n    this.isPersistent = _emptyFunction2.default.thatReturnsTrue;\n  },\n\n  /**\n   * Checks if this event should be released back into the pool.\n   *\n   * @return {boolean} True if this should not be released, false otherwise.\n   */\n  isPersistent: _emptyFunction2.default.thatReturnsFalse,\n\n  /**\n   * `PooledClass` looks for `destructor` on each instance it releases.\n   */\n  destructor: function destructor() {\n    var Interface = this.constructor.Interface;\n    for (var propName in Interface) {\n      if (__DEV__) {\n        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));\n      } else {\n        this[propName] = null;\n      }\n    }\n    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {\n      this[shouldBeReleasedProperties[i]] = null;\n    }\n    if (__DEV__) {\n      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));\n      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', _emptyFunction2.default));\n      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', _emptyFunction2.default));\n    }\n  }\n});\n\nSyntheticEvent.Interface = EventInterface;\n\n/**\n * Helper to reduce boilerplate when creating subclasses.\n */\nSyntheticEvent.extend = function (Interface) {\n  var Super = this;\n\n  var E = function E() {};\n  E.prototype = Super.prototype;\n  var prototype = new E();\n\n  function Class() {\n    return Super.apply(this, arguments);\n  }\n  Object.assign(prototype, Class.prototype);\n  Class.prototype = prototype;\n  Class.prototype.constructor = Class;\n\n  Class.Interface = Object.assign({}, Super.Interface, Interface);\n  Class.extend = Super.extend;\n  addEventPoolingTo(Class);\n\n  return Class;\n};\n\n/** Proxying after everything set on SyntheticEvent\n * to resolve Proxy issue on some WebKit browsers\n * in which some Event properties are set to undefined (GH#10010)\n */\nif (__DEV__) {\n  var isProxySupported = typeof Proxy === 'function' &&\n  // https://github.com/facebook/react/issues/12011\n  !Object.isSealed(new Proxy({}, {}));\n\n  if (isProxySupported) {\n    /*eslint-disable no-func-assign */\n    SyntheticEvent = new Proxy(SyntheticEvent, {\n      construct: function construct(target, args) {\n        return this.apply(target, Object.create(target.prototype), args);\n      },\n      apply: function apply(constructor, that, args) {\n        return new Proxy(constructor.apply(that, args), {\n          set: function set(target, prop, value) {\n            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {\n              (0, _warning2.default)(didWarnForAddedNewProperty || target.isPersistent(), \"This synthetic event is reused for performance reasons. If you're \" + \"seeing this, you're adding a new property in the synthetic event object. \" + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');\n              didWarnForAddedNewProperty = true;\n            }\n            target[prop] = value;\n            return true;\n          }\n        });\n      }\n    });\n    /*eslint-enable no-func-assign */\n  }\n}\n\naddEventPoolingTo(SyntheticEvent);\n\n/**\n * Helper to nullify syntheticEvent instance properties when destructing\n *\n * @param {String} propName\n * @param {?object} getVal\n * @return {object} defineProperty object\n */\nfunction getPooledWarningPropertyDefinition(propName, getVal) {\n  var isFunction = typeof getVal === 'function';\n  return {\n    configurable: true,\n    set: set,\n    get: get\n  };\n\n  function set(val) {\n    var action = isFunction ? 'setting the method' : 'setting the property';\n    warn(action, 'This is effectively a no-op');\n    return val;\n  }\n\n  function get() {\n    var action = isFunction ? 'accessing the method' : 'accessing the property';\n    var result = isFunction ? 'This is a no-op function' : 'This is set to null';\n    warn(action, result);\n    return getVal;\n  }\n\n  function warn(action, result) {\n    var warningCondition = false;\n    (0, _warning2.default)(warningCondition, \"This synthetic event is reused for performance reasons. If you're seeing this, \" + \"you're %s `%s` on a released/nullified synthetic event. %s. \" + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);\n  }\n}\n\nfunction getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {\n  var EventConstructor = this;\n  if (EventConstructor.eventPool.length) {\n    var instance = EventConstructor.eventPool.pop();\n    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);\n    return instance;\n  }\n  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);\n}\n\nfunction releasePooledEvent(event) {\n  var EventConstructor = this;\n  (0, _invariant2.default)(event instanceof EventConstructor, 'Trying to release an event instance  into a pool of a different type.');\n  event.destructor();\n  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {\n    EventConstructor.eventPool.push(event);\n  }\n}\n\nfunction addEventPoolingTo(EventConstructor) {\n  EventConstructor.eventPool = [];\n  EventConstructor.getPooled = getPooledEvent;\n  EventConstructor.release = releasePooledEvent;\n}\n\nexports.default = SyntheticEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Accumulates items that must not be null or undefined into the first one. This\n * is used to conserve memory by avoiding array allocations, and thus sacrifices\n * API cleanness. Since `current` can be null before being passed in and not\n * null after this function, make sure to assign it back to `current`:\n *\n * `a = accumulateInto(a, b);`\n *\n * This API should be sparingly used. Try `accumulate` for something cleaner.\n *\n * @return {*|array<*>} An accumulation of items.\n */\n\nfunction accumulateInto(current, next) {\n  (0, _invariant2.default)(next != null, 'accumulateInto(...): Accumulated items must not be null or undefined.');\n\n  if (current == null) {\n    return next;\n  }\n\n  // Both are not empty. Warning: Never call x.concat(y) when you are not\n  // certain that x is an Array (x could be a string with concat method).\n  if (Array.isArray(current)) {\n    if (Array.isArray(next)) {\n      current.push.apply(current, next);\n      return current;\n    }\n    current.push(next);\n    return current;\n  }\n\n  if (Array.isArray(next)) {\n    // A bit too dangerous to mutate `next`.\n    return [current].concat(next);\n  }\n\n  return [current, next];\n} /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nexports.default = accumulateInto;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9ldmVudHMvYWNjdW11bGF0ZUludG8uanMiXSwibmFtZXMiOlsiYWNjdW11bGF0ZUludG8iLCJjdXJyZW50IiwibmV4dCIsIkFycmF5IiwiaXNBcnJheSIsInB1c2giLCJhcHBseSIsImNvbmNhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7Ozs7OztBQUVBOzs7Ozs7Ozs7Ozs7O0FBYUEsU0FBU0EsY0FBVCxDQUNFQyxPQURGLEVBRUVDLElBRkYsRUFHZ0I7QUFDZCwyQkFDRUEsUUFBUSxJQURWLEVBRUUsdUVBRkY7O0FBS0EsTUFBSUQsV0FBVyxJQUFmLEVBQXFCO0FBQ25CLFdBQU9DLElBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBSUMsTUFBTUMsT0FBTixDQUFjSCxPQUFkLENBQUosRUFBNEI7QUFDMUIsUUFBSUUsTUFBTUMsT0FBTixDQUFjRixJQUFkLENBQUosRUFBeUI7QUFDdkJELGNBQVFJLElBQVIsQ0FBYUMsS0FBYixDQUFtQkwsT0FBbkIsRUFBNEJDLElBQTVCO0FBQ0EsYUFBT0QsT0FBUDtBQUNEO0FBQ0RBLFlBQVFJLElBQVIsQ0FBYUgsSUFBYjtBQUNBLFdBQU9ELE9BQVA7QUFDRDs7QUFFRCxNQUFJRSxNQUFNQyxPQUFOLENBQWNGLElBQWQsQ0FBSixFQUF5QjtBQUN2QjtBQUNBLFdBQU8sQ0FBQ0QsT0FBRCxFQUFVTSxNQUFWLENBQWlCTCxJQUFqQixDQUFQO0FBQ0Q7O0FBRUQsU0FBTyxDQUFDRCxPQUFELEVBQVVDLElBQVYsQ0FBUDtBQUNELEMsQ0F0REQ7Ozs7Ozs7OztrQkF3RGVGLGMiLCJmaWxlIjoiYWNjdW11bGF0ZUludG8uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnZmJqcy9saWIvaW52YXJpYW50JztcblxuLyoqXG4gKiBBY2N1bXVsYXRlcyBpdGVtcyB0aGF0IG11c3Qgbm90IGJlIG51bGwgb3IgdW5kZWZpbmVkIGludG8gdGhlIGZpcnN0IG9uZS4gVGhpc1xuICogaXMgdXNlZCB0byBjb25zZXJ2ZSBtZW1vcnkgYnkgYXZvaWRpbmcgYXJyYXkgYWxsb2NhdGlvbnMsIGFuZCB0aHVzIHNhY3JpZmljZXNcbiAqIEFQSSBjbGVhbm5lc3MuIFNpbmNlIGBjdXJyZW50YCBjYW4gYmUgbnVsbCBiZWZvcmUgYmVpbmcgcGFzc2VkIGluIGFuZCBub3RcbiAqIG51bGwgYWZ0ZXIgdGhpcyBmdW5jdGlvbiwgbWFrZSBzdXJlIHRvIGFzc2lnbiBpdCBiYWNrIHRvIGBjdXJyZW50YDpcbiAqXG4gKiBgYSA9IGFjY3VtdWxhdGVJbnRvKGEsIGIpO2BcbiAqXG4gKiBUaGlzIEFQSSBzaG91bGQgYmUgc3BhcmluZ2x5IHVzZWQuIFRyeSBgYWNjdW11bGF0ZWAgZm9yIHNvbWV0aGluZyBjbGVhbmVyLlxuICpcbiAqIEByZXR1cm4geyp8YXJyYXk8Kj59IEFuIGFjY3VtdWxhdGlvbiBvZiBpdGVtcy5cbiAqL1xuXG5mdW5jdGlvbiBhY2N1bXVsYXRlSW50bzxUPihcbiAgY3VycmVudDogPyhBcnJheTxUPiB8IFQpLFxuICBuZXh0OiBUIHwgQXJyYXk8VD4sXG4pOiBUIHwgQXJyYXk8VD4ge1xuICBpbnZhcmlhbnQoXG4gICAgbmV4dCAhPSBudWxsLFxuICAgICdhY2N1bXVsYXRlSW50byguLi4pOiBBY2N1bXVsYXRlZCBpdGVtcyBtdXN0IG5vdCBiZSBudWxsIG9yIHVuZGVmaW5lZC4nLFxuICApO1xuXG4gIGlmIChjdXJyZW50ID09IG51bGwpIHtcbiAgICByZXR1cm4gbmV4dDtcbiAgfVxuXG4gIC8vIEJvdGggYXJlIG5vdCBlbXB0eS4gV2FybmluZzogTmV2ZXIgY2FsbCB4LmNvbmNhdCh5KSB3aGVuIHlvdSBhcmUgbm90XG4gIC8vIGNlcnRhaW4gdGhhdCB4IGlzIGFuIEFycmF5ICh4IGNvdWxkIGJlIGEgc3RyaW5nIHdpdGggY29uY2F0IG1ldGhvZCkuXG4gIGlmIChBcnJheS5pc0FycmF5KGN1cnJlbnQpKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkobmV4dCkpIHtcbiAgICAgIGN1cnJlbnQucHVzaC5hcHBseShjdXJyZW50LCBuZXh0KTtcbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH1cbiAgICBjdXJyZW50LnB1c2gobmV4dCk7XG4gICAgcmV0dXJuIGN1cnJlbnQ7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShuZXh0KSkge1xuICAgIC8vIEEgYml0IHRvbyBkYW5nZXJvdXMgdG8gbXV0YXRlIGBuZXh0YC5cbiAgICByZXR1cm4gW2N1cnJlbnRdLmNvbmNhdChuZXh0KTtcbiAgfVxuXG4gIHJldHVybiBbY3VycmVudCwgbmV4dF07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFjY3VtdWxhdGVJbnRvO1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * @param {array} arr an \"accumulation\" of items which is either an Array or\n * a single item. Useful when paired with the `accumulate` module. This is a\n * simple utility that allows us to reason about a collection of items, but\n * handling the case when there is exactly one item (and we do not need to\n * allocate an array).\n * @param {function} cb Callback invoked with each element or a collection.\n * @param {?} [scope] Scope used as `this` in a callback.\n */\nfunction forEachAccumulated(arr, cb, scope) {\n  if (Array.isArray(arr)) {\n    arr.forEach(cb, scope);\n  } else if (arr) {\n    cb.call(scope, arr);\n  }\n}\n\nexports.default = forEachAccumulated;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9ldmVudHMvZm9yRWFjaEFjY3VtdWxhdGVkLmpzIl0sIm5hbWVzIjpbImZvckVhY2hBY2N1bXVsYXRlZCIsImFyciIsImNiIiwic2NvcGUiLCJBcnJheSIsImlzQXJyYXkiLCJmb3JFYWNoIiwiY2FsbCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0E7Ozs7Ozs7OztBQVNBLFNBQVNBLGtCQUFULENBQ0VDLEdBREYsRUFFRUMsRUFGRixFQUdFQyxLQUhGLEVBSUU7QUFDQSxNQUFJQyxNQUFNQyxPQUFOLENBQWNKLEdBQWQsQ0FBSixFQUF3QjtBQUN0QkEsUUFBSUssT0FBSixDQUFZSixFQUFaLEVBQWdCQyxLQUFoQjtBQUNELEdBRkQsTUFFTyxJQUFJRixHQUFKLEVBQVM7QUFDZEMsT0FBR0ssSUFBSCxDQUFRSixLQUFSLEVBQWVGLEdBQWY7QUFDRDtBQUNGOztrQkFFY0Qsa0IiLCJmaWxlIjoiZm9yRWFjaEFjY3VtdWxhdGVkLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7YXJyYXl9IGFyciBhbiBcImFjY3VtdWxhdGlvblwiIG9mIGl0ZW1zIHdoaWNoIGlzIGVpdGhlciBhbiBBcnJheSBvclxuICogYSBzaW5nbGUgaXRlbS4gVXNlZnVsIHdoZW4gcGFpcmVkIHdpdGggdGhlIGBhY2N1bXVsYXRlYCBtb2R1bGUuIFRoaXMgaXMgYVxuICogc2ltcGxlIHV0aWxpdHkgdGhhdCBhbGxvd3MgdXMgdG8gcmVhc29uIGFib3V0IGEgY29sbGVjdGlvbiBvZiBpdGVtcywgYnV0XG4gKiBoYW5kbGluZyB0aGUgY2FzZSB3aGVuIHRoZXJlIGlzIGV4YWN0bHkgb25lIGl0ZW0gKGFuZCB3ZSBkbyBub3QgbmVlZCB0b1xuICogYWxsb2NhdGUgYW4gYXJyYXkpLlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY2IgQ2FsbGJhY2sgaW52b2tlZCB3aXRoIGVhY2ggZWxlbWVudCBvciBhIGNvbGxlY3Rpb24uXG4gKiBAcGFyYW0gez99IFtzY29wZV0gU2NvcGUgdXNlZCBhcyBgdGhpc2AgaW4gYSBjYWxsYmFjay5cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaEFjY3VtdWxhdGVkPFQ+KFxuICBhcnI6ID8oQXJyYXk8VD4gfCBUKSxcbiAgY2I6IChlbGVtOiBUKSA9PiB2b2lkLFxuICBzY29wZTogP2FueSxcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7XG4gICAgYXJyLmZvckVhY2goY2IsIHNjb3BlKTtcbiAgfSBlbHNlIGlmIChhcnIpIHtcbiAgICBjYi5jYWxsKHNjb3BlLCBhcnIpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZvckVhY2hBY2N1bXVsYXRlZDtcbiJdfQ==","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar ReactDOM = require('./src/client/ReactDOM');\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nmodule.exports = ReactDOM.default ? ReactDOM.default : ReactDOM;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vaW5kZXguanMiXSwibmFtZXMiOlsiUmVhY3RET00iLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImRlZmF1bHQiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7QUFTQTs7QUFFQSxJQUFNQSxXQUFXQyxRQUFRLHVCQUFSLENBQWpCOztBQUVBO0FBQ0E7QUFDQUMsT0FBT0MsT0FBUCxHQUFpQkgsU0FBU0ksT0FBVCxHQUFtQkosU0FBU0ksT0FBNUIsR0FBc0NKLFFBQXZEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0RE9NID0gcmVxdWlyZSgnLi9zcmMvY2xpZW50L1JlYWN0RE9NJyk7XG5cbi8vIFRPRE86IGRlY2lkZSBvbiB0aGUgdG9wLWxldmVsIGV4cG9ydCBmb3JtLlxuLy8gVGhpcyBpcyBoYWNreSBidXQgbWFrZXMgaXQgd29yayB3aXRoIGJvdGggUm9sbHVwIGFuZCBKZXN0LlxubW9kdWxlLmV4cG9ydHMgPSBSZWFjdERPTS5kZWZhdWx0ID8gUmVhY3RET00uZGVmYXVsdCA6IFJlYWN0RE9NO1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getValueForProperty = getValueForProperty;\nexports.getValueForAttribute = getValueForAttribute;\nexports.setValueForProperty = setValueForProperty;\n\nvar _DOMProperty = require('../shared/DOMProperty');\n\n/**\n * Get the value for a property on a node. Only used in DEV for SSR validation.\n * The \"expected\" argument is used as a hint of what the expected value is.\n * Some properties have multiple equivalent values.\n */\nfunction getValueForProperty(node, name, expected, propertyInfo) {\n  if (__DEV__) {\n    if (propertyInfo.mustUseProperty) {\n      var propertyName = propertyInfo.propertyName;\n\n      return node[propertyName];\n    } else {\n      var attributeName = propertyInfo.attributeName;\n\n      var stringValue = null;\n\n      if (propertyInfo.type === _DOMProperty.OVERLOADED_BOOLEAN) {\n        if (node.hasAttribute(attributeName)) {\n          var value = node.getAttribute(attributeName);\n          if (value === '') {\n            return true;\n          }\n          if ((0, _DOMProperty.shouldRemoveAttribute)(name, expected, propertyInfo, false)) {\n            return value;\n          }\n          if (value === '' + expected) {\n            return expected;\n          }\n          return value;\n        }\n      } else if (node.hasAttribute(attributeName)) {\n        if ((0, _DOMProperty.shouldRemoveAttribute)(name, expected, propertyInfo, false)) {\n          // We had an attribute but shouldn't have had one, so read it\n          // for the error message.\n          return node.getAttribute(attributeName);\n        }\n        if (propertyInfo.type === _DOMProperty.BOOLEAN) {\n          // If this was a boolean, it doesn't matter what the value is\n          // the fact that we have it is the same as the expected.\n          return expected;\n        }\n        // Even if this property uses a namespace we use getAttribute\n        // because we assume its namespaced name is the same as our config.\n        // To use getAttributeNS we need the local name which we don't have\n        // in our config atm.\n        stringValue = node.getAttribute(attributeName);\n      }\n\n      if ((0, _DOMProperty.shouldRemoveAttribute)(name, expected, propertyInfo, false)) {\n        return stringValue === null ? expected : stringValue;\n      } else if (stringValue === '' + expected) {\n        return expected;\n      } else {\n        return stringValue;\n      }\n    }\n  }\n}\n\n/**\n * Get the value for a attribute on a node. Only used in DEV for SSR validation.\n * The third argument is used as a hint of what the expected value is. Some\n * attributes have multiple equivalent values.\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction getValueForAttribute(node, name, expected) {\n  if (__DEV__) {\n    if (!(0, _DOMProperty.isAttributeNameSafe)(name)) {\n      return;\n    }\n    if (!node.hasAttribute(name)) {\n      return expected === undefined ? undefined : null;\n    }\n    var value = node.getAttribute(name);\n    if (value === '' + expected) {\n      return expected;\n    }\n    return value;\n  }\n}\n\n/**\n * Sets the value for a property on a node.\n *\n * @param {DOMElement} node\n * @param {string} name\n * @param {*} value\n */\nfunction setValueForProperty(node, name, value, isCustomComponentTag) {\n  var propertyInfo = (0, _DOMProperty.getPropertyInfo)(name);\n  if ((0, _DOMProperty.shouldIgnoreAttribute)(name, propertyInfo, isCustomComponentTag)) {\n    return;\n  }\n  if ((0, _DOMProperty.shouldRemoveAttribute)(name, value, propertyInfo, isCustomComponentTag)) {\n    value = null;\n  }\n  // If the prop isn't in the special list, treat it as a simple attribute.\n  if (isCustomComponentTag || propertyInfo === null) {\n    if ((0, _DOMProperty.isAttributeNameSafe)(name)) {\n      var _attributeName = name;\n      if (value === null) {\n        node.removeAttribute(_attributeName);\n      } else {\n        node.setAttribute(_attributeName, '' + value);\n      }\n    }\n    return;\n  }\n  var mustUseProperty = propertyInfo.mustUseProperty;\n\n  if (mustUseProperty) {\n    var propertyName = propertyInfo.propertyName;\n\n    if (value === null) {\n      var type = propertyInfo.type;\n\n      node[propertyName] = type === _DOMProperty.BOOLEAN ? false : '';\n    } else {\n      // Contrary to `setAttribute`, object properties are properly\n      // `toString`ed by IE8/9.\n      node[propertyName] = value;\n    }\n    return;\n  }\n  // The rest are treated as attributes with special cases.\n  var attributeName = propertyInfo.attributeName,\n      attributeNamespace = propertyInfo.attributeNamespace;\n\n  if (value === null) {\n    node.removeAttribute(attributeName);\n  } else {\n    var _type = propertyInfo.type;\n\n    var attributeValue = void 0;\n    if (_type === _DOMProperty.BOOLEAN || _type === _DOMProperty.OVERLOADED_BOOLEAN && value === true) {\n      attributeValue = '';\n    } else {\n      // `setAttribute` with objects becomes only `[object]` in IE8/9,\n      // ('' + value) makes it output the correct toString()-value.\n      attributeValue = '' + value;\n    }\n    if (attributeNamespace) {\n      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);\n    } else {\n      node.setAttribute(attributeName, attributeValue);\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\n// TODO: This type is shared between the reconciler and ReactDOM, but will\n// eventually be lifted out to the renderer.\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\n\nrequire('../shared/checkReact');\n\nrequire('./ReactDOMClientInjection');\n\nvar _reactReconciler = require('react-reconciler');\n\nvar _reactReconciler2 = _interopRequireDefault(_reactReconciler);\n\nvar _ReactPortal = require('shared/ReactPortal');\n\nvar ReactPortal = _interopRequireWildcard(_ReactPortal);\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _ReactGenericBatching = require('events/ReactGenericBatching');\n\nvar ReactGenericBatching = _interopRequireWildcard(_ReactGenericBatching);\n\nvar _ReactControlledComponent = require('events/ReactControlledComponent');\n\nvar ReactControlledComponent = _interopRequireWildcard(_ReactControlledComponent);\n\nvar _EventPluginHub = require('events/EventPluginHub');\n\nvar EventPluginHub = _interopRequireWildcard(_EventPluginHub);\n\nvar _EventPluginRegistry = require('events/EventPluginRegistry');\n\nvar EventPluginRegistry = _interopRequireWildcard(_EventPluginRegistry);\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar EventPropagators = _interopRequireWildcard(_EventPropagators);\n\nvar _ReactInstanceMap = require('shared/ReactInstanceMap');\n\nvar ReactInstanceMap = _interopRequireWildcard(_ReactInstanceMap);\n\nvar _ReactVersion = require('shared/ReactVersion');\n\nvar _ReactVersion2 = _interopRequireDefault(_ReactVersion);\n\nvar _ReactDOMFrameScheduling = require('shared/ReactDOMFrameScheduling');\n\nvar ReactDOMFrameScheduling = _interopRequireWildcard(_ReactDOMFrameScheduling);\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _lowPriorityWarning = require('shared/lowPriorityWarning');\n\nvar _lowPriorityWarning2 = _interopRequireDefault(_lowPriorityWarning);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMComponentTree = _interopRequireWildcard(_ReactDOMComponentTree);\n\nvar _ReactDOMFiberComponent = require('./ReactDOMFiberComponent');\n\nvar ReactDOMFiberComponent = _interopRequireWildcard(_ReactDOMFiberComponent);\n\nvar _ReactInputSelection = require('./ReactInputSelection');\n\nvar ReactInputSelection = _interopRequireWildcard(_ReactInputSelection);\n\nvar _setTextContent = require('./setTextContent');\n\nvar _setTextContent2 = _interopRequireDefault(_setTextContent);\n\nvar _validateDOMNesting = require('./validateDOMNesting');\n\nvar _validateDOMNesting2 = _interopRequireDefault(_validateDOMNesting);\n\nvar _ReactBrowserEventEmitter = require('../events/ReactBrowserEventEmitter');\n\nvar ReactBrowserEventEmitter = _interopRequireWildcard(_ReactBrowserEventEmitter);\n\nvar _ReactDOMEventListener = require('../events/ReactDOMEventListener');\n\nvar ReactDOMEventListener = _interopRequireWildcard(_ReactDOMEventListener);\n\nvar _DOMNamespaces = require('../shared/DOMNamespaces');\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\nvar _DOMProperty = require('../shared/DOMProperty');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar createElement = ReactDOMFiberComponent.createElement,\n    createTextNode = ReactDOMFiberComponent.createTextNode,\n    setInitialProperties = ReactDOMFiberComponent.setInitialProperties,\n    diffProperties = ReactDOMFiberComponent.diffProperties,\n    updateProperties = ReactDOMFiberComponent.updateProperties,\n    diffHydratedProperties = ReactDOMFiberComponent.diffHydratedProperties,\n    diffHydratedText = ReactDOMFiberComponent.diffHydratedText,\n    warnForUnmatchedText = ReactDOMFiberComponent.warnForUnmatchedText,\n    warnForDeletedHydratableElement = ReactDOMFiberComponent.warnForDeletedHydratableElement,\n    warnForDeletedHydratableText = ReactDOMFiberComponent.warnForDeletedHydratableText,\n    warnForInsertedHydratedElement = ReactDOMFiberComponent.warnForInsertedHydratedElement,\n    warnForInsertedHydratedText = ReactDOMFiberComponent.warnForInsertedHydratedText;\nvar updatedAncestorInfo = _validateDOMNesting2.default.updatedAncestorInfo;\nvar precacheFiberNode = ReactDOMComponentTree.precacheFiberNode,\n    updateFiberProps = ReactDOMComponentTree.updateFiberProps;\n\n\nvar SUPPRESS_HYDRATION_WARNING = void 0;\nvar topLevelUpdateWarnings = void 0;\nvar warnOnInvalidCallback = void 0;\nvar didWarnAboutUnstableCreatePortal = false;\n\nif (__DEV__) {\n  SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\n  if (typeof Map !== 'function' || Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {\n    (0, _warning2.default)(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n  }\n\n  topLevelUpdateWarnings = function topLevelUpdateWarnings(container) {\n    if (container._reactRootContainer && container.nodeType !== _HTMLNodeType.COMMENT_NODE) {\n      var hostInstance = DOMRenderer.findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);\n      if (hostInstance) {\n        (0, _warning2.default)(hostInstance.parentNode === container, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');\n      }\n    }\n\n    var isRootRenderedBySomeReact = !!container._reactRootContainer;\n    var rootEl = getReactRootElementInContainer(container);\n    var hasNonRootReactChild = !!(rootEl && ReactDOMComponentTree.getInstanceFromNode(rootEl));\n\n    (0, _warning2.default)(!hasNonRootReactChild || isRootRenderedBySomeReact, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');\n\n    (0, _warning2.default)(container.nodeType !== _HTMLNodeType.ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY', 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');\n  };\n\n  warnOnInvalidCallback = function warnOnInvalidCallback(callback, callerName) {\n    (0, _warning2.default)(callback === null || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);\n  };\n}\n\nReactControlledComponent.injection.injectFiberControlledHostComponent(ReactDOMFiberComponent);\n\nvar eventsEnabled = null;\nvar selectionInformation = null;\n\nfunction ReactBatch(root) {\n  var expirationTime = DOMRenderer.computeUniqueAsyncExpiration();\n  this._expirationTime = expirationTime;\n  this._root = root;\n  this._next = null;\n  this._callbacks = null;\n  this._didComplete = false;\n  this._hasChildren = false;\n  this._children = null;\n  this._defer = true;\n}\nReactBatch.prototype.render = function (children) {\n  (0, _invariant2.default)(this._defer, 'batch.render: Cannot render a batch that already committed.');\n  this._hasChildren = true;\n  this._children = children;\n  var internalRoot = this._root._internalRoot;\n  var expirationTime = this._expirationTime;\n  var work = new ReactWork();\n  DOMRenderer.updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);\n  return work;\n};\nReactBatch.prototype.then = function (onComplete) {\n  if (this._didComplete) {\n    onComplete();\n    return;\n  }\n  var callbacks = this._callbacks;\n  if (callbacks === null) {\n    callbacks = this._callbacks = [];\n  }\n  callbacks.push(onComplete);\n};\nReactBatch.prototype.commit = function () {\n  var internalRoot = this._root._internalRoot;\n  var firstBatch = internalRoot.firstBatch;\n  (0, _invariant2.default)(this._defer && firstBatch !== null, 'batch.commit: Cannot commit a batch multiple times.');\n\n  if (!this._hasChildren) {\n    // This batch is empty. Return.\n    this._next = null;\n    this._defer = false;\n    return;\n  }\n\n  var expirationTime = this._expirationTime;\n\n  // Ensure this is the first batch in the list.\n  if (firstBatch !== this) {\n    // This batch is not the earliest batch. We need to move it to the front.\n    // Update its expiration time to be the expiration time of the earliest\n    // batch, so that we can flush it without flushing the other batches.\n    if (this._hasChildren) {\n      expirationTime = this._expirationTime = firstBatch._expirationTime;\n      // Rendering this batch again ensures its children will be the final state\n      // when we flush (updates are processed in insertion order: last\n      // update wins).\n      // TODO: This forces a restart. Should we print a warning?\n      this.render(this._children);\n    }\n\n    // Remove the batch from the list.\n    var previous = null;\n    var batch = firstBatch;\n    while (batch !== this) {\n      previous = batch;\n      batch = batch._next;\n    }\n    (0, _invariant2.default)(previous !== null, 'batch.commit: Cannot commit a batch multiple times.');\n    previous._next = batch._next;\n\n    // Add it to the front.\n    this._next = firstBatch;\n    firstBatch = internalRoot.firstBatch = this;\n  }\n\n  // Synchronously flush all the work up to this batch's expiration time.\n  this._defer = false;\n  DOMRenderer.flushRoot(internalRoot, expirationTime);\n\n  // Pop the batch from the list.\n  var next = this._next;\n  this._next = null;\n  firstBatch = internalRoot.firstBatch = next;\n\n  // Append the next earliest batch's children to the update queue.\n  if (firstBatch !== null && firstBatch._hasChildren) {\n    firstBatch.render(firstBatch._children);\n  }\n};\nReactBatch.prototype._onComplete = function () {\n  if (this._didComplete) {\n    return;\n  }\n  this._didComplete = true;\n  var callbacks = this._callbacks;\n  if (callbacks === null) {\n    return;\n  }\n  // TODO: Error handling.\n  for (var i = 0; i < callbacks.length; i++) {\n    var _callback = callbacks[i];\n    _callback();\n  }\n};\n\nfunction ReactWork() {\n  this._callbacks = null;\n  this._didCommit = false;\n  // TODO: Avoid need to bind by replacing callbacks in the update queue with\n  // list of Work objects.\n  this._onCommit = this._onCommit.bind(this);\n}\nReactWork.prototype.then = function (onCommit) {\n  if (this._didCommit) {\n    onCommit();\n    return;\n  }\n  var callbacks = this._callbacks;\n  if (callbacks === null) {\n    callbacks = this._callbacks = [];\n  }\n  callbacks.push(onCommit);\n};\nReactWork.prototype._onCommit = function () {\n  if (this._didCommit) {\n    return;\n  }\n  this._didCommit = true;\n  var callbacks = this._callbacks;\n  if (callbacks === null) {\n    return;\n  }\n  // TODO: Error handling.\n  for (var i = 0; i < callbacks.length; i++) {\n    var _callback2 = callbacks[i];\n    (0, _invariant2.default)(typeof _callback2 === 'function', 'Invalid argument passed as callback. Expected a function. Instead ' + 'received: %s', _callback2);\n    _callback2();\n  }\n};\n\nfunction ReactRoot(container, isAsync, hydrate) {\n  var root = DOMRenderer.createContainer(container, isAsync, hydrate);\n  this._internalRoot = root;\n}\nReactRoot.prototype.render = function (children, callback) {\n  var root = this._internalRoot;\n  var work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  if (__DEV__) {\n    warnOnInvalidCallback(callback, 'render');\n  }\n  if (callback !== null) {\n    work.then(callback);\n  }\n  DOMRenderer.updateContainer(children, root, null, work._onCommit);\n  return work;\n};\nReactRoot.prototype.unmount = function (callback) {\n  var root = this._internalRoot;\n  var work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  if (__DEV__) {\n    warnOnInvalidCallback(callback, 'render');\n  }\n  if (callback !== null) {\n    work.then(callback);\n  }\n  DOMRenderer.updateContainer(null, root, null, work._onCommit);\n  return work;\n};\nReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {\n  var root = this._internalRoot;\n  var work = new ReactWork();\n  callback = callback === undefined ? null : callback;\n  if (__DEV__) {\n    warnOnInvalidCallback(callback, 'render');\n  }\n  if (callback !== null) {\n    work.then(callback);\n  }\n  DOMRenderer.updateContainer(children, root, parentComponent, work._onCommit);\n  return work;\n};\nReactRoot.prototype.createBatch = function () {\n  var batch = new ReactBatch(this);\n  var expirationTime = batch._expirationTime;\n\n  var internalRoot = this._internalRoot;\n  var firstBatch = internalRoot.firstBatch;\n  if (firstBatch === null) {\n    internalRoot.firstBatch = batch;\n    batch._next = null;\n  } else {\n    // Insert sorted by expiration time then insertion order\n    var insertAfter = null;\n    var insertBefore = firstBatch;\n    while (insertBefore !== null && insertBefore._expirationTime <= expirationTime) {\n      insertAfter = insertBefore;\n      insertBefore = insertBefore._next;\n    }\n    batch._next = insertBefore;\n    if (insertAfter !== null) {\n      insertAfter._next = batch;\n    }\n  }\n\n  return batch;\n};\n\n/**\n * True if the supplied DOM node is a valid node element.\n *\n * @param {?DOMElement} node The candidate DOM node.\n * @return {boolean} True if the DOM is a valid DOM node.\n * @internal\n */\nfunction isValidContainer(node) {\n  return !!(node && (node.nodeType === _HTMLNodeType.ELEMENT_NODE || node.nodeType === _HTMLNodeType.DOCUMENT_NODE || node.nodeType === _HTMLNodeType.DOCUMENT_FRAGMENT_NODE || node.nodeType === _HTMLNodeType.COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));\n}\n\nfunction getReactRootElementInContainer(container) {\n  if (!container) {\n    return null;\n  }\n\n  if (container.nodeType === _HTMLNodeType.DOCUMENT_NODE) {\n    return container.documentElement;\n  } else {\n    return container.firstChild;\n  }\n}\n\nfunction shouldHydrateDueToLegacyHeuristic(container) {\n  var rootElement = getReactRootElementInContainer(container);\n  return !!(rootElement && rootElement.nodeType === _HTMLNodeType.ELEMENT_NODE && rootElement.hasAttribute(_DOMProperty.ROOT_ATTRIBUTE_NAME));\n}\n\nfunction shouldAutoFocusHostComponent(type, props) {\n  switch (type) {\n    case 'button':\n    case 'input':\n    case 'select':\n    case 'textarea':\n      return !!props.autoFocus;\n  }\n  return false;\n}\n\nvar DOMRenderer = (0, _reactReconciler2.default)({\n  getRootHostContext: function getRootHostContext(rootContainerInstance) {\n    var type = void 0;\n    var namespace = void 0;\n    var nodeType = rootContainerInstance.nodeType;\n    switch (nodeType) {\n      case _HTMLNodeType.DOCUMENT_NODE:\n      case _HTMLNodeType.DOCUMENT_FRAGMENT_NODE:\n        {\n          type = nodeType === _HTMLNodeType.DOCUMENT_NODE ? '#document' : '#fragment';\n          var root = rootContainerInstance.documentElement;\n          namespace = root ? root.namespaceURI : (0, _DOMNamespaces.getChildNamespace)(null, '');\n          break;\n        }\n      default:\n        {\n          var container = nodeType === _HTMLNodeType.COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;\n          var ownNamespace = container.namespaceURI || null;\n          type = container.tagName;\n          namespace = (0, _DOMNamespaces.getChildNamespace)(ownNamespace, type);\n          break;\n        }\n    }\n    if (__DEV__) {\n      var validatedTag = type.toLowerCase();\n      var _ancestorInfo = updatedAncestorInfo(null, validatedTag, null);\n      return { namespace: namespace, ancestorInfo: _ancestorInfo };\n    }\n    return namespace;\n  },\n  getChildHostContext: function getChildHostContext(parentHostContext, type) {\n    if (__DEV__) {\n      var parentHostContextDev = parentHostContext;\n      var _namespace = (0, _DOMNamespaces.getChildNamespace)(parentHostContextDev.namespace, type);\n      var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type, null);\n      return { namespace: _namespace, ancestorInfo: _ancestorInfo2 };\n    }\n    var parentNamespace = parentHostContext;\n    return (0, _DOMNamespaces.getChildNamespace)(parentNamespace, type);\n  },\n  getPublicInstance: function getPublicInstance(instance) {\n    return instance;\n  },\n  prepareForCommit: function prepareForCommit() {\n    eventsEnabled = ReactBrowserEventEmitter.isEnabled();\n    selectionInformation = ReactInputSelection.getSelectionInformation();\n    ReactBrowserEventEmitter.setEnabled(false);\n  },\n  resetAfterCommit: function resetAfterCommit() {\n    ReactInputSelection.restoreSelection(selectionInformation);\n    selectionInformation = null;\n    ReactBrowserEventEmitter.setEnabled(eventsEnabled);\n    eventsEnabled = null;\n  },\n  createInstance: function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n    var parentNamespace = void 0;\n    if (__DEV__) {\n      // TODO: take namespace into account when validating.\n      var hostContextDev = hostContext;\n      (0, _validateDOMNesting2.default)(type, null, hostContextDev.ancestorInfo);\n      if (typeof props.children === 'string' || typeof props.children === 'number') {\n        var string = '' + props.children;\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);\n        (0, _validateDOMNesting2.default)(null, string, ownAncestorInfo);\n      }\n      parentNamespace = hostContextDev.namespace;\n    } else {\n      parentNamespace = hostContext;\n    }\n    var domElement = createElement(type, props, rootContainerInstance, parentNamespace);\n    precacheFiberNode(internalInstanceHandle, domElement);\n    updateFiberProps(domElement, props);\n    return domElement;\n  },\n  appendInitialChild: function appendInitialChild(parentInstance, child) {\n    parentInstance.appendChild(child);\n  },\n  finalizeInitialChildren: function finalizeInitialChildren(domElement, type, props, rootContainerInstance) {\n    setInitialProperties(domElement, type, props, rootContainerInstance);\n    return shouldAutoFocusHostComponent(type, props);\n  },\n  prepareUpdate: function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {\n    if (__DEV__) {\n      var hostContextDev = hostContext;\n      if (_typeof(newProps.children) !== _typeof(oldProps.children) && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {\n        var string = '' + newProps.children;\n        var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type, null);\n        (0, _validateDOMNesting2.default)(null, string, ownAncestorInfo);\n      }\n    }\n    return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);\n  },\n  shouldSetTextContent: function shouldSetTextContent(type, props) {\n    return type === 'textarea' || typeof props.children === 'string' || typeof props.children === 'number' || _typeof(props.dangerouslySetInnerHTML) === 'object' && props.dangerouslySetInnerHTML !== null && typeof props.dangerouslySetInnerHTML.__html === 'string';\n  },\n  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree(type, props) {\n    return !!props.hidden;\n  },\n  createTextInstance: function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {\n    if (__DEV__) {\n      var hostContextDev = hostContext;\n      (0, _validateDOMNesting2.default)(null, text, hostContextDev.ancestorInfo);\n    }\n    var textNode = createTextNode(text, rootContainerInstance);\n    precacheFiberNode(internalInstanceHandle, textNode);\n    return textNode;\n  },\n\n\n  now: ReactDOMFrameScheduling.now,\n\n  mutation: {\n    commitMount: function commitMount(domElement, type, newProps, internalInstanceHandle) {\n      // Despite the naming that might imply otherwise, this method only\n      // fires if there is an `Update` effect scheduled during mounting.\n      // This happens if `finalizeInitialChildren` returns `true` (which it\n      // does to implement the `autoFocus` attribute on the client). But\n      // there are also other cases when this might happen (such as patching\n      // up text content during hydration mismatch). So we'll check this again.\n      if (shouldAutoFocusHostComponent(type, newProps)) {\n        domElement.focus();\n      }\n    },\n    commitUpdate: function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {\n      // Update the props handle so that we know which props are the ones with\n      // with current event handlers.\n      updateFiberProps(domElement, newProps);\n      // Apply the diff to the DOM node.\n      updateProperties(domElement, updatePayload, type, oldProps, newProps);\n    },\n    resetTextContent: function resetTextContent(domElement) {\n      (0, _setTextContent2.default)(domElement, '');\n    },\n    commitTextUpdate: function commitTextUpdate(textInstance, oldText, newText) {\n      textInstance.nodeValue = newText;\n    },\n    appendChild: function appendChild(parentInstance, child) {\n      parentInstance.appendChild(child);\n    },\n    appendChildToContainer: function appendChildToContainer(container, child) {\n      if (container.nodeType === _HTMLNodeType.COMMENT_NODE) {\n        container.parentNode.insertBefore(child, container);\n      } else {\n        container.appendChild(child);\n      }\n    },\n    insertBefore: function insertBefore(parentInstance, child, beforeChild) {\n      parentInstance.insertBefore(child, beforeChild);\n    },\n    insertInContainerBefore: function insertInContainerBefore(container, child, beforeChild) {\n      if (container.nodeType === _HTMLNodeType.COMMENT_NODE) {\n        container.parentNode.insertBefore(child, beforeChild);\n      } else {\n        container.insertBefore(child, beforeChild);\n      }\n    },\n    removeChild: function removeChild(parentInstance, child) {\n      parentInstance.removeChild(child);\n    },\n    removeChildFromContainer: function removeChildFromContainer(container, child) {\n      if (container.nodeType === _HTMLNodeType.COMMENT_NODE) {\n        container.parentNode.removeChild(child);\n      } else {\n        container.removeChild(child);\n      }\n    }\n  },\n\n  hydration: {\n    canHydrateInstance: function canHydrateInstance(instance, type, props) {\n      if (instance.nodeType !== _HTMLNodeType.ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {\n        return null;\n      }\n      // This has now been refined to an element node.\n      return instance;\n    },\n    canHydrateTextInstance: function canHydrateTextInstance(instance, text) {\n      if (text === '' || instance.nodeType !== _HTMLNodeType.TEXT_NODE) {\n        // Empty strings are not parsed by HTML so there won't be a correct match here.\n        return null;\n      }\n      // This has now been refined to a text node.\n      return instance;\n    },\n    getNextHydratableSibling: function getNextHydratableSibling(instance) {\n      var node = instance.nextSibling;\n      // Skip non-hydratable nodes.\n      while (node && node.nodeType !== _HTMLNodeType.ELEMENT_NODE && node.nodeType !== _HTMLNodeType.TEXT_NODE) {\n        node = node.nextSibling;\n      }\n      return node;\n    },\n    getFirstHydratableChild: function getFirstHydratableChild(parentInstance) {\n      var next = parentInstance.firstChild;\n      // Skip non-hydratable nodes.\n      while (next && next.nodeType !== _HTMLNodeType.ELEMENT_NODE && next.nodeType !== _HTMLNodeType.TEXT_NODE) {\n        next = next.nextSibling;\n      }\n      return next;\n    },\n    hydrateInstance: function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {\n      precacheFiberNode(internalInstanceHandle, instance);\n      // TODO: Possibly defer this until the commit phase where all the events\n      // get attached.\n      updateFiberProps(instance, props);\n      var parentNamespace = void 0;\n      if (__DEV__) {\n        var hostContextDev = hostContext;\n        parentNamespace = hostContextDev.namespace;\n      } else {\n        parentNamespace = hostContext;\n      }\n      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);\n    },\n    hydrateTextInstance: function hydrateTextInstance(textInstance, text, internalInstanceHandle) {\n      precacheFiberNode(internalInstanceHandle, textInstance);\n      return diffHydratedText(textInstance, text);\n    },\n    didNotMatchHydratedContainerTextInstance: function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {\n      if (__DEV__) {\n        warnForUnmatchedText(textInstance, text);\n      }\n    },\n    didNotMatchHydratedTextInstance: function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {\n      if (__DEV__ && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForUnmatchedText(textInstance, text);\n      }\n    },\n    didNotHydrateContainerInstance: function didNotHydrateContainerInstance(parentContainer, instance) {\n      if (__DEV__) {\n        if (instance.nodeType === 1) {\n          warnForDeletedHydratableElement(parentContainer, instance);\n        } else {\n          warnForDeletedHydratableText(parentContainer, instance);\n        }\n      }\n    },\n    didNotHydrateInstance: function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {\n      if (__DEV__ && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        if (instance.nodeType === 1) {\n          warnForDeletedHydratableElement(parentInstance, instance);\n        } else {\n          warnForDeletedHydratableText(parentInstance, instance);\n        }\n      }\n    },\n    didNotFindHydratableContainerInstance: function didNotFindHydratableContainerInstance(parentContainer, type, props) {\n      if (__DEV__) {\n        warnForInsertedHydratedElement(parentContainer, type, props);\n      }\n    },\n    didNotFindHydratableContainerTextInstance: function didNotFindHydratableContainerTextInstance(parentContainer, text) {\n      if (__DEV__) {\n        warnForInsertedHydratedText(parentContainer, text);\n      }\n    },\n    didNotFindHydratableInstance: function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {\n      if (__DEV__ && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForInsertedHydratedElement(parentInstance, type, props);\n      }\n    },\n    didNotFindHydratableTextInstance: function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {\n      if (__DEV__ && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {\n        warnForInsertedHydratedText(parentInstance, text);\n      }\n    }\n  },\n\n  scheduleDeferredCallback: ReactDOMFrameScheduling.rIC,\n  cancelDeferredCallback: ReactDOMFrameScheduling.cIC\n});\n\nReactGenericBatching.injection.injectRenderer(DOMRenderer);\n\nvar warnedAboutHydrateAPI = false;\n\nfunction legacyCreateRootFromDOMContainer(container, forceHydrate) {\n  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container);\n  // First clear any existing content.\n  if (!shouldHydrate) {\n    var warned = false;\n    var rootSibling = void 0;\n    while (rootSibling = container.lastChild) {\n      if (__DEV__) {\n        if (!warned && rootSibling.nodeType === _HTMLNodeType.ELEMENT_NODE && rootSibling.hasAttribute(_DOMProperty.ROOT_ATTRIBUTE_NAME)) {\n          warned = true;\n          (0, _warning2.default)(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');\n        }\n      }\n      container.removeChild(rootSibling);\n    }\n  }\n  if (__DEV__) {\n    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {\n      warnedAboutHydrateAPI = true;\n      (0, _lowPriorityWarning2.default)(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');\n    }\n  }\n  // Legacy roots are not async by default.\n  var isAsync = false;\n  return new ReactRoot(container, isAsync, shouldHydrate);\n}\n\nfunction legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {\n  // TODO: Ensure all entry points contain this check\n  (0, _invariant2.default)(isValidContainer(container), 'Target container is not a DOM element.');\n\n  if (__DEV__) {\n    topLevelUpdateWarnings(container);\n  }\n\n  // TODO: Without `any` type, Flow says \"Property cannot be accessed on any\n  // member of intersection type.\" Whyyyyyy.\n  var root = container._reactRootContainer;\n  if (!root) {\n    // Initial mount\n    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);\n    if (typeof callback === 'function') {\n      var originalCallback = callback;\n      callback = function callback() {\n        var instance = DOMRenderer.getPublicRootInstance(root._internalRoot);\n        originalCallback.call(instance);\n      };\n    }\n    // Initial mount should not be batched.\n    DOMRenderer.unbatchedUpdates(function () {\n      if (parentComponent != null) {\n        root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);\n      } else {\n        root.render(children, callback);\n      }\n    });\n  } else {\n    if (typeof callback === 'function') {\n      var _originalCallback = callback;\n      callback = function callback() {\n        var instance = DOMRenderer.getPublicRootInstance(root._internalRoot);\n        _originalCallback.call(instance);\n      };\n    }\n    // Update\n    if (parentComponent != null) {\n      root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);\n    } else {\n      root.render(children, callback);\n    }\n  }\n  return DOMRenderer.getPublicRootInstance(root._internalRoot);\n}\n\nfunction createPortal(children, container) {\n  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  (0, _invariant2.default)(isValidContainer(container), 'Target container is not a DOM element.');\n  // TODO: pass ReactDOM portal implementation as third argument\n  return ReactPortal.createPortal(children, container, null, key);\n}\n\nvar ReactDOM = {\n  createPortal: createPortal,\n\n  findDOMNode: function findDOMNode(componentOrElement) {\n    if (__DEV__) {\n      var owner = _ReactGlobalSharedState.ReactCurrentOwner.current;\n      if (owner !== null && owner.stateNode !== null) {\n        var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;\n        (0, _warning2.default)(warnedAboutRefsInRender, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', (0, _getComponentName2.default)(owner) || 'A component');\n        owner.stateNode._warnedAboutRefsInRender = true;\n      }\n    }\n    if (componentOrElement == null) {\n      return null;\n    }\n    if (componentOrElement.nodeType === _HTMLNodeType.ELEMENT_NODE) {\n      return componentOrElement;\n    }\n\n    var inst = ReactInstanceMap.get(componentOrElement);\n    if (inst) {\n      return DOMRenderer.findHostInstance(inst);\n    }\n\n    if (typeof componentOrElement.render === 'function') {\n      (0, _invariant2.default)(false, 'Unable to find node on an unmounted component.');\n    } else {\n      (0, _invariant2.default)(false, 'Element appears to be neither ReactComponent nor DOMNode. Keys: %s', Object.keys(componentOrElement));\n    }\n  },\n  hydrate: function hydrate(element, container, callback) {\n    // TODO: throw or warn if we couldn't hydrate?\n    return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);\n  },\n  render: function render(element, container, callback) {\n    return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);\n  },\n  unstable_renderSubtreeIntoContainer: function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {\n    (0, _invariant2.default)(parentComponent != null && ReactInstanceMap.has(parentComponent), 'parentComponent must be a valid React Component');\n    return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);\n  },\n  unmountComponentAtNode: function unmountComponentAtNode(container) {\n    (0, _invariant2.default)(isValidContainer(container), 'unmountComponentAtNode(...): Target container is not a DOM element.');\n\n    if (container._reactRootContainer) {\n      if (__DEV__) {\n        var rootEl = getReactRootElementInContainer(container);\n        var renderedByDifferentReact = rootEl && !ReactDOMComponentTree.getInstanceFromNode(rootEl);\n        (0, _warning2.default)(!renderedByDifferentReact, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by another copy of React.');\n      }\n\n      // Unmount should not be batched.\n      DOMRenderer.unbatchedUpdates(function () {\n        legacyRenderSubtreeIntoContainer(null, null, container, false, function () {\n          container._reactRootContainer = null;\n        });\n      });\n      // If you call unmountComponentAtNode twice in quick succession, you'll\n      // get `true` twice. That's probably fine?\n      return true;\n    } else {\n      if (__DEV__) {\n        var _rootEl = getReactRootElementInContainer(container);\n        var hasNonRootReactChild = !!(_rootEl && ReactDOMComponentTree.getInstanceFromNode(_rootEl));\n\n        // Check if the container itself is a React root node.\n        var isContainerReactRoot = container.nodeType === 1 && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;\n\n        (0, _warning2.default)(!hasNonRootReactChild, \"unmountComponentAtNode(): The node you're attempting to unmount \" + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');\n      }\n\n      return false;\n    }\n  },\n\n\n  // Temporary alias since we already shipped React 16 RC with it.\n  // TODO: remove in React 17.\n  unstable_createPortal: function unstable_createPortal() {\n    if (!didWarnAboutUnstableCreatePortal) {\n      didWarnAboutUnstableCreatePortal = true;\n      (0, _lowPriorityWarning2.default)(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the \"unstable_\" prefix.');\n    }\n    return createPortal.apply(undefined, arguments);\n  },\n\n\n  unstable_batchedUpdates: DOMRenderer.batchedUpdates,\n\n  unstable_deferredUpdates: DOMRenderer.deferredUpdates,\n\n  flushSync: DOMRenderer.flushSync,\n\n  unstable_flushControlled: DOMRenderer.flushControlled,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    // For TapEventPlugin which is popular in open source\n    EventPluginHub: EventPluginHub,\n    // Used by test-utils\n    EventPluginRegistry: EventPluginRegistry,\n    EventPropagators: EventPropagators,\n    ReactControlledComponent: ReactControlledComponent,\n    ReactDOMComponentTree: ReactDOMComponentTree,\n    ReactDOMEventListener: ReactDOMEventListener\n  }\n};\n\nReactDOM.unstable_createRoot = function createRoot(container, options) {\n  var hydrate = options != null && options.hydrate === true;\n  return new ReactRoot(container, true, hydrate);\n};\n\nvar foundDevTools = DOMRenderer.injectIntoDevTools({\n  findFiberByHostInstance: ReactDOMComponentTree.getClosestInstanceFromNode,\n  bundleType: __DEV__ ? 1 : 0,\n  version: _ReactVersion2.default,\n  rendererPackageName: 'react-dom'\n});\n\nif (__DEV__) {\n  if (!foundDevTools && _ExecutionEnvironment2.default.canUseDOM && window.top === window.self) {\n    // If we're in Chrome or Firefox, provide a download link if not installed.\n    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {\n      var protocol = window.location.protocol;\n      // Don't warn in exotic cases like chrome-extension://.\n      if (/^(https?|file):$/.test(protocol)) {\n        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');\n      }\n    }\n  }\n}\n\nexports.default = ReactDOM;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nvar _EventPluginHub = require('events/EventPluginHub');\n\nvar EventPluginHub = _interopRequireWildcard(_EventPluginHub);\n\nvar _EventPluginUtils = require('events/EventPluginUtils');\n\nvar EventPluginUtils = _interopRequireWildcard(_EventPluginUtils);\n\nvar _ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar ReactDOMComponentTree = _interopRequireWildcard(_ReactDOMComponentTree);\n\nvar _BeforeInputEventPlugin = require('../events/BeforeInputEventPlugin');\n\nvar _BeforeInputEventPlugin2 = _interopRequireDefault(_BeforeInputEventPlugin);\n\nvar _ChangeEventPlugin = require('../events/ChangeEventPlugin');\n\nvar _ChangeEventPlugin2 = _interopRequireDefault(_ChangeEventPlugin);\n\nvar _DOMEventPluginOrder = require('../events/DOMEventPluginOrder');\n\nvar _DOMEventPluginOrder2 = _interopRequireDefault(_DOMEventPluginOrder);\n\nvar _EnterLeaveEventPlugin = require('../events/EnterLeaveEventPlugin');\n\nvar _EnterLeaveEventPlugin2 = _interopRequireDefault(_EnterLeaveEventPlugin);\n\nvar _SelectEventPlugin = require('../events/SelectEventPlugin');\n\nvar _SelectEventPlugin2 = _interopRequireDefault(_SelectEventPlugin);\n\nvar _SimpleEventPlugin = require('../events/SimpleEventPlugin');\n\nvar _SimpleEventPlugin2 = _interopRequireDefault(_SimpleEventPlugin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Inject modules for resolving DOM hierarchy and plugin ordering.\n */\nEventPluginHub.injection.injectEventPluginOrder(_DOMEventPluginOrder2.default); /**\n                                                                                 * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                 *\n                                                                                 * This source code is licensed under the MIT license found in the\n                                                                                 * LICENSE file in the root directory of this source tree.\n                                                                                 */\n\nEventPluginUtils.injection.injectComponentTree(ReactDOMComponentTree);\n\n/**\n * Some important event plugins included by default (without having to require\n * them).\n */\nEventPluginHub.injection.injectEventPluginsByName({\n  SimpleEventPlugin: _SimpleEventPlugin2.default,\n  EnterLeaveEventPlugin: _EnterLeaveEventPlugin2.default,\n  ChangeEventPlugin: _ChangeEventPlugin2.default,\n  SelectEventPlugin: _SelectEventPlugin2.default,\n  BeforeInputEventPlugin: _BeforeInputEventPlugin2.default\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9SZWFjdERPTUNsaWVudEluamVjdGlvbi5qcyJdLCJuYW1lcyI6WyJFdmVudFBsdWdpbkh1YiIsIkV2ZW50UGx1Z2luVXRpbHMiLCJSZWFjdERPTUNvbXBvbmVudFRyZWUiLCJpbmplY3Rpb24iLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiRE9NRXZlbnRQbHVnaW5PcmRlciIsImluamVjdENvbXBvbmVudFRyZWUiLCJpbmplY3RFdmVudFBsdWdpbnNCeU5hbWUiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIl0sIm1hcHBpbmdzIjoiOztBQU9BOztJQUFZQSxjOztBQUNaOztJQUFZQyxnQjs7QUFFWjs7SUFBWUMscUI7O0FBQ1o7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBOzs7QUFHQUYsZUFBZUcsU0FBZixDQUF5QkMsc0JBQXpCLENBQWdEQyw2QkFBaEQsRSxDQXJCQTs7Ozs7OztBQXNCQUosaUJBQWlCRSxTQUFqQixDQUEyQkcsbUJBQTNCLENBQStDSixxQkFBL0M7O0FBRUE7Ozs7QUFJQUYsZUFBZUcsU0FBZixDQUF5Qkksd0JBQXpCLENBQWtEO0FBQ2hEQyxxQkFBbUJBLDJCQUQ2QjtBQUVoREMseUJBQXVCQSwrQkFGeUI7QUFHaERDLHFCQUFtQkEsMkJBSDZCO0FBSWhEQyxxQkFBbUJBLDJCQUo2QjtBQUtoREMsMEJBQXdCQTtBQUx3QixDQUFsRCIsImZpbGUiOiJSZWFjdERPTUNsaWVudEluamVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCAqIGFzIEV2ZW50UGx1Z2luSHViIGZyb20gJ2V2ZW50cy9FdmVudFBsdWdpbkh1Yic7XG5pbXBvcnQgKiBhcyBFdmVudFBsdWdpblV0aWxzIGZyb20gJ2V2ZW50cy9FdmVudFBsdWdpblV0aWxzJztcblxuaW1wb3J0ICogYXMgUmVhY3RET01Db21wb25lbnRUcmVlIGZyb20gJy4vUmVhY3RET01Db21wb25lbnRUcmVlJztcbmltcG9ydCBCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIGZyb20gJy4uL2V2ZW50cy9CZWZvcmVJbnB1dEV2ZW50UGx1Z2luJztcbmltcG9ydCBDaGFuZ2VFdmVudFBsdWdpbiBmcm9tICcuLi9ldmVudHMvQ2hhbmdlRXZlbnRQbHVnaW4nO1xuaW1wb3J0IERPTUV2ZW50UGx1Z2luT3JkZXIgZnJvbSAnLi4vZXZlbnRzL0RPTUV2ZW50UGx1Z2luT3JkZXInO1xuaW1wb3J0IEVudGVyTGVhdmVFdmVudFBsdWdpbiBmcm9tICcuLi9ldmVudHMvRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJztcbmltcG9ydCBTZWxlY3RFdmVudFBsdWdpbiBmcm9tICcuLi9ldmVudHMvU2VsZWN0RXZlbnRQbHVnaW4nO1xuaW1wb3J0IFNpbXBsZUV2ZW50UGx1Z2luIGZyb20gJy4uL2V2ZW50cy9TaW1wbGVFdmVudFBsdWdpbic7XG5cbi8qKlxuICogSW5qZWN0IG1vZHVsZXMgZm9yIHJlc29sdmluZyBET00gaGllcmFyY2h5IGFuZCBwbHVnaW4gb3JkZXJpbmcuXG4gKi9cbkV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbk9yZGVyKERPTUV2ZW50UGx1Z2luT3JkZXIpO1xuRXZlbnRQbHVnaW5VdGlscy5pbmplY3Rpb24uaW5qZWN0Q29tcG9uZW50VHJlZShSZWFjdERPTUNvbXBvbmVudFRyZWUpO1xuXG4vKipcbiAqIFNvbWUgaW1wb3J0YW50IGV2ZW50IHBsdWdpbnMgaW5jbHVkZWQgYnkgZGVmYXVsdCAod2l0aG91dCBoYXZpbmcgdG8gcmVxdWlyZVxuICogdGhlbSkuXG4gKi9cbkV2ZW50UGx1Z2luSHViLmluamVjdGlvbi5pbmplY3RFdmVudFBsdWdpbnNCeU5hbWUoe1xuICBTaW1wbGVFdmVudFBsdWdpbjogU2ltcGxlRXZlbnRQbHVnaW4sXG4gIEVudGVyTGVhdmVFdmVudFBsdWdpbjogRW50ZXJMZWF2ZUV2ZW50UGx1Z2luLFxuICBDaGFuZ2VFdmVudFBsdWdpbjogQ2hhbmdlRXZlbnRQbHVnaW4sXG4gIFNlbGVjdEV2ZW50UGx1Z2luOiBTZWxlY3RFdmVudFBsdWdpbixcbiAgQmVmb3JlSW5wdXRFdmVudFBsdWdpbjogQmVmb3JlSW5wdXRFdmVudFBsdWdpbixcbn0pO1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.precacheFiberNode = precacheFiberNode;\nexports.getClosestInstanceFromNode = getClosestInstanceFromNode;\nexports.getInstanceFromNode = getInstanceFromNode;\nexports.getNodeFromInstance = getNodeFromInstance;\nexports.getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNode;\nexports.updateFiberProps = updateFiberProps;\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar randomKey = Math.random().toString(36).slice(2);\nvar internalInstanceKey = '__reactInternalInstance$' + randomKey;\nvar internalEventHandlersKey = '__reactEventHandlers$' + randomKey;\n\nfunction precacheFiberNode(hostInst, node) {\n  node[internalInstanceKey] = hostInst;\n}\n\n/**\n * Given a DOM node, return the closest ReactDOMComponent or\n * ReactDOMTextComponent instance ancestor.\n */\nfunction getClosestInstanceFromNode(node) {\n  if (node[internalInstanceKey]) {\n    return node[internalInstanceKey];\n  }\n\n  while (!node[internalInstanceKey]) {\n    if (node.parentNode) {\n      node = node.parentNode;\n    } else {\n      // Top of the tree. This node must not be part of a React tree (or is\n      // unmounted, potentially).\n      return null;\n    }\n  }\n\n  var inst = node[internalInstanceKey];\n  if (inst.tag === _ReactTypeOfWork.HostComponent || inst.tag === _ReactTypeOfWork.HostText) {\n    // In Fiber, this will always be the deepest root.\n    return inst;\n  }\n\n  return null;\n}\n\n/**\n * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent\n * instance, or null if the node was not rendered by this React.\n */\nfunction getInstanceFromNode(node) {\n  var inst = node[internalInstanceKey];\n  if (inst) {\n    if (inst.tag === _ReactTypeOfWork.HostComponent || inst.tag === _ReactTypeOfWork.HostText) {\n      return inst;\n    } else {\n      return null;\n    }\n  }\n  return null;\n}\n\n/**\n * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding\n * DOM node.\n */\nfunction getNodeFromInstance(inst) {\n  if (inst.tag === _ReactTypeOfWork.HostComponent || inst.tag === _ReactTypeOfWork.HostText) {\n    // In Fiber this, is just the state node right now. We assume it will be\n    // a host component or host text.\n    return inst.stateNode;\n  }\n\n  // Without this first invariant, passing a non-DOM-component triggers the next\n  // invariant for a missing parent, which is super confusing.\n  (0, _invariant2.default)(false, 'getNodeFromInstance: Invalid argument.');\n}\n\nfunction getFiberCurrentPropsFromNode(node) {\n  return node[internalEventHandlersKey] || null;\n}\n\nfunction updateFiberProps(node, props) {\n  node[internalEventHandlersKey] = props;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9SZWFjdERPTUNvbXBvbmVudFRyZWUuanMiXSwibmFtZXMiOlsicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJyYW5kb21LZXkiLCJNYXRoIiwicmFuZG9tIiwidG9TdHJpbmciLCJzbGljZSIsImludGVybmFsSW5zdGFuY2VLZXkiLCJpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXkiLCJob3N0SW5zdCIsIm5vZGUiLCJwYXJlbnROb2RlIiwiaW5zdCIsInRhZyIsIkhvc3RDb21wb25lbnQiLCJIb3N0VGV4dCIsInN0YXRlTm9kZSIsInByb3BzIl0sIm1hcHBpbmdzIjoiOzs7OztRQWdCZ0JBLGlCLEdBQUFBLGlCO1FBUUFDLDBCLEdBQUFBLDBCO1FBNEJBQyxtQixHQUFBQSxtQjtRQWdCQUMsbUIsR0FBQUEsbUI7UUFZQUMsNEIsR0FBQUEsNEI7UUFJQUMsZ0IsR0FBQUEsZ0I7O0FBN0VoQjs7QUFDQTs7Ozs7O0FBUkE7Ozs7Ozs7QUFVQSxJQUFNQyxZQUFZQyxLQUFLQyxNQUFMLEdBQ2ZDLFFBRGUsQ0FDTixFQURNLEVBRWZDLEtBRmUsQ0FFVCxDQUZTLENBQWxCO0FBR0EsSUFBTUMsc0JBQXNCLDZCQUE2QkwsU0FBekQ7QUFDQSxJQUFNTSwyQkFBMkIsMEJBQTBCTixTQUEzRDs7QUFFTyxTQUFTTixpQkFBVCxDQUEyQmEsUUFBM0IsRUFBcUNDLElBQXJDLEVBQTJDO0FBQ2hEQSxPQUFLSCxtQkFBTCxJQUE0QkUsUUFBNUI7QUFDRDs7QUFFRDs7OztBQUlPLFNBQVNaLDBCQUFULENBQW9DYSxJQUFwQyxFQUEwQztBQUMvQyxNQUFJQSxLQUFLSCxtQkFBTCxDQUFKLEVBQStCO0FBQzdCLFdBQU9HLEtBQUtILG1CQUFMLENBQVA7QUFDRDs7QUFFRCxTQUFPLENBQUNHLEtBQUtILG1CQUFMLENBQVIsRUFBbUM7QUFDakMsUUFBSUcsS0FBS0MsVUFBVCxFQUFxQjtBQUNuQkQsYUFBT0EsS0FBS0MsVUFBWjtBQUNELEtBRkQsTUFFTztBQUNMO0FBQ0E7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUNGOztBQUVELE1BQUlDLE9BQU9GLEtBQUtILG1CQUFMLENBQVg7QUFDQSxNQUFJSyxLQUFLQyxHQUFMLEtBQWFDLDhCQUFiLElBQThCRixLQUFLQyxHQUFMLEtBQWFFLHlCQUEvQyxFQUF5RDtBQUN2RDtBQUNBLFdBQU9ILElBQVA7QUFDRDs7QUFFRCxTQUFPLElBQVA7QUFDRDs7QUFFRDs7OztBQUlPLFNBQVNkLG1CQUFULENBQTZCWSxJQUE3QixFQUFtQztBQUN4QyxNQUFNRSxPQUFPRixLQUFLSCxtQkFBTCxDQUFiO0FBQ0EsTUFBSUssSUFBSixFQUFVO0FBQ1IsUUFBSUEsS0FBS0MsR0FBTCxLQUFhQyw4QkFBYixJQUE4QkYsS0FBS0MsR0FBTCxLQUFhRSx5QkFBL0MsRUFBeUQ7QUFDdkQsYUFBT0gsSUFBUDtBQUNELEtBRkQsTUFFTztBQUNMLGFBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFDRCxTQUFPLElBQVA7QUFDRDs7QUFFRDs7OztBQUlPLFNBQVNiLG1CQUFULENBQTZCYSxJQUE3QixFQUFtQztBQUN4QyxNQUFJQSxLQUFLQyxHQUFMLEtBQWFDLDhCQUFiLElBQThCRixLQUFLQyxHQUFMLEtBQWFFLHlCQUEvQyxFQUF5RDtBQUN2RDtBQUNBO0FBQ0EsV0FBT0gsS0FBS0ksU0FBWjtBQUNEOztBQUVEO0FBQ0E7QUFDQSwyQkFBVSxLQUFWLEVBQWlCLHdDQUFqQjtBQUNEOztBQUVNLFNBQVNoQiw0QkFBVCxDQUFzQ1UsSUFBdEMsRUFBNEM7QUFDakQsU0FBT0EsS0FBS0Ysd0JBQUwsS0FBa0MsSUFBekM7QUFDRDs7QUFFTSxTQUFTUCxnQkFBVCxDQUEwQlMsSUFBMUIsRUFBZ0NPLEtBQWhDLEVBQXVDO0FBQzVDUCxPQUFLRix3QkFBTCxJQUFpQ1MsS0FBakM7QUFDRCIsImZpbGUiOiJSZWFjdERPTUNvbXBvbmVudFRyZWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge0hvc3RDb21wb25lbnQsIEhvc3RUZXh0fSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlT2ZXb3JrJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnZmJqcy9saWIvaW52YXJpYW50JztcblxuY29uc3QgcmFuZG9tS2V5ID0gTWF0aC5yYW5kb20oKVxuICAudG9TdHJpbmcoMzYpXG4gIC5zbGljZSgyKTtcbmNvbnN0IGludGVybmFsSW5zdGFuY2VLZXkgPSAnX19yZWFjdEludGVybmFsSW5zdGFuY2UkJyArIHJhbmRvbUtleTtcbmNvbnN0IGludGVybmFsRXZlbnRIYW5kbGVyc0tleSA9ICdfX3JlYWN0RXZlbnRIYW5kbGVycyQnICsgcmFuZG9tS2V5O1xuXG5leHBvcnQgZnVuY3Rpb24gcHJlY2FjaGVGaWJlck5vZGUoaG9zdEluc3QsIG5vZGUpIHtcbiAgbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSA9IGhvc3RJbnN0O1xufVxuXG4vKipcbiAqIEdpdmVuIGEgRE9NIG5vZGUsIHJldHVybiB0aGUgY2xvc2VzdCBSZWFjdERPTUNvbXBvbmVudCBvclxuICogUmVhY3RET01UZXh0Q29tcG9uZW50IGluc3RhbmNlIGFuY2VzdG9yLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Q2xvc2VzdEluc3RhbmNlRnJvbU5vZGUobm9kZSkge1xuICBpZiAobm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XSkge1xuICAgIHJldHVybiBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICB9XG5cbiAgd2hpbGUgKCFub2RlW2ludGVybmFsSW5zdGFuY2VLZXldKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVG9wIG9mIHRoZSB0cmVlLiBUaGlzIG5vZGUgbXVzdCBub3QgYmUgcGFydCBvZiBhIFJlYWN0IHRyZWUgKG9yIGlzXG4gICAgICAvLyB1bm1vdW50ZWQsIHBvdGVudGlhbGx5KS5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIGxldCBpbnN0ID0gbm9kZVtpbnRlcm5hbEluc3RhbmNlS2V5XTtcbiAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgIC8vIEluIEZpYmVyLCB0aGlzIHdpbGwgYWx3YXlzIGJlIHRoZSBkZWVwZXN0IHJvb3QuXG4gICAgcmV0dXJuIGluc3Q7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBHaXZlbiBhIERPTSBub2RlLCByZXR1cm4gdGhlIFJlYWN0RE9NQ29tcG9uZW50IG9yIFJlYWN0RE9NVGV4dENvbXBvbmVudFxuICogaW5zdGFuY2UsIG9yIG51bGwgaWYgdGhlIG5vZGUgd2FzIG5vdCByZW5kZXJlZCBieSB0aGlzIFJlYWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW5zdGFuY2VGcm9tTm9kZShub2RlKSB7XG4gIGNvbnN0IGluc3QgPSBub2RlW2ludGVybmFsSW5zdGFuY2VLZXldO1xuICBpZiAoaW5zdCkge1xuICAgIGlmIChpbnN0LnRhZyA9PT0gSG9zdENvbXBvbmVudCB8fCBpbnN0LnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIHJldHVybiBpbnN0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbi8qKlxuICogR2l2ZW4gYSBSZWFjdERPTUNvbXBvbmVudCBvciBSZWFjdERPTVRleHRDb21wb25lbnQsIHJldHVybiB0aGUgY29ycmVzcG9uZGluZ1xuICogRE9NIG5vZGUuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROb2RlRnJvbUluc3RhbmNlKGluc3QpIHtcbiAgaWYgKGluc3QudGFnID09PSBIb3N0Q29tcG9uZW50IHx8IGluc3QudGFnID09PSBIb3N0VGV4dCkge1xuICAgIC8vIEluIEZpYmVyIHRoaXMsIGlzIGp1c3QgdGhlIHN0YXRlIG5vZGUgcmlnaHQgbm93LiBXZSBhc3N1bWUgaXQgd2lsbCBiZVxuICAgIC8vIGEgaG9zdCBjb21wb25lbnQgb3IgaG9zdCB0ZXh0LlxuICAgIHJldHVybiBpbnN0LnN0YXRlTm9kZTtcbiAgfVxuXG4gIC8vIFdpdGhvdXQgdGhpcyBmaXJzdCBpbnZhcmlhbnQsIHBhc3NpbmcgYSBub24tRE9NLWNvbXBvbmVudCB0cmlnZ2VycyB0aGUgbmV4dFxuICAvLyBpbnZhcmlhbnQgZm9yIGEgbWlzc2luZyBwYXJlbnQsIHdoaWNoIGlzIHN1cGVyIGNvbmZ1c2luZy5cbiAgaW52YXJpYW50KGZhbHNlLCAnZ2V0Tm9kZUZyb21JbnN0YW5jZTogSW52YWxpZCBhcmd1bWVudC4nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGUobm9kZSkge1xuICByZXR1cm4gbm9kZVtpbnRlcm5hbEV2ZW50SGFuZGxlcnNLZXldIHx8IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1cGRhdGVGaWJlclByb3BzKG5vZGUsIHByb3BzKSB7XG4gIG5vZGVbaW50ZXJuYWxFdmVudEhhbmRsZXJzS2V5XSA9IHByb3BzO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\n\nexports.createElement = createElement;\nexports.createTextNode = createTextNode;\nexports.setInitialProperties = setInitialProperties;\nexports.diffProperties = diffProperties;\nexports.updateProperties = updateProperties;\nexports.diffHydratedProperties = diffHydratedProperties;\nexports.diffHydratedText = diffHydratedText;\nexports.warnForUnmatchedText = warnForUnmatchedText;\nexports.warnForDeletedHydratableElement = warnForDeletedHydratableElement;\nexports.warnForDeletedHydratableText = warnForDeletedHydratableText;\nexports.warnForInsertedHydratedElement = warnForInsertedHydratedElement;\nexports.warnForInsertedHydratedText = warnForInsertedHydratedText;\nexports.restoreControlledState = restoreControlledState;\n\nvar _ReactDebugCurrentFiber = require('react-reconciler/src/ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _EventPluginRegistry = require('events/EventPluginRegistry');\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _DOMPropertyOperations = require('./DOMPropertyOperations');\n\nvar DOMPropertyOperations = _interopRequireWildcard(_DOMPropertyOperations);\n\nvar _ReactDOMFiberInput = require('./ReactDOMFiberInput');\n\nvar ReactDOMFiberInput = _interopRequireWildcard(_ReactDOMFiberInput);\n\nvar _ReactDOMFiberOption = require('./ReactDOMFiberOption');\n\nvar ReactDOMFiberOption = _interopRequireWildcard(_ReactDOMFiberOption);\n\nvar _ReactDOMFiberSelect = require('./ReactDOMFiberSelect');\n\nvar ReactDOMFiberSelect = _interopRequireWildcard(_ReactDOMFiberSelect);\n\nvar _ReactDOMFiberTextarea = require('./ReactDOMFiberTextarea');\n\nvar ReactDOMFiberTextarea = _interopRequireWildcard(_ReactDOMFiberTextarea);\n\nvar _inputValueTracking = require('./inputValueTracking');\n\nvar inputValueTracking = _interopRequireWildcard(_inputValueTracking);\n\nvar _setInnerHTML = require('./setInnerHTML');\n\nvar _setInnerHTML2 = _interopRequireDefault(_setInnerHTML);\n\nvar _setTextContent = require('./setTextContent');\n\nvar _setTextContent2 = _interopRequireDefault(_setTextContent);\n\nvar _ReactBrowserEventEmitter = require('../events/ReactBrowserEventEmitter');\n\nvar _BrowserEventConstants = require('../events/BrowserEventConstants');\n\nvar _CSSPropertyOperations = require('../shared/CSSPropertyOperations');\n\nvar CSSPropertyOperations = _interopRequireWildcard(_CSSPropertyOperations);\n\nvar _DOMNamespaces = require('../shared/DOMNamespaces');\n\nvar _DOMProperty = require('../shared/DOMProperty');\n\nvar _assertValidProps = require('../shared/assertValidProps');\n\nvar _assertValidProps2 = _interopRequireDefault(_assertValidProps);\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\nvar _isCustomComponent = require('../shared/isCustomComponent');\n\nvar _isCustomComponent2 = _interopRequireDefault(_isCustomComponent);\n\nvar _possibleStandardNames = require('../shared/possibleStandardNames');\n\nvar _possibleStandardNames2 = _interopRequireDefault(_possibleStandardNames);\n\nvar _ReactDOMInvalidARIAHook = require('../shared/ReactDOMInvalidARIAHook');\n\nvar _ReactDOMNullInputValuePropHook = require('../shared/ReactDOMNullInputValuePropHook');\n\nvar _ReactDOMUnknownPropertyHook = require('../shared/ReactDOMUnknownPropertyHook');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberOwnerName = _ReactDebugCurrentFiber2.default.getCurrentFiberOwnerName,\n    getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum;\n\nvar didWarnInvalidHydration = false;\nvar didWarnShadyDOM = false;\n\nvar DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';\nvar SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';\nvar SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';\nvar AUTOFOCUS = 'autoFocus';\nvar CHILDREN = 'children';\nvar STYLE = 'style';\nvar HTML = '__html';\n\nvar HTML_NAMESPACE = _DOMNamespaces.Namespaces.html;\n\n\nvar getStack = _emptyFunction2.default.thatReturns('');\n\nvar warnedUnknownTags = void 0;\nvar suppressHydrationWarning = void 0;\n\nvar validatePropertiesInDevelopment = void 0;\nvar warnForTextDifference = void 0;\nvar warnForPropDifference = void 0;\nvar warnForExtraAttributes = void 0;\nvar warnForInvalidEventListener = void 0;\n\nvar normalizeMarkupForTextOrAttribute = void 0;\nvar normalizeHTML = void 0;\n\nif (__DEV__) {\n  getStack = getCurrentFiberStackAddendum;\n\n  warnedUnknownTags = {\n    // Chrome is the only major browser not shipping <time>. But as of July\n    // 2017 it intends to ship it due to widespread usage. We intentionally\n    // *don't* warn for <time> even if it's unrecognized by Chrome because\n    // it soon will be, and many apps have been using it anyway.\n    time: true,\n    // There are working polyfills for <dialog>. Let people use it.\n    dialog: true\n  };\n\n  validatePropertiesInDevelopment = function validatePropertiesInDevelopment(type, props) {\n    (0, _ReactDOMInvalidARIAHook.validateProperties)(type, props);\n    (0, _ReactDOMNullInputValuePropHook.validateProperties)(type, props);\n    (0, _ReactDOMUnknownPropertyHook.validateProperties)(type, props, /* canUseEventSystem */true);\n  };\n\n  // HTML parsing normalizes CR and CRLF to LF.\n  // It also can turn \\u0000 into \\uFFFD inside attributes.\n  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream\n  // If we have a mismatch, it might be caused by that.\n  // We will still patch up in this case but not fire the warning.\n  var NORMALIZE_NEWLINES_REGEX = /\\r\\n?/g;\n  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\\u0000|\\uFFFD/g;\n\n  normalizeMarkupForTextOrAttribute = function normalizeMarkupForTextOrAttribute(markup) {\n    var markupString = typeof markup === 'string' ? markup : '' + markup;\n    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');\n  };\n\n  warnForTextDifference = function warnForTextDifference(serverText, clientText) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);\n    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);\n    if (normalizedServerText === normalizedClientText) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Text content did not match. Server: \"%s\" Client: \"%s\"', normalizedServerText, normalizedClientText);\n  };\n\n  warnForPropDifference = function warnForPropDifference(propName, serverValue, clientValue) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);\n    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);\n    if (normalizedServerValue === normalizedClientValue) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));\n  };\n\n  warnForExtraAttributes = function warnForExtraAttributes(attributeNames) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    var names = [];\n    attributeNames.forEach(function (name) {\n      names.push(name);\n    });\n    (0, _warning2.default)(false, 'Extra attributes from the server: %s', names);\n  };\n\n  warnForInvalidEventListener = function warnForInvalidEventListener(registrationName, listener) {\n    if (listener === false) {\n      (0, _warning2.default)(false, 'Expected `%s` listener to be a function, instead got `false`.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', registrationName, registrationName, registrationName, getCurrentFiberStackAddendum());\n    } else {\n      (0, _warning2.default)(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.%s', registrationName, typeof listener === 'undefined' ? 'undefined' : _typeof(listener), getCurrentFiberStackAddendum());\n    }\n  };\n\n  // Parse the HTML and read it back to normalize the HTML string so that it\n  // can be used for comparison.\n  normalizeHTML = function normalizeHTML(parent, html) {\n    // We could have created a separate document here to avoid\n    // re-initializing custom elements if they exist. But this breaks\n    // how <noscript> is being handled. So we use the same document.\n    // See the discussion in https://github.com/facebook/react/pull/11157.\n    var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);\n    testElement.innerHTML = html;\n    return testElement.innerHTML;\n  };\n}\n\nfunction ensureListeningTo(rootContainerElement, registrationName) {\n  var isDocumentOrFragment = rootContainerElement.nodeType === _HTMLNodeType.DOCUMENT_NODE || rootContainerElement.nodeType === _HTMLNodeType.DOCUMENT_FRAGMENT_NODE;\n  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;\n  (0, _ReactBrowserEventEmitter.listenTo)(registrationName, doc);\n}\n\nfunction getOwnerDocumentFromRootContainer(rootContainerElement) {\n  return rootContainerElement.nodeType === _HTMLNodeType.DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;\n}\n\nfunction trapClickOnNonInteractiveElement(node) {\n  // Mobile Safari does not fire properly bubble click events on\n  // non-interactive elements, which means delegated click listeners do not\n  // fire. The workaround for this bug involves attaching an empty click\n  // listener on the target node.\n  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n  // Just set it using the onclick property so that we don't have to manage any\n  // bookkeeping for it. Not sure if we need to clear it when the listener is\n  // removed.\n  // TODO: Only do this for the relevant Safaris maybe?\n  node.onclick = _emptyFunction2.default;\n}\n\nfunction setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {\n  for (var propKey in nextProps) {\n    if (!nextProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n    var nextProp = nextProps[propKey];\n    if (propKey === STYLE) {\n      if (__DEV__) {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      }\n      // Relies on `updateStylesByID` not mutating `styleUpdates`.\n      CSSPropertyOperations.setValueForStyles(domElement, nextProp, getStack);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML] : undefined;\n      if (nextHtml != null) {\n        (0, _setInnerHTML2.default)(domElement, nextHtml);\n      }\n    } else if (propKey === CHILDREN) {\n      if (typeof nextProp === 'string') {\n        // Avoid setting initial textContent when the text is empty. In IE11 setting\n        // textContent on a <textarea> will cause the placeholder to not\n        // show within the <textarea> until it has been focused and blurred again.\n        // https://github.com/facebook/react/issues/6731#issuecomment-254874553\n        var canSetTextContent = tag !== 'textarea' || nextProp !== '';\n        if (canSetTextContent) {\n          (0, _setTextContent2.default)(domElement, nextProp);\n        }\n      } else if (typeof nextProp === 'number') {\n        (0, _setTextContent2.default)(domElement, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) {\n      // Noop\n    } else if (propKey === AUTOFOCUS) {\n      // We polyfill it separately on the client during commit.\n      // We blacklist it here rather than in the property list because we emit it in SSR.\n    } else if (_EventPluginRegistry.registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if (__DEV__ && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n    } else if (nextProp != null) {\n      DOMPropertyOperations.setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);\n    }\n  }\n}\n\nfunction updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {\n  // TODO: Handle wasCustomComponentTag\n  for (var i = 0; i < updatePayload.length; i += 2) {\n    var propKey = updatePayload[i];\n    var propValue = updatePayload[i + 1];\n    if (propKey === STYLE) {\n      CSSPropertyOperations.setValueForStyles(domElement, propValue, getStack);\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      (0, _setInnerHTML2.default)(domElement, propValue);\n    } else if (propKey === CHILDREN) {\n      (0, _setTextContent2.default)(domElement, propValue);\n    } else {\n      DOMPropertyOperations.setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);\n    }\n  }\n}\n\nfunction createElement(type, props, rootContainerElement, parentNamespace) {\n  var isCustomComponentTag = void 0;\n\n  // We create tags in the namespace of their parent container, except HTML\n  // tags get no namespace.\n  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);\n  var domElement = void 0;\n  var namespaceURI = parentNamespace;\n  if (namespaceURI === HTML_NAMESPACE) {\n    namespaceURI = (0, _DOMNamespaces.getIntrinsicNamespace)(type);\n  }\n  if (namespaceURI === HTML_NAMESPACE) {\n    if (__DEV__) {\n      isCustomComponentTag = (0, _isCustomComponent2.default)(type, props);\n      // Should this check be gated by parent namespace? Not sure we want to\n      // allow <SVG> or <mATH>.\n      (0, _warning2.default)(isCustomComponentTag || type === type.toLowerCase(), '<%s /> is using uppercase HTML. Always use lowercase HTML tags ' + 'in React.', type);\n    }\n\n    if (type === 'script') {\n      // Create the script via .innerHTML so its \"parser-inserted\" flag is\n      // set to true and it does not execute\n      var div = ownerDocument.createElement('div');\n      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line\n      // This is guaranteed to yield a script element.\n      var firstChild = div.firstChild;\n      domElement = div.removeChild(firstChild);\n    } else if (typeof props.is === 'string') {\n      // $FlowIssue `createElement` should be updated for Web Components\n      domElement = ownerDocument.createElement(type, { is: props.is });\n    } else {\n      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.\n      // See discussion in https://github.com/facebook/react/pull/6896\n      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240\n      domElement = ownerDocument.createElement(type);\n    }\n  } else {\n    domElement = ownerDocument.createElementNS(namespaceURI, type);\n  }\n\n  if (__DEV__) {\n    if (namespaceURI === HTML_NAMESPACE) {\n      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {\n        warnedUnknownTags[type] = true;\n        (0, _warning2.default)(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);\n      }\n    }\n  }\n\n  return domElement;\n}\n\nfunction createTextNode(text, rootContainerElement) {\n  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);\n}\n\nfunction setInitialProperties(domElement, tag, rawProps, rootContainerElement) {\n  var isCustomComponentTag = (0, _isCustomComponent2.default)(tag, rawProps);\n  if (__DEV__) {\n    validatePropertiesInDevelopment(tag, rawProps);\n    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {\n      (0, _warning2.default)(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');\n      didWarnShadyDOM = true;\n    }\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n  var props = void 0;\n  switch (tag) {\n    case 'iframe':\n    case 'object':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topLoad', 'load', domElement);\n      props = rawProps;\n      break;\n    case 'video':\n    case 'audio':\n      // Create listener for each media event\n      for (var event in _BrowserEventConstants.mediaEventTypes) {\n        if (_BrowserEventConstants.mediaEventTypes.hasOwnProperty(event)) {\n          (0, _ReactBrowserEventEmitter.trapBubbledEvent)(event, _BrowserEventConstants.mediaEventTypes[event], domElement);\n        }\n      }\n      props = rawProps;\n      break;\n    case 'source':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topError', 'error', domElement);\n      props = rawProps;\n      break;\n    case 'img':\n    case 'image':\n    case 'link':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topError', 'error', domElement);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topLoad', 'load', domElement);\n      props = rawProps;\n      break;\n    case 'form':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topReset', 'reset', domElement);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topSubmit', 'submit', domElement);\n      props = rawProps;\n      break;\n    case 'details':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topToggle', 'toggle', domElement);\n      props = rawProps;\n      break;\n    case 'input':\n      ReactDOMFiberInput.initWrapperState(domElement, rawProps);\n      props = ReactDOMFiberInput.getHostProps(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'option':\n      ReactDOMFiberOption.validateProps(domElement, rawProps);\n      props = ReactDOMFiberOption.getHostProps(domElement, rawProps);\n      break;\n    case 'select':\n      ReactDOMFiberSelect.initWrapperState(domElement, rawProps);\n      props = ReactDOMFiberSelect.getHostProps(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'textarea':\n      ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);\n      props = ReactDOMFiberTextarea.getHostProps(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    default:\n      props = rawProps;\n  }\n\n  (0, _assertValidProps2.default)(tag, props, getStack);\n\n  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      inputValueTracking.track(domElement);\n      ReactDOMFiberInput.postMountWrapper(domElement, rawProps);\n      break;\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      inputValueTracking.track(domElement);\n      ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);\n      break;\n    case 'option':\n      ReactDOMFiberOption.postMountWrapper(domElement, rawProps);\n      break;\n    case 'select':\n      ReactDOMFiberSelect.postMountWrapper(domElement, rawProps);\n      break;\n    default:\n      if (typeof props.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n}\n\n// Calculate the diff between the two objects.\nfunction diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {\n  if (__DEV__) {\n    validatePropertiesInDevelopment(tag, nextRawProps);\n  }\n\n  var updatePayload = null;\n\n  var lastProps = void 0;\n  var nextProps = void 0;\n  switch (tag) {\n    case 'input':\n      lastProps = ReactDOMFiberInput.getHostProps(domElement, lastRawProps);\n      nextProps = ReactDOMFiberInput.getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'option':\n      lastProps = ReactDOMFiberOption.getHostProps(domElement, lastRawProps);\n      nextProps = ReactDOMFiberOption.getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'select':\n      lastProps = ReactDOMFiberSelect.getHostProps(domElement, lastRawProps);\n      nextProps = ReactDOMFiberSelect.getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    case 'textarea':\n      lastProps = ReactDOMFiberTextarea.getHostProps(domElement, lastRawProps);\n      nextProps = ReactDOMFiberTextarea.getHostProps(domElement, nextRawProps);\n      updatePayload = [];\n      break;\n    default:\n      lastProps = lastRawProps;\n      nextProps = nextRawProps;\n      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n\n  (0, _assertValidProps2.default)(tag, nextProps, getStack);\n\n  var propKey = void 0;\n  var styleName = void 0;\n  var styleUpdates = null;\n  for (propKey in lastProps) {\n    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {\n      continue;\n    }\n    if (propKey === STYLE) {\n      var lastStyle = lastProps[propKey];\n      for (styleName in lastStyle) {\n        if (lastStyle.hasOwnProperty(styleName)) {\n          if (!styleUpdates) {\n            styleUpdates = {};\n          }\n          styleUpdates[styleName] = '';\n        }\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {\n      // Noop. This is handled by the clear text mechanism.\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) {\n      // Noop\n    } else if (propKey === AUTOFOCUS) {\n      // Noop. It doesn't work on updates anyway.\n    } else if (_EventPluginRegistry.registrationNameModules.hasOwnProperty(propKey)) {\n      // This is a special case. If any listener updates we need to ensure\n      // that the \"current\" fiber pointer gets updated so we need a commit\n      // to update this element.\n      if (!updatePayload) {\n        updatePayload = [];\n      }\n    } else {\n      // For all other deleted properties we add it to the queue. We use\n      // the whitelist in the commit phase instead.\n      (updatePayload = updatePayload || []).push(propKey, null);\n    }\n  }\n  for (propKey in nextProps) {\n    var nextProp = nextProps[propKey];\n    var lastProp = lastProps != null ? lastProps[propKey] : undefined;\n    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {\n      continue;\n    }\n    if (propKey === STYLE) {\n      if (__DEV__) {\n        if (nextProp) {\n          // Freeze the next style object so that we can assume it won't be\n          // mutated. We have already warned for this in the past.\n          Object.freeze(nextProp);\n        }\n      }\n      if (lastProp) {\n        // Unset styles on `lastProp` but not on `nextProp`.\n        for (styleName in lastProp) {\n          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n            styleUpdates[styleName] = '';\n          }\n        }\n        // Update styles that changed since `lastProp`.\n        for (styleName in nextProp) {\n          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {\n            if (!styleUpdates) {\n              styleUpdates = {};\n            }\n            styleUpdates[styleName] = nextProp[styleName];\n          }\n        }\n      } else {\n        // Relies on `updateStylesByID` not mutating `styleUpdates`.\n        if (!styleUpdates) {\n          if (!updatePayload) {\n            updatePayload = [];\n          }\n          updatePayload.push(propKey, styleUpdates);\n        }\n        styleUpdates = nextProp;\n      }\n    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n      var nextHtml = nextProp ? nextProp[HTML] : undefined;\n      var lastHtml = lastProp ? lastProp[HTML] : undefined;\n      if (nextHtml != null) {\n        if (lastHtml !== nextHtml) {\n          (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);\n        }\n      } else {\n        // TODO: It might be too late to clear this if we have children\n        // inserted already.\n      }\n    } else if (propKey === CHILDREN) {\n      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {\n        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);\n      }\n    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) {\n      // Noop\n    } else if (_EventPluginRegistry.registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        // We eagerly listen to this even though we haven't committed yet.\n        if (__DEV__ && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n      if (!updatePayload && lastProp !== nextProp) {\n        // This is a special case. If any listener updates we need to ensure\n        // that the \"current\" props pointer gets updated so we need a commit\n        // to update this element.\n        updatePayload = [];\n      }\n    } else {\n      // For any other property we always add it to the queue and then we\n      // filter it out using the whitelist during the commit.\n      (updatePayload = updatePayload || []).push(propKey, nextProp);\n    }\n  }\n  if (styleUpdates) {\n    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);\n  }\n  return updatePayload;\n}\n\n// Apply the diff.\nfunction updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {\n  // Update checked *before* name.\n  // In the middle of an update, it is possible to have multiple checked.\n  // When a checked radio tries to change name, browser makes another radio's checked false.\n  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {\n    ReactDOMFiberInput.updateChecked(domElement, nextRawProps);\n  }\n\n  var wasCustomComponentTag = (0, _isCustomComponent2.default)(tag, lastRawProps);\n  var isCustomComponentTag = (0, _isCustomComponent2.default)(tag, nextRawProps);\n  // Apply the diff.\n  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);\n\n  // TODO: Ensure that an update gets scheduled if any of the special props\n  // changed.\n  switch (tag) {\n    case 'input':\n      // Update the wrapper around inputs *after* updating props. This has to\n      // happen after `updateDOMProperties`. Otherwise HTML5 input validations\n      // raise warnings and prevent the new value from being assigned.\n      ReactDOMFiberInput.updateWrapper(domElement, nextRawProps);\n      break;\n    case 'textarea':\n      ReactDOMFiberTextarea.updateWrapper(domElement, nextRawProps);\n      break;\n    case 'select':\n      // <select> value update needs to occur after <option> children\n      // reconciliation\n      ReactDOMFiberSelect.postUpdateWrapper(domElement, nextRawProps);\n      break;\n  }\n}\n\nfunction getPossibleStandardName(propName) {\n  if (__DEV__) {\n    var lowerCasedName = propName.toLowerCase();\n    if (!_possibleStandardNames2.default.hasOwnProperty(lowerCasedName)) {\n      return null;\n    }\n    return _possibleStandardNames2.default[lowerCasedName] || null;\n  }\n  return null;\n}\n\nfunction diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {\n  var isCustomComponentTag = void 0;\n  var extraAttributeNames = void 0;\n\n  if (__DEV__) {\n    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;\n    isCustomComponentTag = (0, _isCustomComponent2.default)(tag, rawProps);\n    validatePropertiesInDevelopment(tag, rawProps);\n    if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {\n      (0, _warning2.default)(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerName() || 'A component');\n      didWarnShadyDOM = true;\n    }\n  }\n\n  // TODO: Make sure that we check isMounted before firing any of these events.\n  switch (tag) {\n    case 'iframe':\n    case 'object':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topLoad', 'load', domElement);\n      break;\n    case 'video':\n    case 'audio':\n      // Create listener for each media event\n      for (var event in _BrowserEventConstants.mediaEventTypes) {\n        if (_BrowserEventConstants.mediaEventTypes.hasOwnProperty(event)) {\n          (0, _ReactBrowserEventEmitter.trapBubbledEvent)(event, _BrowserEventConstants.mediaEventTypes[event], domElement);\n        }\n      }\n      break;\n    case 'source':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topError', 'error', domElement);\n      break;\n    case 'img':\n    case 'image':\n    case 'link':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topError', 'error', domElement);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topLoad', 'load', domElement);\n      break;\n    case 'form':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topReset', 'reset', domElement);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topSubmit', 'submit', domElement);\n      break;\n    case 'details':\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topToggle', 'toggle', domElement);\n      break;\n    case 'input':\n      ReactDOMFiberInput.initWrapperState(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'option':\n      ReactDOMFiberOption.validateProps(domElement, rawProps);\n      break;\n    case 'select':\n      ReactDOMFiberSelect.initWrapperState(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n    case 'textarea':\n      ReactDOMFiberTextarea.initWrapperState(domElement, rawProps);\n      (0, _ReactBrowserEventEmitter.trapBubbledEvent)('topInvalid', 'invalid', domElement);\n      // For controlled components we always need to ensure we're listening\n      // to onChange. Even if there is no listener.\n      ensureListeningTo(rootContainerElement, 'onChange');\n      break;\n  }\n\n  (0, _assertValidProps2.default)(tag, rawProps, getStack);\n\n  if (__DEV__) {\n    extraAttributeNames = new Set();\n    var attributes = domElement.attributes;\n    for (var i = 0; i < attributes.length; i++) {\n      var name = attributes[i].name.toLowerCase();\n      switch (name) {\n        // Built-in SSR attribute is whitelisted\n        case 'data-reactroot':\n          break;\n        // Controlled attributes are not validated\n        // TODO: Only ignore them on controlled tags.\n        case 'value':\n          break;\n        case 'checked':\n          break;\n        case 'selected':\n          break;\n        default:\n          // Intentionally use the original name.\n          // See discussion in https://github.com/facebook/react/pull/10676.\n          extraAttributeNames.add(attributes[i].name);\n      }\n    }\n  }\n\n  var updatePayload = null;\n  for (var propKey in rawProps) {\n    if (!rawProps.hasOwnProperty(propKey)) {\n      continue;\n    }\n    var nextProp = rawProps[propKey];\n    if (propKey === CHILDREN) {\n      // For text content children we compare against textContent. This\n      // might match additional HTML that is hidden when we read it using\n      // textContent. E.g. \"foo\" will match \"f<span>oo</span>\" but that still\n      // satisfies our requirement. Our requirement is not to produce perfect\n      // HTML and attributes. Ideally we should preserve structure but it's\n      // ok not to if the visible content is still enough to indicate what\n      // even listeners these nodes might be wired up to.\n      // TODO: Warn if there is more than a single textNode as a child.\n      // TODO: Should we use domElement.firstChild.nodeValue to compare?\n      if (typeof nextProp === 'string') {\n        if (domElement.textContent !== nextProp) {\n          if (__DEV__ && !suppressHydrationWarning) {\n            warnForTextDifference(domElement.textContent, nextProp);\n          }\n          updatePayload = [CHILDREN, nextProp];\n        }\n      } else if (typeof nextProp === 'number') {\n        if (domElement.textContent !== '' + nextProp) {\n          if (__DEV__ && !suppressHydrationWarning) {\n            warnForTextDifference(domElement.textContent, nextProp);\n          }\n          updatePayload = [CHILDREN, '' + nextProp];\n        }\n      }\n    } else if (_EventPluginRegistry.registrationNameModules.hasOwnProperty(propKey)) {\n      if (nextProp != null) {\n        if (__DEV__ && typeof nextProp !== 'function') {\n          warnForInvalidEventListener(propKey, nextProp);\n        }\n        ensureListeningTo(rootContainerElement, propKey);\n      }\n    } else if (__DEV__ &&\n    // Convince Flow we've calculated it (it's DEV-only in this method.)\n    typeof isCustomComponentTag === 'boolean') {\n      // Validate that the properties correspond to their expected values.\n      var serverValue = void 0;\n      var propertyInfo = (0, _DOMProperty.getPropertyInfo)(propKey);\n      if (suppressHydrationWarning) {\n        // Don't bother comparing. We're ignoring all these warnings.\n      } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING ||\n      // Controlled attributes are not validated\n      // TODO: Only ignore them on controlled tags.\n      propKey === 'value' || propKey === 'checked' || propKey === 'selected') {\n        // Noop\n      } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {\n        var rawHtml = nextProp ? nextProp[HTML] || '' : '';\n        var serverHTML = domElement.innerHTML;\n        var expectedHTML = normalizeHTML(domElement, rawHtml);\n        if (expectedHTML !== serverHTML) {\n          warnForPropDifference(propKey, serverHTML, expectedHTML);\n        }\n      } else if (propKey === STYLE) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames.delete(propKey);\n        var expectedStyle = CSSPropertyOperations.createDangerousStringForStyles(nextProp);\n        serverValue = domElement.getAttribute('style');\n        if (expectedStyle !== serverValue) {\n          warnForPropDifference(propKey, serverValue, expectedStyle);\n        }\n      } else if (isCustomComponentTag) {\n        // $FlowFixMe - Should be inferred as not undefined.\n        extraAttributeNames.delete(propKey.toLowerCase());\n        serverValue = DOMPropertyOperations.getValueForAttribute(domElement, propKey, nextProp);\n\n        if (nextProp !== serverValue) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      } else if (!(0, _DOMProperty.shouldIgnoreAttribute)(propKey, propertyInfo, isCustomComponentTag) && !(0, _DOMProperty.shouldRemoveAttribute)(propKey, nextProp, propertyInfo, isCustomComponentTag)) {\n        var isMismatchDueToBadCasing = false;\n        if (propertyInfo !== null) {\n          // $FlowFixMe - Should be inferred as not undefined.\n          extraAttributeNames.delete(propertyInfo.attributeName);\n          serverValue = DOMPropertyOperations.getValueForProperty(domElement, propKey, nextProp, propertyInfo);\n        } else {\n          var ownNamespace = parentNamespace;\n          if (ownNamespace === HTML_NAMESPACE) {\n            ownNamespace = (0, _DOMNamespaces.getIntrinsicNamespace)(tag);\n          }\n          if (ownNamespace === HTML_NAMESPACE) {\n            // $FlowFixMe - Should be inferred as not undefined.\n            extraAttributeNames.delete(propKey.toLowerCase());\n          } else {\n            var standardName = getPossibleStandardName(propKey);\n            if (standardName !== null && standardName !== propKey) {\n              // If an SVG prop is supplied with bad casing, it will\n              // be successfully parsed from HTML, but will produce a mismatch\n              // (and would be incorrectly rendered on the client).\n              // However, we already warn about bad casing elsewhere.\n              // So we'll skip the misleading extra mismatch warning in this case.\n              isMismatchDueToBadCasing = true;\n              // $FlowFixMe - Should be inferred as not undefined.\n              extraAttributeNames.delete(standardName);\n            }\n            // $FlowFixMe - Should be inferred as not undefined.\n            extraAttributeNames.delete(propKey);\n          }\n          serverValue = DOMPropertyOperations.getValueForAttribute(domElement, propKey, nextProp);\n        }\n\n        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {\n          warnForPropDifference(propKey, serverValue, nextProp);\n        }\n      }\n    }\n  }\n\n  if (__DEV__) {\n    // $FlowFixMe - Should be inferred as not undefined.\n    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {\n      // $FlowFixMe - Should be inferred as not undefined.\n      warnForExtraAttributes(extraAttributeNames);\n    }\n  }\n\n  switch (tag) {\n    case 'input':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      inputValueTracking.track(domElement);\n      ReactDOMFiberInput.postMountWrapper(domElement, rawProps);\n      break;\n    case 'textarea':\n      // TODO: Make sure we check if this is still unmounted or do any clean\n      // up necessary since we never stop tracking anymore.\n      inputValueTracking.track(domElement);\n      ReactDOMFiberTextarea.postMountWrapper(domElement, rawProps);\n      break;\n    case 'select':\n    case 'option':\n      // For input and textarea we current always set the value property at\n      // post mount to force it to diverge from attributes. However, for\n      // option and select we don't quite do the same thing and select\n      // is not resilient to the DOM state changing so we don't do that here.\n      // TODO: Consider not doing this for input and textarea.\n      break;\n    default:\n      if (typeof rawProps.onClick === 'function') {\n        // TODO: This cast may not be sound for SVG, MathML or custom elements.\n        trapClickOnNonInteractiveElement(domElement);\n      }\n      break;\n  }\n\n  return updatePayload;\n}\n\nfunction diffHydratedText(textNode, text) {\n  var isDifferent = textNode.nodeValue !== text;\n  return isDifferent;\n}\n\nfunction warnForUnmatchedText(textNode, text) {\n  if (__DEV__) {\n    warnForTextDifference(textNode.nodeValue, text);\n  }\n}\n\nfunction warnForDeletedHydratableElement(parentNode, child) {\n  if (__DEV__) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForDeletedHydratableText(parentNode, child) {\n  if (__DEV__) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Did not expect server HTML to contain the text node \"%s\" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForInsertedHydratedElement(parentNode, tag, props) {\n  if (__DEV__) {\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction warnForInsertedHydratedText(parentNode, text) {\n  if (__DEV__) {\n    if (text === '') {\n      // We expect to insert empty text nodes since they're not represented in\n      // the HTML.\n      // TODO: Remove this special case if we can just avoid inserting empty\n      // text nodes.\n      return;\n    }\n    if (didWarnInvalidHydration) {\n      return;\n    }\n    didWarnInvalidHydration = true;\n    (0, _warning2.default)(false, 'Expected server HTML to contain a matching text node for \"%s\" in <%s>.', text, parentNode.nodeName.toLowerCase());\n  }\n}\n\nfunction restoreControlledState(domElement, tag, props) {\n  switch (tag) {\n    case 'input':\n      ReactDOMFiberInput.restoreControlledState(domElement, props);\n      return;\n    case 'textarea':\n      ReactDOMFiberTextarea.restoreControlledState(domElement, props);\n      return;\n    case 'select':\n      ReactDOMFiberSelect.restoreControlledState(domElement, props);\n      return;\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\n\nexports.getHostProps = getHostProps;\nexports.initWrapperState = initWrapperState;\nexports.updateChecked = updateChecked;\nexports.updateWrapper = updateWrapper;\nexports.postMountWrapper = postMountWrapper;\nexports.restoreControlledState = restoreControlledState;\nexports.setDefaultValue = setDefaultValue;\n\nvar _ReactDebugCurrentFiber = require('react-reconciler/src/ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _DOMPropertyOperations = require('./DOMPropertyOperations');\n\nvar DOMPropertyOperations = _interopRequireWildcard(_DOMPropertyOperations);\n\nvar _ReactDOMComponentTree = require('./ReactDOMComponentTree');\n\nvar _ReactControlledValuePropTypes = require('../shared/ReactControlledValuePropTypes');\n\nvar _ReactControlledValuePropTypes2 = _interopRequireDefault(_ReactControlledValuePropTypes);\n\nvar _inputValueTracking = require('./inputValueTracking');\n\nvar inputValueTracking = _interopRequireWildcard(_inputValueTracking);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberOwnerName = _ReactDebugCurrentFiber2.default.getCurrentFiberOwnerName,\n    getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum;\n\nvar didWarnValueDefaultValue = false;\nvar didWarnCheckedDefaultChecked = false;\nvar didWarnControlledToUncontrolled = false;\nvar didWarnUncontrolledToControlled = false;\n\nfunction isControlled(props) {\n  var usesChecked = props.type === 'checkbox' || props.type === 'radio';\n  return usesChecked ? props.checked != null : props.value != null;\n}\n\n/**\n * Implements an <input> host component that allows setting these optional\n * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.\n *\n * If `checked` or `value` are not supplied (or null/undefined), user actions\n * that affect the checked state or value will trigger updates to the element.\n *\n * If they are supplied (and not null/undefined), the rendered element will not\n * trigger updates to the element. Instead, the props must change in order for\n * the rendered element to be updated.\n *\n * The rendered element will be initialized as unchecked (or `defaultChecked`)\n * with an empty value (or `defaultValue`).\n *\n * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html\n */\n\nfunction getHostProps(element, props) {\n  var node = element;\n  var checked = props.checked;\n\n  var hostProps = Object.assign({}, props, {\n    defaultChecked: undefined,\n    defaultValue: undefined,\n    value: undefined,\n    checked: checked != null ? checked : node._wrapperState.initialChecked\n  });\n\n  return hostProps;\n}\n\nfunction initWrapperState(element, props) {\n  if (__DEV__) {\n    _ReactControlledValuePropTypes2.default.checkPropTypes('input', props, getCurrentFiberStackAddendum);\n\n    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {\n      (0, _warning2.default)(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);\n      didWarnCheckedDefaultChecked = true;\n    }\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      (0, _warning2.default)(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerName() || 'A component', props.type);\n      didWarnValueDefaultValue = true;\n    }\n  }\n\n  var node = element;\n  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;\n\n  node._wrapperState = {\n    initialChecked: props.checked != null ? props.checked : props.defaultChecked,\n    initialValue: getSafeValue(props.value != null ? props.value : defaultValue),\n    controlled: isControlled(props)\n  };\n}\n\nfunction updateChecked(element, props) {\n  var node = element;\n  var checked = props.checked;\n  if (checked != null) {\n    DOMPropertyOperations.setValueForProperty(node, 'checked', checked, false);\n  }\n}\n\nfunction updateWrapper(element, props) {\n  var node = element;\n  if (__DEV__) {\n    var _controlled = isControlled(props);\n\n    if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {\n      (0, _warning2.default)(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());\n      didWarnUncontrolledToControlled = true;\n    }\n    if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {\n      (0, _warning2.default)(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components%s', props.type, getCurrentFiberStackAddendum());\n      didWarnControlledToUncontrolled = true;\n    }\n  }\n\n  updateChecked(element, props);\n\n  var value = getSafeValue(props.value);\n\n  if (value != null) {\n    if (props.type === 'number') {\n      if (value === 0 && node.value === '' ||\n      // eslint-disable-next-line\n      node.value != value) {\n        node.value = '' + value;\n      }\n    } else if (node.value !== '' + value) {\n      node.value = '' + value;\n    }\n  }\n\n  if (props.hasOwnProperty('value')) {\n    setDefaultValue(node, props.type, value);\n  } else if (props.hasOwnProperty('defaultValue')) {\n    setDefaultValue(node, props.type, getSafeValue(props.defaultValue));\n  }\n\n  if (props.checked == null && props.defaultChecked != null) {\n    node.defaultChecked = !!props.defaultChecked;\n  }\n}\n\nfunction postMountWrapper(element, props) {\n  var node = element;\n\n  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {\n    // Do not assign value if it is already set. This prevents user text input\n    // from being lost during SSR hydration.\n    if (node.value === '') {\n      node.value = '' + node._wrapperState.initialValue;\n    }\n\n    // value must be assigned before defaultValue. This fixes an issue where the\n    // visually displayed value of date inputs disappears on mobile Safari and Chrome:\n    // https://github.com/facebook/react/issues/7233\n    node.defaultValue = '' + node._wrapperState.initialValue;\n  }\n\n  // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug\n  // this is needed to work around a chrome bug where setting defaultChecked\n  // will sometimes influence the value of checked (even after detachment).\n  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416\n  // We need to temporarily unset name to avoid disrupting radio button groups.\n  var name = node.name;\n  if (name !== '') {\n    node.name = '';\n  }\n  node.defaultChecked = !node.defaultChecked;\n  node.defaultChecked = !node.defaultChecked;\n  if (name !== '') {\n    node.name = name;\n  }\n}\n\nfunction restoreControlledState(element, props) {\n  var node = element;\n  updateWrapper(node, props);\n  updateNamedCousins(node, props);\n}\n\nfunction updateNamedCousins(rootNode, props) {\n  var name = props.name;\n  if (props.type === 'radio' && name != null) {\n    var queryRoot = rootNode;\n\n    while (queryRoot.parentNode) {\n      queryRoot = queryRoot.parentNode;\n    }\n\n    // If `rootNode.form` was non-null, then we could try `form.elements`,\n    // but that sometimes behaves strangely in IE8. We could also try using\n    // `form.getElementsByName`, but that will only return direct children\n    // and won't include inputs that use the HTML5 `form=` attribute. Since\n    // the input might not even be in a form. It might not even be in the\n    // document. Let's just use the local `querySelectorAll` to ensure we don't\n    // miss anything.\n    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type=\"radio\"]');\n\n    for (var i = 0; i < group.length; i++) {\n      var otherNode = group[i];\n      if (otherNode === rootNode || otherNode.form !== rootNode.form) {\n        continue;\n      }\n      // This will throw if radio buttons rendered by different copies of React\n      // and the same name are rendered into the same form (same as #1939).\n      // That's probably okay; we don't support it just as we don't support\n      // mixing React radio buttons with non-React ones.\n      var otherProps = (0, _ReactDOMComponentTree.getFiberCurrentPropsFromNode)(otherNode);\n      (0, _invariant2.default)(otherProps, 'ReactDOMInput: Mixing React and non-React radio inputs with the ' + 'same `name` is not supported.');\n\n      // We need update the tracked value on the named cousin since the value\n      // was changed but the input saw no event or value set\n      inputValueTracking.updateValueIfChanged(otherNode);\n\n      // If this is a controlled radio button group, forcing the input that\n      // was previously checked to update will cause it to be come re-checked\n      // as appropriate.\n      updateWrapper(otherNode, otherProps);\n    }\n  }\n}\n\n// In Chrome, assigning defaultValue to certain input types triggers input validation.\n// For number inputs, the display value loses trailing decimal points. For email inputs,\n// Chrome raises \"The specified value <x> is not a valid email address\".\n//\n// Here we check to see if the defaultValue has actually changed, avoiding these problems\n// when the user is inputting text\n//\n// https://github.com/facebook/react/issues/7253\nfunction setDefaultValue(node, type, value) {\n  if (\n  // Focused number inputs synchronize on blur. See ChangeEventPlugin.js\n  type !== 'number' || node.ownerDocument.activeElement !== node) {\n    if (value == null) {\n      node.defaultValue = '' + node._wrapperState.initialValue;\n    } else if (node.defaultValue !== '' + value) {\n      node.defaultValue = '' + value;\n    }\n  }\n}\n\nfunction getSafeValue(value) {\n  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n    case 'boolean':\n    case 'number':\n    case 'object':\n    case 'string':\n    case 'undefined':\n      return value;\n    default:\n      // function, symbol are assigned as empty strings\n      return '';\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * \n                                                                                                                                                                                                                                                                   */\n\nexports.validateProps = validateProps;\nexports.postMountWrapper = postMountWrapper;\nexports.getHostProps = getHostProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar didWarnSelectedSetOnOption = false;\n\nfunction flattenChildren(children) {\n  var content = '';\n\n  // Flatten children and warn if they aren't strings or numbers;\n  // invalid types are ignored.\n  // We can silently skip them because invalid DOM nesting warning\n  // catches these cases in Fiber.\n  _react2.default.Children.forEach(children, function (child) {\n    if (child == null) {\n      return;\n    }\n    if (typeof child === 'string' || typeof child === 'number') {\n      content += child;\n    }\n  });\n\n  return content;\n}\n\n/**\n * Implements an <option> host component that warns when `selected` is set.\n */\n\nfunction validateProps(element, props) {\n  // TODO (yungsters): Remove support for `selected` in <option>.\n  if (__DEV__) {\n    if (props.selected != null && !didWarnSelectedSetOnOption) {\n      (0, _warning2.default)(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');\n      didWarnSelectedSetOnOption = true;\n    }\n  }\n}\n\nfunction postMountWrapper(element, props) {\n  // value=\"\" should make a value attribute (#6219)\n  if (props.value != null) {\n    element.setAttribute('value', props.value);\n  }\n}\n\nfunction getHostProps(element, props) {\n  var hostProps = _extends({ children: undefined }, props);\n  var content = flattenChildren(props.children);\n\n  if (content) {\n    hostProps.children = content;\n  }\n\n  return hostProps;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9SZWFjdERPTUZpYmVyT3B0aW9uLmpzIl0sIm5hbWVzIjpbInZhbGlkYXRlUHJvcHMiLCJwb3N0TW91bnRXcmFwcGVyIiwiZ2V0SG9zdFByb3BzIiwiZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24iLCJmbGF0dGVuQ2hpbGRyZW4iLCJjaGlsZHJlbiIsImNvbnRlbnQiLCJSZWFjdCIsIkNoaWxkcmVuIiwiZm9yRWFjaCIsImNoaWxkIiwiZWxlbWVudCIsInByb3BzIiwiX19ERVZfXyIsInNlbGVjdGVkIiwidmFsdWUiLCJzZXRBdHRyaWJ1dGUiLCJob3N0UHJvcHMiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7Ozs7OztrUUFBQTs7Ozs7Ozs7O1FBcUNnQkEsYSxHQUFBQSxhO1FBY0FDLGdCLEdBQUFBLGdCO1FBT0FDLFksR0FBQUEsWTs7QUFqRGhCOzs7O0FBQ0E7Ozs7OztBQUVBLElBQUlDLDZCQUE2QixLQUFqQzs7QUFFQSxTQUFTQyxlQUFULENBQXlCQyxRQUF6QixFQUFtQztBQUNqQyxNQUFJQyxVQUFVLEVBQWQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsa0JBQU1DLFFBQU4sQ0FBZUMsT0FBZixDQUF1QkosUUFBdkIsRUFBaUMsVUFBU0ssS0FBVCxFQUFnQjtBQUMvQyxRQUFJQSxTQUFTLElBQWIsRUFBbUI7QUFDakI7QUFDRDtBQUNELFFBQUksT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUE2QixPQUFPQSxLQUFQLEtBQWlCLFFBQWxELEVBQTREO0FBQzFESixpQkFBV0ksS0FBWDtBQUNEO0FBQ0YsR0FQRDs7QUFTQSxTQUFPSixPQUFQO0FBQ0Q7O0FBRUQ7Ozs7QUFJTyxTQUFTTixhQUFULENBQXVCVyxPQUF2QixFQUF5Q0MsS0FBekMsRUFBd0Q7QUFDN0Q7QUFDQSxNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUFJRCxNQUFNRSxRQUFOLElBQWtCLElBQWxCLElBQTBCLENBQUNYLDBCQUEvQixFQUEyRDtBQUN6RCw2QkFDRSxLQURGLEVBRUUsb0VBQ0UsaUNBSEo7QUFLQUEsbUNBQTZCLElBQTdCO0FBQ0Q7QUFDRjtBQUNGOztBQUVNLFNBQVNGLGdCQUFULENBQTBCVSxPQUExQixFQUE0Q0MsS0FBNUMsRUFBMkQ7QUFDaEU7QUFDQSxNQUFJQSxNQUFNRyxLQUFOLElBQWUsSUFBbkIsRUFBeUI7QUFDdkJKLFlBQVFLLFlBQVIsQ0FBcUIsT0FBckIsRUFBOEJKLE1BQU1HLEtBQXBDO0FBQ0Q7QUFDRjs7QUFFTSxTQUFTYixZQUFULENBQXNCUyxPQUF0QixFQUF3Q0MsS0FBeEMsRUFBdUQ7QUFDNUQsTUFBTUssdUJBQWFaLFVBQVVhLFNBQXZCLElBQXFDTixLQUFyQyxDQUFOO0FBQ0EsTUFBTU4sVUFBVUYsZ0JBQWdCUSxNQUFNUCxRQUF0QixDQUFoQjs7QUFFQSxNQUFJQyxPQUFKLEVBQWE7QUFDWFcsY0FBVVosUUFBVixHQUFxQkMsT0FBckI7QUFDRDs7QUFFRCxTQUFPVyxTQUFQO0FBQ0QiLCJmaWxlIjoiUmVhY3RET01GaWJlck9wdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ2ZianMvbGliL3dhcm5pbmcnO1xuXG5sZXQgZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24gPSBmYWxzZTtcblxuZnVuY3Rpb24gZmxhdHRlbkNoaWxkcmVuKGNoaWxkcmVuKSB7XG4gIGxldCBjb250ZW50ID0gJyc7XG5cbiAgLy8gRmxhdHRlbiBjaGlsZHJlbiBhbmQgd2FybiBpZiB0aGV5IGFyZW4ndCBzdHJpbmdzIG9yIG51bWJlcnM7XG4gIC8vIGludmFsaWQgdHlwZXMgYXJlIGlnbm9yZWQuXG4gIC8vIFdlIGNhbiBzaWxlbnRseSBza2lwIHRoZW0gYmVjYXVzZSBpbnZhbGlkIERPTSBuZXN0aW5nIHdhcm5pbmdcbiAgLy8gY2F0Y2hlcyB0aGVzZSBjYXNlcyBpbiBGaWJlci5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgZnVuY3Rpb24oY2hpbGQpIHtcbiAgICBpZiAoY2hpbGQgPT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgY2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICBjb250ZW50ICs9IGNoaWxkO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGNvbnRlbnQ7XG59XG5cbi8qKlxuICogSW1wbGVtZW50cyBhbiA8b3B0aW9uPiBob3N0IGNvbXBvbmVudCB0aGF0IHdhcm5zIHdoZW4gYHNlbGVjdGVkYCBpcyBzZXQuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlUHJvcHMoZWxlbWVudDogRWxlbWVudCwgcHJvcHM6IE9iamVjdCkge1xuICAvLyBUT0RPICh5dW5nc3RlcnMpOiBSZW1vdmUgc3VwcG9ydCBmb3IgYHNlbGVjdGVkYCBpbiA8b3B0aW9uPi5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBpZiAocHJvcHMuc2VsZWN0ZWQgIT0gbnVsbCAmJiAhZGlkV2FyblNlbGVjdGVkU2V0T25PcHRpb24pIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnVXNlIHRoZSBgZGVmYXVsdFZhbHVlYCBvciBgdmFsdWVgIHByb3BzIG9uIDxzZWxlY3Q+IGluc3RlYWQgb2YgJyArXG4gICAgICAgICAgJ3NldHRpbmcgYHNlbGVjdGVkYCBvbiA8b3B0aW9uPi4nLFxuICAgICAgKTtcbiAgICAgIGRpZFdhcm5TZWxlY3RlZFNldE9uT3B0aW9uID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNb3VudFdyYXBwZXIoZWxlbWVudDogRWxlbWVudCwgcHJvcHM6IE9iamVjdCkge1xuICAvLyB2YWx1ZT1cIlwiIHNob3VsZCBtYWtlIGEgdmFsdWUgYXR0cmlidXRlICgjNjIxOSlcbiAgaWYgKHByb3BzLnZhbHVlICE9IG51bGwpIHtcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgndmFsdWUnLCBwcm9wcy52YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEhvc3RQcm9wcyhlbGVtZW50OiBFbGVtZW50LCBwcm9wczogT2JqZWN0KSB7XG4gIGNvbnN0IGhvc3RQcm9wcyA9IHtjaGlsZHJlbjogdW5kZWZpbmVkLCAuLi5wcm9wc307XG4gIGNvbnN0IGNvbnRlbnQgPSBmbGF0dGVuQ2hpbGRyZW4ocHJvcHMuY2hpbGRyZW4pO1xuXG4gIGlmIChjb250ZW50KSB7XG4gICAgaG9zdFByb3BzLmNoaWxkcmVuID0gY29udGVudDtcbiAgfVxuXG4gIHJldHVybiBob3N0UHJvcHM7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHostProps = getHostProps;\nexports.initWrapperState = initWrapperState;\nexports.postMountWrapper = postMountWrapper;\nexports.postUpdateWrapper = postUpdateWrapper;\nexports.restoreControlledState = restoreControlledState;\n\nvar _ReactDebugCurrentFiber = require('react-reconciler/src/ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactControlledValuePropTypes = require('../shared/ReactControlledValuePropTypes');\n\nvar _ReactControlledValuePropTypes2 = _interopRequireDefault(_ReactControlledValuePropTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberOwnerName = _ReactDebugCurrentFiber2.default.getCurrentFiberOwnerName,\n    getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum; /**\n                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                   *\n                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                   *\n                                                                                                   * \n                                                                                                   */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\nvar didWarnValueDefaultValue = void 0;\n\nif (__DEV__) {\n  didWarnValueDefaultValue = false;\n}\n\nfunction getDeclarationErrorAddendum() {\n  var ownerName = getCurrentFiberOwnerName();\n  if (ownerName) {\n    return '\\n\\nCheck the render method of `' + ownerName + '`.';\n  }\n  return '';\n}\n\nvar valuePropNames = ['value', 'defaultValue'];\n\n/**\n * Validation function for `value` and `defaultValue`.\n */\nfunction checkSelectPropTypes(props) {\n  _ReactControlledValuePropTypes2.default.checkPropTypes('select', props, getCurrentFiberStackAddendum);\n\n  for (var i = 0; i < valuePropNames.length; i++) {\n    var propName = valuePropNames[i];\n    if (props[propName] == null) {\n      continue;\n    }\n    var isArray = Array.isArray(props[propName]);\n    if (props.multiple && !isArray) {\n      (0, _warning2.default)(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());\n    } else if (!props.multiple && isArray) {\n      (0, _warning2.default)(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());\n    }\n  }\n}\n\nfunction updateOptions(node, multiple, propValue, setDefaultSelected) {\n  var options = node.options;\n\n  if (multiple) {\n    var selectedValues = propValue;\n    var selectedValue = {};\n    for (var i = 0; i < selectedValues.length; i++) {\n      // Prefix to avoid chaos with special keys.\n      selectedValue['$' + selectedValues[i]] = true;\n    }\n    for (var _i = 0; _i < options.length; _i++) {\n      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);\n      if (options[_i].selected !== selected) {\n        options[_i].selected = selected;\n      }\n      if (selected && setDefaultSelected) {\n        options[_i].defaultSelected = true;\n      }\n    }\n  } else {\n    // Do not set `select.value` as exact behavior isn't consistent across all\n    // browsers for all cases.\n    var _selectedValue = '' + propValue;\n    var defaultSelected = null;\n    for (var _i2 = 0; _i2 < options.length; _i2++) {\n      if (options[_i2].value === _selectedValue) {\n        options[_i2].selected = true;\n        if (setDefaultSelected) {\n          options[_i2].defaultSelected = true;\n        }\n        return;\n      }\n      if (defaultSelected === null && !options[_i2].disabled) {\n        defaultSelected = options[_i2];\n      }\n    }\n    if (defaultSelected !== null) {\n      defaultSelected.selected = true;\n    }\n  }\n}\n\n/**\n * Implements a <select> host component that allows optionally setting the\n * props `value` and `defaultValue`. If `multiple` is false, the prop must be a\n * stringable. If `multiple` is true, the prop must be an array of stringables.\n *\n * If `value` is not supplied (or null/undefined), user actions that change the\n * selected option will trigger updates to the rendered options.\n *\n * If it is supplied (and not null/undefined), the rendered options will not\n * update in response to user actions. Instead, the `value` prop must change in\n * order for the rendered options to update.\n *\n * If `defaultValue` is provided, any options with the supplied values will be\n * selected.\n */\n\nfunction getHostProps(element, props) {\n  return Object.assign({}, props, {\n    value: undefined\n  });\n}\n\nfunction initWrapperState(element, props) {\n  var node = element;\n  if (__DEV__) {\n    checkSelectPropTypes(props);\n  }\n\n  var value = props.value;\n  node._wrapperState = {\n    initialValue: value != null ? value : props.defaultValue,\n    wasMultiple: !!props.multiple\n  };\n\n  if (__DEV__) {\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {\n      (0, _warning2.default)(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');\n      didWarnValueDefaultValue = true;\n    }\n  }\n}\n\nfunction postMountWrapper(element, props) {\n  var node = element;\n  node.multiple = !!props.multiple;\n  var value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (props.defaultValue != null) {\n    updateOptions(node, !!props.multiple, props.defaultValue, true);\n  }\n}\n\nfunction postUpdateWrapper(element, props) {\n  var node = element;\n  // After the initial mount, we control selected-ness manually so don't pass\n  // this value down\n  node._wrapperState.initialValue = undefined;\n\n  var wasMultiple = node._wrapperState.wasMultiple;\n  node._wrapperState.wasMultiple = !!props.multiple;\n\n  var value = props.value;\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  } else if (wasMultiple !== !!props.multiple) {\n    // For simplicity, reapply `defaultValue` if `multiple` is toggled.\n    if (props.defaultValue != null) {\n      updateOptions(node, !!props.multiple, props.defaultValue, true);\n    } else {\n      // Revert the select back to its default unselected state.\n      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);\n    }\n  }\n}\n\nfunction restoreControlledState(element, props) {\n  var node = element;\n  var value = props.value;\n\n  if (value != null) {\n    updateOptions(node, !!props.multiple, value, false);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * \n                                                                                                                                                                                                                                                                   */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\n\nexports.getHostProps = getHostProps;\nexports.initWrapperState = initWrapperState;\nexports.updateWrapper = updateWrapper;\nexports.postMountWrapper = postMountWrapper;\nexports.restoreControlledState = restoreControlledState;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactDebugCurrentFiber = require('react-reconciler/src/ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _ReactControlledValuePropTypes = require('../shared/ReactControlledValuePropTypes');\n\nvar _ReactControlledValuePropTypes2 = _interopRequireDefault(_ReactControlledValuePropTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum;\n\nvar didWarnValDefaultVal = false;\n\n/**\n * Implements a <textarea> host component that allows setting `value`, and\n * `defaultValue`. This differs from the traditional DOM API because value is\n * usually set as PCDATA children.\n *\n * If `value` is not supplied (or null/undefined), user actions that affect the\n * value will trigger updates to the element.\n *\n * If `value` is supplied (and not null/undefined), the rendered element will\n * not trigger updates to the element. Instead, the `value` prop must change in\n * order for the rendered element to be updated.\n *\n * The rendered element will be initialized with an empty value, the prop\n * `defaultValue` if specified, or the children content (deprecated).\n */\n\nfunction getHostProps(element, props) {\n  var node = element;\n  (0, _invariant2.default)(props.dangerouslySetInnerHTML == null, '`dangerouslySetInnerHTML` does not make sense on <textarea>.');\n\n  // Always set children to the same thing. In IE9, the selection range will\n  // get reset if `textContent` is mutated.  We could add a check in setTextContent\n  // to only set the value if/when the value differs from the node value (which would\n  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this\n  // solution. The value can be a boolean or object so that's why it's forced\n  // to be a string.\n  var hostProps = _extends({}, props, {\n    value: undefined,\n    defaultValue: undefined,\n    children: '' + node._wrapperState.initialValue\n  });\n\n  return hostProps;\n}\n\nfunction initWrapperState(element, props) {\n  var node = element;\n  if (__DEV__) {\n    _ReactControlledValuePropTypes2.default.checkPropTypes('textarea', props, getCurrentFiberStackAddendum);\n    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {\n      (0, _warning2.default)(false, 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');\n      didWarnValDefaultVal = true;\n    }\n  }\n\n  var initialValue = props.value;\n\n  // Only bother fetching default value if we're going to use it\n  if (initialValue == null) {\n    var defaultValue = props.defaultValue;\n    // TODO (yungsters): Remove support for children content in <textarea>.\n    var children = props.children;\n    if (children != null) {\n      if (__DEV__) {\n        (0, _warning2.default)(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');\n      }\n      (0, _invariant2.default)(defaultValue == null, 'If you supply `defaultValue` on a <textarea>, do not pass children.');\n      if (Array.isArray(children)) {\n        (0, _invariant2.default)(children.length <= 1, '<textarea> can only have at most one child.');\n        children = children[0];\n      }\n\n      defaultValue = '' + children;\n    }\n    if (defaultValue == null) {\n      defaultValue = '';\n    }\n    initialValue = defaultValue;\n  }\n\n  node._wrapperState = {\n    initialValue: '' + initialValue\n  };\n}\n\nfunction updateWrapper(element, props) {\n  var node = element;\n  var value = props.value;\n  if (value != null) {\n    // Cast `value` to a string to ensure the value is set correctly. While\n    // browsers typically do this as necessary, jsdom doesn't.\n    var newValue = '' + value;\n\n    // To avoid side effects (such as losing text selection), only set value if changed\n    if (newValue !== node.value) {\n      node.value = newValue;\n    }\n    if (props.defaultValue == null) {\n      node.defaultValue = newValue;\n    }\n  }\n  if (props.defaultValue != null) {\n    node.defaultValue = props.defaultValue;\n  }\n}\n\nfunction postMountWrapper(element, props) {\n  var node = element;\n  // This is in postMount because we need access to the DOM node, which is not\n  // available until after the component has mounted.\n  var textContent = node.textContent;\n\n  // Only set node.value if textContent is equal to the expected\n  // initial value. In IE10/IE11 there is a bug where the placeholder attribute\n  // will populate textContent as well.\n  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/\n  if (textContent === node._wrapperState.initialValue) {\n    node.value = textContent;\n  }\n}\n\nfunction restoreControlledState(element, props) {\n  // DOM component is still mounted; update\n  updateWrapper(element, props);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getOffsets = getOffsets;\nexports.getModernOffsetsFromPoints = getModernOffsetsFromPoints;\nexports.setOffsets = setOffsets;\n\nvar _getNodeForCharacterOffset = require('./getNodeForCharacterOffset');\n\nvar _getNodeForCharacterOffset2 = _interopRequireDefault(_getNodeForCharacterOffset);\n\nvar _getTextContentAccessor = require('./getTextContentAccessor');\n\nvar _getTextContentAccessor2 = _interopRequireDefault(_getTextContentAccessor);\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @param {DOMElement} outerNode\n * @return {?object}\n */\nfunction getOffsets(outerNode) {\n  var selection = window.getSelection && window.getSelection();\n\n  if (!selection || selection.rangeCount === 0) {\n    return null;\n  }\n\n  var anchorNode = selection.anchorNode,\n      anchorOffset = selection.anchorOffset,\n      focusNode = selection.focusNode,\n      focusOffset = selection.focusOffset;\n\n  // In Firefox, anchorNode and focusNode can be \"anonymous divs\", e.g. the\n  // up/down buttons on an <input type=\"number\">. Anonymous divs do not seem to\n  // expose properties, triggering a \"Permission denied error\" if any of its\n  // properties are accessed. The only seemingly possible way to avoid erroring\n  // is to access a property that typically works for non-anonymous divs and\n  // catch any error that may otherwise arise. See\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427\n\n  try {\n    /* eslint-disable no-unused-expressions */\n    anchorNode.nodeType;\n    focusNode.nodeType;\n    /* eslint-enable no-unused-expressions */\n  } catch (e) {\n    return null;\n  }\n\n  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);\n}\n\n/**\n * Returns {start, end} where `start` is the character/codepoint index of\n * (anchorNode, anchorOffset) within the textContent of `outerNode`, and\n * `end` is the index of (focusNode, focusOffset).\n *\n * Returns null if you pass in garbage input but we should probably just crash.\n *\n * Exported only for testing.\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {\n  var length = 0;\n  var start = -1;\n  var end = -1;\n  var indexWithinAnchor = 0;\n  var indexWithinFocus = 0;\n  var node = outerNode;\n  var parentNode = null;\n\n  outer: while (true) {\n    var next = null;\n\n    while (true) {\n      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === _HTMLNodeType.TEXT_NODE)) {\n        start = length + anchorOffset;\n      }\n      if (node === focusNode && (focusOffset === 0 || node.nodeType === _HTMLNodeType.TEXT_NODE)) {\n        end = length + focusOffset;\n      }\n\n      if (node.nodeType === _HTMLNodeType.TEXT_NODE) {\n        length += node.nodeValue.length;\n      }\n\n      if ((next = node.firstChild) === null) {\n        break;\n      }\n      // Moving from `node` to its first child `next`.\n      parentNode = node;\n      node = next;\n    }\n\n    while (true) {\n      if (node === outerNode) {\n        // If `outerNode` has children, this is always the second time visiting\n        // it. If it has no children, this is still the first loop, and the only\n        // valid selection is anchorNode and focusNode both equal to this node\n        // and both offsets 0, in which case we will have handled above.\n        break outer;\n      }\n      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {\n        start = length;\n      }\n      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {\n        end = length;\n      }\n      if ((next = node.nextSibling) !== null) {\n        break;\n      }\n      node = parentNode;\n      parentNode = node.parentNode;\n    }\n\n    // Moving from `node` to its next sibling `next`.\n    node = next;\n  }\n\n  if (start === -1 || end === -1) {\n    // This should never happen. (Would happen if the anchor/focus nodes aren't\n    // actually inside the passed-in node.)\n    return null;\n  }\n\n  return {\n    start: start,\n    end: end\n  };\n}\n\n/**\n * In modern non-IE browsers, we can support both forward and backward\n * selections.\n *\n * Note: IE10+ supports the Selection object, but it does not support\n * the `extend` method, which means that even in modern IE, it's not possible\n * to programmatically create a backward selection. Thus, for all IE\n * versions, we use the old IE API to create our selections.\n *\n * @param {DOMElement|DOMTextNode} node\n * @param {object} offsets\n */\nfunction setOffsets(node, offsets) {\n  if (!window.getSelection) {\n    return;\n  }\n\n  var selection = window.getSelection();\n  var length = node[(0, _getTextContentAccessor2.default)()].length;\n  var start = Math.min(offsets.start, length);\n  var end = offsets.end === undefined ? start : Math.min(offsets.end, length);\n\n  // IE 11 uses modern selection, but doesn't support the extend method.\n  // Flip backward selections, so we can set with a single range.\n  if (!selection.extend && start > end) {\n    var temp = end;\n    end = start;\n    start = temp;\n  }\n\n  var startMarker = (0, _getNodeForCharacterOffset2.default)(node, start);\n  var endMarker = (0, _getNodeForCharacterOffset2.default)(node, end);\n\n  if (startMarker && endMarker) {\n    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {\n      return;\n    }\n    var range = document.createRange();\n    range.setStart(startMarker.node, startMarker.offset);\n    selection.removeAllRanges();\n\n    if (start > end) {\n      selection.addRange(range);\n      selection.extend(endMarker.node, endMarker.offset);\n    } else {\n      range.setEnd(endMarker.node, endMarker.offset);\n      selection.addRange(range);\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSelectionCapabilities = hasSelectionCapabilities;\nexports.getSelectionInformation = getSelectionInformation;\nexports.restoreSelection = restoreSelection;\nexports.getSelection = getSelection;\nexports.setSelection = setSelection;\n\nvar _containsNode = require('fbjs/lib/containsNode');\n\nvar _containsNode2 = _interopRequireDefault(_containsNode);\n\nvar _getActiveElement = require('fbjs/lib/getActiveElement');\n\nvar _getActiveElement2 = _interopRequireDefault(_getActiveElement);\n\nvar _ReactDOMSelection = require('./ReactDOMSelection');\n\nvar ReactDOMSelection = _interopRequireWildcard(_ReactDOMSelection);\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction isInDocument(node) {\n  return (0, _containsNode2.default)(document.documentElement, node);\n}\n\n/**\n * @ReactInputSelection: React input selection module. Based on Selection.js,\n * but modified to be suitable for react and has a couple of bug fixes (doesn't\n * assume buttons have range selections allowed).\n * Input selection module for React.\n */\n\nfunction hasSelectionCapabilities(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName && (nodeName === 'input' && elem.type === 'text' || nodeName === 'textarea' || elem.contentEditable === 'true');\n}\n\nfunction getSelectionInformation() {\n  var focusedElem = (0, _getActiveElement2.default)();\n  return {\n    focusedElem: focusedElem,\n    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null\n  };\n}\n\n/**\n * @restoreSelection: If any selection information was potentially lost,\n * restore it. This is useful when performing operations that could remove dom\n * nodes and place them back in, resulting in focus being lost.\n */\nfunction restoreSelection(priorSelectionInformation) {\n  var curFocusedElem = (0, _getActiveElement2.default)();\n  var priorFocusedElem = priorSelectionInformation.focusedElem;\n  var priorSelectionRange = priorSelectionInformation.selectionRange;\n  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {\n    if (hasSelectionCapabilities(priorFocusedElem)) {\n      setSelection(priorFocusedElem, priorSelectionRange);\n    }\n\n    // Focusing a node can change the scroll position, which is undesirable\n    var ancestors = [];\n    var ancestor = priorFocusedElem;\n    while (ancestor = ancestor.parentNode) {\n      if (ancestor.nodeType === _HTMLNodeType.ELEMENT_NODE) {\n        ancestors.push({\n          element: ancestor,\n          left: ancestor.scrollLeft,\n          top: ancestor.scrollTop\n        });\n      }\n    }\n\n    priorFocusedElem.focus();\n\n    for (var i = 0; i < ancestors.length; i++) {\n      var info = ancestors[i];\n      info.element.scrollLeft = info.left;\n      info.element.scrollTop = info.top;\n    }\n  }\n}\n\n/**\n * @getSelection: Gets the selection bounds of a focused textarea, input or\n * contentEditable node.\n * -@input: Look up selection bounds of this input\n * -@return {start: selectionStart, end: selectionEnd}\n */\nfunction getSelection(input) {\n  var selection = void 0;\n\n  if ('selectionStart' in input) {\n    // Modern browser with input or textarea.\n    selection = {\n      start: input.selectionStart,\n      end: input.selectionEnd\n    };\n  } else {\n    // Content editable or old IE textarea.\n    selection = ReactDOMSelection.getOffsets(input);\n  }\n\n  return selection || { start: 0, end: 0 };\n}\n\n/**\n * @setSelection: Sets the selection bounds of a textarea or input and focuses\n * the input.\n * -@input     Set selection bounds of this input or textarea\n * -@offsets   Object of same form that is returned from get*\n */\nfunction setSelection(input, offsets) {\n  var start = offsets.start,\n      end = offsets.end;\n\n  if (end === undefined) {\n    end = start;\n  }\n\n  if ('selectionStart' in input) {\n    input.selectionStart = start;\n    input.selectionEnd = Math.min(end, input.value.length);\n  } else {\n    ReactDOMSelection.setOffsets(input, offsets);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\n/**\n * Given any node return the first leaf node without children.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {DOMElement|DOMTextNode}\n */\nfunction getLeafNode(node) {\n  while (node && node.firstChild) {\n    node = node.firstChild;\n  }\n  return node;\n}\n\n/**\n * Get the next sibling within a container. This will walk up the\n * DOM if a node's siblings have been exhausted.\n *\n * @param {DOMElement|DOMTextNode} node\n * @return {?DOMElement|DOMTextNode}\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction getSiblingNode(node) {\n  while (node) {\n    if (node.nextSibling) {\n      return node.nextSibling;\n    }\n    node = node.parentNode;\n  }\n}\n\n/**\n * Get object describing the nodes which contain characters at offset.\n *\n * @param {DOMElement|DOMTextNode} root\n * @param {number} offset\n * @return {?object}\n */\nfunction getNodeForCharacterOffset(root, offset) {\n  var node = getLeafNode(root);\n  var nodeStart = 0;\n  var nodeEnd = 0;\n\n  while (node) {\n    if (node.nodeType === _HTMLNodeType.TEXT_NODE) {\n      nodeEnd = nodeStart + node.textContent.length;\n\n      if (nodeStart <= offset && nodeEnd >= offset) {\n        return {\n          node: node,\n          offset: offset - nodeStart\n        };\n      }\n\n      nodeStart = nodeEnd;\n    }\n\n    node = getLeafNode(getSiblingNode(node));\n  }\n}\n\nexports.default = getNodeForCharacterOffset;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9nZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0LmpzIl0sIm5hbWVzIjpbImdldExlYWZOb2RlIiwibm9kZSIsImZpcnN0Q2hpbGQiLCJnZXRTaWJsaW5nTm9kZSIsIm5leHRTaWJsaW5nIiwicGFyZW50Tm9kZSIsImdldE5vZGVGb3JDaGFyYWN0ZXJPZmZzZXQiLCJyb290Iiwib2Zmc2V0Iiwibm9kZVN0YXJ0Iiwibm9kZUVuZCIsIm5vZGVUeXBlIiwiVEVYVF9OT0RFIiwidGV4dENvbnRlbnQiLCJsZW5ndGgiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOztBQUVBOzs7Ozs7QUFNQSxTQUFTQSxXQUFULENBQXFCQyxJQUFyQixFQUEyQjtBQUN6QixTQUFPQSxRQUFRQSxLQUFLQyxVQUFwQixFQUFnQztBQUM5QkQsV0FBT0EsS0FBS0MsVUFBWjtBQUNEO0FBQ0QsU0FBT0QsSUFBUDtBQUNEOztBQUVEOzs7Ozs7O0FBdEJBOzs7Ozs7O0FBNkJBLFNBQVNFLGNBQVQsQ0FBd0JGLElBQXhCLEVBQThCO0FBQzVCLFNBQU9BLElBQVAsRUFBYTtBQUNYLFFBQUlBLEtBQUtHLFdBQVQsRUFBc0I7QUFDcEIsYUFBT0gsS0FBS0csV0FBWjtBQUNEO0FBQ0RILFdBQU9BLEtBQUtJLFVBQVo7QUFDRDtBQUNGOztBQUVEOzs7Ozs7O0FBT0EsU0FBU0MseUJBQVQsQ0FBbUNDLElBQW5DLEVBQXlDQyxNQUF6QyxFQUFpRDtBQUMvQyxNQUFJUCxPQUFPRCxZQUFZTyxJQUFaLENBQVg7QUFDQSxNQUFJRSxZQUFZLENBQWhCO0FBQ0EsTUFBSUMsVUFBVSxDQUFkOztBQUVBLFNBQU9ULElBQVAsRUFBYTtBQUNYLFFBQUlBLEtBQUtVLFFBQUwsS0FBa0JDLHVCQUF0QixFQUFpQztBQUMvQkYsZ0JBQVVELFlBQVlSLEtBQUtZLFdBQUwsQ0FBaUJDLE1BQXZDOztBQUVBLFVBQUlMLGFBQWFELE1BQWIsSUFBdUJFLFdBQVdGLE1BQXRDLEVBQThDO0FBQzVDLGVBQU87QUFDTFAsZ0JBQU1BLElBREQ7QUFFTE8sa0JBQVFBLFNBQVNDO0FBRlosU0FBUDtBQUlEOztBQUVEQSxrQkFBWUMsT0FBWjtBQUNEOztBQUVEVCxXQUFPRCxZQUFZRyxlQUFlRixJQUFmLENBQVosQ0FBUDtBQUNEO0FBQ0Y7O2tCQUVjSyx5QiIsImZpbGUiOiJnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtURVhUX05PREV9IGZyb20gJy4uL3NoYXJlZC9IVE1MTm9kZVR5cGUnO1xuXG4vKipcbiAqIEdpdmVuIGFueSBub2RlIHJldHVybiB0aGUgZmlyc3QgbGVhZiBub2RlIHdpdGhvdXQgY2hpbGRyZW4uXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSBub2RlXG4gKiBAcmV0dXJuIHtET01FbGVtZW50fERPTVRleHROb2RlfVxuICovXG5mdW5jdGlvbiBnZXRMZWFmTm9kZShub2RlKSB7XG4gIHdoaWxlIChub2RlICYmIG5vZGUuZmlyc3RDaGlsZCkge1xuICAgIG5vZGUgPSBub2RlLmZpcnN0Q2hpbGQ7XG4gIH1cbiAgcmV0dXJuIG5vZGU7XG59XG5cbi8qKlxuICogR2V0IHRoZSBuZXh0IHNpYmxpbmcgd2l0aGluIGEgY29udGFpbmVyLiBUaGlzIHdpbGwgd2FsayB1cCB0aGVcbiAqIERPTSBpZiBhIG5vZGUncyBzaWJsaW5ncyBoYXZlIGJlZW4gZXhoYXVzdGVkLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudHxET01UZXh0Tm9kZX0gbm9kZVxuICogQHJldHVybiB7P0RPTUVsZW1lbnR8RE9NVGV4dE5vZGV9XG4gKi9cbmZ1bmN0aW9uIGdldFNpYmxpbmdOb2RlKG5vZGUpIHtcbiAgd2hpbGUgKG5vZGUpIHtcbiAgICBpZiAobm9kZS5uZXh0U2libGluZykge1xuICAgICAgcmV0dXJuIG5vZGUubmV4dFNpYmxpbmc7XG4gICAgfVxuICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgb2JqZWN0IGRlc2NyaWJpbmcgdGhlIG5vZGVzIHdoaWNoIGNvbnRhaW4gY2hhcmFjdGVycyBhdCBvZmZzZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fERPTVRleHROb2RlfSByb290XG4gKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gKiBAcmV0dXJuIHs/b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0KHJvb3QsIG9mZnNldCkge1xuICBsZXQgbm9kZSA9IGdldExlYWZOb2RlKHJvb3QpO1xuICBsZXQgbm9kZVN0YXJ0ID0gMDtcbiAgbGV0IG5vZGVFbmQgPSAwO1xuXG4gIHdoaWxlIChub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgPT09IFRFWFRfTk9ERSkge1xuICAgICAgbm9kZUVuZCA9IG5vZGVTdGFydCArIG5vZGUudGV4dENvbnRlbnQubGVuZ3RoO1xuXG4gICAgICBpZiAobm9kZVN0YXJ0IDw9IG9mZnNldCAmJiBub2RlRW5kID49IG9mZnNldCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5vZGU6IG5vZGUsXG4gICAgICAgICAgb2Zmc2V0OiBvZmZzZXQgLSBub2RlU3RhcnQsXG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIG5vZGVTdGFydCA9IG5vZGVFbmQ7XG4gICAgfVxuXG4gICAgbm9kZSA9IGdldExlYWZOb2RlKGdldFNpYmxpbmdOb2RlKG5vZGUpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROb2RlRm9yQ2hhcmFjdGVyT2Zmc2V0O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar contentKey = null;\n\n/**\n * Gets the key used to access text content on a DOM node.\n *\n * @return {?string} Key used to access text content.\n * @internal\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction getTextContentAccessor() {\n  if (!contentKey && _ExecutionEnvironment2.default.canUseDOM) {\n    // Prefer textContent to innerText because many browsers support both but\n    // SVG <text> elements don't support innerText even when <div> does.\n    contentKey = 'textContent' in document.documentElement ? 'textContent' : 'innerText';\n  }\n  return contentKey;\n}\n\nexports.default = getTextContentAccessor;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9nZXRUZXh0Q29udGVudEFjY2Vzc29yLmpzIl0sIm5hbWVzIjpbImNvbnRlbnRLZXkiLCJnZXRUZXh0Q29udGVudEFjY2Vzc29yIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VET00iLCJkb2N1bWVudCIsImRvY3VtZW50RWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBLElBQUlBLGFBQWEsSUFBakI7O0FBRUE7Ozs7OztBQVhBOzs7Ozs7O0FBaUJBLFNBQVNDLHNCQUFULEdBQWtDO0FBQ2hDLE1BQUksQ0FBQ0QsVUFBRCxJQUFlRSwrQkFBcUJDLFNBQXhDLEVBQW1EO0FBQ2pEO0FBQ0E7QUFDQUgsaUJBQ0UsaUJBQWlCSSxTQUFTQyxlQUExQixHQUE0QyxhQUE1QyxHQUE0RCxXQUQ5RDtBQUVEO0FBQ0QsU0FBT0wsVUFBUDtBQUNEOztrQkFFY0Msc0IiLCJmaWxlIjoiZ2V0VGV4dENvbnRlbnRBY2Nlc3Nvci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBFeGVjdXRpb25FbnZpcm9ubWVudCBmcm9tICdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCc7XG5cbmxldCBjb250ZW50S2V5ID0gbnVsbDtcblxuLyoqXG4gKiBHZXRzIHRoZSBrZXkgdXNlZCB0byBhY2Nlc3MgdGV4dCBjb250ZW50IG9uIGEgRE9NIG5vZGUuXG4gKlxuICogQHJldHVybiB7P3N0cmluZ30gS2V5IHVzZWQgdG8gYWNjZXNzIHRleHQgY29udGVudC5cbiAqIEBpbnRlcm5hbFxuICovXG5mdW5jdGlvbiBnZXRUZXh0Q29udGVudEFjY2Vzc29yKCkge1xuICBpZiAoIWNvbnRlbnRLZXkgJiYgRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gICAgLy8gUHJlZmVyIHRleHRDb250ZW50IHRvIGlubmVyVGV4dCBiZWNhdXNlIG1hbnkgYnJvd3NlcnMgc3VwcG9ydCBib3RoIGJ1dFxuICAgIC8vIFNWRyA8dGV4dD4gZWxlbWVudHMgZG9uJ3Qgc3VwcG9ydCBpbm5lclRleHQgZXZlbiB3aGVuIDxkaXY+IGRvZXMuXG4gICAgY29udGVudEtleSA9XG4gICAgICAndGV4dENvbnRlbnQnIGluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCA/ICd0ZXh0Q29udGVudCcgOiAnaW5uZXJUZXh0JztcbiAgfVxuICByZXR1cm4gY29udGVudEtleTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.track = track;\nexports.updateValueIfChanged = updateValueIfChanged;\nexports.stopTracking = stopTracking;\n\n\nfunction isCheckable(elem) {\n  var type = elem.type;\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction getTracker(node) {\n  return node._valueTracker;\n}\n\nfunction detachTracker(node) {\n  node._valueTracker = null;\n}\n\nfunction getValueFromNode(node) {\n  var value = '';\n  if (!node) {\n    return value;\n  }\n\n  if (isCheckable(node)) {\n    value = node.checked ? 'true' : 'false';\n  } else {\n    value = node.value;\n  }\n\n  return value;\n}\n\nfunction trackValueOnNode(node) {\n  var valueField = isCheckable(node) ? 'checked' : 'value';\n  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);\n\n  var currentValue = '' + node[valueField];\n\n  // if someone has already defined a value or Safari, then bail\n  // and don't track value will cause over reporting of changes,\n  // but it's better then a hard failure\n  // (needed for certain tests that spyOn input values and Safari)\n  if (node.hasOwnProperty(valueField) || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {\n    return;\n  }\n\n  Object.defineProperty(node, valueField, {\n    configurable: true,\n    get: function get() {\n      return descriptor.get.call(this);\n    },\n    set: function set(value) {\n      currentValue = '' + value;\n      descriptor.set.call(this, value);\n    }\n  });\n  // We could've passed this the first time\n  // but it triggers a bug in IE11 and Edge 14/15.\n  // Calling defineProperty() again should be equivalent.\n  // https://github.com/facebook/react/issues/11768\n  Object.defineProperty(node, valueField, {\n    enumerable: descriptor.enumerable\n  });\n\n  var tracker = {\n    getValue: function getValue() {\n      return currentValue;\n    },\n    setValue: function setValue(value) {\n      currentValue = '' + value;\n    },\n    stopTracking: function stopTracking() {\n      detachTracker(node);\n      delete node[valueField];\n    }\n  };\n  return tracker;\n}\n\nfunction track(node) {\n  if (getTracker(node)) {\n    return;\n  }\n\n  // TODO: Once it's just Fiber we can move this to node._wrapperState\n  node._valueTracker = trackValueOnNode(node);\n}\n\nfunction updateValueIfChanged(node) {\n  if (!node) {\n    return false;\n  }\n\n  var tracker = getTracker(node);\n  // if there is no tracker at this point it's unlikely\n  // that trying again will succeed\n  if (!tracker) {\n    return true;\n  }\n\n  var lastValue = tracker.getValue();\n  var nextValue = getValueFromNode(node);\n  if (nextValue !== lastValue) {\n    tracker.setValue(nextValue);\n    return true;\n  }\n  return false;\n}\n\nfunction stopTracking(node) {\n  var tracker = getTracker(node);\n  if (tracker) {\n    tracker.stopTracking();\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DOMNamespaces = require('../shared/DOMNamespaces');\n\nvar _createMicrosoftUnsafeLocalFunction = require('../shared/createMicrosoftUnsafeLocalFunction');\n\nvar _createMicrosoftUnsafeLocalFunction2 = _interopRequireDefault(_createMicrosoftUnsafeLocalFunction);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// SVG temp container for IE lacking innerHTML\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar reusableSVGContainer = void 0;\n\n/**\n * Set the innerHTML property of a node\n *\n * @param {DOMElement} node\n * @param {string} html\n * @internal\n */\nvar setInnerHTML = (0, _createMicrosoftUnsafeLocalFunction2.default)(function (node, html) {\n  // IE does not have innerHTML for SVG nodes, so instead we inject the\n  // new markup in a temp node and then move the child nodes across into\n  // the target node\n\n  if (node.namespaceURI === _DOMNamespaces.Namespaces.svg && !('innerHTML' in node)) {\n    reusableSVGContainer = reusableSVGContainer || document.createElement('div');\n    reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';\n    var svgNode = reusableSVGContainer.firstChild;\n    while (node.firstChild) {\n      node.removeChild(node.firstChild);\n    }\n    while (svgNode.firstChild) {\n      node.appendChild(svgNode.firstChild);\n    }\n  } else {\n    node.innerHTML = html;\n  }\n});\n\nexports.default = setInnerHTML;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9zZXRJbm5lckhUTUwuanMiXSwibmFtZXMiOlsicmV1c2FibGVTVkdDb250YWluZXIiLCJzZXRJbm5lckhUTUwiLCJub2RlIiwiaHRtbCIsIm5hbWVzcGFjZVVSSSIsIk5hbWVzcGFjZXMiLCJzdmciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lckhUTUwiLCJzdmdOb2RlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOztBQUNBOzs7Ozs7QUFFQTtBQVZBOzs7Ozs7O0FBV0EsSUFBSUEsNkJBQUo7O0FBRUE7Ozs7Ozs7QUFPQSxJQUFNQyxlQUFlLGtEQUFtQyxVQUFTQyxJQUFULEVBQWVDLElBQWYsRUFBcUI7QUFDM0U7QUFDQTtBQUNBOztBQUVBLE1BQUlELEtBQUtFLFlBQUwsS0FBc0JDLDBCQUFXQyxHQUFqQyxJQUF3QyxFQUFFLGVBQWVKLElBQWpCLENBQTVDLEVBQW9FO0FBQ2xFRiwyQkFDRUEsd0JBQXdCTyxTQUFTQyxhQUFULENBQXVCLEtBQXZCLENBRDFCO0FBRUFSLHlCQUFxQlMsU0FBckIsR0FBaUMsVUFBVU4sSUFBVixHQUFpQixRQUFsRDtBQUNBLFFBQU1PLFVBQVVWLHFCQUFxQlcsVUFBckM7QUFDQSxXQUFPVCxLQUFLUyxVQUFaLEVBQXdCO0FBQ3RCVCxXQUFLVSxXQUFMLENBQWlCVixLQUFLUyxVQUF0QjtBQUNEO0FBQ0QsV0FBT0QsUUFBUUMsVUFBZixFQUEyQjtBQUN6QlQsV0FBS1csV0FBTCxDQUFpQkgsUUFBUUMsVUFBekI7QUFDRDtBQUNGLEdBWEQsTUFXTztBQUNMVCxTQUFLTyxTQUFMLEdBQWlCTixJQUFqQjtBQUNEO0FBQ0YsQ0FuQm9CLENBQXJCOztrQkFxQmVGLFkiLCJmaWxlIjoic2V0SW5uZXJIVE1MLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtOYW1lc3BhY2VzfSBmcm9tICcuLi9zaGFyZWQvRE9NTmFtZXNwYWNlcyc7XG5pbXBvcnQgY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbiBmcm9tICcuLi9zaGFyZWQvY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbic7XG5cbi8vIFNWRyB0ZW1wIGNvbnRhaW5lciBmb3IgSUUgbGFja2luZyBpbm5lckhUTUxcbmxldCByZXVzYWJsZVNWR0NvbnRhaW5lcjtcblxuLyoqXG4gKiBTZXQgdGhlIGlubmVySFRNTCBwcm9wZXJ0eSBvZiBhIG5vZGVcbiAqXG4gKiBAcGFyYW0ge0RPTUVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBodG1sXG4gKiBAaW50ZXJuYWxcbiAqL1xuY29uc3Qgc2V0SW5uZXJIVE1MID0gY3JlYXRlTWljcm9zb2Z0VW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbihub2RlLCBodG1sKSB7XG4gIC8vIElFIGRvZXMgbm90IGhhdmUgaW5uZXJIVE1MIGZvciBTVkcgbm9kZXMsIHNvIGluc3RlYWQgd2UgaW5qZWN0IHRoZVxuICAvLyBuZXcgbWFya3VwIGluIGEgdGVtcCBub2RlIGFuZCB0aGVuIG1vdmUgdGhlIGNoaWxkIG5vZGVzIGFjcm9zcyBpbnRvXG4gIC8vIHRoZSB0YXJnZXQgbm9kZVxuXG4gIGlmIChub2RlLm5hbWVzcGFjZVVSSSA9PT0gTmFtZXNwYWNlcy5zdmcgJiYgISgnaW5uZXJIVE1MJyBpbiBub2RlKSkge1xuICAgIHJldXNhYmxlU1ZHQ29udGFpbmVyID1cbiAgICAgIHJldXNhYmxlU1ZHQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHJldXNhYmxlU1ZHQ29udGFpbmVyLmlubmVySFRNTCA9ICc8c3ZnPicgKyBodG1sICsgJzwvc3ZnPic7XG4gICAgY29uc3Qgc3ZnTm9kZSA9IHJldXNhYmxlU1ZHQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKG5vZGUuZmlyc3RDaGlsZCkge1xuICAgICAgbm9kZS5yZW1vdmVDaGlsZChub2RlLmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICB3aGlsZSAoc3ZnTm9kZS5maXJzdENoaWxkKSB7XG4gICAgICBub2RlLmFwcGVuZENoaWxkKHN2Z05vZGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG5vZGUuaW5uZXJIVE1MID0gaHRtbDtcbiAgfVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNldElubmVySFRNTDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\n/**\n * Set the textContent property of a node. For text updates, it's faster\n * to set the `nodeValue` of the Text node directly instead of using\n * `.textContent` which will remove the existing node and create a new one.\n *\n * @param {DOMElement} node\n * @param {string} text\n * @internal\n */\nvar setTextContent = function setTextContent(node, text) {\n  if (text) {\n    var firstChild = node.firstChild;\n\n    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === _HTMLNodeType.TEXT_NODE) {\n      firstChild.nodeValue = text;\n      return;\n    }\n  }\n  node.textContent = text;\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    * \n    */\n\nexports.default = setTextContent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2NsaWVudC9zZXRUZXh0Q29udGVudC5qcyJdLCJuYW1lcyI6WyJzZXRUZXh0Q29udGVudCIsIm5vZGUiLCJ0ZXh0IiwiZmlyc3RDaGlsZCIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwiVEVYVF9OT0RFIiwibm9kZVZhbHVlIiwidGV4dENvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVNBOztBQUVBOzs7Ozs7Ozs7QUFTQSxJQUFJQSxpQkFBaUIsU0FBakJBLGNBQWlCLENBQVNDLElBQVQsRUFBd0JDLElBQXhCLEVBQTRDO0FBQy9ELE1BQUlBLElBQUosRUFBVTtBQUNSLFFBQUlDLGFBQWFGLEtBQUtFLFVBQXRCOztBQUVBLFFBQ0VBLGNBQ0FBLGVBQWVGLEtBQUtHLFNBRHBCLElBRUFELFdBQVdFLFFBQVgsS0FBd0JDLHVCQUgxQixFQUlFO0FBQ0FILGlCQUFXSSxTQUFYLEdBQXVCTCxJQUF2QjtBQUNBO0FBQ0Q7QUFDRjtBQUNERCxPQUFLTyxXQUFMLEdBQW1CTixJQUFuQjtBQUNELENBZEQsQyxDQXBCQTs7Ozs7Ozs7O2tCQW9DZUYsYyIsImZpbGUiOiJzZXRUZXh0Q29udGVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtURVhUX05PREV9IGZyb20gJy4uL3NoYXJlZC9IVE1MTm9kZVR5cGUnO1xuXG4vKipcbiAqIFNldCB0aGUgdGV4dENvbnRlbnQgcHJvcGVydHkgb2YgYSBub2RlLiBGb3IgdGV4dCB1cGRhdGVzLCBpdCdzIGZhc3RlclxuICogdG8gc2V0IHRoZSBgbm9kZVZhbHVlYCBvZiB0aGUgVGV4dCBub2RlIGRpcmVjdGx5IGluc3RlYWQgb2YgdXNpbmdcbiAqIGAudGV4dENvbnRlbnRgIHdoaWNoIHdpbGwgcmVtb3ZlIHRoZSBleGlzdGluZyBub2RlIGFuZCBjcmVhdGUgYSBuZXcgb25lLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAqIEBpbnRlcm5hbFxuICovXG5sZXQgc2V0VGV4dENvbnRlbnQgPSBmdW5jdGlvbihub2RlOiBFbGVtZW50LCB0ZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKHRleHQpIHtcbiAgICBsZXQgZmlyc3RDaGlsZCA9IG5vZGUuZmlyc3RDaGlsZDtcblxuICAgIGlmIChcbiAgICAgIGZpcnN0Q2hpbGQgJiZcbiAgICAgIGZpcnN0Q2hpbGQgPT09IG5vZGUubGFzdENoaWxkICYmXG4gICAgICBmaXJzdENoaWxkLm5vZGVUeXBlID09PSBURVhUX05PREVcbiAgICApIHtcbiAgICAgIGZpcnN0Q2hpbGQubm9kZVZhbHVlID0gdGV4dDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBzZXRUZXh0Q29udGVudDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2015-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   */\n\n// TODO: direct imports like some-package/src/* are bad. Fix me.\n\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactDebugCurrentFiber = require('react-reconciler/src/ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum;\n\nvar validateDOMNesting = _emptyFunction2.default;\n\nif (__DEV__) {\n  // This validation code was written based on the HTML5 parsing spec:\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  //\n  // Note: this does not catch all invalid nesting, nor does it try to (as it's\n  // not clear what practical benefit doing so provides); instead, we warn only\n  // for cases where the parser will give a parse tree differing from what React\n  // intended. For example, <b><div></div></b> is invalid but we don't warn\n  // because it still parses correctly; we do warn for other cases like nested\n  // <p> tags where the beginning of the second element implicitly closes the\n  // first, causing a confusing mess.\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#special\n  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope\n  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template',\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point\n  // TODO: Distinguish by namespace here -- for <title>, including it here\n  // errs on the side of fewer warnings\n  'foreignObject', 'desc', 'title'];\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope\n  var buttonScopeTags = inScopeTags.concat(['button']);\n\n  // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags\n  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];\n\n  var emptyAncestorInfo = {\n    current: null,\n\n    formTag: null,\n    aTagInScope: null,\n    buttonTagInScope: null,\n    nobrTagInScope: null,\n    pTagInButtonScope: null,\n\n    listItemTagAutoclosing: null,\n    dlItemTagAutoclosing: null\n  };\n\n  var updatedAncestorInfo = function updatedAncestorInfo(oldInfo, tag, instance) {\n    var ancestorInfo = _extends({}, oldInfo || emptyAncestorInfo);\n    var info = { tag: tag, instance: instance };\n\n    if (inScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.aTagInScope = null;\n      ancestorInfo.buttonTagInScope = null;\n      ancestorInfo.nobrTagInScope = null;\n    }\n    if (buttonScopeTags.indexOf(tag) !== -1) {\n      ancestorInfo.pTagInButtonScope = null;\n    }\n\n    // See rules for 'li', 'dd', 'dt' start tags in\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {\n      ancestorInfo.listItemTagAutoclosing = null;\n      ancestorInfo.dlItemTagAutoclosing = null;\n    }\n\n    ancestorInfo.current = info;\n\n    if (tag === 'form') {\n      ancestorInfo.formTag = info;\n    }\n    if (tag === 'a') {\n      ancestorInfo.aTagInScope = info;\n    }\n    if (tag === 'button') {\n      ancestorInfo.buttonTagInScope = info;\n    }\n    if (tag === 'nobr') {\n      ancestorInfo.nobrTagInScope = info;\n    }\n    if (tag === 'p') {\n      ancestorInfo.pTagInButtonScope = info;\n    }\n    if (tag === 'li') {\n      ancestorInfo.listItemTagAutoclosing = info;\n    }\n    if (tag === 'dd' || tag === 'dt') {\n      ancestorInfo.dlItemTagAutoclosing = info;\n    }\n\n    return ancestorInfo;\n  };\n\n  /**\n   * Returns whether\n   */\n  var isTagValidWithParent = function isTagValidWithParent(tag, parentTag) {\n    // First, let's check if we're in an unusual parsing mode...\n    switch (parentTag) {\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect\n      case 'select':\n        return tag === 'option' || tag === 'optgroup' || tag === '#text';\n      case 'optgroup':\n        return tag === 'option' || tag === '#text';\n      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>\n      // but\n      case 'option':\n        return tag === '#text';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption\n      // No special behavior since these rules fall back to \"in body\" mode for\n      // all except special table nodes which cause bad parsing behavior anyway.\n\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr\n      case 'tr':\n        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody\n      case 'tbody':\n      case 'thead':\n      case 'tfoot':\n        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup\n      case 'colgroup':\n        return tag === 'col' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable\n      case 'table':\n        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead\n      case 'head':\n        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';\n      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element\n      case 'html':\n        return tag === 'head' || tag === 'body';\n      case '#document':\n        return tag === 'html';\n    }\n\n    // Probably in the \"in body\" parsing mode, so we outlaw only tag combos\n    // where the parsing rules cause implicit opens or closes to be added.\n    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody\n    switch (tag) {\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';\n\n      case 'rp':\n      case 'rt':\n        return impliedEndTags.indexOf(parentTag) === -1;\n\n      case 'body':\n      case 'caption':\n      case 'col':\n      case 'colgroup':\n      case 'frame':\n      case 'head':\n      case 'html':\n      case 'tbody':\n      case 'td':\n      case 'tfoot':\n      case 'th':\n      case 'thead':\n      case 'tr':\n        // These tags are only valid with a few parents that have special child\n        // parsing rules -- if we're down here, then none of those matched and\n        // so we allow it only if we don't know what the parent is, as all other\n        // cases are invalid.\n        return parentTag == null;\n    }\n\n    return true;\n  };\n\n  /**\n   * Returns whether\n   */\n  var findInvalidAncestorForTag = function findInvalidAncestorForTag(tag, ancestorInfo) {\n    switch (tag) {\n      case 'address':\n      case 'article':\n      case 'aside':\n      case 'blockquote':\n      case 'center':\n      case 'details':\n      case 'dialog':\n      case 'dir':\n      case 'div':\n      case 'dl':\n      case 'fieldset':\n      case 'figcaption':\n      case 'figure':\n      case 'footer':\n      case 'header':\n      case 'hgroup':\n      case 'main':\n      case 'menu':\n      case 'nav':\n      case 'ol':\n      case 'p':\n      case 'section':\n      case 'summary':\n      case 'ul':\n      case 'pre':\n      case 'listing':\n      case 'table':\n      case 'hr':\n      case 'xmp':\n      case 'h1':\n      case 'h2':\n      case 'h3':\n      case 'h4':\n      case 'h5':\n      case 'h6':\n        return ancestorInfo.pTagInButtonScope;\n\n      case 'form':\n        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;\n\n      case 'li':\n        return ancestorInfo.listItemTagAutoclosing;\n\n      case 'dd':\n      case 'dt':\n        return ancestorInfo.dlItemTagAutoclosing;\n\n      case 'button':\n        return ancestorInfo.buttonTagInScope;\n\n      case 'a':\n        // Spec says something about storing a list of markers, but it sounds\n        // equivalent to this check.\n        return ancestorInfo.aTagInScope;\n\n      case 'nobr':\n        return ancestorInfo.nobrTagInScope;\n    }\n\n    return null;\n  };\n\n  var didWarn = {};\n\n  validateDOMNesting = function validateDOMNesting(childTag, childText, ancestorInfo) {\n    ancestorInfo = ancestorInfo || emptyAncestorInfo;\n    var parentInfo = ancestorInfo.current;\n    var parentTag = parentInfo && parentInfo.tag;\n\n    if (childText != null) {\n      (0, _warning2.default)(childTag == null, 'validateDOMNesting: when childText is passed, childTag should be null');\n      childTag = '#text';\n    }\n\n    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;\n    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);\n    var invalidParentOrAncestor = invalidParent || invalidAncestor;\n    if (!invalidParentOrAncestor) {\n      return;\n    }\n\n    var ancestorTag = invalidParentOrAncestor.tag;\n    var addendum = getCurrentFiberStackAddendum();\n\n    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;\n    if (didWarn[warnKey]) {\n      return;\n    }\n    didWarn[warnKey] = true;\n\n    var tagDisplayName = childTag;\n    var whitespaceInfo = '';\n    if (childTag === '#text') {\n      if (/\\S/.test(childText)) {\n        tagDisplayName = 'Text nodes';\n      } else {\n        tagDisplayName = 'Whitespace text nodes';\n        whitespaceInfo = \" Make sure you don't have any extra whitespace between tags on \" + 'each line of your source code.';\n      }\n    } else {\n      tagDisplayName = '<' + childTag + '>';\n    }\n\n    if (invalidParent) {\n      var info = '';\n      if (ancestorTag === 'table' && childTag === 'tr') {\n        info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';\n      }\n      (0, _warning2.default)(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);\n    } else {\n      (0, _warning2.default)(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);\n    }\n  };\n\n  // TODO: turn this into a named export\n  validateDOMNesting.updatedAncestorInfo = updatedAncestorInfo;\n}\n\nexports.default = validateDOMNesting;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _FallbackCompositionState = require('./FallbackCompositionState');\n\nvar FallbackCompositionState = _interopRequireWildcard(_FallbackCompositionState);\n\nvar _SyntheticCompositionEvent = require('./SyntheticCompositionEvent');\n\nvar _SyntheticCompositionEvent2 = _interopRequireDefault(_SyntheticCompositionEvent);\n\nvar _SyntheticInputEvent = require('./SyntheticInputEvent');\n\nvar _SyntheticInputEvent2 = _interopRequireDefault(_SyntheticInputEvent);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space\nvar START_KEYCODE = 229;\n\nvar canUseCompositionEvent = _ExecutionEnvironment2.default.canUseDOM && 'CompositionEvent' in window;\n\nvar documentMode = null;\nif (_ExecutionEnvironment2.default.canUseDOM && 'documentMode' in document) {\n  documentMode = document.documentMode;\n}\n\n// Webkit offers a very useful `textInput` event that can be used to\n// directly represent `beforeInput`. The IE `textinput` event is not as\n// useful, so we don't use it.\nvar canUseTextInputEvent = _ExecutionEnvironment2.default.canUseDOM && 'TextEvent' in window && !documentMode;\n\n// In IE9+, we have access to composition events, but the data supplied\n// by the native compositionend event may be incorrect. Japanese ideographic\n// spaces, for instance (\\u3000) are not recorded correctly.\nvar useFallbackCompositionData = _ExecutionEnvironment2.default.canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);\n\nvar SPACEBAR_CODE = 32;\nvar SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);\n\n// Events and their corresponding property names.\nvar eventTypes = {\n  beforeInput: {\n    phasedRegistrationNames: {\n      bubbled: 'onBeforeInput',\n      captured: 'onBeforeInputCapture'\n    },\n    dependencies: ['topCompositionEnd', 'topKeyPress', 'topTextInput', 'topPaste']\n  },\n  compositionEnd: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionEnd',\n      captured: 'onCompositionEndCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionEnd', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionStart: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionStart',\n      captured: 'onCompositionStartCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionStart', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  },\n  compositionUpdate: {\n    phasedRegistrationNames: {\n      bubbled: 'onCompositionUpdate',\n      captured: 'onCompositionUpdateCapture'\n    },\n    dependencies: ['topBlur', 'topCompositionUpdate', 'topKeyDown', 'topKeyPress', 'topKeyUp', 'topMouseDown']\n  }\n};\n\n// Track whether we've ever handled a keypress on the space key.\nvar hasSpaceKeypress = false;\n\n/**\n * Return whether a native keypress event is assumed to be a command.\n * This is required because Firefox fires `keypress` events for key commands\n * (cut, copy, select-all, etc.) even though no character is inserted.\n */\nfunction isKeypressCommand(nativeEvent) {\n  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) &&\n  // ctrlKey && altKey is equivalent to AltGr, and is not a command.\n  !(nativeEvent.ctrlKey && nativeEvent.altKey);\n}\n\n/**\n * Translate native top level events into event types.\n *\n * @param {string} topLevelType\n * @return {object}\n */\nfunction getCompositionEventType(topLevelType) {\n  switch (topLevelType) {\n    case 'topCompositionStart':\n      return eventTypes.compositionStart;\n    case 'topCompositionEnd':\n      return eventTypes.compositionEnd;\n    case 'topCompositionUpdate':\n      return eventTypes.compositionUpdate;\n  }\n}\n\n/**\n * Does our fallback best-guess model think this event signifies that\n * composition has begun?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionStart(topLevelType, nativeEvent) {\n  return topLevelType === 'topKeyDown' && nativeEvent.keyCode === START_KEYCODE;\n}\n\n/**\n * Does our fallback mode think that this event is the end of composition?\n *\n * @param {string} topLevelType\n * @param {object} nativeEvent\n * @return {boolean}\n */\nfunction isFallbackCompositionEnd(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topKeyUp':\n      // Command keys insert or clear IME input.\n      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;\n    case 'topKeyDown':\n      // Expect IME keyCode on each keydown. If we get any other\n      // code we must have exited earlier.\n      return nativeEvent.keyCode !== START_KEYCODE;\n    case 'topKeyPress':\n    case 'topMouseDown':\n    case 'topBlur':\n      // Events are not possible without cancelling IME.\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Google Input Tools provides composition data via a CustomEvent,\n * with the `data` property populated in the `detail` object. If this\n * is available on the event object, use it. If not, this is a plain\n * composition event and we have nothing special to extract.\n *\n * @param {object} nativeEvent\n * @return {?string}\n */\nfunction getDataFromCustomEvent(nativeEvent) {\n  var detail = nativeEvent.detail;\n  if ((typeof detail === 'undefined' ? 'undefined' : _typeof(detail)) === 'object' && 'data' in detail) {\n    return detail.data;\n  }\n  return null;\n}\n\n// Track the current IME composition status, if any.\nvar isComposing = false;\n\n/**\n * @return {?object} A SyntheticCompositionEvent.\n */\nfunction extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var eventType = void 0;\n  var fallbackData = void 0;\n\n  if (canUseCompositionEvent) {\n    eventType = getCompositionEventType(topLevelType);\n  } else if (!isComposing) {\n    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {\n      eventType = eventTypes.compositionStart;\n    }\n  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n    eventType = eventTypes.compositionEnd;\n  }\n\n  if (!eventType) {\n    return null;\n  }\n\n  if (useFallbackCompositionData) {\n    // The current composition is stored statically and must not be\n    // overwritten while composition continues.\n    if (!isComposing && eventType === eventTypes.compositionStart) {\n      isComposing = FallbackCompositionState.initialize(nativeEventTarget);\n    } else if (eventType === eventTypes.compositionEnd) {\n      if (isComposing) {\n        fallbackData = FallbackCompositionState.getData();\n      }\n    }\n  }\n\n  var event = _SyntheticCompositionEvent2.default.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);\n\n  if (fallbackData) {\n    // Inject data generated from fallback path into the synthetic event.\n    // This matches the property of native CompositionEventInterface.\n    event.data = fallbackData;\n  } else {\n    var customData = getDataFromCustomEvent(nativeEvent);\n    if (customData !== null) {\n      event.data = customData;\n    }\n  }\n\n  (0, _EventPropagators.accumulateTwoPhaseDispatches)(event);\n  return event;\n}\n\n/**\n * @param {TopLevelTypes} topLevelType Record from `BrowserEventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The string corresponding to this `beforeInput` event.\n */\nfunction getNativeBeforeInputChars(topLevelType, nativeEvent) {\n  switch (topLevelType) {\n    case 'topCompositionEnd':\n      return getDataFromCustomEvent(nativeEvent);\n    case 'topKeyPress':\n      /**\n       * If native `textInput` events are available, our goal is to make\n       * use of them. However, there is a special case: the spacebar key.\n       * In Webkit, preventing default on a spacebar `textInput` event\n       * cancels character insertion, but it *also* causes the browser\n       * to fall back to its default spacebar behavior of scrolling the\n       * page.\n       *\n       * Tracking at:\n       * https://code.google.com/p/chromium/issues/detail?id=355103\n       *\n       * To avoid this issue, use the keypress event as if no `textInput`\n       * event is available.\n       */\n      var which = nativeEvent.which;\n      if (which !== SPACEBAR_CODE) {\n        return null;\n      }\n\n      hasSpaceKeypress = true;\n      return SPACEBAR_CHAR;\n\n    case 'topTextInput':\n      // Record the characters to be added to the DOM.\n      var chars = nativeEvent.data;\n\n      // If it's a spacebar character, assume that we have already handled\n      // it at the keypress level and bail immediately. Android Chrome\n      // doesn't give us keycodes, so we need to blacklist it.\n      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {\n        return null;\n      }\n\n      return chars;\n\n    default:\n      // For other native event types, do nothing.\n      return null;\n  }\n}\n\n/**\n * For browsers that do not provide the `textInput` event, extract the\n * appropriate string to use for SyntheticInputEvent.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {object} nativeEvent Native browser event.\n * @return {?string} The fallback string for this `beforeInput` event.\n */\nfunction getFallbackBeforeInputChars(topLevelType, nativeEvent) {\n  // If we are currently composing (IME) and using a fallback to do so,\n  // try to extract the composed characters from the fallback object.\n  // If composition event is available, we extract a string only at\n  // compositionevent, otherwise extract it at fallback events.\n  if (isComposing) {\n    if (topLevelType === 'topCompositionEnd' || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {\n      var chars = FallbackCompositionState.getData();\n      FallbackCompositionState.reset();\n      isComposing = false;\n      return chars;\n    }\n    return null;\n  }\n\n  switch (topLevelType) {\n    case 'topPaste':\n      // If a paste event occurs after a keypress, throw out the input\n      // chars. Paste events should not lead to BeforeInput events.\n      return null;\n    case 'topKeyPress':\n      /**\n       * As of v27, Firefox may fire keypress events even when no character\n       * will be inserted. A few possibilities:\n       *\n       * - `which` is `0`. Arrow keys, Esc key, etc.\n       *\n       * - `which` is the pressed key code, but no char is available.\n       *   Ex: 'AltGr + d` in Polish. There is no modified character for\n       *   this key combination and no character is inserted into the\n       *   document, but FF fires the keypress for char code `100` anyway.\n       *   No `input` event will occur.\n       *\n       * - `which` is the pressed key code, but a command combination is\n       *   being used. Ex: `Cmd+C`. No character is inserted, and no\n       *   `input` event will occur.\n       */\n      if (!isKeypressCommand(nativeEvent)) {\n        // IE fires the `keypress` event when a user types an emoji via\n        // Touch keyboard of Windows.  In such a case, the `char` property\n        // holds an emoji character like `\\uD83D\\uDE0A`.  Because its length\n        // is 2, the property `which` does not represent an emoji correctly.\n        // In such a case, we directly return the `char` property instead of\n        // using `which`.\n        if (nativeEvent.char && nativeEvent.char.length > 1) {\n          return nativeEvent.char;\n        } else if (nativeEvent.which) {\n          return String.fromCharCode(nativeEvent.which);\n        }\n      }\n      return null;\n    case 'topCompositionEnd':\n      return useFallbackCompositionData ? null : nativeEvent.data;\n    default:\n      return null;\n  }\n}\n\n/**\n * Extract a SyntheticInputEvent for `beforeInput`, based on either native\n * `textInput` or fallback behavior.\n *\n * @return {?object} A SyntheticInputEvent.\n */\nfunction extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n  var chars = void 0;\n\n  if (canUseTextInputEvent) {\n    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);\n  } else {\n    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);\n  }\n\n  // If no characters are being inserted, no BeforeInput event should\n  // be fired.\n  if (!chars) {\n    return null;\n  }\n\n  var event = _SyntheticInputEvent2.default.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);\n\n  event.data = chars;\n  (0, _EventPropagators.accumulateTwoPhaseDispatches)(event);\n  return event;\n}\n\n/**\n * Create an `onBeforeInput` event to match\n * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.\n *\n * This event plugin is based on the native `textInput` event\n * available in Chrome, Safari, Opera, and IE. This event fires after\n * `onKeyPress` and `onCompositionEnd`, but before `onInput`.\n *\n * `beforeInput` is spec'd but not implemented in any browsers, and\n * the `input` event does not provide any useful information about what has\n * actually been added, contrary to the spec. Thus, `textInput` is the best\n * available event to identify the characters that have actually been inserted\n * into the target node.\n *\n * This plugin is also responsible for emitting `composition` events, thus\n * allowing us to share composition fallback code for both `beforeInput` and\n * `composition` event types.\n */\nvar BeforeInputEventPlugin = {\n  eventTypes: eventTypes,\n\n  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n\n    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);\n\n    if (composition === null) {\n      return beforeInput;\n    }\n\n    if (beforeInput === null) {\n      return composition;\n    }\n\n    return [composition, beforeInput];\n  }\n};\n\nexports.default = BeforeInputEventPlugin;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mediaEventTypes = exports.topLevelTypes = undefined;\n\nvar _getVendorPrefixedEventName = require('./getVendorPrefixedEventName');\n\nvar _getVendorPrefixedEventName2 = _interopRequireDefault(_getVendorPrefixedEventName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Types of raw signals from the browser caught at the top level.\n *\n * For events like 'submit' or audio/video events which don't consistently\n * bubble (which we trap at a lower node than `document`), binding\n * at `document` would cause duplicate events so we don't include them here.\n */\nvar topLevelTypes = exports.topLevelTypes = {\n  topAnimationEnd: (0, _getVendorPrefixedEventName2.default)('animationend'),\n  topAnimationIteration: (0, _getVendorPrefixedEventName2.default)('animationiteration'),\n  topAnimationStart: (0, _getVendorPrefixedEventName2.default)('animationstart'),\n  topBlur: 'blur',\n  topCancel: 'cancel',\n  topChange: 'change',\n  topClick: 'click',\n  topClose: 'close',\n  topCompositionEnd: 'compositionend',\n  topCompositionStart: 'compositionstart',\n  topCompositionUpdate: 'compositionupdate',\n  topContextMenu: 'contextmenu',\n  topCopy: 'copy',\n  topCut: 'cut',\n  topDoubleClick: 'dblclick',\n  topDrag: 'drag',\n  topDragEnd: 'dragend',\n  topDragEnter: 'dragenter',\n  topDragExit: 'dragexit',\n  topDragLeave: 'dragleave',\n  topDragOver: 'dragover',\n  topDragStart: 'dragstart',\n  topDrop: 'drop',\n  topFocus: 'focus',\n  topInput: 'input',\n  topKeyDown: 'keydown',\n  topKeyPress: 'keypress',\n  topKeyUp: 'keyup',\n  topLoad: 'load',\n  topLoadStart: 'loadstart',\n  topMouseDown: 'mousedown',\n  topMouseMove: 'mousemove',\n  topMouseOut: 'mouseout',\n  topMouseOver: 'mouseover',\n  topMouseUp: 'mouseup',\n  topPaste: 'paste',\n  topScroll: 'scroll',\n  topSelectionChange: 'selectionchange',\n  topTextInput: 'textInput',\n  topToggle: 'toggle',\n  topTouchCancel: 'touchcancel',\n  topTouchEnd: 'touchend',\n  topTouchMove: 'touchmove',\n  topTouchStart: 'touchstart',\n  topTransitionEnd: (0, _getVendorPrefixedEventName2.default)('transitionend'),\n  topWheel: 'wheel'\n};\n\n// There are so many media events, it makes sense to just\n// maintain a list of them. Note these aren't technically\n// \"top-level\" since they don't bubble. We should come up\n// with a better naming convention if we come to refactoring\n// the event system.\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar mediaEventTypes = exports.mediaEventTypes = {\n  topAbort: 'abort',\n  topCanPlay: 'canplay',\n  topCanPlayThrough: 'canplaythrough',\n  topDurationChange: 'durationchange',\n  topEmptied: 'emptied',\n  topEncrypted: 'encrypted',\n  topEnded: 'ended',\n  topError: 'error',\n  topLoadedData: 'loadeddata',\n  topLoadedMetadata: 'loadedmetadata',\n  topLoadStart: 'loadstart',\n  topPause: 'pause',\n  topPlay: 'play',\n  topPlaying: 'playing',\n  topProgress: 'progress',\n  topRateChange: 'ratechange',\n  topSeeked: 'seeked',\n  topSeeking: 'seeking',\n  topStalled: 'stalled',\n  topSuspend: 'suspend',\n  topTimeUpdate: 'timeupdate',\n  topVolumeChange: 'volumechange',\n  topWaiting: 'waiting'\n};\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9Ccm93c2VyRXZlbnRDb25zdGFudHMuanMiXSwibmFtZXMiOlsidG9wTGV2ZWxUeXBlcyIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwibWVkaWFFdmVudFR5cGVzIiwidG9wQWJvcnQiLCJ0b3BDYW5QbGF5IiwidG9wQ2FuUGxheVRocm91Z2giLCJ0b3BEdXJhdGlvbkNoYW5nZSIsInRvcEVtcHRpZWQiLCJ0b3BFbmNyeXB0ZWQiLCJ0b3BFbmRlZCIsInRvcEVycm9yIiwidG9wTG9hZGVkRGF0YSIsInRvcExvYWRlZE1ldGFkYXRhIiwidG9wUGF1c2UiLCJ0b3BQbGF5IiwidG9wUGxheWluZyIsInRvcFByb2dyZXNzIiwidG9wUmF0ZUNoYW5nZSIsInRvcFNlZWtlZCIsInRvcFNlZWtpbmciLCJ0b3BTdGFsbGVkIiwidG9wU3VzcGVuZCIsInRvcFRpbWVVcGRhdGUiLCJ0b3BWb2x1bWVDaGFuZ2UiLCJ0b3BXYWl0aW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7OztBQUVBOzs7Ozs7O0FBT08sSUFBTUEsd0NBQWdCO0FBQzNCQyxtQkFBaUIsMENBQTJCLGNBQTNCLENBRFU7QUFFM0JDLHlCQUF1QiwwQ0FBMkIsb0JBQTNCLENBRkk7QUFHM0JDLHFCQUFtQiwwQ0FBMkIsZ0JBQTNCLENBSFE7QUFJM0JDLFdBQVMsTUFKa0I7QUFLM0JDLGFBQVcsUUFMZ0I7QUFNM0JDLGFBQVcsUUFOZ0I7QUFPM0JDLFlBQVUsT0FQaUI7QUFRM0JDLFlBQVUsT0FSaUI7QUFTM0JDLHFCQUFtQixnQkFUUTtBQVUzQkMsdUJBQXFCLGtCQVZNO0FBVzNCQyx3QkFBc0IsbUJBWEs7QUFZM0JDLGtCQUFnQixhQVpXO0FBYTNCQyxXQUFTLE1BYmtCO0FBYzNCQyxVQUFRLEtBZG1CO0FBZTNCQyxrQkFBZ0IsVUFmVztBQWdCM0JDLFdBQVMsTUFoQmtCO0FBaUIzQkMsY0FBWSxTQWpCZTtBQWtCM0JDLGdCQUFjLFdBbEJhO0FBbUIzQkMsZUFBYSxVQW5CYztBQW9CM0JDLGdCQUFjLFdBcEJhO0FBcUIzQkMsZUFBYSxVQXJCYztBQXNCM0JDLGdCQUFjLFdBdEJhO0FBdUIzQkMsV0FBUyxNQXZCa0I7QUF3QjNCQyxZQUFVLE9BeEJpQjtBQXlCM0JDLFlBQVUsT0F6QmlCO0FBMEIzQkMsY0FBWSxTQTFCZTtBQTJCM0JDLGVBQWEsVUEzQmM7QUE0QjNCQyxZQUFVLE9BNUJpQjtBQTZCM0JDLFdBQVMsTUE3QmtCO0FBOEIzQkMsZ0JBQWMsV0E5QmE7QUErQjNCQyxnQkFBYyxXQS9CYTtBQWdDM0JDLGdCQUFjLFdBaENhO0FBaUMzQkMsZUFBYSxVQWpDYztBQWtDM0JDLGdCQUFjLFdBbENhO0FBbUMzQkMsY0FBWSxTQW5DZTtBQW9DM0JDLFlBQVUsT0FwQ2lCO0FBcUMzQkMsYUFBVyxRQXJDZ0I7QUFzQzNCQyxzQkFBb0IsaUJBdENPO0FBdUMzQkMsZ0JBQWMsV0F2Q2E7QUF3QzNCQyxhQUFXLFFBeENnQjtBQXlDM0JDLGtCQUFnQixhQXpDVztBQTBDM0JDLGVBQWEsVUExQ2M7QUEyQzNCQyxnQkFBYyxXQTNDYTtBQTRDM0JDLGlCQUFlLFlBNUNZO0FBNkMzQkMsb0JBQWtCLDBDQUEyQixlQUEzQixDQTdDUztBQThDM0JDLFlBQVU7QUE5Q2lCLENBQXRCOztBQWlEUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBckVBOzs7Ozs7O0FBc0VPLElBQU1DLDRDQUFrQjtBQUM3QkMsWUFBVSxPQURtQjtBQUU3QkMsY0FBWSxTQUZpQjtBQUc3QkMscUJBQW1CLGdCQUhVO0FBSTdCQyxxQkFBbUIsZ0JBSlU7QUFLN0JDLGNBQVksU0FMaUI7QUFNN0JDLGdCQUFjLFdBTmU7QUFPN0JDLFlBQVUsT0FQbUI7QUFRN0JDLFlBQVUsT0FSbUI7QUFTN0JDLGlCQUFlLFlBVGM7QUFVN0JDLHFCQUFtQixnQkFWVTtBQVc3QjNCLGdCQUFjLFdBWGU7QUFZN0I0QixZQUFVLE9BWm1CO0FBYTdCQyxXQUFTLE1BYm9CO0FBYzdCQyxjQUFZLFNBZGlCO0FBZTdCQyxlQUFhLFVBZmdCO0FBZ0I3QkMsaUJBQWUsWUFoQmM7QUFpQjdCQyxhQUFXLFFBakJrQjtBQWtCN0JDLGNBQVksU0FsQmlCO0FBbUI3QkMsY0FBWSxTQW5CaUI7QUFvQjdCQyxjQUFZLFNBcEJpQjtBQXFCN0JDLGlCQUFlLFlBckJjO0FBc0I3QkMsbUJBQWlCLGNBdEJZO0FBdUI3QkMsY0FBWTtBQXZCaUIsQ0FBeEIiLCJmaWxlIjoiQnJvd3NlckV2ZW50Q29uc3RhbnRzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lIGZyb20gJy4vZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUnO1xuXG4vKipcbiAqIFR5cGVzIG9mIHJhdyBzaWduYWxzIGZyb20gdGhlIGJyb3dzZXIgY2F1Z2h0IGF0IHRoZSB0b3AgbGV2ZWwuXG4gKlxuICogRm9yIGV2ZW50cyBsaWtlICdzdWJtaXQnIG9yIGF1ZGlvL3ZpZGVvIGV2ZW50cyB3aGljaCBkb24ndCBjb25zaXN0ZW50bHlcbiAqIGJ1YmJsZSAod2hpY2ggd2UgdHJhcCBhdCBhIGxvd2VyIG5vZGUgdGhhbiBgZG9jdW1lbnRgKSwgYmluZGluZ1xuICogYXQgYGRvY3VtZW50YCB3b3VsZCBjYXVzZSBkdXBsaWNhdGUgZXZlbnRzIHNvIHdlIGRvbid0IGluY2x1ZGUgdGhlbSBoZXJlLlxuICovXG5leHBvcnQgY29uc3QgdG9wTGV2ZWxUeXBlcyA9IHtcbiAgdG9wQW5pbWF0aW9uRW5kOiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSgnYW5pbWF0aW9uZW5kJyksXG4gIHRvcEFuaW1hdGlvbkl0ZXJhdGlvbjogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbml0ZXJhdGlvbicpLFxuICB0b3BBbmltYXRpb25TdGFydDogZ2V0VmVuZG9yUHJlZml4ZWRFdmVudE5hbWUoJ2FuaW1hdGlvbnN0YXJ0JyksXG4gIHRvcEJsdXI6ICdibHVyJyxcbiAgdG9wQ2FuY2VsOiAnY2FuY2VsJyxcbiAgdG9wQ2hhbmdlOiAnY2hhbmdlJyxcbiAgdG9wQ2xpY2s6ICdjbGljaycsXG4gIHRvcENsb3NlOiAnY2xvc2UnLFxuICB0b3BDb21wb3NpdGlvbkVuZDogJ2NvbXBvc2l0aW9uZW5kJyxcbiAgdG9wQ29tcG9zaXRpb25TdGFydDogJ2NvbXBvc2l0aW9uc3RhcnQnLFxuICB0b3BDb21wb3NpdGlvblVwZGF0ZTogJ2NvbXBvc2l0aW9udXBkYXRlJyxcbiAgdG9wQ29udGV4dE1lbnU6ICdjb250ZXh0bWVudScsXG4gIHRvcENvcHk6ICdjb3B5JyxcbiAgdG9wQ3V0OiAnY3V0JyxcbiAgdG9wRG91YmxlQ2xpY2s6ICdkYmxjbGljaycsXG4gIHRvcERyYWc6ICdkcmFnJyxcbiAgdG9wRHJhZ0VuZDogJ2RyYWdlbmQnLFxuICB0b3BEcmFnRW50ZXI6ICdkcmFnZW50ZXInLFxuICB0b3BEcmFnRXhpdDogJ2RyYWdleGl0JyxcbiAgdG9wRHJhZ0xlYXZlOiAnZHJhZ2xlYXZlJyxcbiAgdG9wRHJhZ092ZXI6ICdkcmFnb3ZlcicsXG4gIHRvcERyYWdTdGFydDogJ2RyYWdzdGFydCcsXG4gIHRvcERyb3A6ICdkcm9wJyxcbiAgdG9wRm9jdXM6ICdmb2N1cycsXG4gIHRvcElucHV0OiAnaW5wdXQnLFxuICB0b3BLZXlEb3duOiAna2V5ZG93bicsXG4gIHRvcEtleVByZXNzOiAna2V5cHJlc3MnLFxuICB0b3BLZXlVcDogJ2tleXVwJyxcbiAgdG9wTG9hZDogJ2xvYWQnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BNb3VzZURvd246ICdtb3VzZWRvd24nLFxuICB0b3BNb3VzZU1vdmU6ICdtb3VzZW1vdmUnLFxuICB0b3BNb3VzZU91dDogJ21vdXNlb3V0JyxcbiAgdG9wTW91c2VPdmVyOiAnbW91c2VvdmVyJyxcbiAgdG9wTW91c2VVcDogJ21vdXNldXAnLFxuICB0b3BQYXN0ZTogJ3Bhc3RlJyxcbiAgdG9wU2Nyb2xsOiAnc2Nyb2xsJyxcbiAgdG9wU2VsZWN0aW9uQ2hhbmdlOiAnc2VsZWN0aW9uY2hhbmdlJyxcbiAgdG9wVGV4dElucHV0OiAndGV4dElucHV0JyxcbiAgdG9wVG9nZ2xlOiAndG9nZ2xlJyxcbiAgdG9wVG91Y2hDYW5jZWw6ICd0b3VjaGNhbmNlbCcsXG4gIHRvcFRvdWNoRW5kOiAndG91Y2hlbmQnLFxuICB0b3BUb3VjaE1vdmU6ICd0b3VjaG1vdmUnLFxuICB0b3BUb3VjaFN0YXJ0OiAndG91Y2hzdGFydCcsXG4gIHRvcFRyYW5zaXRpb25FbmQ6IGdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lKCd0cmFuc2l0aW9uZW5kJyksXG4gIHRvcFdoZWVsOiAnd2hlZWwnLFxufTtcblxuLy8gVGhlcmUgYXJlIHNvIG1hbnkgbWVkaWEgZXZlbnRzLCBpdCBtYWtlcyBzZW5zZSB0byBqdXN0XG4vLyBtYWludGFpbiBhIGxpc3Qgb2YgdGhlbS4gTm90ZSB0aGVzZSBhcmVuJ3QgdGVjaG5pY2FsbHlcbi8vIFwidG9wLWxldmVsXCIgc2luY2UgdGhleSBkb24ndCBidWJibGUuIFdlIHNob3VsZCBjb21lIHVwXG4vLyB3aXRoIGEgYmV0dGVyIG5hbWluZyBjb252ZW50aW9uIGlmIHdlIGNvbWUgdG8gcmVmYWN0b3Jpbmdcbi8vIHRoZSBldmVudCBzeXN0ZW0uXG5leHBvcnQgY29uc3QgbWVkaWFFdmVudFR5cGVzID0ge1xuICB0b3BBYm9ydDogJ2Fib3J0JyxcbiAgdG9wQ2FuUGxheTogJ2NhbnBsYXknLFxuICB0b3BDYW5QbGF5VGhyb3VnaDogJ2NhbnBsYXl0aHJvdWdoJyxcbiAgdG9wRHVyYXRpb25DaGFuZ2U6ICdkdXJhdGlvbmNoYW5nZScsXG4gIHRvcEVtcHRpZWQ6ICdlbXB0aWVkJyxcbiAgdG9wRW5jcnlwdGVkOiAnZW5jcnlwdGVkJyxcbiAgdG9wRW5kZWQ6ICdlbmRlZCcsXG4gIHRvcEVycm9yOiAnZXJyb3InLFxuICB0b3BMb2FkZWREYXRhOiAnbG9hZGVkZGF0YScsXG4gIHRvcExvYWRlZE1ldGFkYXRhOiAnbG9hZGVkbWV0YWRhdGEnLFxuICB0b3BMb2FkU3RhcnQ6ICdsb2Fkc3RhcnQnLFxuICB0b3BQYXVzZTogJ3BhdXNlJyxcbiAgdG9wUGxheTogJ3BsYXknLFxuICB0b3BQbGF5aW5nOiAncGxheWluZycsXG4gIHRvcFByb2dyZXNzOiAncHJvZ3Jlc3MnLFxuICB0b3BSYXRlQ2hhbmdlOiAncmF0ZWNoYW5nZScsXG4gIHRvcFNlZWtlZDogJ3NlZWtlZCcsXG4gIHRvcFNlZWtpbmc6ICdzZWVraW5nJyxcbiAgdG9wU3RhbGxlZDogJ3N0YWxsZWQnLFxuICB0b3BTdXNwZW5kOiAnc3VzcGVuZCcsXG4gIHRvcFRpbWVVcGRhdGU6ICd0aW1ldXBkYXRlJyxcbiAgdG9wVm9sdW1lQ2hhbmdlOiAndm9sdW1lY2hhbmdlJyxcbiAgdG9wV2FpdGluZzogJ3dhaXRpbmcnLFxufTtcblxuZXhwb3J0IHR5cGUgVG9wTGV2ZWxUeXBlcyA9ICRFbnVtPHR5cGVvZiB0b3BMZXZlbFR5cGVzPjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventPluginHub = require('events/EventPluginHub');\n\nvar EventPluginHub = _interopRequireWildcard(_EventPluginHub);\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar _ReactControlledComponent = require('events/ReactControlledComponent');\n\nvar _ReactGenericBatching = require('events/ReactGenericBatching');\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nvar _isTextInputElement = require('shared/isTextInputElement');\n\nvar _isTextInputElement2 = _interopRequireDefault(_isTextInputElement);\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _getEventTarget = require('./getEventTarget');\n\nvar _getEventTarget2 = _interopRequireDefault(_getEventTarget);\n\nvar _isEventSupported = require('./isEventSupported');\n\nvar _isEventSupported2 = _interopRequireDefault(_isEventSupported);\n\nvar _ReactDOMComponentTree = require('../client/ReactDOMComponentTree');\n\nvar _inputValueTracking = require('../client/inputValueTracking');\n\nvar inputValueTracking = _interopRequireWildcard(_inputValueTracking);\n\nvar _ReactDOMFiberInput = require('../client/ReactDOMFiberInput');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar eventTypes = {\n  change: {\n    phasedRegistrationNames: {\n      bubbled: 'onChange',\n      captured: 'onChangeCapture'\n    },\n    dependencies: ['topBlur', 'topChange', 'topClick', 'topFocus', 'topInput', 'topKeyDown', 'topKeyUp', 'topSelectionChange']\n  }\n};\n\nfunction createAndAccumulateChangeEvent(inst, nativeEvent, target) {\n  var event = _SyntheticEvent2.default.getPooled(eventTypes.change, inst, nativeEvent, target);\n  event.type = 'change';\n  // Flag this event loop as needing state restore.\n  (0, _ReactControlledComponent.enqueueStateRestore)(target);\n  (0, _EventPropagators.accumulateTwoPhaseDispatches)(event);\n  return event;\n}\n/**\n * For IE shims\n */\nvar activeElement = null;\nvar activeElementInst = null;\n\n/**\n * SECTION: handle `change` event\n */\nfunction shouldUseChangeEvent(elem) {\n  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();\n  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';\n}\n\nfunction manualDispatchChangeEvent(nativeEvent) {\n  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, (0, _getEventTarget2.default)(nativeEvent));\n\n  // If change and propertychange bubbled, we'd just bind to it like all the\n  // other events and have it go through ReactBrowserEventEmitter. Since it\n  // doesn't, we manually listen for the events and so we have to enqueue and\n  // process the abstract event manually.\n  //\n  // Batching is necessary here in order to ensure that all event handlers run\n  // before the next rerender (including event handlers attached to ancestor\n  // elements instead of directly on the input). Without this, controlled\n  // components don't work properly in conjunction with event bubbling because\n  // the component is rerendered and the value reverted before all the event\n  // handlers can run. See https://github.com/facebook/react/issues/708.\n  (0, _ReactGenericBatching.batchedUpdates)(runEventInBatch, event);\n}\n\nfunction runEventInBatch(event) {\n  EventPluginHub.runEventsInBatch(event, false);\n}\n\nfunction getInstIfValueChanged(targetInst) {\n  var targetNode = (0, _ReactDOMComponentTree.getNodeFromInstance)(targetInst);\n  if (inputValueTracking.updateValueIfChanged(targetNode)) {\n    return targetInst;\n  }\n}\n\nfunction getTargetInstForChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topChange') {\n    return targetInst;\n  }\n}\n\n/**\n * SECTION: handle `input` event\n */\nvar isInputEventSupported = false;\nif (_ExecutionEnvironment2.default.canUseDOM) {\n  // IE9 claims to support the input event but fails to trigger it when\n  // deleting text, so we ignore its input events.\n  isInputEventSupported = (0, _isEventSupported2.default)('input') && (!document.documentMode || document.documentMode > 9);\n}\n\n/**\n * (For IE <=9) Starts tracking propertychange events on the passed-in element\n * and override the value property so that we can distinguish user events from\n * value changes in JS.\n */\nfunction startWatchingForValueChange(target, targetInst) {\n  activeElement = target;\n  activeElementInst = targetInst;\n  activeElement.attachEvent('onpropertychange', handlePropertyChange);\n}\n\n/**\n * (For IE <=9) Removes the event listeners from the currently-tracked element,\n * if any exists.\n */\nfunction stopWatchingForValueChange() {\n  if (!activeElement) {\n    return;\n  }\n  activeElement.detachEvent('onpropertychange', handlePropertyChange);\n  activeElement = null;\n  activeElementInst = null;\n}\n\n/**\n * (For IE <=9) Handles a propertychange event, sending a `change` event if\n * the value of the active element has changed.\n */\nfunction handlePropertyChange(nativeEvent) {\n  if (nativeEvent.propertyName !== 'value') {\n    return;\n  }\n  if (getInstIfValueChanged(activeElementInst)) {\n    manualDispatchChangeEvent(nativeEvent);\n  }\n}\n\nfunction handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {\n  if (topLevelType === 'topFocus') {\n    // In IE9, propertychange fires for most input events but is buggy and\n    // doesn't fire when text is deleted, but conveniently, selectionchange\n    // appears to fire in all of the remaining cases so we catch those and\n    // forward the event if the value has changed\n    // In either case, we don't want to call the event handler if the value\n    // is changed from JS so we redefine a setter for `.value` that updates\n    // our activeElementValue variable, allowing us to ignore those changes\n    //\n    // stopWatching() should be a noop here but we call it just in case we\n    // missed a blur event somehow.\n    stopWatchingForValueChange();\n    startWatchingForValueChange(target, targetInst);\n  } else if (topLevelType === 'topBlur') {\n    stopWatchingForValueChange();\n  }\n}\n\n// For IE8 and IE9.\nfunction getTargetInstForInputEventPolyfill(topLevelType, targetInst) {\n  if (topLevelType === 'topSelectionChange' || topLevelType === 'topKeyUp' || topLevelType === 'topKeyDown') {\n    // On the selectionchange event, the target is just document which isn't\n    // helpful for us so just check activeElement instead.\n    //\n    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire\n    // propertychange on the first input event after setting `value` from a\n    // script and fires only keydown, keypress, keyup. Catching keyup usually\n    // gets it and catching keydown lets us fire an event for the first\n    // keystroke if user does a key repeat (it'll be a little delayed: right\n    // before the second keystroke). Other input methods (e.g., paste) seem to\n    // fire selectionchange normally.\n    return getInstIfValueChanged(activeElementInst);\n  }\n}\n\n/**\n * SECTION: handle `click` event\n */\nfunction shouldUseClickEvent(elem) {\n  // Use the `click` event to detect changes to checkbox and radio inputs.\n  // This approach works across all browsers, whereas `change` does not fire\n  // until `blur` in IE8.\n  var nodeName = elem.nodeName;\n  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');\n}\n\nfunction getTargetInstForClickEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topClick') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {\n  if (topLevelType === 'topInput' || topLevelType === 'topChange') {\n    return getInstIfValueChanged(targetInst);\n  }\n}\n\nfunction handleControlledInputBlur(inst, node) {\n  // TODO: In IE, inst is occasionally null. Why?\n  if (inst == null) {\n    return;\n  }\n\n  // Fiber and ReactDOM keep wrapper state in separate places\n  var state = inst._wrapperState || node._wrapperState;\n\n  if (!state || !state.controlled || node.type !== 'number') {\n    return;\n  }\n\n  // If controlled, assign the value attribute to the current value on blur\n  (0, _ReactDOMFiberInput.setDefaultValue)(node, 'number', node.value);\n}\n\n/**\n * This plugin creates an `onChange` event that normalizes change events\n * across form elements. This event fires at a time when it's possible to\n * change the element's value without seeing a flicker.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - select\n */\nvar ChangeEventPlugin = {\n  eventTypes: eventTypes,\n\n  _isInputEventSupported: isInputEventSupported,\n\n  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var targetNode = targetInst ? (0, _ReactDOMComponentTree.getNodeFromInstance)(targetInst) : window;\n\n    var getTargetInstFunc = void 0,\n        handleEventFunc = void 0;\n    if (shouldUseChangeEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForChangeEvent;\n    } else if ((0, _isTextInputElement2.default)(targetNode)) {\n      if (isInputEventSupported) {\n        getTargetInstFunc = getTargetInstForInputOrChangeEvent;\n      } else {\n        getTargetInstFunc = getTargetInstForInputEventPolyfill;\n        handleEventFunc = handleEventsForInputEventPolyfill;\n      }\n    } else if (shouldUseClickEvent(targetNode)) {\n      getTargetInstFunc = getTargetInstForClickEvent;\n    }\n\n    if (getTargetInstFunc) {\n      var inst = getTargetInstFunc(topLevelType, targetInst);\n      if (inst) {\n        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);\n        return event;\n      }\n    }\n\n    if (handleEventFunc) {\n      handleEventFunc(topLevelType, targetNode, targetInst);\n    }\n\n    // When blurring, set the value attribute for number inputs\n    if (topLevelType === 'topBlur') {\n      handleControlledInputBlur(targetInst, targetNode);\n    }\n  }\n};\n\nexports.default = ChangeEventPlugin;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Module that is injectable into `EventPluginHub`, that specifies a\n * deterministic ordering of `EventPlugin`s. A convenient way to reason about\n * plugins, without having to package every one of them. This is better than\n * having plugins be ordered in the same order that they are injected because\n * that ordering would be influenced by the packaging order.\n * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that\n * preventing default on events is convenient in `SimpleEventPlugin` handlers.\n */\nvar DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'TapEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];\n\nexports.default = DOMEventPluginOrder;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9ET01FdmVudFBsdWdpbk9yZGVyLmpzIl0sIm5hbWVzIjpbIkRPTUV2ZW50UGx1Z2luT3JkZXIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7QUFPQTs7Ozs7Ozs7O0FBU0EsSUFBTUEsc0JBQXNCLENBQzFCLHNCQUQwQixFQUUxQixtQkFGMEIsRUFHMUIsZ0JBSDBCLEVBSTFCLHVCQUowQixFQUsxQixtQkFMMEIsRUFNMUIsbUJBTjBCLEVBTzFCLHdCQVAwQixDQUE1Qjs7a0JBVWVBLG1CIiwiZmlsZSI6IkRPTUV2ZW50UGx1Z2luT3JkZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKipcbiAqIE1vZHVsZSB0aGF0IGlzIGluamVjdGFibGUgaW50byBgRXZlbnRQbHVnaW5IdWJgLCB0aGF0IHNwZWNpZmllcyBhXG4gKiBkZXRlcm1pbmlzdGljIG9yZGVyaW5nIG9mIGBFdmVudFBsdWdpbmBzLiBBIGNvbnZlbmllbnQgd2F5IHRvIHJlYXNvbiBhYm91dFxuICogcGx1Z2lucywgd2l0aG91dCBoYXZpbmcgdG8gcGFja2FnZSBldmVyeSBvbmUgb2YgdGhlbS4gVGhpcyBpcyBiZXR0ZXIgdGhhblxuICogaGF2aW5nIHBsdWdpbnMgYmUgb3JkZXJlZCBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgYXJlIGluamVjdGVkIGJlY2F1c2VcbiAqIHRoYXQgb3JkZXJpbmcgd291bGQgYmUgaW5mbHVlbmNlZCBieSB0aGUgcGFja2FnaW5nIG9yZGVyLlxuICogYFJlc3BvbmRlckV2ZW50UGx1Z2luYCBtdXN0IG9jY3VyIGJlZm9yZSBgU2ltcGxlRXZlbnRQbHVnaW5gIHNvIHRoYXRcbiAqIHByZXZlbnRpbmcgZGVmYXVsdCBvbiBldmVudHMgaXMgY29udmVuaWVudCBpbiBgU2ltcGxlRXZlbnRQbHVnaW5gIGhhbmRsZXJzLlxuICovXG5jb25zdCBET01FdmVudFBsdWdpbk9yZGVyID0gW1xuICAnUmVzcG9uZGVyRXZlbnRQbHVnaW4nLFxuICAnU2ltcGxlRXZlbnRQbHVnaW4nLFxuICAnVGFwRXZlbnRQbHVnaW4nLFxuICAnRW50ZXJMZWF2ZUV2ZW50UGx1Z2luJyxcbiAgJ0NoYW5nZUV2ZW50UGx1Z2luJyxcbiAgJ1NlbGVjdEV2ZW50UGx1Z2luJyxcbiAgJ0JlZm9yZUlucHV0RXZlbnRQbHVnaW4nLFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgRE9NRXZlbnRQbHVnaW5PcmRlcjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar _SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar _SyntheticMouseEvent2 = _interopRequireDefault(_SyntheticMouseEvent);\n\nvar _ReactDOMComponentTree = require('../client/ReactDOMComponentTree');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar eventTypes = {\n  mouseEnter: {\n    registrationName: 'onMouseEnter',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  },\n  mouseLeave: {\n    registrationName: 'onMouseLeave',\n    dependencies: ['topMouseOut', 'topMouseOver']\n  }\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n\nvar EnterLeaveEventPlugin = {\n  eventTypes: eventTypes,\n\n  /**\n   * For almost every interaction we care about, there will be both a top-level\n   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that\n   * we do not extract duplicate events. However, moving the mouse into the\n   * browser from outside will not fire a `mouseout` event. In this case, we use\n   * the `mouseover` top-level event.\n   */\n  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    if (topLevelType === 'topMouseOver' && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {\n      return null;\n    }\n    if (topLevelType !== 'topMouseOut' && topLevelType !== 'topMouseOver') {\n      // Must not be a mouse in or mouse out - ignoring.\n      return null;\n    }\n\n    var win = void 0;\n    if (nativeEventTarget.window === nativeEventTarget) {\n      // `nativeEventTarget` is probably a window object.\n      win = nativeEventTarget;\n    } else {\n      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.\n      var doc = nativeEventTarget.ownerDocument;\n      if (doc) {\n        win = doc.defaultView || doc.parentWindow;\n      } else {\n        win = window;\n      }\n    }\n\n    var from = void 0;\n    var to = void 0;\n    if (topLevelType === 'topMouseOut') {\n      from = targetInst;\n      var related = nativeEvent.relatedTarget || nativeEvent.toElement;\n      to = related ? (0, _ReactDOMComponentTree.getClosestInstanceFromNode)(related) : null;\n    } else {\n      // Moving to a node from outside the window.\n      from = null;\n      to = targetInst;\n    }\n\n    if (from === to) {\n      // Nothing pertains to our managed components.\n      return null;\n    }\n\n    var fromNode = from == null ? win : (0, _ReactDOMComponentTree.getNodeFromInstance)(from);\n    var toNode = to == null ? win : (0, _ReactDOMComponentTree.getNodeFromInstance)(to);\n\n    var leave = _SyntheticMouseEvent2.default.getPooled(eventTypes.mouseLeave, from, nativeEvent, nativeEventTarget);\n    leave.type = 'mouseleave';\n    leave.target = fromNode;\n    leave.relatedTarget = toNode;\n\n    var enter = _SyntheticMouseEvent2.default.getPooled(eventTypes.mouseEnter, to, nativeEvent, nativeEventTarget);\n    enter.type = 'mouseenter';\n    enter.target = toNode;\n    enter.relatedTarget = fromNode;\n\n    (0, _EventPropagators.accumulateEnterLeaveDispatches)(leave, enter, from, to);\n\n    return [leave, enter];\n  }\n};\n\nexports.default = EnterLeaveEventPlugin;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9FbnRlckxlYXZlRXZlbnRQbHVnaW4uanMiXSwibmFtZXMiOlsiZXZlbnRUeXBlcyIsIm1vdXNlRW50ZXIiLCJyZWdpc3RyYXRpb25OYW1lIiwiZGVwZW5kZW5jaWVzIiwibW91c2VMZWF2ZSIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsImV4dHJhY3RFdmVudHMiLCJ0b3BMZXZlbFR5cGUiLCJ0YXJnZXRJbnN0IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsIndpbiIsIndpbmRvdyIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsImZyb20iLCJ0byIsInJlbGF0ZWQiLCJ0b0VsZW1lbnQiLCJmcm9tTm9kZSIsInRvTm9kZSIsImxlYXZlIiwiU3ludGhldGljTW91c2VFdmVudCIsImdldFBvb2xlZCIsInR5cGUiLCJ0YXJnZXQiLCJlbnRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7O0FBRUE7Ozs7QUFDQTs7OztBQUtBLElBQU1BLGFBQWE7QUFDakJDLGNBQVk7QUFDVkMsc0JBQWtCLGNBRFI7QUFFVkMsa0JBQWMsQ0FBQyxhQUFELEVBQWdCLGNBQWhCO0FBRkosR0FESztBQUtqQkMsY0FBWTtBQUNWRixzQkFBa0IsY0FEUjtBQUVWQyxrQkFBYyxDQUFDLGFBQUQsRUFBZ0IsY0FBaEI7QUFGSjtBQUxLLENBQW5CLEMsQ0FmQTs7Ozs7OztBQTBCQSxJQUFNRSx3QkFBd0I7QUFDNUJMLGNBQVlBLFVBRGdCOztBQUc1Qjs7Ozs7OztBQU9BTSxpQkFBZSx1QkFDYkMsWUFEYSxFQUViQyxVQUZhLEVBR2JDLFdBSGEsRUFJYkMsaUJBSmEsRUFLYjtBQUNBLFFBQ0VILGlCQUFpQixjQUFqQixLQUNDRSxZQUFZRSxhQUFaLElBQTZCRixZQUFZRyxXQUQxQyxDQURGLEVBR0U7QUFDQSxhQUFPLElBQVA7QUFDRDtBQUNELFFBQUlMLGlCQUFpQixhQUFqQixJQUFrQ0EsaUJBQWlCLGNBQXZELEVBQXVFO0FBQ3JFO0FBQ0EsYUFBTyxJQUFQO0FBQ0Q7O0FBRUQsUUFBSU0sWUFBSjtBQUNBLFFBQUlILGtCQUFrQkksTUFBbEIsS0FBNkJKLGlCQUFqQyxFQUFvRDtBQUNsRDtBQUNBRyxZQUFNSCxpQkFBTjtBQUNELEtBSEQsTUFHTztBQUNMO0FBQ0EsVUFBTUssTUFBTUwsa0JBQWtCTSxhQUE5QjtBQUNBLFVBQUlELEdBQUosRUFBUztBQUNQRixjQUFNRSxJQUFJRSxXQUFKLElBQW1CRixJQUFJRyxZQUE3QjtBQUNELE9BRkQsTUFFTztBQUNMTCxjQUFNQyxNQUFOO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJSyxhQUFKO0FBQ0EsUUFBSUMsV0FBSjtBQUNBLFFBQUliLGlCQUFpQixhQUFyQixFQUFvQztBQUNsQ1ksYUFBT1gsVUFBUDtBQUNBLFVBQU1hLFVBQVVaLFlBQVlFLGFBQVosSUFBNkJGLFlBQVlhLFNBQXpEO0FBQ0FGLFdBQUtDLFVBQVUsdURBQTJCQSxPQUEzQixDQUFWLEdBQWdELElBQXJEO0FBQ0QsS0FKRCxNQUlPO0FBQ0w7QUFDQUYsYUFBTyxJQUFQO0FBQ0FDLFdBQUtaLFVBQUw7QUFDRDs7QUFFRCxRQUFJVyxTQUFTQyxFQUFiLEVBQWlCO0FBQ2Y7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRCxRQUFNRyxXQUFXSixRQUFRLElBQVIsR0FBZU4sR0FBZixHQUFxQixnREFBb0JNLElBQXBCLENBQXRDO0FBQ0EsUUFBTUssU0FBU0osTUFBTSxJQUFOLEdBQWFQLEdBQWIsR0FBbUIsZ0RBQW9CTyxFQUFwQixDQUFsQzs7QUFFQSxRQUFNSyxRQUFRQyw4QkFBb0JDLFNBQXBCLENBQ1ozQixXQUFXSSxVQURDLEVBRVplLElBRlksRUFHWlYsV0FIWSxFQUlaQyxpQkFKWSxDQUFkO0FBTUFlLFVBQU1HLElBQU4sR0FBYSxZQUFiO0FBQ0FILFVBQU1JLE1BQU4sR0FBZU4sUUFBZjtBQUNBRSxVQUFNZCxhQUFOLEdBQXNCYSxNQUF0Qjs7QUFFQSxRQUFNTSxRQUFRSiw4QkFBb0JDLFNBQXBCLENBQ1ozQixXQUFXQyxVQURDLEVBRVptQixFQUZZLEVBR1pYLFdBSFksRUFJWkMsaUJBSlksQ0FBZDtBQU1Bb0IsVUFBTUYsSUFBTixHQUFhLFlBQWI7QUFDQUUsVUFBTUQsTUFBTixHQUFlTCxNQUFmO0FBQ0FNLFVBQU1uQixhQUFOLEdBQXNCWSxRQUF0Qjs7QUFFQSwwREFBK0JFLEtBQS9CLEVBQXNDSyxLQUF0QyxFQUE2Q1gsSUFBN0MsRUFBbURDLEVBQW5EOztBQUVBLFdBQU8sQ0FBQ0ssS0FBRCxFQUFRSyxLQUFSLENBQVA7QUFDRDtBQXBGMkIsQ0FBOUI7O2tCQXVGZXpCLHFCIiwiZmlsZSI6IkVudGVyTGVhdmVFdmVudFBsdWdpbi5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7YWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzfSBmcm9tICdldmVudHMvRXZlbnRQcm9wYWdhdG9ycyc7XG5cbmltcG9ydCBTeW50aGV0aWNNb3VzZUV2ZW50IGZyb20gJy4vU3ludGhldGljTW91c2VFdmVudCc7XG5pbXBvcnQge1xuICBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSxcbiAgZ2V0Tm9kZUZyb21JbnN0YW5jZSxcbn0gZnJvbSAnLi4vY2xpZW50L1JlYWN0RE9NQ29tcG9uZW50VHJlZSc7XG5cbmNvbnN0IGV2ZW50VHlwZXMgPSB7XG4gIG1vdXNlRW50ZXI6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUVudGVyJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wTW91c2VPdXQnLCAndG9wTW91c2VPdmVyJ10sXG4gIH0sXG4gIG1vdXNlTGVhdmU6IHtcbiAgICByZWdpc3RyYXRpb25OYW1lOiAnb25Nb3VzZUxlYXZlJyxcbiAgICBkZXBlbmRlbmNpZXM6IFsndG9wTW91c2VPdXQnLCAndG9wTW91c2VPdmVyJ10sXG4gIH0sXG59O1xuXG5jb25zdCBFbnRlckxlYXZlRXZlbnRQbHVnaW4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgLyoqXG4gICAqIEZvciBhbG1vc3QgZXZlcnkgaW50ZXJhY3Rpb24gd2UgY2FyZSBhYm91dCwgdGhlcmUgd2lsbCBiZSBib3RoIGEgdG9wLWxldmVsXG4gICAqIGBtb3VzZW92ZXJgIGFuZCBgbW91c2VvdXRgIGV2ZW50IHRoYXQgb2NjdXJzLiBPbmx5IHVzZSBgbW91c2VvdXRgIHNvIHRoYXRcbiAgICogd2UgZG8gbm90IGV4dHJhY3QgZHVwbGljYXRlIGV2ZW50cy4gSG93ZXZlciwgbW92aW5nIHRoZSBtb3VzZSBpbnRvIHRoZVxuICAgKiBicm93c2VyIGZyb20gb3V0c2lkZSB3aWxsIG5vdCBmaXJlIGEgYG1vdXNlb3V0YCBldmVudC4gSW4gdGhpcyBjYXNlLCB3ZSB1c2VcbiAgICogdGhlIGBtb3VzZW92ZXJgIHRvcC1sZXZlbCBldmVudC5cbiAgICovXG4gIGV4dHJhY3RFdmVudHM6IGZ1bmN0aW9uKFxuICAgIHRvcExldmVsVHlwZSxcbiAgICB0YXJnZXRJbnN0LFxuICAgIG5hdGl2ZUV2ZW50LFxuICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LFxuICApIHtcbiAgICBpZiAoXG4gICAgICB0b3BMZXZlbFR5cGUgPT09ICd0b3BNb3VzZU92ZXInICYmXG4gICAgICAobmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC5mcm9tRWxlbWVudClcbiAgICApIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBpZiAodG9wTGV2ZWxUeXBlICE9PSAndG9wTW91c2VPdXQnICYmIHRvcExldmVsVHlwZSAhPT0gJ3RvcE1vdXNlT3ZlcicpIHtcbiAgICAgIC8vIE11c3Qgbm90IGJlIGEgbW91c2UgaW4gb3IgbW91c2Ugb3V0IC0gaWdub3JpbmcuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBsZXQgd2luO1xuICAgIGlmIChuYXRpdmVFdmVudFRhcmdldC53aW5kb3cgPT09IG5hdGl2ZUV2ZW50VGFyZ2V0KSB7XG4gICAgICAvLyBgbmF0aXZlRXZlbnRUYXJnZXRgIGlzIHByb2JhYmx5IGEgd2luZG93IG9iamVjdC5cbiAgICAgIHdpbiA9IG5hdGl2ZUV2ZW50VGFyZ2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSBgb3duZXJEb2N1bWVudGAgaXMgc29tZXRpbWVzIHVuZGVmaW5lZCBpbiBJRTguXG4gICAgICBjb25zdCBkb2MgPSBuYXRpdmVFdmVudFRhcmdldC5vd25lckRvY3VtZW50O1xuICAgICAgaWYgKGRvYykge1xuICAgICAgICB3aW4gPSBkb2MuZGVmYXVsdFZpZXcgfHwgZG9jLnBhcmVudFdpbmRvdztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdpbiA9IHdpbmRvdztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgZnJvbTtcbiAgICBsZXQgdG87XG4gICAgaWYgKHRvcExldmVsVHlwZSA9PT0gJ3RvcE1vdXNlT3V0Jykge1xuICAgICAgZnJvbSA9IHRhcmdldEluc3Q7XG4gICAgICBjb25zdCByZWxhdGVkID0gbmF0aXZlRXZlbnQucmVsYXRlZFRhcmdldCB8fCBuYXRpdmVFdmVudC50b0VsZW1lbnQ7XG4gICAgICB0byA9IHJlbGF0ZWQgPyBnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZShyZWxhdGVkKSA6IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE1vdmluZyB0byBhIG5vZGUgZnJvbSBvdXRzaWRlIHRoZSB3aW5kb3cuXG4gICAgICBmcm9tID0gbnVsbDtcbiAgICAgIHRvID0gdGFyZ2V0SW5zdDtcbiAgICB9XG5cbiAgICBpZiAoZnJvbSA9PT0gdG8pIHtcbiAgICAgIC8vIE5vdGhpbmcgcGVydGFpbnMgdG8gb3VyIG1hbmFnZWQgY29tcG9uZW50cy5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IGZyb21Ob2RlID0gZnJvbSA9PSBudWxsID8gd2luIDogZ2V0Tm9kZUZyb21JbnN0YW5jZShmcm9tKTtcbiAgICBjb25zdCB0b05vZGUgPSB0byA9PSBudWxsID8gd2luIDogZ2V0Tm9kZUZyb21JbnN0YW5jZSh0byk7XG5cbiAgICBjb25zdCBsZWF2ZSA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5tb3VzZUxlYXZlLFxuICAgICAgZnJvbSxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXQsXG4gICAgKTtcbiAgICBsZWF2ZS50eXBlID0gJ21vdXNlbGVhdmUnO1xuICAgIGxlYXZlLnRhcmdldCA9IGZyb21Ob2RlO1xuICAgIGxlYXZlLnJlbGF0ZWRUYXJnZXQgPSB0b05vZGU7XG5cbiAgICBjb25zdCBlbnRlciA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5tb3VzZUVudGVyLFxuICAgICAgdG8sXG4gICAgICBuYXRpdmVFdmVudCxcbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LFxuICAgICk7XG4gICAgZW50ZXIudHlwZSA9ICdtb3VzZWVudGVyJztcbiAgICBlbnRlci50YXJnZXQgPSB0b05vZGU7XG4gICAgZW50ZXIucmVsYXRlZFRhcmdldCA9IGZyb21Ob2RlO1xuXG4gICAgYWNjdW11bGF0ZUVudGVyTGVhdmVEaXNwYXRjaGVzKGxlYXZlLCBlbnRlciwgZnJvbSwgdG8pO1xuXG4gICAgcmV0dXJuIFtsZWF2ZSwgZW50ZXJdO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRW50ZXJMZWF2ZUV2ZW50UGx1Z2luO1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addEventBubbleListener = addEventBubbleListener;\nexports.addEventCaptureListener = addEventCaptureListener;\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction addEventBubbleListener(element, eventType, listener) {\n  element.addEventListener(eventType, listener, false);\n}\n\nfunction addEventCaptureListener(element, eventType, listener) {\n  element.addEventListener(eventType, listener, true);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9FdmVudExpc3RlbmVyLmpzIl0sIm5hbWVzIjpbImFkZEV2ZW50QnViYmxlTGlzdGVuZXIiLCJhZGRFdmVudENhcHR1cmVMaXN0ZW5lciIsImVsZW1lbnQiLCJldmVudFR5cGUiLCJsaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXIiXSwibWFwcGluZ3MiOiI7Ozs7O1FBU2dCQSxzQixHQUFBQSxzQjtRQVFBQyx1QixHQUFBQSx1QjtBQWpCaEI7Ozs7Ozs7OztBQVNPLFNBQVNELHNCQUFULENBQ0xFLE9BREssRUFFTEMsU0FGSyxFQUdMQyxRQUhLLEVBSUM7QUFDTkYsVUFBUUcsZ0JBQVIsQ0FBeUJGLFNBQXpCLEVBQW9DQyxRQUFwQyxFQUE4QyxLQUE5QztBQUNEOztBQUVNLFNBQVNILHVCQUFULENBQ0xDLE9BREssRUFFTEMsU0FGSyxFQUdMQyxRQUhLLEVBSUM7QUFDTkYsVUFBUUcsZ0JBQVIsQ0FBeUJGLFNBQXpCLEVBQW9DQyxRQUFwQyxFQUE4QyxJQUE5QztBQUNEIiwiZmlsZSI6IkV2ZW50TGlzdGVuZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRFdmVudEJ1YmJsZUxpc3RlbmVyKFxuICBlbGVtZW50OiBFbGVtZW50LFxuICBldmVudFR5cGU6IHN0cmluZyxcbiAgbGlzdGVuZXI6IEZ1bmN0aW9uLFxuKTogdm9pZCB7XG4gIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudFR5cGUsIGxpc3RlbmVyLCBmYWxzZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRFdmVudENhcHR1cmVMaXN0ZW5lcihcbiAgZWxlbWVudDogRWxlbWVudCxcbiAgZXZlbnRUeXBlOiBzdHJpbmcsXG4gIGxpc3RlbmVyOiBGdW5jdGlvbixcbik6IHZvaWQge1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRUeXBlLCBsaXN0ZW5lciwgdHJ1ZSk7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.initialize = initialize;\nexports.reset = reset;\nexports.getData = getData;\nexports.getText = getText;\n\nvar _getTextContentAccessor = require('../client/getTextContentAccessor');\n\nvar _getTextContentAccessor2 = _interopRequireDefault(_getTextContentAccessor);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * This helper object stores information about text content of a target node,\n * allowing comparison of content before and after a given event.\n *\n * Identify the node where selection currently begins, then observe\n * both its text content and its current position in the DOM. Since the\n * browser may natively replace the target node during composition, we can\n * use its position to find its replacement.\n *\n *\n */\nvar compositionState = {\n  _root: null,\n  _startText: null,\n  _fallbackText: null\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n\nfunction initialize(nativeEventTarget) {\n  compositionState._root = nativeEventTarget;\n  compositionState._startText = getText();\n  return true;\n}\n\nfunction reset() {\n  compositionState._root = null;\n  compositionState._startText = null;\n  compositionState._fallbackText = null;\n}\n\nfunction getData() {\n  if (compositionState._fallbackText) {\n    return compositionState._fallbackText;\n  }\n\n  var start = void 0;\n  var startValue = compositionState._startText;\n  var startLength = startValue.length;\n  var end = void 0;\n  var endValue = getText();\n  var endLength = endValue.length;\n\n  for (start = 0; start < startLength; start++) {\n    if (startValue[start] !== endValue[start]) {\n      break;\n    }\n  }\n\n  var minEnd = startLength - start;\n  for (end = 1; end <= minEnd; end++) {\n    if (startValue[startLength - end] !== endValue[endLength - end]) {\n      break;\n    }\n  }\n\n  var sliceTail = end > 1 ? 1 - end : undefined;\n  compositionState._fallbackText = endValue.slice(start, sliceTail);\n  return compositionState._fallbackText;\n}\n\nfunction getText() {\n  if ('value' in compositionState._root) {\n    return compositionState._root.value;\n  }\n  return compositionState._root[(0, _getTextContentAccessor2.default)()];\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9GYWxsYmFja0NvbXBvc2l0aW9uU3RhdGUuanMiXSwibmFtZXMiOlsiaW5pdGlhbGl6ZSIsInJlc2V0IiwiZ2V0RGF0YSIsImdldFRleHQiLCJjb21wb3NpdGlvblN0YXRlIiwiX3Jvb3QiLCJfc3RhcnRUZXh0IiwiX2ZhbGxiYWNrVGV4dCIsIm5hdGl2ZUV2ZW50VGFyZ2V0Iiwic3RhcnQiLCJzdGFydFZhbHVlIiwic3RhcnRMZW5ndGgiLCJsZW5ndGgiLCJlbmQiLCJlbmRWYWx1ZSIsImVuZExlbmd0aCIsIm1pbkVuZCIsInNsaWNlVGFpbCIsInVuZGVmaW5lZCIsInNsaWNlIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O1FBMEJnQkEsVSxHQUFBQSxVO1FBTUFDLEssR0FBQUEsSztRQU1BQyxPLEdBQUFBLE87UUE4QkFDLE8sR0FBQUEsTzs7QUE3RGhCOzs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7QUFXQSxJQUFNQyxtQkFBbUI7QUFDdkJDLFNBQU8sSUFEZ0I7QUFFdkJDLGNBQVksSUFGVztBQUd2QkMsaUJBQWU7QUFIUSxDQUF6QixDLENBcEJBOzs7Ozs7O0FBMEJPLFNBQVNQLFVBQVQsQ0FBb0JRLGlCQUFwQixFQUF1QztBQUM1Q0osbUJBQWlCQyxLQUFqQixHQUF5QkcsaUJBQXpCO0FBQ0FKLG1CQUFpQkUsVUFBakIsR0FBOEJILFNBQTlCO0FBQ0EsU0FBTyxJQUFQO0FBQ0Q7O0FBRU0sU0FBU0YsS0FBVCxHQUFpQjtBQUN0QkcsbUJBQWlCQyxLQUFqQixHQUF5QixJQUF6QjtBQUNBRCxtQkFBaUJFLFVBQWpCLEdBQThCLElBQTlCO0FBQ0FGLG1CQUFpQkcsYUFBakIsR0FBaUMsSUFBakM7QUFDRDs7QUFFTSxTQUFTTCxPQUFULEdBQW1CO0FBQ3hCLE1BQUlFLGlCQUFpQkcsYUFBckIsRUFBb0M7QUFDbEMsV0FBT0gsaUJBQWlCRyxhQUF4QjtBQUNEOztBQUVELE1BQUlFLGNBQUo7QUFDQSxNQUFNQyxhQUFhTixpQkFBaUJFLFVBQXBDO0FBQ0EsTUFBTUssY0FBY0QsV0FBV0UsTUFBL0I7QUFDQSxNQUFJQyxZQUFKO0FBQ0EsTUFBTUMsV0FBV1gsU0FBakI7QUFDQSxNQUFNWSxZQUFZRCxTQUFTRixNQUEzQjs7QUFFQSxPQUFLSCxRQUFRLENBQWIsRUFBZ0JBLFFBQVFFLFdBQXhCLEVBQXFDRixPQUFyQyxFQUE4QztBQUM1QyxRQUFJQyxXQUFXRCxLQUFYLE1BQXNCSyxTQUFTTCxLQUFULENBQTFCLEVBQTJDO0FBQ3pDO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNTyxTQUFTTCxjQUFjRixLQUE3QjtBQUNBLE9BQUtJLE1BQU0sQ0FBWCxFQUFjQSxPQUFPRyxNQUFyQixFQUE2QkgsS0FBN0IsRUFBb0M7QUFDbEMsUUFBSUgsV0FBV0MsY0FBY0UsR0FBekIsTUFBa0NDLFNBQVNDLFlBQVlGLEdBQXJCLENBQXRDLEVBQWlFO0FBQy9EO0FBQ0Q7QUFDRjs7QUFFRCxNQUFNSSxZQUFZSixNQUFNLENBQU4sR0FBVSxJQUFJQSxHQUFkLEdBQW9CSyxTQUF0QztBQUNBZCxtQkFBaUJHLGFBQWpCLEdBQWlDTyxTQUFTSyxLQUFULENBQWVWLEtBQWYsRUFBc0JRLFNBQXRCLENBQWpDO0FBQ0EsU0FBT2IsaUJBQWlCRyxhQUF4QjtBQUNEOztBQUVNLFNBQVNKLE9BQVQsR0FBbUI7QUFDeEIsTUFBSSxXQUFXQyxpQkFBaUJDLEtBQWhDLEVBQXVDO0FBQ3JDLFdBQU9ELGlCQUFpQkMsS0FBakIsQ0FBdUJlLEtBQTlCO0FBQ0Q7QUFDRCxTQUFPaEIsaUJBQWlCQyxLQUFqQixDQUF1Qix1Q0FBdkIsQ0FBUDtBQUNEIiwiZmlsZSI6IkZhbGxiYWNrQ29tcG9zaXRpb25TdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBnZXRUZXh0Q29udGVudEFjY2Vzc29yIGZyb20gJy4uL2NsaWVudC9nZXRUZXh0Q29udGVudEFjY2Vzc29yJztcblxuLyoqXG4gKiBUaGlzIGhlbHBlciBvYmplY3Qgc3RvcmVzIGluZm9ybWF0aW9uIGFib3V0IHRleHQgY29udGVudCBvZiBhIHRhcmdldCBub2RlLFxuICogYWxsb3dpbmcgY29tcGFyaXNvbiBvZiBjb250ZW50IGJlZm9yZSBhbmQgYWZ0ZXIgYSBnaXZlbiBldmVudC5cbiAqXG4gKiBJZGVudGlmeSB0aGUgbm9kZSB3aGVyZSBzZWxlY3Rpb24gY3VycmVudGx5IGJlZ2lucywgdGhlbiBvYnNlcnZlXG4gKiBib3RoIGl0cyB0ZXh0IGNvbnRlbnQgYW5kIGl0cyBjdXJyZW50IHBvc2l0aW9uIGluIHRoZSBET00uIFNpbmNlIHRoZVxuICogYnJvd3NlciBtYXkgbmF0aXZlbHkgcmVwbGFjZSB0aGUgdGFyZ2V0IG5vZGUgZHVyaW5nIGNvbXBvc2l0aW9uLCB3ZSBjYW5cbiAqIHVzZSBpdHMgcG9zaXRpb24gdG8gZmluZCBpdHMgcmVwbGFjZW1lbnQuXG4gKlxuICpcbiAqL1xuY29uc3QgY29tcG9zaXRpb25TdGF0ZSA9IHtcbiAgX3Jvb3Q6IG51bGwsXG4gIF9zdGFydFRleHQ6IG51bGwsXG4gIF9mYWxsYmFja1RleHQ6IG51bGwsXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhbGl6ZShuYXRpdmVFdmVudFRhcmdldCkge1xuICBjb21wb3NpdGlvblN0YXRlLl9yb290ID0gbmF0aXZlRXZlbnRUYXJnZXQ7XG4gIGNvbXBvc2l0aW9uU3RhdGUuX3N0YXJ0VGV4dCA9IGdldFRleHQoKTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldCgpIHtcbiAgY29tcG9zaXRpb25TdGF0ZS5fcm9vdCA9IG51bGw7XG4gIGNvbXBvc2l0aW9uU3RhdGUuX3N0YXJ0VGV4dCA9IG51bGw7XG4gIGNvbXBvc2l0aW9uU3RhdGUuX2ZhbGxiYWNrVGV4dCA9IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXREYXRhKCkge1xuICBpZiAoY29tcG9zaXRpb25TdGF0ZS5fZmFsbGJhY2tUZXh0KSB7XG4gICAgcmV0dXJuIGNvbXBvc2l0aW9uU3RhdGUuX2ZhbGxiYWNrVGV4dDtcbiAgfVxuXG4gIGxldCBzdGFydDtcbiAgY29uc3Qgc3RhcnRWYWx1ZSA9IGNvbXBvc2l0aW9uU3RhdGUuX3N0YXJ0VGV4dDtcbiAgY29uc3Qgc3RhcnRMZW5ndGggPSBzdGFydFZhbHVlLmxlbmd0aDtcbiAgbGV0IGVuZDtcbiAgY29uc3QgZW5kVmFsdWUgPSBnZXRUZXh0KCk7XG4gIGNvbnN0IGVuZExlbmd0aCA9IGVuZFZhbHVlLmxlbmd0aDtcblxuICBmb3IgKHN0YXJ0ID0gMDsgc3RhcnQgPCBzdGFydExlbmd0aDsgc3RhcnQrKykge1xuICAgIGlmIChzdGFydFZhbHVlW3N0YXJ0XSAhPT0gZW5kVmFsdWVbc3RhcnRdKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjb25zdCBtaW5FbmQgPSBzdGFydExlbmd0aCAtIHN0YXJ0O1xuICBmb3IgKGVuZCA9IDE7IGVuZCA8PSBtaW5FbmQ7IGVuZCsrKSB7XG4gICAgaWYgKHN0YXJ0VmFsdWVbc3RhcnRMZW5ndGggLSBlbmRdICE9PSBlbmRWYWx1ZVtlbmRMZW5ndGggLSBlbmRdKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBjb25zdCBzbGljZVRhaWwgPSBlbmQgPiAxID8gMSAtIGVuZCA6IHVuZGVmaW5lZDtcbiAgY29tcG9zaXRpb25TdGF0ZS5fZmFsbGJhY2tUZXh0ID0gZW5kVmFsdWUuc2xpY2Uoc3RhcnQsIHNsaWNlVGFpbCk7XG4gIHJldHVybiBjb21wb3NpdGlvblN0YXRlLl9mYWxsYmFja1RleHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZXh0KCkge1xuICBpZiAoJ3ZhbHVlJyBpbiBjb21wb3NpdGlvblN0YXRlLl9yb290KSB7XG4gICAgcmV0dXJuIGNvbXBvc2l0aW9uU3RhdGUuX3Jvb3QudmFsdWU7XG4gIH1cbiAgcmV0dXJuIGNvbXBvc2l0aW9uU3RhdGUuX3Jvb3RbZ2V0VGV4dENvbnRlbnRBY2Nlc3NvcigpXTtcbn1cbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.trapCapturedEvent = exports.trapBubbledEvent = exports.isEnabled = exports.setEnabled = undefined;\nexports.listenTo = listenTo;\nexports.isListeningToAllDependencies = isListeningToAllDependencies;\n\nvar _EventPluginRegistry = require('events/EventPluginRegistry');\n\nvar _ReactDOMEventListener = require('./ReactDOMEventListener');\n\nvar _isEventSupported = require('./isEventSupported');\n\nvar _isEventSupported2 = _interopRequireDefault(_isEventSupported);\n\nvar _BrowserEventConstants = require('./BrowserEventConstants');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Summary of `ReactBrowserEventEmitter` event handling:\n *\n *  - Top-level delegation is used to trap most native browser events. This\n *    may only occur in the main thread and is the responsibility of\n *    ReactDOMEventListener, which is injected and can therefore support\n *    pluggable event sources. This is the only work that occurs in the main\n *    thread.\n *\n *  - We normalize and de-duplicate events to account for browser quirks. This\n *    may be done in the worker thread.\n *\n *  - Forward these native events (with the associated top-level type used to\n *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want\n *    to extract any synthetic events.\n *\n *  - The `EventPluginHub` will then process each event by annotating them with\n *    \"dispatches\", a sequence of listeners and IDs that care about that event.\n *\n *  - The `EventPluginHub` then dispatches the events.\n *\n * Overview of React and the event system:\n *\n * +------------+    .\n * |    DOM     |    .\n * +------------+    .\n *       |           .\n *       v           .\n * +------------+    .\n * | ReactEvent |    .\n * |  Listener  |    .\n * +------------+    .                         +-----------+\n *       |           .               +--------+|SimpleEvent|\n *       |           .               |         |Plugin     |\n * +-----|------+    .               v         +-----------+\n * |     |      |    .    +--------------+                    +------------+\n * |     +-----------.--->|EventPluginHub|                    |    Event   |\n * |            |    .    |              |     +-----------+  | Propagators|\n * | ReactEvent |    .    |              |     |TapEvent   |  |------------|\n * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|\n * |            |    .    |              |     +-----------+  |  utilities |\n * |     +-----------.--->|              |                    +------------+\n * |     |      |    .    +--------------+\n * +-----|------+    .                ^        +-----------+\n *       |           .                |        |Enter/Leave|\n *       +           .                +-------+|Plugin     |\n * +-------------+   .                         +-----------+\n * | application |   .\n * |-------------|   .\n * |             |   .\n * |             |   .\n * +-------------+   .\n *                   .\n *    React Core     .  General Purpose Event Plugin System\n */\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar alreadyListeningTo = {};\nvar reactTopListenersCounter = 0;\n\n/**\n * To ensure no conflicts with other potential React instances on the page\n */\nvar topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);\n\nfunction getListeningForDocument(mountAt) {\n  // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`\n  // directly.\n  if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {\n    mountAt[topListenersIDKey] = reactTopListenersCounter++;\n    alreadyListeningTo[mountAt[topListenersIDKey]] = {};\n  }\n  return alreadyListeningTo[mountAt[topListenersIDKey]];\n}\n\n/**\n * We listen for bubbled touch events on the document object.\n *\n * Firefox v8.01 (and possibly others) exhibited strange behavior when\n * mounting `onmousemove` events at some node that was not the document\n * element. The symptoms were that if your mouse is not moving over something\n * contained within that mount point (for example on the background) the\n * top-level listeners for `onmousemove` won't be called. However, if you\n * register the `mousemove` on the document object, then it will of course\n * catch all `mousemove`s. This along with iOS quirks, justifies restricting\n * top-level listeners to the document object only, at least for these\n * movement types of events and possibly all events.\n *\n * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html\n *\n * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but\n * they bubble to document.\n *\n * @param {string} registrationName Name of listener (e.g. `onClick`).\n * @param {object} contentDocumentHandle Document which owns the container\n */\nfunction listenTo(registrationName, contentDocumentHandle) {\n  var mountAt = contentDocumentHandle;\n  var isListening = getListeningForDocument(mountAt);\n  var dependencies = _EventPluginRegistry.registrationNameDependencies[registrationName];\n\n  for (var i = 0; i < dependencies.length; i++) {\n    var dependency = dependencies[i];\n    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n      if (dependency === 'topScroll') {\n        (0, _ReactDOMEventListener.trapCapturedEvent)('topScroll', 'scroll', mountAt);\n      } else if (dependency === 'topFocus' || dependency === 'topBlur') {\n        (0, _ReactDOMEventListener.trapCapturedEvent)('topFocus', 'focus', mountAt);\n        (0, _ReactDOMEventListener.trapCapturedEvent)('topBlur', 'blur', mountAt);\n\n        // to make sure blur and focus event listeners are only attached once\n        isListening.topBlur = true;\n        isListening.topFocus = true;\n      } else if (dependency === 'topCancel') {\n        if ((0, _isEventSupported2.default)('cancel', true)) {\n          (0, _ReactDOMEventListener.trapCapturedEvent)('topCancel', 'cancel', mountAt);\n        }\n        isListening.topCancel = true;\n      } else if (dependency === 'topClose') {\n        if ((0, _isEventSupported2.default)('close', true)) {\n          (0, _ReactDOMEventListener.trapCapturedEvent)('topClose', 'close', mountAt);\n        }\n        isListening.topClose = true;\n      } else if (_BrowserEventConstants.topLevelTypes.hasOwnProperty(dependency)) {\n        (0, _ReactDOMEventListener.trapBubbledEvent)(dependency, _BrowserEventConstants.topLevelTypes[dependency], mountAt);\n      }\n\n      isListening[dependency] = true;\n    }\n  }\n}\n\nfunction isListeningToAllDependencies(registrationName, mountAt) {\n  var isListening = getListeningForDocument(mountAt);\n  var dependencies = _EventPluginRegistry.registrationNameDependencies[registrationName];\n  for (var i = 0; i < dependencies.length; i++) {\n    var dependency = dependencies[i];\n    if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexports.setEnabled = _ReactDOMEventListener.setEnabled;\nexports.isEnabled = _ReactDOMEventListener.isEnabled;\nexports.trapBubbledEvent = _ReactDOMEventListener.trapBubbledEvent;\nexports.trapCapturedEvent = _ReactDOMEventListener.trapCapturedEvent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._enabled = undefined;\nexports.setEnabled = setEnabled;\nexports.isEnabled = isEnabled;\nexports.trapBubbledEvent = trapBubbledEvent;\nexports.trapCapturedEvent = trapCapturedEvent;\nexports.dispatchEvent = dispatchEvent;\n\nvar _ReactGenericBatching = require('events/ReactGenericBatching');\n\nvar _EventPluginHub = require('events/EventPluginHub');\n\nvar _reflection = require('react-reconciler/reflection');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _EventListener = require('./EventListener');\n\nvar _getEventTarget = require('./getEventTarget');\n\nvar _getEventTarget2 = _interopRequireDefault(_getEventTarget);\n\nvar _ReactDOMComponentTree = require('../client/ReactDOMComponentTree');\n\nvar _SimpleEventPlugin = require('./SimpleEventPlugin');\n\nvar _SimpleEventPlugin2 = _interopRequireDefault(_SimpleEventPlugin);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar isInteractiveTopLevelEventType = _SimpleEventPlugin2.default.isInteractiveTopLevelEventType;\n\n\nvar CALLBACK_BOOKKEEPING_POOL_SIZE = 10;\nvar callbackBookkeepingPool = [];\n\n/**\n * Find the deepest React component completely containing the root of the\n * passed-in instance (for use when entire React trees are nested within each\n * other). If React trees are not nested, returns null.\n */\nfunction findRootContainerNode(inst) {\n  // TODO: It may be a good idea to cache this to prevent unnecessary DOM\n  // traversal, but caching is difficult to do correctly without using a\n  // mutation observer to listen for all DOM changes.\n  while (inst.return) {\n    inst = inst.return;\n  }\n  if (inst.tag !== _ReactTypeOfWork.HostRoot) {\n    // This can happen if we're in a detached tree.\n    return null;\n  }\n  return inst.stateNode.containerInfo;\n}\n\n// Used to store ancestor hierarchy in top level callback\nfunction getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {\n  if (callbackBookkeepingPool.length) {\n    var instance = callbackBookkeepingPool.pop();\n    instance.topLevelType = topLevelType;\n    instance.nativeEvent = nativeEvent;\n    instance.targetInst = targetInst;\n    return instance;\n  }\n  return {\n    topLevelType: topLevelType,\n    nativeEvent: nativeEvent,\n    targetInst: targetInst,\n    ancestors: []\n  };\n}\n\nfunction releaseTopLevelCallbackBookKeeping(instance) {\n  instance.topLevelType = null;\n  instance.nativeEvent = null;\n  instance.targetInst = null;\n  instance.ancestors.length = 0;\n  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {\n    callbackBookkeepingPool.push(instance);\n  }\n}\n\nfunction handleTopLevel(bookKeeping) {\n  var targetInst = bookKeeping.targetInst;\n\n  // Loop through the hierarchy, in case there's any nested components.\n  // It's important that we build the array of ancestors before calling any\n  // event handlers, because event handlers can modify the DOM, leading to\n  // inconsistencies with ReactMount's node cache. See #1105.\n  var ancestor = targetInst;\n  do {\n    if (!ancestor) {\n      bookKeeping.ancestors.push(ancestor);\n      break;\n    }\n    var root = findRootContainerNode(ancestor);\n    if (!root) {\n      break;\n    }\n    bookKeeping.ancestors.push(ancestor);\n    ancestor = (0, _ReactDOMComponentTree.getClosestInstanceFromNode)(root);\n  } while (ancestor);\n\n  for (var i = 0; i < bookKeeping.ancestors.length; i++) {\n    targetInst = bookKeeping.ancestors[i];\n    (0, _EventPluginHub.runExtractedEventsInBatch)(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, (0, _getEventTarget2.default)(bookKeeping.nativeEvent));\n  }\n}\n\n// TODO: can we stop exporting these?\nvar _enabled = exports._enabled = true;\n\nfunction setEnabled(enabled) {\n  exports._enabled = _enabled = !!enabled;\n}\n\nfunction isEnabled() {\n  return _enabled;\n}\n\n/**\n * Traps top-level events by using event bubbling.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {string} handlerBaseName Event name (e.g. \"click\").\n * @param {object} element Element on which to attach listener.\n * @return {?object} An object with a remove function which will forcefully\n *                  remove the listener.\n * @internal\n */\nfunction trapBubbledEvent(topLevelType, handlerBaseName, element) {\n  if (!element) {\n    return null;\n  }\n  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;\n\n  (0, _EventListener.addEventBubbleListener)(element, handlerBaseName,\n  // Check if interactive and wrap in interactiveUpdates\n  dispatch.bind(null, topLevelType));\n}\n\n/**\n * Traps a top-level event by using event capturing.\n *\n * @param {string} topLevelType Record from `BrowserEventConstants`.\n * @param {string} handlerBaseName Event name (e.g. \"click\").\n * @param {object} element Element on which to attach listener.\n * @return {?object} An object with a remove function which will forcefully\n *                  remove the listener.\n * @internal\n */\nfunction trapCapturedEvent(topLevelType, handlerBaseName, element) {\n  if (!element) {\n    return null;\n  }\n  var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;\n\n  (0, _EventListener.addEventCaptureListener)(element, handlerBaseName,\n  // Check if interactive and wrap in interactiveUpdates\n  dispatch.bind(null, topLevelType));\n}\n\nfunction dispatchInteractiveEvent(topLevelType, nativeEvent) {\n  (0, _ReactGenericBatching.interactiveUpdates)(dispatchEvent, topLevelType, nativeEvent);\n}\n\nfunction dispatchEvent(topLevelType, nativeEvent) {\n  if (!_enabled) {\n    return;\n  }\n\n  var nativeEventTarget = (0, _getEventTarget2.default)(nativeEvent);\n  var targetInst = (0, _ReactDOMComponentTree.getClosestInstanceFromNode)(nativeEventTarget);\n  if (targetInst !== null && typeof targetInst.tag === 'number' && !(0, _reflection.isFiberMounted)(targetInst)) {\n    // If we get an event (ex: img onload) before committing that\n    // component's mount, ignore it for now (that is, treat it as if it was an\n    // event on a non-React tree). We might also consider queueing events and\n    // dispatching them after the mount.\n    targetInst = null;\n  }\n\n  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);\n\n  try {\n    // Event queue being processed in the same cycle allows\n    // `preventDefault`.\n    (0, _ReactGenericBatching.batchedUpdates)(handleTopLevel, bookKeeping);\n  } finally {\n    releaseTopLevelCallbackBookKeeping(bookKeeping);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nvar _isTextInputElement = require('shared/isTextInputElement');\n\nvar _isTextInputElement2 = _interopRequireDefault(_isTextInputElement);\n\nvar _getActiveElement = require('fbjs/lib/getActiveElement');\n\nvar _getActiveElement2 = _interopRequireDefault(_getActiveElement);\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _ReactBrowserEventEmitter = require('./ReactBrowserEventEmitter');\n\nvar _ReactDOMComponentTree = require('../client/ReactDOMComponentTree');\n\nvar _ReactInputSelection = require('../client/ReactInputSelection');\n\nvar ReactInputSelection = _interopRequireWildcard(_ReactInputSelection);\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar skipSelectionChangeEvent = _ExecutionEnvironment2.default.canUseDOM && 'documentMode' in document && document.documentMode <= 11;\n\nvar eventTypes = {\n  select: {\n    phasedRegistrationNames: {\n      bubbled: 'onSelect',\n      captured: 'onSelectCapture'\n    },\n    dependencies: ['topBlur', 'topContextMenu', 'topFocus', 'topKeyDown', 'topKeyUp', 'topMouseDown', 'topMouseUp', 'topSelectionChange']\n  }\n};\n\nvar activeElement = null;\nvar activeElementInst = null;\nvar lastSelection = null;\nvar mouseDown = false;\n\n/**\n * Get an object which is a unique representation of the current selection.\n *\n * The return value will not be consistent across nodes or browsers, but\n * two identical selections on the same node will return identical objects.\n *\n * @param {DOMElement} node\n * @return {object}\n */\nfunction getSelection(node) {\n  if ('selectionStart' in node && ReactInputSelection.hasSelectionCapabilities(node)) {\n    return {\n      start: node.selectionStart,\n      end: node.selectionEnd\n    };\n  } else if (window.getSelection) {\n    var selection = window.getSelection();\n    return {\n      anchorNode: selection.anchorNode,\n      anchorOffset: selection.anchorOffset,\n      focusNode: selection.focusNode,\n      focusOffset: selection.focusOffset\n    };\n  }\n}\n\n/**\n * Poll selection to see whether it's changed.\n *\n * @param {object} nativeEvent\n * @return {?SyntheticEvent}\n */\nfunction constructSelectEvent(nativeEvent, nativeEventTarget) {\n  // Ensure we have the right element, and that the user is not dragging a\n  // selection (this matches native `select` event behavior). In HTML5, select\n  // fires only on input and textarea thus if there's no focused element we\n  // won't dispatch.\n  if (mouseDown || activeElement == null || activeElement !== (0, _getActiveElement2.default)()) {\n    return null;\n  }\n\n  // Only fire when selection has actually changed.\n  var currentSelection = getSelection(activeElement);\n  if (!lastSelection || !(0, _shallowEqual2.default)(lastSelection, currentSelection)) {\n    lastSelection = currentSelection;\n\n    var syntheticEvent = _SyntheticEvent2.default.getPooled(eventTypes.select, activeElementInst, nativeEvent, nativeEventTarget);\n\n    syntheticEvent.type = 'select';\n    syntheticEvent.target = activeElement;\n\n    (0, _EventPropagators.accumulateTwoPhaseDispatches)(syntheticEvent);\n\n    return syntheticEvent;\n  }\n\n  return null;\n}\n\n/**\n * This plugin creates an `onSelect` event that normalizes select events\n * across form elements.\n *\n * Supported elements are:\n * - input (see `isTextInputElement`)\n * - textarea\n * - contentEditable\n *\n * This differs from native browser implementations in the following ways:\n * - Fires on contentEditable fields as well as inputs.\n * - Fires for collapsed selection.\n * - Fires after user input.\n */\nvar SelectEventPlugin = {\n  eventTypes: eventTypes,\n\n  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : nativeEventTarget.nodeType === _HTMLNodeType.DOCUMENT_NODE ? nativeEventTarget : nativeEventTarget.ownerDocument;\n    // Track whether all listeners exists for this plugin. If none exist, we do\n    // not extract events. See #3639.\n    if (!doc || !(0, _ReactBrowserEventEmitter.isListeningToAllDependencies)('onSelect', doc)) {\n      return null;\n    }\n\n    var targetNode = targetInst ? (0, _ReactDOMComponentTree.getNodeFromInstance)(targetInst) : window;\n\n    switch (topLevelType) {\n      // Track the input node that has focus.\n      case 'topFocus':\n        if ((0, _isTextInputElement2.default)(targetNode) || targetNode.contentEditable === 'true') {\n          activeElement = targetNode;\n          activeElementInst = targetInst;\n          lastSelection = null;\n        }\n        break;\n      case 'topBlur':\n        activeElement = null;\n        activeElementInst = null;\n        lastSelection = null;\n        break;\n      // Don't fire the event while the user is dragging. This matches the\n      // semantics of the native select event.\n      case 'topMouseDown':\n        mouseDown = true;\n        break;\n      case 'topContextMenu':\n      case 'topMouseUp':\n        mouseDown = false;\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n      // Chrome and IE fire non-standard event when selection is changed (and\n      // sometimes when it hasn't). IE's event fires out of order with respect\n      // to key and input events on deletion, so we discard it.\n      //\n      // Firefox doesn't support selectionchange, so check selection status\n      // after each key entry. The selection changes after keydown and before\n      // keyup, but we check on keydown as well in the case of holding down a\n      // key, when multiple keydown events are fired but only one keyup is.\n      // This is also our approach for IE handling, for the reason above.\n      case 'topSelectionChange':\n        if (skipSelectionChangeEvent) {\n          break;\n        }\n      // falls through\n      case 'topKeyDown':\n      case 'topKeyUp':\n        return constructSelectEvent(nativeEvent, nativeEventTarget);\n    }\n\n    return null;\n  }\n};\n\nexports.default = SelectEventPlugin;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TZWxlY3RFdmVudFBsdWdpbi5qcyJdLCJuYW1lcyI6WyJSZWFjdElucHV0U2VsZWN0aW9uIiwic2tpcFNlbGVjdGlvbkNoYW5nZUV2ZW50IiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VET00iLCJkb2N1bWVudCIsImRvY3VtZW50TW9kZSIsImV2ZW50VHlwZXMiLCJzZWxlY3QiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImRlcGVuZGVuY2llcyIsImFjdGl2ZUVsZW1lbnQiLCJhY3RpdmVFbGVtZW50SW5zdCIsImxhc3RTZWxlY3Rpb24iLCJtb3VzZURvd24iLCJnZXRTZWxlY3Rpb24iLCJub2RlIiwiaGFzU2VsZWN0aW9uQ2FwYWJpbGl0aWVzIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsImVuZCIsInNlbGVjdGlvbkVuZCIsIndpbmRvdyIsInNlbGVjdGlvbiIsImFuY2hvck5vZGUiLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImNvbnN0cnVjdFNlbGVjdEV2ZW50IiwibmF0aXZlRXZlbnQiLCJuYXRpdmVFdmVudFRhcmdldCIsImN1cnJlbnRTZWxlY3Rpb24iLCJzeW50aGV0aWNFdmVudCIsIlN5bnRoZXRpY0V2ZW50IiwiZ2V0UG9vbGVkIiwidHlwZSIsInRhcmdldCIsIlNlbGVjdEV2ZW50UGx1Z2luIiwiZXh0cmFjdEV2ZW50cyIsInRvcExldmVsVHlwZSIsInRhcmdldEluc3QiLCJkb2MiLCJub2RlVHlwZSIsIkRPQ1VNRU5UX05PREUiLCJvd25lckRvY3VtZW50IiwidGFyZ2V0Tm9kZSIsImNvbnRlbnRFZGl0YWJsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOztBQUNBOztBQUNBOztJQUFZQSxtQjs7QUFDWjs7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LDBCQUFnQmtDLFVBQWhCO0FBQ0FqQyw4QkFBb0I0QixVQUFwQjtBQUNBM0IsMEJBQWdCLElBQWhCO0FBQ0Q7QUFDRDtBQUNGLFdBQUssU0FBTDtBQUNFRix3QkFBZ0IsSUFBaEI7QUFDQUMsNEJBQW9CLElBQXBCO0FBQ0FDLHdCQUFnQixJQUFoQjtBQUNBO0FBQ0Y7QUFDQTtBQUNBLFdBQUssY0FBTDtBQUNFQyxvQkFBWSxJQUFaO0FBQ0E7QUFDRixXQUFLLGdCQUFMO0FBQ0EsV0FBSyxZQUFMO0FBQ0VBLG9CQUFZLEtBQVo7QUFDQSxlQUFPYyxxQkFBcUJDLFdBQXJCLEVBQWtDQyxpQkFBbEMsQ0FBUDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQUssb0JBQUw7QUFDRSxZQUFJOUIsd0JBQUosRUFBOEI7QUFDNUI7QUFDRDtBQUNIO0FBQ0EsV0FBSyxZQUFMO0FBQ0EsV0FBSyxVQUFMO0FBQ0UsZUFBTzRCLHFCQUFxQkMsV0FBckIsRUFBa0NDLGlCQUFsQyxDQUFQO0FBMUNKOztBQTZDQSxXQUFPLElBQVA7QUFDRDtBQXJFdUIsQ0FBMUI7O2tCQXdFZU8saUIiLCJmaWxlIjoiU2VsZWN0RXZlbnRQbHVnaW4uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge2FjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXN9IGZyb20gJ2V2ZW50cy9FdmVudFByb3BhZ2F0b3JzJztcbmltcG9ydCBFeGVjdXRpb25FbnZpcm9ubWVudCBmcm9tICdmYmpzL2xpYi9FeGVjdXRpb25FbnZpcm9ubWVudCc7XG5pbXBvcnQgU3ludGhldGljRXZlbnQgZnJvbSAnZXZlbnRzL1N5bnRoZXRpY0V2ZW50JztcbmltcG9ydCBpc1RleHRJbnB1dEVsZW1lbnQgZnJvbSAnc2hhcmVkL2lzVGV4dElucHV0RWxlbWVudCc7XG5pbXBvcnQgZ2V0QWN0aXZlRWxlbWVudCBmcm9tICdmYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50JztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnZmJqcy9saWIvc2hhbGxvd0VxdWFsJztcblxuaW1wb3J0IHtpc0xpc3RlbmluZ1RvQWxsRGVwZW5kZW5jaWVzfSBmcm9tICcuL1JlYWN0QnJvd3NlckV2ZW50RW1pdHRlcic7XG5pbXBvcnQge2dldE5vZGVGcm9tSW5zdGFuY2V9IGZyb20gJy4uL2NsaWVudC9SZWFjdERPTUNvbXBvbmVudFRyZWUnO1xuaW1wb3J0ICogYXMgUmVhY3RJbnB1dFNlbGVjdGlvbiBmcm9tICcuLi9jbGllbnQvUmVhY3RJbnB1dFNlbGVjdGlvbic7XG5pbXBvcnQge0RPQ1VNRU5UX05PREV9IGZyb20gJy4uL3NoYXJlZC9IVE1MTm9kZVR5cGUnO1xuXG5jb25zdCBza2lwU2VsZWN0aW9uQ2hhbmdlRXZlbnQgPVxuICBFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gJiZcbiAgJ2RvY3VtZW50TW9kZScgaW4gZG9jdW1lbnQgJiZcbiAgZG9jdW1lbnQuZG9jdW1lbnRNb2RlIDw9IDExO1xuXG5jb25zdCBldmVudFR5cGVzID0ge1xuICBzZWxlY3Q6IHtcbiAgICBwaGFzZWRSZWdpc3RyYXRpb25OYW1lczoge1xuICAgICAgYnViYmxlZDogJ29uU2VsZWN0JyxcbiAgICAgIGNhcHR1cmVkOiAnb25TZWxlY3RDYXB0dXJlJyxcbiAgICB9LFxuICAgIGRlcGVuZGVuY2llczogW1xuICAgICAgJ3RvcEJsdXInLFxuICAgICAgJ3RvcENvbnRleHRNZW51JyxcbiAgICAgICd0b3BGb2N1cycsXG4gICAgICAndG9wS2V5RG93bicsXG4gICAgICAndG9wS2V5VXAnLFxuICAgICAgJ3RvcE1vdXNlRG93bicsXG4gICAgICAndG9wTW91c2VVcCcsXG4gICAgICAndG9wU2VsZWN0aW9uQ2hhbmdlJyxcbiAgICBdLFxuICB9LFxufTtcblxubGV0IGFjdGl2ZUVsZW1lbnQgPSBudWxsO1xubGV0IGFjdGl2ZUVsZW1lbnRJbnN0ID0gbnVsbDtcbmxldCBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbmxldCBtb3VzZURvd24gPSBmYWxzZTtcblxuLyoqXG4gKiBHZXQgYW4gb2JqZWN0IHdoaWNoIGlzIGEgdW5pcXVlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBjdXJyZW50IHNlbGVjdGlvbi5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIHdpbGwgbm90IGJlIGNvbnNpc3RlbnQgYWNyb3NzIG5vZGVzIG9yIGJyb3dzZXJzLCBidXRcbiAqIHR3byBpZGVudGljYWwgc2VsZWN0aW9ucyBvbiB0aGUgc2FtZSBub2RlIHdpbGwgcmV0dXJuIGlkZW50aWNhbCBvYmplY3RzLlxuICpcbiAqIEBwYXJhbSB7RE9NRWxlbWVudH0gbm9kZVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb24obm9kZSkge1xuICBpZiAoXG4gICAgJ3NlbGVjdGlvblN0YXJ0JyBpbiBub2RlICYmXG4gICAgUmVhY3RJbnB1dFNlbGVjdGlvbi5oYXNTZWxlY3Rpb25DYXBhYmlsaXRpZXMobm9kZSlcbiAgKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHN0YXJ0OiBub2RlLnNlbGVjdGlvblN0YXJ0LFxuICAgICAgZW5kOiBub2RlLnNlbGVjdGlvbkVuZCxcbiAgICB9O1xuICB9IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcbiAgICBjb25zdCBzZWxlY3Rpb24gPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuY2hvck5vZGU6IHNlbGVjdGlvbi5hbmNob3JOb2RlLFxuICAgICAgYW5jaG9yT2Zmc2V0OiBzZWxlY3Rpb24uYW5jaG9yT2Zmc2V0LFxuICAgICAgZm9jdXNOb2RlOiBzZWxlY3Rpb24uZm9jdXNOb2RlLFxuICAgICAgZm9jdXNPZmZzZXQ6IHNlbGVjdGlvbi5mb2N1c09mZnNldCxcbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogUG9sbCBzZWxlY3Rpb24gdG8gc2VlIHdoZXRoZXIgaXQncyBjaGFuZ2VkLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBuYXRpdmVFdmVudFxuICogQHJldHVybiB7P1N5bnRoZXRpY0V2ZW50fVxuICovXG5mdW5jdGlvbiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpIHtcbiAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIHJpZ2h0IGVsZW1lbnQsIGFuZCB0aGF0IHRoZSB1c2VyIGlzIG5vdCBkcmFnZ2luZyBhXG4gIC8vIHNlbGVjdGlvbiAodGhpcyBtYXRjaGVzIG5hdGl2ZSBgc2VsZWN0YCBldmVudCBiZWhhdmlvcikuIEluIEhUTUw1LCBzZWxlY3RcbiAgLy8gZmlyZXMgb25seSBvbiBpbnB1dCBhbmQgdGV4dGFyZWEgdGh1cyBpZiB0aGVyZSdzIG5vIGZvY3VzZWQgZWxlbWVudCB3ZVxuICAvLyB3b24ndCBkaXNwYXRjaC5cbiAgaWYgKFxuICAgIG1vdXNlRG93biB8fFxuICAgIGFjdGl2ZUVsZW1lbnQgPT0gbnVsbCB8fFxuICAgIGFjdGl2ZUVsZW1lbnQgIT09IGdldEFjdGl2ZUVsZW1lbnQoKVxuICApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIE9ubHkgZmlyZSB3aGVuIHNlbGVjdGlvbiBoYXMgYWN0dWFsbHkgY2hhbmdlZC5cbiAgY29uc3QgY3VycmVudFNlbGVjdGlvbiA9IGdldFNlbGVjdGlvbihhY3RpdmVFbGVtZW50KTtcbiAgaWYgKCFsYXN0U2VsZWN0aW9uIHx8ICFzaGFsbG93RXF1YWwobGFzdFNlbGVjdGlvbiwgY3VycmVudFNlbGVjdGlvbikpIHtcbiAgICBsYXN0U2VsZWN0aW9uID0gY3VycmVudFNlbGVjdGlvbjtcblxuICAgIGNvbnN0IHN5bnRoZXRpY0V2ZW50ID0gU3ludGhldGljRXZlbnQuZ2V0UG9vbGVkKFxuICAgICAgZXZlbnRUeXBlcy5zZWxlY3QsXG4gICAgICBhY3RpdmVFbGVtZW50SW5zdCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXQsXG4gICAgKTtcblxuICAgIHN5bnRoZXRpY0V2ZW50LnR5cGUgPSAnc2VsZWN0JztcbiAgICBzeW50aGV0aWNFdmVudC50YXJnZXQgPSBhY3RpdmVFbGVtZW50O1xuXG4gICAgYWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlcyhzeW50aGV0aWNFdmVudCk7XG5cbiAgICByZXR1cm4gc3ludGhldGljRXZlbnQ7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaGlzIHBsdWdpbiBjcmVhdGVzIGFuIGBvblNlbGVjdGAgZXZlbnQgdGhhdCBub3JtYWxpemVzIHNlbGVjdCBldmVudHNcbiAqIGFjcm9zcyBmb3JtIGVsZW1lbnRzLlxuICpcbiAqIFN1cHBvcnRlZCBlbGVtZW50cyBhcmU6XG4gKiAtIGlucHV0IChzZWUgYGlzVGV4dElucHV0RWxlbWVudGApXG4gKiAtIHRleHRhcmVhXG4gKiAtIGNvbnRlbnRFZGl0YWJsZVxuICpcbiAqIFRoaXMgZGlmZmVycyBmcm9tIG5hdGl2ZSBicm93c2VyIGltcGxlbWVudGF0aW9ucyBpbiB0aGUgZm9sbG93aW5nIHdheXM6XG4gKiAtIEZpcmVzIG9uIGNvbnRlbnRFZGl0YWJsZSBmaWVsZHMgYXMgd2VsbCBhcyBpbnB1dHMuXG4gKiAtIEZpcmVzIGZvciBjb2xsYXBzZWQgc2VsZWN0aW9uLlxuICogLSBGaXJlcyBhZnRlciB1c2VyIGlucHV0LlxuICovXG5jb25zdCBTZWxlY3RFdmVudFBsdWdpbiA9IHtcbiAgZXZlbnRUeXBlczogZXZlbnRUeXBlcyxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICB0b3BMZXZlbFR5cGUsXG4gICAgdGFyZ2V0SW5zdCxcbiAgICBuYXRpdmVFdmVudCxcbiAgICBuYXRpdmVFdmVudFRhcmdldCxcbiAgKSB7XG4gICAgY29uc3QgZG9jID1cbiAgICAgIG5hdGl2ZUV2ZW50VGFyZ2V0LndpbmRvdyA9PT0gbmF0aXZlRXZlbnRUYXJnZXRcbiAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldC5kb2N1bWVudFxuICAgICAgICA6IG5hdGl2ZUV2ZW50VGFyZ2V0Lm5vZGVUeXBlID09PSBET0NVTUVOVF9OT0RFXG4gICAgICAgICAgPyBuYXRpdmVFdmVudFRhcmdldFxuICAgICAgICAgIDogbmF0aXZlRXZlbnRUYXJnZXQub3duZXJEb2N1bWVudDtcbiAgICAvLyBUcmFjayB3aGV0aGVyIGFsbCBsaXN0ZW5lcnMgZXhpc3RzIGZvciB0aGlzIHBsdWdpbi4gSWYgbm9uZSBleGlzdCwgd2UgZG9cbiAgICAvLyBub3QgZXh0cmFjdCBldmVudHMuIFNlZSAjMzYzOS5cbiAgICBpZiAoIWRvYyB8fCAhaXNMaXN0ZW5pbmdUb0FsbERlcGVuZGVuY2llcygnb25TZWxlY3QnLCBkb2MpKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCB0YXJnZXROb2RlID0gdGFyZ2V0SW5zdCA/IGdldE5vZGVGcm9tSW5zdGFuY2UodGFyZ2V0SW5zdCkgOiB3aW5kb3c7XG5cbiAgICBzd2l0Y2ggKHRvcExldmVsVHlwZSkge1xuICAgICAgLy8gVHJhY2sgdGhlIGlucHV0IG5vZGUgdGhhdCBoYXMgZm9jdXMuXG4gICAgICBjYXNlICd0b3BGb2N1cyc6XG4gICAgICAgIGlmIChcbiAgICAgICAgICBpc1RleHRJbnB1dEVsZW1lbnQodGFyZ2V0Tm9kZSkgfHxcbiAgICAgICAgICB0YXJnZXROb2RlLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ3RydWUnXG4gICAgICAgICkge1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgPSB0YXJnZXROb2RlO1xuICAgICAgICAgIGFjdGl2ZUVsZW1lbnRJbnN0ID0gdGFyZ2V0SW5zdDtcbiAgICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcEJsdXInOlxuICAgICAgICBhY3RpdmVFbGVtZW50ID0gbnVsbDtcbiAgICAgICAgYWN0aXZlRWxlbWVudEluc3QgPSBudWxsO1xuICAgICAgICBsYXN0U2VsZWN0aW9uID0gbnVsbDtcbiAgICAgICAgYnJlYWs7XG4gICAgICAvLyBEb24ndCBmaXJlIHRoZSBldmVudCB3aGlsZSB0aGUgdXNlciBpcyBkcmFnZ2luZy4gVGhpcyBtYXRjaGVzIHRoZVxuICAgICAgLy8gc2VtYW50aWNzIG9mIHRoZSBuYXRpdmUgc2VsZWN0IGV2ZW50LlxuICAgICAgY2FzZSAndG9wTW91c2VEb3duJzpcbiAgICAgICAgbW91c2VEb3duID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BDb250ZXh0TWVudSc6XG4gICAgICBjYXNlICd0b3BNb3VzZVVwJzpcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBjb25zdHJ1Y3RTZWxlY3RFdmVudChuYXRpdmVFdmVudCwgbmF0aXZlRXZlbnRUYXJnZXQpO1xuICAgICAgLy8gQ2hyb21lIGFuZCBJRSBmaXJlIG5vbi1zdGFuZGFyZCBldmVudCB3aGVuIHNlbGVjdGlvbiBpcyBjaGFuZ2VkIChhbmRcbiAgICAgIC8vIHNvbWV0aW1lcyB3aGVuIGl0IGhhc24ndCkuIElFJ3MgZXZlbnQgZmlyZXMgb3V0IG9mIG9yZGVyIHdpdGggcmVzcGVjdFxuICAgICAgLy8gdG8ga2V5IGFuZCBpbnB1dCBldmVudHMgb24gZGVsZXRpb24sIHNvIHdlIGRpc2NhcmQgaXQuXG4gICAgICAvL1xuICAgICAgLy8gRmlyZWZveCBkb2Vzbid0IHN1cHBvcnQgc2VsZWN0aW9uY2hhbmdlLCBzbyBjaGVjayBzZWxlY3Rpb24gc3RhdHVzXG4gICAgICAvLyBhZnRlciBlYWNoIGtleSBlbnRyeS4gVGhlIHNlbGVjdGlvbiBjaGFuZ2VzIGFmdGVyIGtleWRvd24gYW5kIGJlZm9yZVxuICAgICAgLy8ga2V5dXAsIGJ1dCB3ZSBjaGVjayBvbiBrZXlkb3duIGFzIHdlbGwgaW4gdGhlIGNhc2Ugb2YgaG9sZGluZyBkb3duIGFcbiAgICAgIC8vIGtleSwgd2hlbiBtdWx0aXBsZSBrZXlkb3duIGV2ZW50cyBhcmUgZmlyZWQgYnV0IG9ubHkgb25lIGtleXVwIGlzLlxuICAgICAgLy8gVGhpcyBpcyBhbHNvIG91ciBhcHByb2FjaCBmb3IgSUUgaGFuZGxpbmcsIGZvciB0aGUgcmVhc29uIGFib3ZlLlxuICAgICAgY2FzZSAndG9wU2VsZWN0aW9uQ2hhbmdlJzpcbiAgICAgICAgaWYgKHNraXBTZWxlY3Rpb25DaGFuZ2VFdmVudCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlICd0b3BLZXlEb3duJzpcbiAgICAgIGNhc2UgJ3RvcEtleVVwJzpcbiAgICAgICAgcmV0dXJuIGNvbnN0cnVjdFNlbGVjdEV2ZW50KG5hdGl2ZUV2ZW50LCBuYXRpdmVFdmVudFRhcmdldCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RFdmVudFBsdWdpbjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventPropagators = require('events/EventPropagators');\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _SyntheticAnimationEvent = require('./SyntheticAnimationEvent');\n\nvar _SyntheticAnimationEvent2 = _interopRequireDefault(_SyntheticAnimationEvent);\n\nvar _SyntheticClipboardEvent = require('./SyntheticClipboardEvent');\n\nvar _SyntheticClipboardEvent2 = _interopRequireDefault(_SyntheticClipboardEvent);\n\nvar _SyntheticFocusEvent = require('./SyntheticFocusEvent');\n\nvar _SyntheticFocusEvent2 = _interopRequireDefault(_SyntheticFocusEvent);\n\nvar _SyntheticKeyboardEvent = require('./SyntheticKeyboardEvent');\n\nvar _SyntheticKeyboardEvent2 = _interopRequireDefault(_SyntheticKeyboardEvent);\n\nvar _SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar _SyntheticMouseEvent2 = _interopRequireDefault(_SyntheticMouseEvent);\n\nvar _SyntheticDragEvent = require('./SyntheticDragEvent');\n\nvar _SyntheticDragEvent2 = _interopRequireDefault(_SyntheticDragEvent);\n\nvar _SyntheticTouchEvent = require('./SyntheticTouchEvent');\n\nvar _SyntheticTouchEvent2 = _interopRequireDefault(_SyntheticTouchEvent);\n\nvar _SyntheticTransitionEvent = require('./SyntheticTransitionEvent');\n\nvar _SyntheticTransitionEvent2 = _interopRequireDefault(_SyntheticTransitionEvent);\n\nvar _SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar _SyntheticUIEvent2 = _interopRequireDefault(_SyntheticUIEvent);\n\nvar _SyntheticWheelEvent = require('./SyntheticWheelEvent');\n\nvar _SyntheticWheelEvent2 = _interopRequireDefault(_SyntheticWheelEvent);\n\nvar _getEventCharCode = require('./getEventCharCode');\n\nvar _getEventCharCode2 = _interopRequireDefault(_getEventCharCode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Turns\n * ['abort', ...]\n * into\n * eventTypes = {\n *   'abort': {\n *     phasedRegistrationNames: {\n *       bubbled: 'onAbort',\n *       captured: 'onAbortCapture',\n *     },\n *     dependencies: ['topAbort'],\n *   },\n *   ...\n * };\n * topLevelEventsToDispatchConfig = {\n *   'topAbort': { sameConfig }\n * };\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar interactiveEventTypeNames = ['blur', 'cancel', 'click', 'close', 'contextMenu', 'copy', 'cut', 'doubleClick', 'dragEnd', 'dragStart', 'drop', 'focus', 'input', 'invalid', 'keyDown', 'keyPress', 'keyUp', 'mouseDown', 'mouseUp', 'paste', 'pause', 'play', 'rateChange', 'reset', 'seeked', 'submit', 'touchCancel', 'touchEnd', 'touchStart', 'volumeChange'];\nvar nonInteractiveEventTypeNames = ['abort', 'animationEnd', 'animationIteration', 'animationStart', 'canPlay', 'canPlayThrough', 'drag', 'dragEnter', 'dragExit', 'dragLeave', 'dragOver', 'durationChange', 'emptied', 'encrypted', 'ended', 'error', 'load', 'loadedData', 'loadedMetadata', 'loadStart', 'mouseMove', 'mouseOut', 'mouseOver', 'playing', 'progress', 'scroll', 'seeking', 'stalled', 'suspend', 'timeUpdate', 'toggle', 'touchMove', 'transitionEnd', 'waiting', 'wheel'];\n\nvar eventTypes = {};\nvar topLevelEventsToDispatchConfig = {};\n\nfunction addEventTypeNameToConfig(event, isInteractive) {\n  var capitalizedEvent = event[0].toUpperCase() + event.slice(1);\n  var onEvent = 'on' + capitalizedEvent;\n  var topEvent = 'top' + capitalizedEvent;\n\n  var type = {\n    phasedRegistrationNames: {\n      bubbled: onEvent,\n      captured: onEvent + 'Capture'\n    },\n    dependencies: [topEvent],\n    isInteractive: isInteractive\n  };\n  eventTypes[event] = type;\n  topLevelEventsToDispatchConfig[topEvent] = type;\n}\n\ninteractiveEventTypeNames.forEach(function (eventTypeName) {\n  addEventTypeNameToConfig(eventTypeName, true);\n});\nnonInteractiveEventTypeNames.forEach(function (eventTypeName) {\n  addEventTypeNameToConfig(eventTypeName, false);\n});\n\n// Only used in DEV for exhaustiveness validation.\nvar knownHTMLTopLevelTypes = ['topAbort', 'topCancel', 'topCanPlay', 'topCanPlayThrough', 'topClose', 'topDurationChange', 'topEmptied', 'topEncrypted', 'topEnded', 'topError', 'topInput', 'topInvalid', 'topLoad', 'topLoadedData', 'topLoadedMetadata', 'topLoadStart', 'topPause', 'topPlay', 'topPlaying', 'topProgress', 'topRateChange', 'topReset', 'topSeeked', 'topSeeking', 'topStalled', 'topSubmit', 'topSuspend', 'topTimeUpdate', 'topToggle', 'topVolumeChange', 'topWaiting'];\n\nvar SimpleEventPlugin = {\n  eventTypes: eventTypes,\n\n  isInteractiveTopLevelEventType: function isInteractiveTopLevelEventType(topLevelType) {\n    var config = topLevelEventsToDispatchConfig[topLevelType];\n    return config !== undefined && config.isInteractive === true;\n  },\n\n\n  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {\n    var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];\n    if (!dispatchConfig) {\n      return null;\n    }\n    var EventConstructor = void 0;\n    switch (topLevelType) {\n      case 'topKeyPress':\n        // Firefox creates a keypress event for function keys too. This removes\n        // the unwanted keypress events. Enter is however both printable and\n        // non-printable. One would expect Tab to be as well (but it isn't).\n        if ((0, _getEventCharCode2.default)(nativeEvent) === 0) {\n          return null;\n        }\n      /* falls through */\n      case 'topKeyDown':\n      case 'topKeyUp':\n        EventConstructor = _SyntheticKeyboardEvent2.default;\n        break;\n      case 'topBlur':\n      case 'topFocus':\n        EventConstructor = _SyntheticFocusEvent2.default;\n        break;\n      case 'topClick':\n        // Firefox creates a click event on right mouse clicks. This removes the\n        // unwanted click events.\n        if (nativeEvent.button === 2) {\n          return null;\n        }\n      /* falls through */\n      case 'topDoubleClick':\n      case 'topMouseDown':\n      case 'topMouseMove':\n      case 'topMouseUp':\n      // TODO: Disabled elements should not respond to mouse events\n      /* falls through */\n      case 'topMouseOut':\n      case 'topMouseOver':\n      case 'topContextMenu':\n        EventConstructor = _SyntheticMouseEvent2.default;\n        break;\n      case 'topDrag':\n      case 'topDragEnd':\n      case 'topDragEnter':\n      case 'topDragExit':\n      case 'topDragLeave':\n      case 'topDragOver':\n      case 'topDragStart':\n      case 'topDrop':\n        EventConstructor = _SyntheticDragEvent2.default;\n        break;\n      case 'topTouchCancel':\n      case 'topTouchEnd':\n      case 'topTouchMove':\n      case 'topTouchStart':\n        EventConstructor = _SyntheticTouchEvent2.default;\n        break;\n      case 'topAnimationEnd':\n      case 'topAnimationIteration':\n      case 'topAnimationStart':\n        EventConstructor = _SyntheticAnimationEvent2.default;\n        break;\n      case 'topTransitionEnd':\n        EventConstructor = _SyntheticTransitionEvent2.default;\n        break;\n      case 'topScroll':\n        EventConstructor = _SyntheticUIEvent2.default;\n        break;\n      case 'topWheel':\n        EventConstructor = _SyntheticWheelEvent2.default;\n        break;\n      case 'topCopy':\n      case 'topCut':\n      case 'topPaste':\n        EventConstructor = _SyntheticClipboardEvent2.default;\n        break;\n      default:\n        if (__DEV__) {\n          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {\n            (0, _warning2.default)(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);\n          }\n        }\n        // HTML Events\n        // @see http://www.w3.org/TR/html5/index.html#events-0\n        EventConstructor = _SyntheticEvent2.default;\n        break;\n    }\n    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);\n    (0, _EventPropagators.accumulateTwoPhaseDispatches)(event);\n    return event;\n  }\n};\n\nexports.default = SimpleEventPlugin;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TaW1wbGVFdmVudFBsdWdpbi5qcyJdLCJuYW1lcyI6WyJpbnRlcmFjdGl2ZUV2ZW50VHlwZU5hbWVzIiwibm9uSW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcyIsImV2ZW50VHlwZXMiLCJ0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWciLCJhZGRFdmVudFR5cGVOYW1lVG9Db25maWciLCJldmVudCIsImlzSW50ZXJhY3RpdmUiLCJjYXBpdGFsaXplZEV2ZW50IiwidG9VcHBlckNhc2UiLCJzbGljZSIsIm9uRXZlbnQiLCJ0b3BFdmVudCIsInR5cGUiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImRlcGVuZGVuY2llcyIsImZvckVhY2giLCJldmVudFR5cGVOYW1lIiwia25vd25IVE1MVG9wTGV2ZWxUeXBlcyIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlIiwidG9wTGV2ZWxUeXBlIiwiY29uZmlnIiwidW5kZWZpbmVkIiwiZXh0cmFjdEV2ZW50cyIsInRhcmdldEluc3QiLCJuYXRpdmVFdmVudCIsIm5hdGl2ZUV2ZW50VGFyZ2V0IiwiZGlzcGF0Y2hDb25maWciLCJFdmVudENvbnN0cnVjdG9yIiwiU3ludGhldGljS2V5Ym9hcmRFdmVudCIsIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJidXR0b24iLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljVG91Y2hFdmVudCIsIlN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IiwiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50IiwiU3ludGhldGljVUlFdmVudCIsIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIl9fREVWX18iLCJpbmRleE9mIiwiU3ludGhldGljRXZlbnQiLCJnZXRQ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RkEsUUFBTXZDLFFBQVF5QixpQkFBaUJlLFNBQWpCLENBQ1poQixjQURZLEVBRVpILFVBRlksRUFHWkMsV0FIWSxFQUlaQyxpQkFKWSxDQUFkO0FBTUEsd0RBQTZCdkIsS0FBN0I7QUFDQSxXQUFPQSxLQUFQO0FBQ0Q7QUFqSGlELENBQXBEOztrQkFvSGVlLGlCIiwiZmlsZSI6IlNpbXBsZUV2ZW50UGx1Z2luLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7VG9wTGV2ZWxUeXBlc30gZnJvbSAnLi9Ccm93c2VyRXZlbnRDb25zdGFudHMnO1xuaW1wb3J0IHR5cGUge1xuICBEaXNwYXRjaENvbmZpZyxcbiAgUmVhY3RTeW50aGV0aWNFdmVudCxcbn0gZnJvbSAnZXZlbnRzL1JlYWN0U3ludGhldGljRXZlbnRUeXBlJztcbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAncmVhY3QtcmVjb25jaWxlci9zcmMvUmVhY3RGaWJlcic7XG5pbXBvcnQgdHlwZSB7RXZlbnRUeXBlcywgUGx1Z2luTW9kdWxlfSBmcm9tICdldmVudHMvUGx1Z2luTW9kdWxlVHlwZSc7XG5cbmltcG9ydCB7YWNjdW11bGF0ZVR3b1BoYXNlRGlzcGF0Y2hlc30gZnJvbSAnZXZlbnRzL0V2ZW50UHJvcGFnYXRvcnMnO1xuaW1wb3J0IFN5bnRoZXRpY0V2ZW50IGZyb20gJ2V2ZW50cy9TeW50aGV0aWNFdmVudCc7XG5pbXBvcnQgd2FybmluZyBmcm9tICdmYmpzL2xpYi93YXJuaW5nJztcblxuaW1wb3J0IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50IGZyb20gJy4vU3ludGhldGljQW5pbWF0aW9uRXZlbnQnO1xuaW1wb3J0IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50IGZyb20gJy4vU3ludGhldGljQ2xpcGJvYXJkRXZlbnQnO1xuaW1wb3J0IFN5bnRoZXRpY0ZvY3VzRXZlbnQgZnJvbSAnLi9TeW50aGV0aWNGb2N1c0V2ZW50JztcbmltcG9ydCBTeW50aGV0aWNLZXlib2FyZEV2ZW50IGZyb20gJy4vU3ludGhldGljS2V5Ym9hcmRFdmVudCc7XG5pbXBvcnQgU3ludGhldGljTW91c2VFdmVudCBmcm9tICcuL1N5bnRoZXRpY01vdXNlRXZlbnQnO1xuaW1wb3J0IFN5bnRoZXRpY0RyYWdFdmVudCBmcm9tICcuL1N5bnRoZXRpY0RyYWdFdmVudCc7XG5pbXBvcnQgU3ludGhldGljVG91Y2hFdmVudCBmcm9tICcuL1N5bnRoZXRpY1RvdWNoRXZlbnQnO1xuaW1wb3J0IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCBmcm9tICcuL1N5bnRoZXRpY1RyYW5zaXRpb25FdmVudCc7XG5pbXBvcnQgU3ludGhldGljVUlFdmVudCBmcm9tICcuL1N5bnRoZXRpY1VJRXZlbnQnO1xuaW1wb3J0IFN5bnRoZXRpY1doZWVsRXZlbnQgZnJvbSAnLi9TeW50aGV0aWNXaGVlbEV2ZW50JztcbmltcG9ydCBnZXRFdmVudENoYXJDb2RlIGZyb20gJy4vZ2V0RXZlbnRDaGFyQ29kZSc7XG5cbi8qKlxuICogVHVybnNcbiAqIFsnYWJvcnQnLCAuLi5dXG4gKiBpbnRvXG4gKiBldmVudFR5cGVzID0ge1xuICogICAnYWJvcnQnOiB7XG4gKiAgICAgcGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6IHtcbiAqICAgICAgIGJ1YmJsZWQ6ICdvbkFib3J0JyxcbiAqICAgICAgIGNhcHR1cmVkOiAnb25BYm9ydENhcHR1cmUnLFxuICogICAgIH0sXG4gKiAgICAgZGVwZW5kZW5jaWVzOiBbJ3RvcEFib3J0J10sXG4gKiAgIH0sXG4gKiAgIC4uLlxuICogfTtcbiAqIHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZyA9IHtcbiAqICAgJ3RvcEFib3J0JzogeyBzYW1lQ29uZmlnIH1cbiAqIH07XG4gKi9cbmNvbnN0IGludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXM6IEFycmF5PHN0cmluZz4gPSBbXG4gICdibHVyJyxcbiAgJ2NhbmNlbCcsXG4gICdjbGljaycsXG4gICdjbG9zZScsXG4gICdjb250ZXh0TWVudScsXG4gICdjb3B5JyxcbiAgJ2N1dCcsXG4gICdkb3VibGVDbGljaycsXG4gICdkcmFnRW5kJyxcbiAgJ2RyYWdTdGFydCcsXG4gICdkcm9wJyxcbiAgJ2ZvY3VzJyxcbiAgJ2lucHV0JyxcbiAgJ2ludmFsaWQnLFxuICAna2V5RG93bicsXG4gICdrZXlQcmVzcycsXG4gICdrZXlVcCcsXG4gICdtb3VzZURvd24nLFxuICAnbW91c2VVcCcsXG4gICdwYXN0ZScsXG4gICdwYXVzZScsXG4gICdwbGF5JyxcbiAgJ3JhdGVDaGFuZ2UnLFxuICAncmVzZXQnLFxuICAnc2Vla2VkJyxcbiAgJ3N1Ym1pdCcsXG4gICd0b3VjaENhbmNlbCcsXG4gICd0b3VjaEVuZCcsXG4gICd0b3VjaFN0YXJ0JyxcbiAgJ3ZvbHVtZUNoYW5nZScsXG5dO1xuY29uc3Qgbm9uSW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lczogQXJyYXk8c3RyaW5nPiA9IFtcbiAgJ2Fib3J0JyxcbiAgJ2FuaW1hdGlvbkVuZCcsXG4gICdhbmltYXRpb25JdGVyYXRpb24nLFxuICAnYW5pbWF0aW9uU3RhcnQnLFxuICAnY2FuUGxheScsXG4gICdjYW5QbGF5VGhyb3VnaCcsXG4gICdkcmFnJyxcbiAgJ2RyYWdFbnRlcicsXG4gICdkcmFnRXhpdCcsXG4gICdkcmFnTGVhdmUnLFxuICAnZHJhZ092ZXInLFxuICAnZHVyYXRpb25DaGFuZ2UnLFxuICAnZW1wdGllZCcsXG4gICdlbmNyeXB0ZWQnLFxuICAnZW5kZWQnLFxuICAnZXJyb3InLFxuICAnbG9hZCcsXG4gICdsb2FkZWREYXRhJyxcbiAgJ2xvYWRlZE1ldGFkYXRhJyxcbiAgJ2xvYWRTdGFydCcsXG4gICdtb3VzZU1vdmUnLFxuICAnbW91c2VPdXQnLFxuICAnbW91c2VPdmVyJyxcbiAgJ3BsYXlpbmcnLFxuICAncHJvZ3Jlc3MnLFxuICAnc2Nyb2xsJyxcbiAgJ3NlZWtpbmcnLFxuICAnc3RhbGxlZCcsXG4gICdzdXNwZW5kJyxcbiAgJ3RpbWVVcGRhdGUnLFxuICAndG9nZ2xlJyxcbiAgJ3RvdWNoTW92ZScsXG4gICd0cmFuc2l0aW9uRW5kJyxcbiAgJ3dhaXRpbmcnLFxuICAnd2hlZWwnLFxuXTtcblxuY29uc3QgZXZlbnRUeXBlczogRXZlbnRUeXBlcyA9IHt9O1xuY29uc3QgdG9wTGV2ZWxFdmVudHNUb0Rpc3BhdGNoQ29uZmlnOiB7XG4gIFtrZXk6IFRvcExldmVsVHlwZXNdOiBEaXNwYXRjaENvbmZpZyxcbn0gPSB7fTtcblxuZnVuY3Rpb24gYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnKGV2ZW50OiBzdHJpbmcsIGlzSW50ZXJhY3RpdmU6IGJvb2xlYW4pIHtcbiAgY29uc3QgY2FwaXRhbGl6ZWRFdmVudCA9IGV2ZW50WzBdLnRvVXBwZXJDYXNlKCkgKyBldmVudC5zbGljZSgxKTtcbiAgY29uc3Qgb25FdmVudCA9ICdvbicgKyBjYXBpdGFsaXplZEV2ZW50O1xuICBjb25zdCB0b3BFdmVudCA9ICd0b3AnICsgY2FwaXRhbGl6ZWRFdmVudDtcblxuICBjb25zdCB0eXBlID0ge1xuICAgIHBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOiB7XG4gICAgICBidWJibGVkOiBvbkV2ZW50LFxuICAgICAgY2FwdHVyZWQ6IG9uRXZlbnQgKyAnQ2FwdHVyZScsXG4gICAgfSxcbiAgICBkZXBlbmRlbmNpZXM6IFt0b3BFdmVudF0sXG4gICAgaXNJbnRlcmFjdGl2ZSxcbiAgfTtcbiAgZXZlbnRUeXBlc1tldmVudF0gPSB0eXBlO1xuICB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wRXZlbnRdID0gdHlwZTtcbn1cblxuaW50ZXJhY3RpdmVFdmVudFR5cGVOYW1lcy5mb3JFYWNoKGV2ZW50VHlwZU5hbWUgPT4ge1xuICBhZGRFdmVudFR5cGVOYW1lVG9Db25maWcoZXZlbnRUeXBlTmFtZSwgdHJ1ZSk7XG59KTtcbm5vbkludGVyYWN0aXZlRXZlbnRUeXBlTmFtZXMuZm9yRWFjaChldmVudFR5cGVOYW1lID0+IHtcbiAgYWRkRXZlbnRUeXBlTmFtZVRvQ29uZmlnKGV2ZW50VHlwZU5hbWUsIGZhbHNlKTtcbn0pO1xuXG4vLyBPbmx5IHVzZWQgaW4gREVWIGZvciBleGhhdXN0aXZlbmVzcyB2YWxpZGF0aW9uLlxuY29uc3Qga25vd25IVE1MVG9wTGV2ZWxUeXBlcyA9IFtcbiAgJ3RvcEFib3J0JyxcbiAgJ3RvcENhbmNlbCcsXG4gICd0b3BDYW5QbGF5JyxcbiAgJ3RvcENhblBsYXlUaHJvdWdoJyxcbiAgJ3RvcENsb3NlJyxcbiAgJ3RvcER1cmF0aW9uQ2hhbmdlJyxcbiAgJ3RvcEVtcHRpZWQnLFxuICAndG9wRW5jcnlwdGVkJyxcbiAgJ3RvcEVuZGVkJyxcbiAgJ3RvcEVycm9yJyxcbiAgJ3RvcElucHV0JyxcbiAgJ3RvcEludmFsaWQnLFxuICAndG9wTG9hZCcsXG4gICd0b3BMb2FkZWREYXRhJyxcbiAgJ3RvcExvYWRlZE1ldGFkYXRhJyxcbiAgJ3RvcExvYWRTdGFydCcsXG4gICd0b3BQYXVzZScsXG4gICd0b3BQbGF5JyxcbiAgJ3RvcFBsYXlpbmcnLFxuICAndG9wUHJvZ3Jlc3MnLFxuICAndG9wUmF0ZUNoYW5nZScsXG4gICd0b3BSZXNldCcsXG4gICd0b3BTZWVrZWQnLFxuICAndG9wU2Vla2luZycsXG4gICd0b3BTdGFsbGVkJyxcbiAgJ3RvcFN1Ym1pdCcsXG4gICd0b3BTdXNwZW5kJyxcbiAgJ3RvcFRpbWVVcGRhdGUnLFxuICAndG9wVG9nZ2xlJyxcbiAgJ3RvcFZvbHVtZUNoYW5nZScsXG4gICd0b3BXYWl0aW5nJyxcbl07XG5cbmNvbnN0IFNpbXBsZUV2ZW50UGx1Z2luOiBQbHVnaW5Nb2R1bGU8TW91c2VFdmVudD4gPSB7XG4gIGV2ZW50VHlwZXM6IGV2ZW50VHlwZXMsXG5cbiAgaXNJbnRlcmFjdGl2ZVRvcExldmVsRXZlbnRUeXBlKHRvcExldmVsVHlwZTogVG9wTGV2ZWxUeXBlcyk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbmZpZyA9IHRvcExldmVsRXZlbnRzVG9EaXNwYXRjaENvbmZpZ1t0b3BMZXZlbFR5cGVdO1xuICAgIHJldHVybiBjb25maWcgIT09IHVuZGVmaW5lZCAmJiBjb25maWcuaXNJbnRlcmFjdGl2ZSA9PT0gdHJ1ZTtcbiAgfSxcblxuICBleHRyYWN0RXZlbnRzOiBmdW5jdGlvbihcbiAgICB0b3BMZXZlbFR5cGU6IFRvcExldmVsVHlwZXMsXG4gICAgdGFyZ2V0SW5zdDogRmliZXIsXG4gICAgbmF0aXZlRXZlbnQ6IE1vdXNlRXZlbnQsXG4gICAgbmF0aXZlRXZlbnRUYXJnZXQ6IEV2ZW50VGFyZ2V0LFxuICApOiBudWxsIHwgUmVhY3RTeW50aGV0aWNFdmVudCB7XG4gICAgY29uc3QgZGlzcGF0Y2hDb25maWcgPSB0b3BMZXZlbEV2ZW50c1RvRGlzcGF0Y2hDb25maWdbdG9wTGV2ZWxUeXBlXTtcbiAgICBpZiAoIWRpc3BhdGNoQ29uZmlnKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgbGV0IEV2ZW50Q29uc3RydWN0b3I7XG4gICAgc3dpdGNoICh0b3BMZXZlbFR5cGUpIHtcbiAgICAgIGNhc2UgJ3RvcEtleVByZXNzJzpcbiAgICAgICAgLy8gRmlyZWZveCBjcmVhdGVzIGEga2V5cHJlc3MgZXZlbnQgZm9yIGZ1bmN0aW9uIGtleXMgdG9vLiBUaGlzIHJlbW92ZXNcbiAgICAgICAgLy8gdGhlIHVud2FudGVkIGtleXByZXNzIGV2ZW50cy4gRW50ZXIgaXMgaG93ZXZlciBib3RoIHByaW50YWJsZSBhbmRcbiAgICAgICAgLy8gbm9uLXByaW50YWJsZS4gT25lIHdvdWxkIGV4cGVjdCBUYWIgdG8gYmUgYXMgd2VsbCAoYnV0IGl0IGlzbid0KS5cbiAgICAgICAgaWYgKGdldEV2ZW50Q2hhckNvZGUobmF0aXZlRXZlbnQpID09PSAwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcEtleURvd24nOlxuICAgICAgY2FzZSAndG9wS2V5VXAnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljS2V5Ym9hcmRFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BCbHVyJzpcbiAgICAgIGNhc2UgJ3RvcEZvY3VzJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ2xpY2snOlxuICAgICAgICAvLyBGaXJlZm94IGNyZWF0ZXMgYSBjbGljayBldmVudCBvbiByaWdodCBtb3VzZSBjbGlja3MuIFRoaXMgcmVtb3ZlcyB0aGVcbiAgICAgICAgLy8gdW53YW50ZWQgY2xpY2sgZXZlbnRzLlxuICAgICAgICBpZiAobmF0aXZlRXZlbnQuYnV0dG9uID09PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgJ3RvcERvdWJsZUNsaWNrJzpcbiAgICAgIGNhc2UgJ3RvcE1vdXNlRG93bic6XG4gICAgICBjYXNlICd0b3BNb3VzZU1vdmUnOlxuICAgICAgY2FzZSAndG9wTW91c2VVcCc6XG4gICAgICAvLyBUT0RPOiBEaXNhYmxlZCBlbGVtZW50cyBzaG91bGQgbm90IHJlc3BvbmQgdG8gbW91c2UgZXZlbnRzXG4gICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlICd0b3BNb3VzZU91dCc6XG4gICAgICBjYXNlICd0b3BNb3VzZU92ZXInOlxuICAgICAgY2FzZSAndG9wQ29udGV4dE1lbnUnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljTW91c2VFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BEcmFnJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdFbmQnOlxuICAgICAgY2FzZSAndG9wRHJhZ0VudGVyJzpcbiAgICAgIGNhc2UgJ3RvcERyYWdFeGl0JzpcbiAgICAgIGNhc2UgJ3RvcERyYWdMZWF2ZSc6XG4gICAgICBjYXNlICd0b3BEcmFnT3Zlcic6XG4gICAgICBjYXNlICd0b3BEcmFnU3RhcnQnOlxuICAgICAgY2FzZSAndG9wRHJvcCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNEcmFnRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wVG91Y2hDYW5jZWwnOlxuICAgICAgY2FzZSAndG9wVG91Y2hFbmQnOlxuICAgICAgY2FzZSAndG9wVG91Y2hNb3ZlJzpcbiAgICAgIGNhc2UgJ3RvcFRvdWNoU3RhcnQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVG91Y2hFdmVudDtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0b3BBbmltYXRpb25FbmQnOlxuICAgICAgY2FzZSAndG9wQW5pbWF0aW9uSXRlcmF0aW9uJzpcbiAgICAgIGNhc2UgJ3RvcEFuaW1hdGlvblN0YXJ0JzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFRyYW5zaXRpb25FbmQnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljVHJhbnNpdGlvbkV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFNjcm9sbCc6XG4gICAgICAgIEV2ZW50Q29uc3RydWN0b3IgPSBTeW50aGV0aWNVSUV2ZW50O1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RvcFdoZWVsJzpcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY1doZWVsRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAndG9wQ29weSc6XG4gICAgICBjYXNlICd0b3BDdXQnOlxuICAgICAgY2FzZSAndG9wUGFzdGUnOlxuICAgICAgICBFdmVudENvbnN0cnVjdG9yID0gU3ludGhldGljQ2xpcGJvYXJkRXZlbnQ7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICBpZiAoa25vd25IVE1MVG9wTGV2ZWxUeXBlcy5pbmRleE9mKHRvcExldmVsVHlwZSkgPT09IC0xKSB7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ1NpbXBsZUV2ZW50UGx1Z2luOiBVbmhhbmRsZWQgZXZlbnQgdHlwZSwgYCVzYC4gVGhpcyB3YXJuaW5nICcgK1xuICAgICAgICAgICAgICAgICdpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLFxuICAgICAgICAgICAgICB0b3BMZXZlbFR5cGUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBIVE1MIEV2ZW50c1xuICAgICAgICAvLyBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2h0bWw1L2luZGV4Lmh0bWwjZXZlbnRzLTBcbiAgICAgICAgRXZlbnRDb25zdHJ1Y3RvciA9IFN5bnRoZXRpY0V2ZW50O1xuICAgICAgICBicmVhaztcbiAgICB9XG4gICAgY29uc3QgZXZlbnQgPSBFdmVudENvbnN0cnVjdG9yLmdldFBvb2xlZChcbiAgICAgIGRpc3BhdGNoQ29uZmlnLFxuICAgICAgdGFyZ2V0SW5zdCxcbiAgICAgIG5hdGl2ZUV2ZW50LFxuICAgICAgbmF0aXZlRXZlbnRUYXJnZXQsXG4gICAgKTtcbiAgICBhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzKGV2ZW50KTtcbiAgICByZXR1cm4gZXZlbnQ7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaW1wbGVFdmVudFBsdWdpbjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface\n * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent\n */\nvar SyntheticAnimationEvent = _SyntheticEvent2.default.extend({\n  animationName: null,\n  elapsedTime: null,\n  pseudoElement: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticAnimationEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNBbmltYXRpb25FdmVudC5qcyJdLCJuYW1lcyI6WyJTeW50aGV0aWNBbmltYXRpb25FdmVudCIsIlN5bnRoZXRpY0V2ZW50IiwiZXh0ZW5kIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBOzs7OztBQUtBLElBQU1BLDBCQUEwQkMseUJBQWVDLE1BQWYsQ0FBc0I7QUFDcERDLGlCQUFlLElBRHFDO0FBRXBEQyxlQUFhLElBRnVDO0FBR3BEQyxpQkFBZTtBQUhxQyxDQUF0QixDQUFoQyxDLENBZEE7Ozs7Ozs7a0JBb0JlTCx1QiIsImZpbGUiOiJTeW50aGV0aWNBbmltYXRpb25FdmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTeW50aGV0aWNFdmVudCBmcm9tICdldmVudHMvU3ludGhldGljRXZlbnQnO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvY3NzMy1hbmltYXRpb25zLyNBbmltYXRpb25FdmVudC1pbnRlcmZhY2VcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0FuaW1hdGlvbkV2ZW50XG4gKi9cbmNvbnN0IFN5bnRoZXRpY0FuaW1hdGlvbkV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgYW5pbWF0aW9uTmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGwsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljQW5pbWF0aW9uRXZlbnQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/clipboard-apis/\n */\nvar SyntheticClipboardEvent = _SyntheticEvent2.default.extend({\n  clipboardData: function clipboardData(event) {\n    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;\n  }\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticClipboardEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNDbGlwYm9hcmRFdmVudC5qcyJdLCJuYW1lcyI6WyJTeW50aGV0aWNDbGlwYm9hcmRFdmVudCIsIlN5bnRoZXRpY0V2ZW50IiwiZXh0ZW5kIiwiY2xpcGJvYXJkRGF0YSIsImV2ZW50Iiwid2luZG93Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTs7Ozs7O0FBRUE7Ozs7QUFJQSxJQUFNQSwwQkFBMEJDLHlCQUFlQyxNQUFmLENBQXNCO0FBQ3BEQyxpQkFBZSx1QkFBU0MsS0FBVCxFQUFnQjtBQUM3QixXQUFPLG1CQUFtQkEsS0FBbkIsR0FDSEEsTUFBTUQsYUFESCxHQUVIRSxPQUFPRixhQUZYO0FBR0Q7QUFMbUQsQ0FBdEIsQ0FBaEMsQyxDQWJBOzs7Ozs7O2tCQXFCZUgsdUIiLCJmaWxlIjoiU3ludGhldGljQ2xpcGJvYXJkRXZlbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgU3ludGhldGljRXZlbnQgZnJvbSAnZXZlbnRzL1N5bnRoZXRpY0V2ZW50JztcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL2NsaXBib2FyZC1hcGlzL1xuICovXG5jb25zdCBTeW50aGV0aWNDbGlwYm9hcmRFdmVudCA9IFN5bnRoZXRpY0V2ZW50LmV4dGVuZCh7XG4gIGNsaXBib2FyZERhdGE6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuICdjbGlwYm9hcmREYXRhJyBpbiBldmVudFxuICAgICAgPyBldmVudC5jbGlwYm9hcmREYXRhXG4gICAgICA6IHdpbmRvdy5jbGlwYm9hcmREYXRhO1xuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bnRoZXRpY0NsaXBib2FyZEV2ZW50O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents\n */\nvar SyntheticCompositionEvent = _SyntheticEvent2.default.extend({\n  data: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticCompositionEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNDb21wb3NpdGlvbkV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY0NvbXBvc2l0aW9uRXZlbnQiLCJTeW50aGV0aWNFdmVudCIsImV4dGVuZCIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7Ozs7QUFFQTs7OztBQUlBLElBQU1BLDRCQUE0QkMseUJBQWVDLE1BQWYsQ0FBc0I7QUFDdERDLFFBQU07QUFEZ0QsQ0FBdEIsQ0FBbEMsQyxDQWJBOzs7Ozs7O2tCQWlCZUgseUIiLCJmaWxlIjoiU3ludGhldGljQ29tcG9zaXRpb25FdmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTeW50aGV0aWNFdmVudCBmcm9tICdldmVudHMvU3ludGhldGljRXZlbnQnO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtY29tcG9zaXRpb25ldmVudHNcbiAqL1xuY29uc3QgU3ludGhldGljQ29tcG9zaXRpb25FdmVudCA9IFN5bnRoZXRpY0V2ZW50LmV4dGVuZCh7XG4gIGRhdGE6IG51bGwsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljQ29tcG9zaXRpb25FdmVudDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar _SyntheticMouseEvent2 = _interopRequireDefault(_SyntheticMouseEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface DragEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar SyntheticDragEvent = _SyntheticMouseEvent2.default.extend({\n  dataTransfer: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticDragEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNEcmFnRXZlbnQuanMiXSwibmFtZXMiOlsiU3ludGhldGljRHJhZ0V2ZW50IiwiU3ludGhldGljTW91c2VFdmVudCIsImV4dGVuZCIsImRhdGFUcmFuc2ZlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBOzs7O0FBSUEsSUFBTUEscUJBQXFCQyw4QkFBb0JDLE1BQXBCLENBQTJCO0FBQ3BEQyxnQkFBYztBQURzQyxDQUEzQixDQUEzQixDLENBYkE7Ozs7Ozs7a0JBaUJlSCxrQiIsImZpbGUiOiJTeW50aGV0aWNEcmFnRXZlbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgU3ludGhldGljTW91c2VFdmVudCBmcm9tICcuL1N5bnRoZXRpY01vdXNlRXZlbnQnO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgRHJhZ0V2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xuY29uc3QgU3ludGhldGljRHJhZ0V2ZW50ID0gU3ludGhldGljTW91c2VFdmVudC5leHRlbmQoe1xuICBkYXRhVHJhbnNmZXI6IG51bGwsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljRHJhZ0V2ZW50O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar _SyntheticUIEvent2 = _interopRequireDefault(_SyntheticUIEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface FocusEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar SyntheticFocusEvent = _SyntheticUIEvent2.default.extend({\n  relatedTarget: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticFocusEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNGb2N1c0V2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY0ZvY3VzRXZlbnQiLCJTeW50aGV0aWNVSUV2ZW50IiwiZXh0ZW5kIiwicmVsYXRlZFRhcmdldCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBOzs7O0FBSUEsSUFBTUEsc0JBQXNCQywyQkFBaUJDLE1BQWpCLENBQXdCO0FBQ2xEQyxpQkFBZTtBQURtQyxDQUF4QixDQUE1QixDLENBYkE7Ozs7Ozs7a0JBaUJlSCxtQiIsImZpbGUiOiJTeW50aGV0aWNGb2N1c0V2ZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IFN5bnRoZXRpY1VJRXZlbnQgZnJvbSAnLi9TeW50aGV0aWNVSUV2ZW50JztcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEZvY3VzRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzL1xuICovXG5jb25zdCBTeW50aGV0aWNGb2N1c0V2ZW50ID0gU3ludGhldGljVUlFdmVudC5leHRlbmQoe1xuICByZWxhdGVkVGFyZ2V0OiBudWxsLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bnRoZXRpY0ZvY3VzRXZlbnQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105\n *      /#events-inputevents\n */\nvar SyntheticInputEvent = _SyntheticEvent2.default.extend({\n  data: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticInputEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNJbnB1dEV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY0lucHV0RXZlbnQiLCJTeW50aGV0aWNFdmVudCIsImV4dGVuZCIsImRhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7Ozs7QUFFQTs7Ozs7QUFLQSxJQUFNQSxzQkFBc0JDLHlCQUFlQyxNQUFmLENBQXNCO0FBQ2hEQyxRQUFNO0FBRDBDLENBQXRCLENBQTVCLEMsQ0FkQTs7Ozs7OztrQkFrQmVILG1CIiwiZmlsZSI6IlN5bnRoZXRpY0lucHV0RXZlbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgU3ludGhldGljRXZlbnQgZnJvbSAnZXZlbnRzL1N5bnRoZXRpY0V2ZW50JztcblxuLyoqXG4gKiBAaW50ZXJmYWNlIEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTMvV0QtRE9NLUxldmVsLTMtRXZlbnRzLTIwMTMxMTA1XG4gKiAgICAgIC8jZXZlbnRzLWlucHV0ZXZlbnRzXG4gKi9cbmNvbnN0IFN5bnRoZXRpY0lucHV0RXZlbnQgPSBTeW50aGV0aWNFdmVudC5leHRlbmQoe1xuICBkYXRhOiBudWxsLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bnRoZXRpY0lucHV0RXZlbnQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar _SyntheticUIEvent2 = _interopRequireDefault(_SyntheticUIEvent);\n\nvar _getEventCharCode = require('./getEventCharCode');\n\nvar _getEventCharCode2 = _interopRequireDefault(_getEventCharCode);\n\nvar _getEventKey = require('./getEventKey');\n\nvar _getEventKey2 = _interopRequireDefault(_getEventKey);\n\nvar _getEventModifierState = require('./getEventModifierState');\n\nvar _getEventModifierState2 = _interopRequireDefault(_getEventModifierState);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface KeyboardEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar SyntheticKeyboardEvent = _SyntheticUIEvent2.default.extend({\n  key: _getEventKey2.default,\n  location: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  repeat: null,\n  locale: null,\n  getModifierState: _getEventModifierState2.default,\n  // Legacy Interface\n  charCode: function charCode(event) {\n    // `charCode` is the result of a KeyPress event and represents the value of\n    // the actual printable character.\n\n    // KeyPress is deprecated, but its replacement is not yet final and not\n    // implemented in any major browser. Only KeyPress has charCode.\n    if (event.type === 'keypress') {\n      return (0, _getEventCharCode2.default)(event);\n    }\n    return 0;\n  },\n  keyCode: function keyCode(event) {\n    // `keyCode` is the result of a KeyDown/Up event and represents the value of\n    // physical keyboard key.\n\n    // The actual meaning of the value depends on the users' keyboard layout\n    // which cannot be detected. Assuming that it is a US keyboard layout\n    // provides a surprisingly accurate mapping for US and European users.\n    // Due to this, it is left to the user to implement at this time.\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  },\n  which: function which(event) {\n    // `which` is an alias for either `keyCode` or `charCode` depending on the\n    // type of the event.\n    if (event.type === 'keypress') {\n      return (0, _getEventCharCode2.default)(event);\n    }\n    if (event.type === 'keydown' || event.type === 'keyup') {\n      return event.keyCode;\n    }\n    return 0;\n  }\n});\n\nexports.default = SyntheticKeyboardEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNLZXlib2FyZEV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY0tleWJvYXJkRXZlbnQiLCJTeW50aGV0aWNVSUV2ZW50IiwiZXh0ZW5kIiwia2V5IiwiZ2V0RXZlbnRLZXkiLCJsb2NhdGlvbiIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJyZXBlYXQiLCJsb2NhbGUiLCJnZXRNb2RpZmllclN0YXRlIiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIiwiY2hhckNvZGUiLCJldmVudCIsInR5cGUiLCJrZXlDb2RlIiwid2hpY2giXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7Ozs7QUFFQTs7OztBQVpBOzs7Ozs7O0FBZ0JBLElBQU1BLHlCQUF5QkMsMkJBQWlCQyxNQUFqQixDQUF3QjtBQUNyREMsT0FBS0MscUJBRGdEO0FBRXJEQyxZQUFVLElBRjJDO0FBR3JEQyxXQUFTLElBSDRDO0FBSXJEQyxZQUFVLElBSjJDO0FBS3JEQyxVQUFRLElBTDZDO0FBTXJEQyxXQUFTLElBTjRDO0FBT3JEQyxVQUFRLElBUDZDO0FBUXJEQyxVQUFRLElBUjZDO0FBU3JEQyxvQkFBa0JDLCtCQVRtQztBQVVyRDtBQUNBQyxZQUFVLGtCQUFTQyxLQUFULEVBQWdCO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQUlBLE1BQU1DLElBQU4sS0FBZSxVQUFuQixFQUErQjtBQUM3QixhQUFPLGdDQUFpQkQsS0FBakIsQ0FBUDtBQUNEO0FBQ0QsV0FBTyxDQUFQO0FBQ0QsR0FyQm9EO0FBc0JyREUsV0FBUyxpQkFBU0YsS0FBVCxFQUFnQjtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBSUEsTUFBTUMsSUFBTixLQUFlLFNBQWYsSUFBNEJELE1BQU1DLElBQU4sS0FBZSxPQUEvQyxFQUF3RDtBQUN0RCxhQUFPRCxNQUFNRSxPQUFiO0FBQ0Q7QUFDRCxXQUFPLENBQVA7QUFDRCxHQWxDb0Q7QUFtQ3JEQyxTQUFPLGVBQVNILEtBQVQsRUFBZ0I7QUFDckI7QUFDQTtBQUNBLFFBQUlBLE1BQU1DLElBQU4sS0FBZSxVQUFuQixFQUErQjtBQUM3QixhQUFPLGdDQUFpQkQsS0FBakIsQ0FBUDtBQUNEO0FBQ0QsUUFBSUEsTUFBTUMsSUFBTixLQUFlLFNBQWYsSUFBNEJELE1BQU1DLElBQU4sS0FBZSxPQUEvQyxFQUF3RDtBQUN0RCxhQUFPRCxNQUFNRSxPQUFiO0FBQ0Q7QUFDRCxXQUFPLENBQVA7QUFDRDtBQTdDb0QsQ0FBeEIsQ0FBL0I7O2tCQWdEZWpCLHNCIiwiZmlsZSI6IlN5bnRoZXRpY0tleWJvYXJkRXZlbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgU3ludGhldGljVUlFdmVudCBmcm9tICcuL1N5bnRoZXRpY1VJRXZlbnQnO1xuaW1wb3J0IGdldEV2ZW50Q2hhckNvZGUgZnJvbSAnLi9nZXRFdmVudENoYXJDb2RlJztcbmltcG9ydCBnZXRFdmVudEtleSBmcm9tICcuL2dldEV2ZW50S2V5JztcbmltcG9ydCBnZXRFdmVudE1vZGlmaWVyU3RhdGUgZnJvbSAnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgS2V5Ym9hcmRFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbmNvbnN0IFN5bnRoZXRpY0tleWJvYXJkRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIGtleTogZ2V0RXZlbnRLZXksXG4gIGxvY2F0aW9uOiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICByZXBlYXQ6IG51bGwsXG4gIGxvY2FsZTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICAvLyBMZWdhY3kgSW50ZXJmYWNlXG4gIGNoYXJDb2RlOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGBjaGFyQ29kZWAgaXMgdGhlIHJlc3VsdCBvZiBhIEtleVByZXNzIGV2ZW50IGFuZCByZXByZXNlbnRzIHRoZSB2YWx1ZSBvZlxuICAgIC8vIHRoZSBhY3R1YWwgcHJpbnRhYmxlIGNoYXJhY3Rlci5cblxuICAgIC8vIEtleVByZXNzIGlzIGRlcHJlY2F0ZWQsIGJ1dCBpdHMgcmVwbGFjZW1lbnQgaXMgbm90IHlldCBmaW5hbCBhbmQgbm90XG4gICAgLy8gaW1wbGVtZW50ZWQgaW4gYW55IG1ham9yIGJyb3dzZXIuIE9ubHkgS2V5UHJlc3MgaGFzIGNoYXJDb2RlLlxuICAgIGlmIChldmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgICByZXR1cm4gZ2V0RXZlbnRDaGFyQ29kZShldmVudCk7XG4gICAgfVxuICAgIHJldHVybiAwO1xuICB9LFxuICBrZXlDb2RlOiBmdW5jdGlvbihldmVudCkge1xuICAgIC8vIGBrZXlDb2RlYCBpcyB0aGUgcmVzdWx0IG9mIGEgS2V5RG93bi9VcCBldmVudCBhbmQgcmVwcmVzZW50cyB0aGUgdmFsdWUgb2ZcbiAgICAvLyBwaHlzaWNhbCBrZXlib2FyZCBrZXkuXG5cbiAgICAvLyBUaGUgYWN0dWFsIG1lYW5pbmcgb2YgdGhlIHZhbHVlIGRlcGVuZHMgb24gdGhlIHVzZXJzJyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyB3aGljaCBjYW5ub3QgYmUgZGV0ZWN0ZWQuIEFzc3VtaW5nIHRoYXQgaXQgaXMgYSBVUyBrZXlib2FyZCBsYXlvdXRcbiAgICAvLyBwcm92aWRlcyBhIHN1cnByaXNpbmdseSBhY2N1cmF0ZSBtYXBwaW5nIGZvciBVUyBhbmQgRXVyb3BlYW4gdXNlcnMuXG4gICAgLy8gRHVlIHRvIHRoaXMsIGl0IGlzIGxlZnQgdG8gdGhlIHVzZXIgdG8gaW1wbGVtZW50IGF0IHRoaXMgdGltZS5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgd2hpY2g6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgLy8gYHdoaWNoYCBpcyBhbiBhbGlhcyBmb3IgZWl0aGVyIGBrZXlDb2RlYCBvciBgY2hhckNvZGVgIGRlcGVuZGluZyBvbiB0aGVcbiAgICAvLyB0eXBlIG9mIHRoZSBldmVudC5cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleXByZXNzJykge1xuICAgICAgcmV0dXJuIGdldEV2ZW50Q2hhckNvZGUoZXZlbnQpO1xuICAgIH1cbiAgICBpZiAoZXZlbnQudHlwZSA9PT0gJ2tleWRvd24nIHx8IGV2ZW50LnR5cGUgPT09ICdrZXl1cCcpIHtcbiAgICAgIHJldHVybiBldmVudC5rZXlDb2RlO1xuICAgIH1cbiAgICByZXR1cm4gMDtcbiAgfSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBTeW50aGV0aWNLZXlib2FyZEV2ZW50O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar _SyntheticUIEvent2 = _interopRequireDefault(_SyntheticUIEvent);\n\nvar _getEventModifierState = require('./getEventModifierState');\n\nvar _getEventModifierState2 = _interopRequireDefault(_getEventModifierState);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface MouseEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar SyntheticMouseEvent = _SyntheticUIEvent2.default.extend({\n  screenX: null,\n  screenY: null,\n  clientX: null,\n  clientY: null,\n  pageX: null,\n  pageY: null,\n  ctrlKey: null,\n  shiftKey: null,\n  altKey: null,\n  metaKey: null,\n  getModifierState: _getEventModifierState2.default,\n  button: null,\n  buttons: null,\n  relatedTarget: function relatedTarget(event) {\n    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);\n  }\n});\n\nexports.default = SyntheticMouseEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNNb3VzZUV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY01vdXNlRXZlbnQiLCJTeW50aGV0aWNVSUV2ZW50IiwiZXh0ZW5kIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZXZlbnQiLCJmcm9tRWxlbWVudCIsInNyY0VsZW1lbnQiLCJ0b0VsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7OztBQUVBOzs7O0FBVkE7Ozs7Ozs7QUFjQSxJQUFNQSxzQkFBc0JDLDJCQUFpQkMsTUFBakIsQ0FBd0I7QUFDbERDLFdBQVMsSUFEeUM7QUFFbERDLFdBQVMsSUFGeUM7QUFHbERDLFdBQVMsSUFIeUM7QUFJbERDLFdBQVMsSUFKeUM7QUFLbERDLFNBQU8sSUFMMkM7QUFNbERDLFNBQU8sSUFOMkM7QUFPbERDLFdBQVMsSUFQeUM7QUFRbERDLFlBQVUsSUFSd0M7QUFTbERDLFVBQVEsSUFUMEM7QUFVbERDLFdBQVMsSUFWeUM7QUFXbERDLG9CQUFrQkMsK0JBWGdDO0FBWWxEQyxVQUFRLElBWjBDO0FBYWxEQyxXQUFTLElBYnlDO0FBY2xEQyxpQkFBZSx1QkFBU0MsS0FBVCxFQUFnQjtBQUM3QixXQUNFQSxNQUFNRCxhQUFOLEtBQ0NDLE1BQU1DLFdBQU4sS0FBc0JELE1BQU1FLFVBQTVCLEdBQ0dGLE1BQU1HLFNBRFQsR0FFR0gsTUFBTUMsV0FIVixDQURGO0FBTUQ7QUFyQmlELENBQXhCLENBQTVCOztrQkF3QmVuQixtQiIsImZpbGUiOiJTeW50aGV0aWNNb3VzZUV2ZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IFN5bnRoZXRpY1VJRXZlbnQgZnJvbSAnLi9TeW50aGV0aWNVSUV2ZW50JztcbmltcG9ydCBnZXRFdmVudE1vZGlmaWVyU3RhdGUgZnJvbSAnLi9nZXRFdmVudE1vZGlmaWVyU3RhdGUnO1xuXG4vKipcbiAqIEBpbnRlcmZhY2UgTW91c2VFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvXG4gKi9cbmNvbnN0IFN5bnRoZXRpY01vdXNlRXZlbnQgPSBTeW50aGV0aWNVSUV2ZW50LmV4dGVuZCh7XG4gIHNjcmVlblg6IG51bGwsXG4gIHNjcmVlblk6IG51bGwsXG4gIGNsaWVudFg6IG51bGwsXG4gIGNsaWVudFk6IG51bGwsXG4gIHBhZ2VYOiBudWxsLFxuICBwYWdlWTogbnVsbCxcbiAgY3RybEtleTogbnVsbCxcbiAgc2hpZnRLZXk6IG51bGwsXG4gIGFsdEtleTogbnVsbCxcbiAgbWV0YUtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxuICBidXR0b246IG51bGwsXG4gIGJ1dHRvbnM6IG51bGwsXG4gIHJlbGF0ZWRUYXJnZXQ6IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgcmV0dXJuIChcbiAgICAgIGV2ZW50LnJlbGF0ZWRUYXJnZXQgfHxcbiAgICAgIChldmVudC5mcm9tRWxlbWVudCA9PT0gZXZlbnQuc3JjRWxlbWVudFxuICAgICAgICA/IGV2ZW50LnRvRWxlbWVudFxuICAgICAgICA6IGV2ZW50LmZyb21FbGVtZW50KVxuICAgICk7XG4gIH0sXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljTW91c2VFdmVudDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticUIEvent = require('./SyntheticUIEvent');\n\nvar _SyntheticUIEvent2 = _interopRequireDefault(_SyntheticUIEvent);\n\nvar _getEventModifierState = require('./getEventModifierState');\n\nvar _getEventModifierState2 = _interopRequireDefault(_getEventModifierState);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface TouchEvent\n * @see http://www.w3.org/TR/touch-events/\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar SyntheticTouchEvent = _SyntheticUIEvent2.default.extend({\n  touches: null,\n  targetTouches: null,\n  changedTouches: null,\n  altKey: null,\n  metaKey: null,\n  ctrlKey: null,\n  shiftKey: null,\n  getModifierState: _getEventModifierState2.default\n});\n\nexports.default = SyntheticTouchEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNUb3VjaEV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY1RvdWNoRXZlbnQiLCJTeW50aGV0aWNVSUV2ZW50IiwiZXh0ZW5kIiwidG91Y2hlcyIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVG91Y2hlcyIsImFsdEtleSIsIm1ldGFLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiZ2V0RXZlbnRNb2RpZmllclN0YXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTs7OztBQUNBOzs7Ozs7QUFFQTs7OztBQVZBOzs7Ozs7O0FBY0EsSUFBTUEsc0JBQXNCQywyQkFBaUJDLE1BQWpCLENBQXdCO0FBQ2xEQyxXQUFTLElBRHlDO0FBRWxEQyxpQkFBZSxJQUZtQztBQUdsREMsa0JBQWdCLElBSGtDO0FBSWxEQyxVQUFRLElBSjBDO0FBS2xEQyxXQUFTLElBTHlDO0FBTWxEQyxXQUFTLElBTnlDO0FBT2xEQyxZQUFVLElBUHdDO0FBUWxEQyxvQkFBa0JDO0FBUmdDLENBQXhCLENBQTVCOztrQkFXZVgsbUIiLCJmaWxlIjoiU3ludGhldGljVG91Y2hFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTeW50aGV0aWNVSUV2ZW50IGZyb20gJy4vU3ludGhldGljVUlFdmVudCc7XG5pbXBvcnQgZ2V0RXZlbnRNb2RpZmllclN0YXRlIGZyb20gJy4vZ2V0RXZlbnRNb2RpZmllclN0YXRlJztcblxuLyoqXG4gKiBAaW50ZXJmYWNlIFRvdWNoRXZlbnRcbiAqIEBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvdG91Y2gtZXZlbnRzL1xuICovXG5jb25zdCBTeW50aGV0aWNUb3VjaEV2ZW50ID0gU3ludGhldGljVUlFdmVudC5leHRlbmQoe1xuICB0b3VjaGVzOiBudWxsLFxuICB0YXJnZXRUb3VjaGVzOiBudWxsLFxuICBjaGFuZ2VkVG91Y2hlczogbnVsbCxcbiAgYWx0S2V5OiBudWxsLFxuICBtZXRhS2V5OiBudWxsLFxuICBjdHJsS2V5OiBudWxsLFxuICBzaGlmdEtleTogbnVsbCxcbiAgZ2V0TW9kaWZpZXJTdGF0ZTogZ2V0RXZlbnRNb2RpZmllclN0YXRlLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bnRoZXRpY1RvdWNoRXZlbnQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface Event\n * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-\n * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent\n */\nvar SyntheticTransitionEvent = _SyntheticEvent2.default.extend({\n  propertyName: null,\n  elapsedTime: null,\n  pseudoElement: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticTransitionEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNUcmFuc2l0aW9uRXZlbnQuanMiXSwibmFtZXMiOlsiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50IiwiU3ludGhldGljRXZlbnQiLCJleHRlbmQiLCJwcm9wZXJ0eU5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7Ozs7QUFFQTs7Ozs7QUFLQSxJQUFNQSwyQkFBMkJDLHlCQUFlQyxNQUFmLENBQXNCO0FBQ3JEQyxnQkFBYyxJQUR1QztBQUVyREMsZUFBYSxJQUZ3QztBQUdyREMsaUJBQWU7QUFIc0MsQ0FBdEIsQ0FBakMsQyxDQWRBOzs7Ozs7O2tCQW9CZUwsd0IiLCJmaWxlIjoiU3ludGhldGljVHJhbnNpdGlvbkV2ZW50LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IFN5bnRoZXRpY0V2ZW50IGZyb20gJ2V2ZW50cy9TeW50aGV0aWNFdmVudCc7XG5cbi8qKlxuICogQGludGVyZmFjZSBFdmVudFxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi8yMDA5L1dELWNzczMtdHJhbnNpdGlvbnMtMjAwOTAzMjAvI3RyYW5zaXRpb24tZXZlbnRzLVxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVHJhbnNpdGlvbkV2ZW50XG4gKi9cbmNvbnN0IFN5bnRoZXRpY1RyYW5zaXRpb25FdmVudCA9IFN5bnRoZXRpY0V2ZW50LmV4dGVuZCh7XG4gIHByb3BlcnR5TmFtZTogbnVsbCxcbiAgZWxhcHNlZFRpbWU6IG51bGwsXG4gIHBzZXVkb0VsZW1lbnQ6IG51bGwsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljVHJhbnNpdGlvbkV2ZW50O1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticEvent = require('events/SyntheticEvent');\n\nvar _SyntheticEvent2 = _interopRequireDefault(_SyntheticEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SyntheticUIEvent = _SyntheticEvent2.default.extend({\n  view: null,\n  detail: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticUIEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNVSUV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY1VJRXZlbnQiLCJTeW50aGV0aWNFdmVudCIsImV4dGVuZCIsInZpZXciLCJkZXRhaWwiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7Ozs7QUFFQSxJQUFNQSxtQkFBbUJDLHlCQUFlQyxNQUFmLENBQXNCO0FBQzdDQyxRQUFNLElBRHVDO0FBRTdDQyxVQUFRO0FBRnFDLENBQXRCLENBQXpCLEMsQ0FUQTs7Ozs7OztrQkFjZUosZ0IiLCJmaWxlIjoiU3ludGhldGljVUlFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTeW50aGV0aWNFdmVudCBmcm9tICdldmVudHMvU3ludGhldGljRXZlbnQnO1xuXG5jb25zdCBTeW50aGV0aWNVSUV2ZW50ID0gU3ludGhldGljRXZlbnQuZXh0ZW5kKHtcbiAgdmlldzogbnVsbCxcbiAgZGV0YWlsOiBudWxsLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bnRoZXRpY1VJRXZlbnQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SyntheticMouseEvent = require('./SyntheticMouseEvent');\n\nvar _SyntheticMouseEvent2 = _interopRequireDefault(_SyntheticMouseEvent);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * @interface WheelEvent\n * @see http://www.w3.org/TR/DOM-Level-3-Events/\n */\nvar SyntheticWheelEvent = _SyntheticMouseEvent2.default.extend({\n  deltaX: function deltaX(event) {\n    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).\n    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;\n  },\n  deltaY: function deltaY(event) {\n    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).\n    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).\n    'wheelDelta' in event ? -event.wheelDelta : 0;\n  },\n\n  deltaZ: null,\n\n  // Browsers without \"deltaMode\" is reporting in raw wheel delta where one\n  // notch on the scroll is always +/- 120, roughly equivalent to pixels.\n  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or\n  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.\n  deltaMode: null\n}); /**\n     * Copyright (c) 2013-present, Facebook, Inc.\n     *\n     * This source code is licensed under the MIT license found in the\n     * LICENSE file in the root directory of this source tree.\n     */\n\nexports.default = SyntheticWheelEvent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9TeW50aGV0aWNXaGVlbEV2ZW50LmpzIl0sIm5hbWVzIjpbIlN5bnRoZXRpY1doZWVsRXZlbnQiLCJTeW50aGV0aWNNb3VzZUV2ZW50IiwiZXh0ZW5kIiwiZGVsdGFYIiwiZXZlbnQiLCJ3aGVlbERlbHRhWCIsImRlbHRhWSIsIndoZWVsRGVsdGFZIiwid2hlZWxEZWx0YSIsImRlbHRhWiIsImRlbHRhTW9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBOzs7O0FBSUEsSUFBTUEsc0JBQXNCQyw4QkFBb0JDLE1BQXBCLENBQTJCO0FBQ3JEQyxRQURxRCxrQkFDOUNDLEtBRDhDLEVBQ3ZDO0FBQ1osV0FBTyxZQUFZQSxLQUFaLEdBQ0hBLE1BQU1ELE1BREgsR0FFSDtBQUNBLHFCQUFpQkMsS0FBakIsR0FBeUIsQ0FBQ0EsTUFBTUMsV0FBaEMsR0FBOEMsQ0FIbEQ7QUFJRCxHQU5vRDtBQU9yREMsUUFQcUQsa0JBTzlDRixLQVA4QyxFQU92QztBQUNaLFdBQU8sWUFBWUEsS0FBWixHQUNIQSxNQUFNRSxNQURILEdBRUg7QUFDQSxxQkFBaUJGLEtBQWpCLEdBQ0UsQ0FBQ0EsTUFBTUcsV0FEVCxHQUVFO0FBQ0Esb0JBQWdCSCxLQUFoQixHQUF3QixDQUFDQSxNQUFNSSxVQUEvQixHQUE0QyxDQU5sRDtBQU9ELEdBZm9EOztBQWdCckRDLFVBQVEsSUFoQjZDOztBQWtCckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsYUFBVztBQXRCMEMsQ0FBM0IsQ0FBNUIsQyxDQWJBOzs7Ozs7O2tCQXNDZVYsbUIiLCJmaWxlIjoiU3ludGhldGljV2hlZWxFdmVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBTeW50aGV0aWNNb3VzZUV2ZW50IGZyb20gJy4vU3ludGhldGljTW91c2VFdmVudCc7XG5cbi8qKlxuICogQGludGVyZmFjZSBXaGVlbEV2ZW50XG4gKiBAc2VlIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy9cbiAqL1xuY29uc3QgU3ludGhldGljV2hlZWxFdmVudCA9IFN5bnRoZXRpY01vdXNlRXZlbnQuZXh0ZW5kKHtcbiAgZGVsdGFYKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVgnIGluIGV2ZW50XG4gICAgICA/IGV2ZW50LmRlbHRhWFxuICAgICAgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVhgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAocmlnaHQgaXMgcG9zaXRpdmUpLlxuICAgICAgICAnd2hlZWxEZWx0YVgnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGFYIDogMDtcbiAgfSxcbiAgZGVsdGFZKGV2ZW50KSB7XG4gICAgcmV0dXJuICdkZWx0YVknIGluIGV2ZW50XG4gICAgICA/IGV2ZW50LmRlbHRhWVxuICAgICAgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YVlgIGZvciBXZWJraXQgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAgICd3aGVlbERlbHRhWScgaW4gZXZlbnRcbiAgICAgICAgPyAtZXZlbnQud2hlZWxEZWx0YVlcbiAgICAgICAgOiAvLyBGYWxsYmFjayB0byBgd2hlZWxEZWx0YWAgZm9yIElFPDkgYW5kIG5vcm1hbGl6ZSAoZG93biBpcyBwb3NpdGl2ZSkuXG4gICAgICAgICAgJ3doZWVsRGVsdGEnIGluIGV2ZW50ID8gLWV2ZW50LndoZWVsRGVsdGEgOiAwO1xuICB9LFxuICBkZWx0YVo6IG51bGwsXG5cbiAgLy8gQnJvd3NlcnMgd2l0aG91dCBcImRlbHRhTW9kZVwiIGlzIHJlcG9ydGluZyBpbiByYXcgd2hlZWwgZGVsdGEgd2hlcmUgb25lXG4gIC8vIG5vdGNoIG9uIHRoZSBzY3JvbGwgaXMgYWx3YXlzICsvLSAxMjAsIHJvdWdobHkgZXF1aXZhbGVudCB0byBwaXhlbHMuXG4gIC8vIEEgZ29vZCBhcHByb3hpbWF0aW9uIG9mIERPTV9ERUxUQV9MSU5FICgxKSBpcyA1JSBvZiB2aWV3cG9ydCBzaXplIG9yXG4gIC8vIH40MCBwaXhlbHMsIGZvciBET01fREVMVEFfU0NSRUVOICgyKSBpdCBpcyA4Ny41JSBvZiB2aWV3cG9ydCBzaXplLlxuICBkZWx0YU1vZGU6IG51bGwsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgU3ludGhldGljV2hlZWxFdmVudDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `charCode` represents the actual \"character code\" and is safe to use with\n * `String.fromCharCode`. As such, only keys that correspond to printable\n * characters produce a valid `charCode`, the only exception to this is Enter.\n * The Tab-key is considered non-printable and does not have a `charCode`,\n * presumably because it does not produce a tab-character in browsers.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {number} Normalized `charCode` property.\n */\nfunction getEventCharCode(nativeEvent) {\n  var charCode = void 0;\n  var keyCode = nativeEvent.keyCode;\n\n  if ('charCode' in nativeEvent) {\n    charCode = nativeEvent.charCode;\n\n    // FF does not set `charCode` for the Enter-key, check against `keyCode`.\n    if (charCode === 0 && keyCode === 13) {\n      charCode = 13;\n    }\n  } else {\n    // IE8 does not implement `charCode`, but `keyCode` has the correct value.\n    charCode = keyCode;\n  }\n\n  // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)\n  // report Enter as charCode 10 when ctrl is pressed.\n  if (charCode === 10) {\n    charCode = 13;\n  }\n\n  // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.\n  // Must not discard the (non-)printable Enter-key.\n  if (charCode >= 32 || charCode === 13) {\n    return charCode;\n  }\n\n  return 0;\n}\n\nexports.default = getEventCharCode;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9nZXRFdmVudENoYXJDb2RlLmpzIl0sIm5hbWVzIjpbImdldEV2ZW50Q2hhckNvZGUiLCJuYXRpdmVFdmVudCIsImNoYXJDb2RlIiwia2V5Q29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7OztBQU9BOzs7Ozs7Ozs7O0FBVUEsU0FBU0EsZ0JBQVQsQ0FBMEJDLFdBQTFCLEVBQXVDO0FBQ3JDLE1BQUlDLGlCQUFKO0FBQ0EsTUFBTUMsVUFBVUYsWUFBWUUsT0FBNUI7O0FBRUEsTUFBSSxjQUFjRixXQUFsQixFQUErQjtBQUM3QkMsZUFBV0QsWUFBWUMsUUFBdkI7O0FBRUE7QUFDQSxRQUFJQSxhQUFhLENBQWIsSUFBa0JDLFlBQVksRUFBbEMsRUFBc0M7QUFDcENELGlCQUFXLEVBQVg7QUFDRDtBQUNGLEdBUEQsTUFPTztBQUNMO0FBQ0FBLGVBQVdDLE9BQVg7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsTUFBSUQsYUFBYSxFQUFqQixFQUFxQjtBQUNuQkEsZUFBVyxFQUFYO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLE1BQUlBLFlBQVksRUFBWixJQUFrQkEsYUFBYSxFQUFuQyxFQUF1QztBQUNyQyxXQUFPQSxRQUFQO0FBQ0Q7O0FBRUQsU0FBTyxDQUFQO0FBQ0Q7O2tCQUVjRixnQiIsImZpbGUiOiJnZXRFdmVudENoYXJDb2RlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBgY2hhckNvZGVgIHJlcHJlc2VudHMgdGhlIGFjdHVhbCBcImNoYXJhY3RlciBjb2RlXCIgYW5kIGlzIHNhZmUgdG8gdXNlIHdpdGhcbiAqIGBTdHJpbmcuZnJvbUNoYXJDb2RlYC4gQXMgc3VjaCwgb25seSBrZXlzIHRoYXQgY29ycmVzcG9uZCB0byBwcmludGFibGVcbiAqIGNoYXJhY3RlcnMgcHJvZHVjZSBhIHZhbGlkIGBjaGFyQ29kZWAsIHRoZSBvbmx5IGV4Y2VwdGlvbiB0byB0aGlzIGlzIEVudGVyLlxuICogVGhlIFRhYi1rZXkgaXMgY29uc2lkZXJlZCBub24tcHJpbnRhYmxlIGFuZCBkb2VzIG5vdCBoYXZlIGEgYGNoYXJDb2RlYCxcbiAqIHByZXN1bWFibHkgYmVjYXVzZSBpdCBkb2VzIG5vdCBwcm9kdWNlIGEgdGFiLWNoYXJhY3RlciBpbiBicm93c2Vycy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtudW1iZXJ9IE5vcm1hbGl6ZWQgYGNoYXJDb2RlYCBwcm9wZXJ0eS5cbiAqL1xuZnVuY3Rpb24gZ2V0RXZlbnRDaGFyQ29kZShuYXRpdmVFdmVudCkge1xuICBsZXQgY2hhckNvZGU7XG4gIGNvbnN0IGtleUNvZGUgPSBuYXRpdmVFdmVudC5rZXlDb2RlO1xuXG4gIGlmICgnY2hhckNvZGUnIGluIG5hdGl2ZUV2ZW50KSB7XG4gICAgY2hhckNvZGUgPSBuYXRpdmVFdmVudC5jaGFyQ29kZTtcblxuICAgIC8vIEZGIGRvZXMgbm90IHNldCBgY2hhckNvZGVgIGZvciB0aGUgRW50ZXIta2V5LCBjaGVjayBhZ2FpbnN0IGBrZXlDb2RlYC5cbiAgICBpZiAoY2hhckNvZGUgPT09IDAgJiYga2V5Q29kZSA9PT0gMTMpIHtcbiAgICAgIGNoYXJDb2RlID0gMTM7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgYGNoYXJDb2RlYCwgYnV0IGBrZXlDb2RlYCBoYXMgdGhlIGNvcnJlY3QgdmFsdWUuXG4gICAgY2hhckNvZGUgPSBrZXlDb2RlO1xuICB9XG5cbiAgLy8gSUUgYW5kIEVkZ2UgKG9uIFdpbmRvd3MpIGFuZCBDaHJvbWUgLyBTYWZhcmkgKG9uIFdpbmRvd3MgYW5kIExpbnV4KVxuICAvLyByZXBvcnQgRW50ZXIgYXMgY2hhckNvZGUgMTAgd2hlbiBjdHJsIGlzIHByZXNzZWQuXG4gIGlmIChjaGFyQ29kZSA9PT0gMTApIHtcbiAgICBjaGFyQ29kZSA9IDEzO1xuICB9XG5cbiAgLy8gU29tZSBub24tcHJpbnRhYmxlIGtleXMgYXJlIHJlcG9ydGVkIGluIGBjaGFyQ29kZWAvYGtleUNvZGVgLCBkaXNjYXJkIHRoZW0uXG4gIC8vIE11c3Qgbm90IGRpc2NhcmQgdGhlIChub24tKXByaW50YWJsZSBFbnRlci1rZXkuXG4gIGlmIChjaGFyQ29kZSA+PSAzMiB8fCBjaGFyQ29kZSA9PT0gMTMpIHtcbiAgICByZXR1cm4gY2hhckNvZGU7XG4gIH1cblxuICByZXR1cm4gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RXZlbnRDaGFyQ29kZTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getEventCharCode = require('./getEventCharCode');\n\nvar _getEventCharCode2 = _interopRequireDefault(_getEventCharCode);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Normalization of deprecated HTML5 `key` values\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\nvar normalizeKey = {\n  Esc: 'Escape',\n  Spacebar: ' ',\n  Left: 'ArrowLeft',\n  Up: 'ArrowUp',\n  Right: 'ArrowRight',\n  Down: 'ArrowDown',\n  Del: 'Delete',\n  Win: 'OS',\n  Menu: 'ContextMenu',\n  Apps: 'ContextMenu',\n  Scroll: 'ScrollLock',\n  MozPrintableKey: 'Unidentified'\n};\n\n/**\n * Translation from legacy `keyCode` to HTML5 `key`\n * Only special keys supported, all others depend on keyboard layout or browser\n * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar translateToKey = {\n  '8': 'Backspace',\n  '9': 'Tab',\n  '12': 'Clear',\n  '13': 'Enter',\n  '16': 'Shift',\n  '17': 'Control',\n  '18': 'Alt',\n  '19': 'Pause',\n  '20': 'CapsLock',\n  '27': 'Escape',\n  '32': ' ',\n  '33': 'PageUp',\n  '34': 'PageDown',\n  '35': 'End',\n  '36': 'Home',\n  '37': 'ArrowLeft',\n  '38': 'ArrowUp',\n  '39': 'ArrowRight',\n  '40': 'ArrowDown',\n  '45': 'Insert',\n  '46': 'Delete',\n  '112': 'F1',\n  '113': 'F2',\n  '114': 'F3',\n  '115': 'F4',\n  '116': 'F5',\n  '117': 'F6',\n  '118': 'F7',\n  '119': 'F8',\n  '120': 'F9',\n  '121': 'F10',\n  '122': 'F11',\n  '123': 'F12',\n  '144': 'NumLock',\n  '145': 'ScrollLock',\n  '224': 'Meta'\n};\n\n/**\n * @param {object} nativeEvent Native browser event.\n * @return {string} Normalized `key` property.\n */\nfunction getEventKey(nativeEvent) {\n  if (nativeEvent.key) {\n    // Normalize inconsistent values reported by browsers due to\n    // implementations of a working draft specification.\n\n    // FireFox implements `key` but returns `MozPrintableKey` for all\n    // printable characters (normalized to `Unidentified`), ignore it.\n    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;\n    if (key !== 'Unidentified') {\n      return key;\n    }\n  }\n\n  // Browser does not implement `key`, polyfill as much of it as we can.\n  if (nativeEvent.type === 'keypress') {\n    var charCode = (0, _getEventCharCode2.default)(nativeEvent);\n\n    // The enter-key is technically both printable and non-printable and can\n    // thus be captured by `keypress`, no other non-printable key should.\n    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);\n  }\n  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {\n    // While user keyboard layout determines the actual meaning of each\n    // `keyCode` value, almost all function keys have a universal value.\n    return translateToKey[nativeEvent.keyCode] || 'Unidentified';\n  }\n  return '';\n}\n\nexports.default = getEventKey;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9nZXRFdmVudEtleS5qcyJdLCJuYW1lcyI6WyJub3JtYWxpemVLZXkiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwidHJhbnNsYXRlVG9LZXkiLCJnZXRFdmVudEtleSIsIm5hdGl2ZUV2ZW50Iiwia2V5IiwidHlwZSIsImNoYXJDb2RlIiwiU3RyaW5nIiwiZnJvbUNoYXJDb2RlIiwia2V5Q29kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7Ozs7OztBQUVBOzs7O0FBSUEsSUFBTUEsZUFBZTtBQUNuQkMsT0FBSyxRQURjO0FBRW5CQyxZQUFVLEdBRlM7QUFHbkJDLFFBQU0sV0FIYTtBQUluQkMsTUFBSSxTQUplO0FBS25CQyxTQUFPLFlBTFk7QUFNbkJDLFFBQU0sV0FOYTtBQU9uQkMsT0FBSyxRQVBjO0FBUW5CQyxPQUFLLElBUmM7QUFTbkJDLFFBQU0sYUFUYTtBQVVuQkMsUUFBTSxhQVZhO0FBV25CQyxVQUFRLFlBWFc7QUFZbkJDLG1CQUFpQjtBQVpFLENBQXJCOztBQWVBOzs7OztBQTlCQTs7Ozs7Ozs7O0FBbUNBLElBQU1DLGlCQUFpQjtBQUNyQixPQUFLLFdBRGdCO0FBRXJCLE9BQUssS0FGZ0I7QUFHckIsUUFBTSxPQUhlO0FBSXJCLFFBQU0sT0FKZTtBQUtyQixRQUFNLE9BTGU7QUFNckIsUUFBTSxTQU5lO0FBT3JCLFFBQU0sS0FQZTtBQVFyQixRQUFNLE9BUmU7QUFTckIsUUFBTSxVQVRlO0FBVXJCLFFBQU0sUUFWZTtBQVdyQixRQUFNLEdBWGU7QUFZckIsUUFBTSxRQVplO0FBYXJCLFFBQU0sVUFiZTtBQWNyQixRQUFNLEtBZGU7QUFlckIsUUFBTSxNQWZlO0FBZ0JyQixRQUFNLFdBaEJlO0FBaUJyQixRQUFNLFNBakJlO0FBa0JyQixRQUFNLFlBbEJlO0FBbUJyQixRQUFNLFdBbkJlO0FBb0JyQixRQUFNLFFBcEJlO0FBcUJyQixRQUFNLFFBckJlO0FBc0JyQixTQUFPLElBdEJjO0FBdUJyQixTQUFPLElBdkJjO0FBd0JyQixTQUFPLElBeEJjO0FBeUJyQixTQUFPLElBekJjO0FBMEJyQixTQUFPLElBMUJjO0FBMkJyQixTQUFPLElBM0JjO0FBNEJyQixTQUFPLElBNUJjO0FBNkJyQixTQUFPLElBN0JjO0FBOEJyQixTQUFPLElBOUJjO0FBK0JyQixTQUFPLEtBL0JjO0FBZ0NyQixTQUFPLEtBaENjO0FBaUNyQixTQUFPLEtBakNjO0FBa0NyQixTQUFPLFNBbENjO0FBbUNyQixTQUFPLFlBbkNjO0FBb0NyQixTQUFPO0FBcENjLENBQXZCOztBQXVDQTs7OztBQUlBLFNBQVNDLFdBQVQsQ0FBcUJDLFdBQXJCLEVBQXlEO0FBQ3ZELE1BQUlBLFlBQVlDLEdBQWhCLEVBQXFCO0FBQ25CO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQU1BLE1BQU1oQixhQUFhZSxZQUFZQyxHQUF6QixLQUFpQ0QsWUFBWUMsR0FBekQ7QUFDQSxRQUFJQSxRQUFRLGNBQVosRUFBNEI7QUFDMUIsYUFBT0EsR0FBUDtBQUNEO0FBQ0Y7O0FBRUQ7QUFDQSxNQUFJRCxZQUFZRSxJQUFaLEtBQXFCLFVBQXpCLEVBQXFDO0FBQ25DLFFBQU1DLFdBQVcsZ0NBQWlCSCxXQUFqQixDQUFqQjs7QUFFQTtBQUNBO0FBQ0EsV0FBT0csYUFBYSxFQUFiLEdBQWtCLE9BQWxCLEdBQTRCQyxPQUFPQyxZQUFQLENBQW9CRixRQUFwQixDQUFuQztBQUNEO0FBQ0QsTUFBSUgsWUFBWUUsSUFBWixLQUFxQixTQUFyQixJQUFrQ0YsWUFBWUUsSUFBWixLQUFxQixPQUEzRCxFQUFvRTtBQUNsRTtBQUNBO0FBQ0EsV0FBT0osZUFBZUUsWUFBWU0sT0FBM0IsS0FBdUMsY0FBOUM7QUFDRDtBQUNELFNBQU8sRUFBUDtBQUNEOztrQkFFY1AsVyIsImZpbGUiOiJnZXRFdmVudEtleS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IGdldEV2ZW50Q2hhckNvZGUgZnJvbSAnLi9nZXRFdmVudENoYXJDb2RlJztcblxuLyoqXG4gKiBOb3JtYWxpemF0aW9uIG9mIGRlcHJlY2F0ZWQgSFRNTDUgYGtleWAgdmFsdWVzXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG5jb25zdCBub3JtYWxpemVLZXkgPSB7XG4gIEVzYzogJ0VzY2FwZScsXG4gIFNwYWNlYmFyOiAnICcsXG4gIExlZnQ6ICdBcnJvd0xlZnQnLFxuICBVcDogJ0Fycm93VXAnLFxuICBSaWdodDogJ0Fycm93UmlnaHQnLFxuICBEb3duOiAnQXJyb3dEb3duJyxcbiAgRGVsOiAnRGVsZXRlJyxcbiAgV2luOiAnT1MnLFxuICBNZW51OiAnQ29udGV4dE1lbnUnLFxuICBBcHBzOiAnQ29udGV4dE1lbnUnLFxuICBTY3JvbGw6ICdTY3JvbGxMb2NrJyxcbiAgTW96UHJpbnRhYmxlS2V5OiAnVW5pZGVudGlmaWVkJyxcbn07XG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBsZWdhY3kgYGtleUNvZGVgIHRvIEhUTUw1IGBrZXlgXG4gKiBPbmx5IHNwZWNpYWwga2V5cyBzdXBwb3J0ZWQsIGFsbCBvdGhlcnMgZGVwZW5kIG9uIGtleWJvYXJkIGxheW91dCBvciBicm93c2VyXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9LZXlib2FyZEV2ZW50I0tleV9uYW1lc1xuICovXG5jb25zdCB0cmFuc2xhdGVUb0tleSA9IHtcbiAgJzgnOiAnQmFja3NwYWNlJyxcbiAgJzknOiAnVGFiJyxcbiAgJzEyJzogJ0NsZWFyJyxcbiAgJzEzJzogJ0VudGVyJyxcbiAgJzE2JzogJ1NoaWZ0JyxcbiAgJzE3JzogJ0NvbnRyb2wnLFxuICAnMTgnOiAnQWx0JyxcbiAgJzE5JzogJ1BhdXNlJyxcbiAgJzIwJzogJ0NhcHNMb2NrJyxcbiAgJzI3JzogJ0VzY2FwZScsXG4gICczMic6ICcgJyxcbiAgJzMzJzogJ1BhZ2VVcCcsXG4gICczNCc6ICdQYWdlRG93bicsXG4gICczNSc6ICdFbmQnLFxuICAnMzYnOiAnSG9tZScsXG4gICczNyc6ICdBcnJvd0xlZnQnLFxuICAnMzgnOiAnQXJyb3dVcCcsXG4gICczOSc6ICdBcnJvd1JpZ2h0JyxcbiAgJzQwJzogJ0Fycm93RG93bicsXG4gICc0NSc6ICdJbnNlcnQnLFxuICAnNDYnOiAnRGVsZXRlJyxcbiAgJzExMic6ICdGMScsXG4gICcxMTMnOiAnRjInLFxuICAnMTE0JzogJ0YzJyxcbiAgJzExNSc6ICdGNCcsXG4gICcxMTYnOiAnRjUnLFxuICAnMTE3JzogJ0Y2JyxcbiAgJzExOCc6ICdGNycsXG4gICcxMTknOiAnRjgnLFxuICAnMTIwJzogJ0Y5JyxcbiAgJzEyMSc6ICdGMTAnLFxuICAnMTIyJzogJ0YxMScsXG4gICcxMjMnOiAnRjEyJyxcbiAgJzE0NCc6ICdOdW1Mb2NrJyxcbiAgJzE0NSc6ICdTY3JvbGxMb2NrJyxcbiAgJzIyNCc6ICdNZXRhJyxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtvYmplY3R9IG5hdGl2ZUV2ZW50IE5hdGl2ZSBicm93c2VyIGV2ZW50LlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIGBrZXlgIHByb3BlcnR5LlxuICovXG5mdW5jdGlvbiBnZXRFdmVudEtleShuYXRpdmVFdmVudDogS2V5Ym9hcmRFdmVudCk6IHN0cmluZyB7XG4gIGlmIChuYXRpdmVFdmVudC5rZXkpIHtcbiAgICAvLyBOb3JtYWxpemUgaW5jb25zaXN0ZW50IHZhbHVlcyByZXBvcnRlZCBieSBicm93c2VycyBkdWUgdG9cbiAgICAvLyBpbXBsZW1lbnRhdGlvbnMgb2YgYSB3b3JraW5nIGRyYWZ0IHNwZWNpZmljYXRpb24uXG5cbiAgICAvLyBGaXJlRm94IGltcGxlbWVudHMgYGtleWAgYnV0IHJldHVybnMgYE1velByaW50YWJsZUtleWAgZm9yIGFsbFxuICAgIC8vIHByaW50YWJsZSBjaGFyYWN0ZXJzIChub3JtYWxpemVkIHRvIGBVbmlkZW50aWZpZWRgKSwgaWdub3JlIGl0LlxuICAgIGNvbnN0IGtleSA9IG5vcm1hbGl6ZUtleVtuYXRpdmVFdmVudC5rZXldIHx8IG5hdGl2ZUV2ZW50LmtleTtcbiAgICBpZiAoa2V5ICE9PSAnVW5pZGVudGlmaWVkJykge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cblxuICAvLyBCcm93c2VyIGRvZXMgbm90IGltcGxlbWVudCBga2V5YCwgcG9seWZpbGwgYXMgbXVjaCBvZiBpdCBhcyB3ZSBjYW4uXG4gIGlmIChuYXRpdmVFdmVudC50eXBlID09PSAna2V5cHJlc3MnKSB7XG4gICAgY29uc3QgY2hhckNvZGUgPSBnZXRFdmVudENoYXJDb2RlKG5hdGl2ZUV2ZW50KTtcblxuICAgIC8vIFRoZSBlbnRlci1rZXkgaXMgdGVjaG5pY2FsbHkgYm90aCBwcmludGFibGUgYW5kIG5vbi1wcmludGFibGUgYW5kIGNhblxuICAgIC8vIHRodXMgYmUgY2FwdHVyZWQgYnkgYGtleXByZXNzYCwgbm8gb3RoZXIgbm9uLXByaW50YWJsZSBrZXkgc2hvdWxkLlxuICAgIHJldHVybiBjaGFyQ29kZSA9PT0gMTMgPyAnRW50ZXInIDogU3RyaW5nLmZyb21DaGFyQ29kZShjaGFyQ29kZSk7XG4gIH1cbiAgaWYgKG5hdGl2ZUV2ZW50LnR5cGUgPT09ICdrZXlkb3duJyB8fCBuYXRpdmVFdmVudC50eXBlID09PSAna2V5dXAnKSB7XG4gICAgLy8gV2hpbGUgdXNlciBrZXlib2FyZCBsYXlvdXQgZGV0ZXJtaW5lcyB0aGUgYWN0dWFsIG1lYW5pbmcgb2YgZWFjaFxuICAgIC8vIGBrZXlDb2RlYCB2YWx1ZSwgYWxtb3N0IGFsbCBmdW5jdGlvbiBrZXlzIGhhdmUgYSB1bml2ZXJzYWwgdmFsdWUuXG4gICAgcmV0dXJuIHRyYW5zbGF0ZVRvS2V5W25hdGl2ZUV2ZW50LmtleUNvZGVdIHx8ICdVbmlkZW50aWZpZWQnO1xuICB9XG4gIHJldHVybiAnJztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0RXZlbnRLZXk7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Translation from modifier key to the associated property in the event.\n * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers\n */\n\nvar modifierKeyToProp = {\n  Alt: 'altKey',\n  Control: 'ctrlKey',\n  Meta: 'metaKey',\n  Shift: 'shiftKey'\n};\n\n// IE8 does not implement getModifierState so we simply map it to the only\n// modifier keys exposed by the event itself, does not support Lock-keys.\n// Currently, all major browsers except Chrome seems to support Lock-keys.\nfunction modifierStateGetter(keyArg) {\n  var syntheticEvent = this;\n  var nativeEvent = syntheticEvent.nativeEvent;\n  if (nativeEvent.getModifierState) {\n    return nativeEvent.getModifierState(keyArg);\n  }\n  var keyProp = modifierKeyToProp[keyArg];\n  return keyProp ? !!nativeEvent[keyProp] : false;\n}\n\nfunction getEventModifierState(nativeEvent) {\n  return modifierStateGetter;\n}\n\nexports.default = getEventModifierState;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9nZXRFdmVudE1vZGlmaWVyU3RhdGUuanMiXSwibmFtZXMiOlsibW9kaWZpZXJLZXlUb1Byb3AiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwibW9kaWZpZXJTdGF0ZUdldHRlciIsImtleUFyZyIsInN5bnRoZXRpY0V2ZW50IiwibmF0aXZlRXZlbnQiLCJnZXRNb2RpZmllclN0YXRlIiwia2V5UHJvcCIsImdldEV2ZW50TW9kaWZpZXJTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7OztBQU9BOzs7OztBQUtBLElBQU1BLG9CQUFvQjtBQUN4QkMsT0FBSyxRQURtQjtBQUV4QkMsV0FBUyxTQUZlO0FBR3hCQyxRQUFNLFNBSGtCO0FBSXhCQyxTQUFPO0FBSmlCLENBQTFCOztBQU9BO0FBQ0E7QUFDQTtBQUNBLFNBQVNDLG1CQUFULENBQTZCQyxNQUE3QixFQUFxQztBQUNuQyxNQUFNQyxpQkFBaUIsSUFBdkI7QUFDQSxNQUFNQyxjQUFjRCxlQUFlQyxXQUFuQztBQUNBLE1BQUlBLFlBQVlDLGdCQUFoQixFQUFrQztBQUNoQyxXQUFPRCxZQUFZQyxnQkFBWixDQUE2QkgsTUFBN0IsQ0FBUDtBQUNEO0FBQ0QsTUFBTUksVUFBVVYsa0JBQWtCTSxNQUFsQixDQUFoQjtBQUNBLFNBQU9JLFVBQVUsQ0FBQyxDQUFDRixZQUFZRSxPQUFaLENBQVosR0FBbUMsS0FBMUM7QUFDRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQkgsV0FBL0IsRUFBNEM7QUFDMUMsU0FBT0gsbUJBQVA7QUFDRDs7a0JBRWNNLHFCIiwiZmlsZSI6ImdldEV2ZW50TW9kaWZpZXJTdGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogVHJhbnNsYXRpb24gZnJvbSBtb2RpZmllciBrZXkgdG8gdGhlIGFzc29jaWF0ZWQgcHJvcGVydHkgaW4gdGhlIGV2ZW50LlxuICogQHNlZSBodHRwOi8vd3d3LnczLm9yZy9UUi9ET00tTGV2ZWwtMy1FdmVudHMvI2tleXMtTW9kaWZpZXJzXG4gKi9cblxuY29uc3QgbW9kaWZpZXJLZXlUb1Byb3AgPSB7XG4gIEFsdDogJ2FsdEtleScsXG4gIENvbnRyb2w6ICdjdHJsS2V5JyxcbiAgTWV0YTogJ21ldGFLZXknLFxuICBTaGlmdDogJ3NoaWZ0S2V5Jyxcbn07XG5cbi8vIElFOCBkb2VzIG5vdCBpbXBsZW1lbnQgZ2V0TW9kaWZpZXJTdGF0ZSBzbyB3ZSBzaW1wbHkgbWFwIGl0IHRvIHRoZSBvbmx5XG4vLyBtb2RpZmllciBrZXlzIGV4cG9zZWQgYnkgdGhlIGV2ZW50IGl0c2VsZiwgZG9lcyBub3Qgc3VwcG9ydCBMb2NrLWtleXMuXG4vLyBDdXJyZW50bHksIGFsbCBtYWpvciBicm93c2VycyBleGNlcHQgQ2hyb21lIHNlZW1zIHRvIHN1cHBvcnQgTG9jay1rZXlzLlxuZnVuY3Rpb24gbW9kaWZpZXJTdGF0ZUdldHRlcihrZXlBcmcpIHtcbiAgY29uc3Qgc3ludGhldGljRXZlbnQgPSB0aGlzO1xuICBjb25zdCBuYXRpdmVFdmVudCA9IHN5bnRoZXRpY0V2ZW50Lm5hdGl2ZUV2ZW50O1xuICBpZiAobmF0aXZlRXZlbnQuZ2V0TW9kaWZpZXJTdGF0ZSkge1xuICAgIHJldHVybiBuYXRpdmVFdmVudC5nZXRNb2RpZmllclN0YXRlKGtleUFyZyk7XG4gIH1cbiAgY29uc3Qga2V5UHJvcCA9IG1vZGlmaWVyS2V5VG9Qcm9wW2tleUFyZ107XG4gIHJldHVybiBrZXlQcm9wID8gISFuYXRpdmVFdmVudFtrZXlQcm9wXSA6IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZXRFdmVudE1vZGlmaWVyU3RhdGUobmF0aXZlRXZlbnQpIHtcbiAgcmV0dXJuIG1vZGlmaWVyU3RhdGVHZXR0ZXI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEV2ZW50TW9kaWZpZXJTdGF0ZTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HTMLNodeType = require('../shared/HTMLNodeType');\n\n/**\n * Gets the target node from a native browser event by accounting for\n * inconsistencies in browser DOM APIs.\n *\n * @param {object} nativeEvent Native browser event.\n * @return {DOMEventTarget} Target node.\n */\nfunction getEventTarget(nativeEvent) {\n  var target = nativeEvent.target || window;\n\n  // Normalize SVG <use> element events #4963\n  if (target.correspondingUseElement) {\n    target = target.correspondingUseElement;\n  }\n\n  // Safari may fire events on text nodes (Node.TEXT_NODE is 3).\n  // @see http://www.quirksmode.org/js/events_properties.html\n  return target.nodeType === _HTMLNodeType.TEXT_NODE ? target.parentNode : target;\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nexports.default = getEventTarget;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9nZXRFdmVudFRhcmdldC5qcyJdLCJuYW1lcyI6WyJnZXRFdmVudFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0Iiwid2luZG93IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJub2RlVHlwZSIsIlRFWFRfTk9ERSIsInBhcmVudE5vZGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOztBQUVBOzs7Ozs7O0FBT0EsU0FBU0EsY0FBVCxDQUF3QkMsV0FBeEIsRUFBcUM7QUFDbkMsTUFBSUMsU0FBU0QsWUFBWUMsTUFBWixJQUFzQkMsTUFBbkM7O0FBRUE7QUFDQSxNQUFJRCxPQUFPRSx1QkFBWCxFQUFvQztBQUNsQ0YsYUFBU0EsT0FBT0UsdUJBQWhCO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBLFNBQU9GLE9BQU9HLFFBQVAsS0FBb0JDLHVCQUFwQixHQUFnQ0osT0FBT0ssVUFBdkMsR0FBb0RMLE1BQTNEO0FBQ0QsQyxDQTNCRDs7Ozs7OztrQkE2QmVGLGMiLCJmaWxlIjoiZ2V0RXZlbnRUYXJnZXQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge1RFWFRfTk9ERX0gZnJvbSAnLi4vc2hhcmVkL0hUTUxOb2RlVHlwZSc7XG5cbi8qKlxuICogR2V0cyB0aGUgdGFyZ2V0IG5vZGUgZnJvbSBhIG5hdGl2ZSBicm93c2VyIGV2ZW50IGJ5IGFjY291bnRpbmcgZm9yXG4gKiBpbmNvbnNpc3RlbmNpZXMgaW4gYnJvd3NlciBET00gQVBJcy5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gbmF0aXZlRXZlbnQgTmF0aXZlIGJyb3dzZXIgZXZlbnQuXG4gKiBAcmV0dXJuIHtET01FdmVudFRhcmdldH0gVGFyZ2V0IG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGdldEV2ZW50VGFyZ2V0KG5hdGl2ZUV2ZW50KSB7XG4gIGxldCB0YXJnZXQgPSBuYXRpdmVFdmVudC50YXJnZXQgfHwgd2luZG93O1xuXG4gIC8vIE5vcm1hbGl6ZSBTVkcgPHVzZT4gZWxlbWVudCBldmVudHMgIzQ5NjNcbiAgaWYgKHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCkge1xuICAgIHRhcmdldCA9IHRhcmdldC5jb3JyZXNwb25kaW5nVXNlRWxlbWVudDtcbiAgfVxuXG4gIC8vIFNhZmFyaSBtYXkgZmlyZSBldmVudHMgb24gdGV4dCBub2RlcyAoTm9kZS5URVhUX05PREUgaXMgMykuXG4gIC8vIEBzZWUgaHR0cDovL3d3dy5xdWlya3Ntb2RlLm9yZy9qcy9ldmVudHNfcHJvcGVydGllcy5odG1sXG4gIHJldHVybiB0YXJnZXQubm9kZVR5cGUgPT09IFRFWFRfTk9ERSA/IHRhcmdldC5wYXJlbnROb2RlIDogdGFyZ2V0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRFdmVudFRhcmdldDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Generate a mapping of standard vendor prefixes using the defined style property and event name.\n *\n * @param {string} styleProp\n * @param {string} eventName\n * @returns {object}\n */\nfunction makePrefixMap(styleProp, eventName) {\n  var prefixes = {};\n\n  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();\n  prefixes['Webkit' + styleProp] = 'webkit' + eventName;\n  prefixes['Moz' + styleProp] = 'moz' + eventName;\n  prefixes['ms' + styleProp] = 'MS' + eventName;\n  prefixes['O' + styleProp] = 'o' + eventName.toLowerCase();\n\n  return prefixes;\n}\n\n/**\n * A list of event names to a configurable list of vendor prefixes.\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar vendorPrefixes = {\n  animationend: makePrefixMap('Animation', 'AnimationEnd'),\n  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),\n  animationstart: makePrefixMap('Animation', 'AnimationStart'),\n  transitionend: makePrefixMap('Transition', 'TransitionEnd')\n};\n\n/**\n * Event names that have already been detected and prefixed (if applicable).\n */\nvar prefixedEventNames = {};\n\n/**\n * Element to check for prefixes on.\n */\nvar style = {};\n\n/**\n * Bootstrap if a DOM exists.\n */\nif (_ExecutionEnvironment2.default.canUseDOM) {\n  style = document.createElement('div').style;\n\n  // On some platforms, in particular some releases of Android 4.x,\n  // the un-prefixed \"animation\" and \"transition\" properties are defined on the\n  // style object but the events that fire will still be prefixed, so we need\n  // to check if the un-prefixed events are usable, and if not remove them from the map.\n  if (!('AnimationEvent' in window)) {\n    delete vendorPrefixes.animationend.animation;\n    delete vendorPrefixes.animationiteration.animation;\n    delete vendorPrefixes.animationstart.animation;\n  }\n\n  // Same as above\n  if (!('TransitionEvent' in window)) {\n    delete vendorPrefixes.transitionend.transition;\n  }\n}\n\n/**\n * Attempts to determine the correct vendor prefixed event name.\n *\n * @param {string} eventName\n * @returns {string}\n */\nfunction getVendorPrefixedEventName(eventName) {\n  if (prefixedEventNames[eventName]) {\n    return prefixedEventNames[eventName];\n  } else if (!vendorPrefixes[eventName]) {\n    return eventName;\n  }\n\n  var prefixMap = vendorPrefixes[eventName];\n\n  for (var styleProp in prefixMap) {\n    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {\n      return prefixedEventNames[eventName] = prefixMap[styleProp];\n    }\n  }\n\n  return eventName;\n}\n\nexports.default = getVendorPrefixedEventName;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9nZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZS5qcyJdLCJuYW1lcyI6WyJtYWtlUHJlZml4TWFwIiwic3R5bGVQcm9wIiwiZXZlbnROYW1lIiwicHJlZml4ZXMiLCJ0b0xvd2VyQ2FzZSIsInZlbmRvclByZWZpeGVzIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwicHJlZml4ZWRFdmVudE5hbWVzIiwic3R5bGUiLCJFeGVjdXRpb25FbnZpcm9ubWVudCIsImNhblVzZURPTSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIndpbmRvdyIsImFuaW1hdGlvbiIsInRyYW5zaXRpb24iLCJnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZSIsInByZWZpeE1hcCIsImhhc093blByb3BlcnR5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTs7Ozs7O0FBRUE7Ozs7Ozs7QUFPQSxTQUFTQSxhQUFULENBQXVCQyxTQUF2QixFQUFrQ0MsU0FBbEMsRUFBNkM7QUFDM0MsTUFBTUMsV0FBVyxFQUFqQjs7QUFFQUEsV0FBU0YsVUFBVUcsV0FBVixFQUFULElBQW9DRixVQUFVRSxXQUFWLEVBQXBDO0FBQ0FELFdBQVMsV0FBV0YsU0FBcEIsSUFBaUMsV0FBV0MsU0FBNUM7QUFDQUMsV0FBUyxRQUFRRixTQUFqQixJQUE4QixRQUFRQyxTQUF0QztBQUNBQyxXQUFTLE9BQU9GLFNBQWhCLElBQTZCLE9BQU9DLFNBQXBDO0FBQ0FDLFdBQVMsTUFBTUYsU0FBZixJQUE0QixNQUFNQyxVQUFVRSxXQUFWLEVBQWxDOztBQUVBLFNBQU9ELFFBQVA7QUFDRDs7QUFFRDs7O0FBNUJBOzs7Ozs7O0FBK0JBLElBQU1FLGlCQUFpQjtBQUNyQkMsZ0JBQWNOLGNBQWMsV0FBZCxFQUEyQixjQUEzQixDQURPO0FBRXJCTyxzQkFBb0JQLGNBQWMsV0FBZCxFQUEyQixvQkFBM0IsQ0FGQztBQUdyQlEsa0JBQWdCUixjQUFjLFdBQWQsRUFBMkIsZ0JBQTNCLENBSEs7QUFJckJTLGlCQUFlVCxjQUFjLFlBQWQsRUFBNEIsZUFBNUI7QUFKTSxDQUF2Qjs7QUFPQTs7O0FBR0EsSUFBTVUscUJBQXFCLEVBQTNCOztBQUVBOzs7QUFHQSxJQUFJQyxRQUFRLEVBQVo7O0FBRUE7OztBQUdBLElBQUlDLCtCQUFxQkMsU0FBekIsRUFBb0M7QUFDbENGLFVBQVFHLFNBQVNDLGFBQVQsQ0FBdUIsS0FBdkIsRUFBOEJKLEtBQXRDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBSSxFQUFFLG9CQUFvQkssTUFBdEIsQ0FBSixFQUFtQztBQUNqQyxXQUFPWCxlQUFlQyxZQUFmLENBQTRCVyxTQUFuQztBQUNBLFdBQU9aLGVBQWVFLGtCQUFmLENBQWtDVSxTQUF6QztBQUNBLFdBQU9aLGVBQWVHLGNBQWYsQ0FBOEJTLFNBQXJDO0FBQ0Q7O0FBRUQ7QUFDQSxNQUFJLEVBQUUscUJBQXFCRCxNQUF2QixDQUFKLEVBQW9DO0FBQ2xDLFdBQU9YLGVBQWVJLGFBQWYsQ0FBNkJTLFVBQXBDO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7O0FBTUEsU0FBU0MsMEJBQVQsQ0FBb0NqQixTQUFwQyxFQUErQztBQUM3QyxNQUFJUSxtQkFBbUJSLFNBQW5CLENBQUosRUFBbUM7QUFDakMsV0FBT1EsbUJBQW1CUixTQUFuQixDQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUksQ0FBQ0csZUFBZUgsU0FBZixDQUFMLEVBQWdDO0FBQ3JDLFdBQU9BLFNBQVA7QUFDRDs7QUFFRCxNQUFNa0IsWUFBWWYsZUFBZUgsU0FBZixDQUFsQjs7QUFFQSxPQUFLLElBQU1ELFNBQVgsSUFBd0JtQixTQUF4QixFQUFtQztBQUNqQyxRQUFJQSxVQUFVQyxjQUFWLENBQXlCcEIsU0FBekIsS0FBdUNBLGFBQWFVLEtBQXhELEVBQStEO0FBQzdELGFBQVFELG1CQUFtQlIsU0FBbkIsSUFBZ0NrQixVQUFVbkIsU0FBVixDQUF4QztBQUNEO0FBQ0Y7O0FBRUQsU0FBT0MsU0FBUDtBQUNEOztrQkFFY2lCLDBCIiwiZmlsZSI6ImdldFZlbmRvclByZWZpeGVkRXZlbnROYW1lLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IEV4ZWN1dGlvbkVudmlyb25tZW50IGZyb20gJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50JztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIG1hcHBpbmcgb2Ygc3RhbmRhcmQgdmVuZG9yIHByZWZpeGVzIHVzaW5nIHRoZSBkZWZpbmVkIHN0eWxlIHByb3BlcnR5IGFuZCBldmVudCBuYW1lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHlsZVByb3BcbiAqIEBwYXJhbSB7c3RyaW5nfSBldmVudE5hbWVcbiAqIEByZXR1cm5zIHtvYmplY3R9XG4gKi9cbmZ1bmN0aW9uIG1ha2VQcmVmaXhNYXAoc3R5bGVQcm9wLCBldmVudE5hbWUpIHtcbiAgY29uc3QgcHJlZml4ZXMgPSB7fTtcblxuICBwcmVmaXhlc1tzdHlsZVByb3AudG9Mb3dlckNhc2UoKV0gPSBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcbiAgcHJlZml4ZXNbJ1dlYmtpdCcgKyBzdHlsZVByb3BdID0gJ3dlYmtpdCcgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydNb3onICsgc3R5bGVQcm9wXSA9ICdtb3onICsgZXZlbnROYW1lO1xuICBwcmVmaXhlc1snbXMnICsgc3R5bGVQcm9wXSA9ICdNUycgKyBldmVudE5hbWU7XG4gIHByZWZpeGVzWydPJyArIHN0eWxlUHJvcF0gPSAnbycgKyBldmVudE5hbWUudG9Mb3dlckNhc2UoKTtcblxuICByZXR1cm4gcHJlZml4ZXM7XG59XG5cbi8qKlxuICogQSBsaXN0IG9mIGV2ZW50IG5hbWVzIHRvIGEgY29uZmlndXJhYmxlIGxpc3Qgb2YgdmVuZG9yIHByZWZpeGVzLlxuICovXG5jb25zdCB2ZW5kb3JQcmVmaXhlcyA9IHtcbiAgYW5pbWF0aW9uZW5kOiBtYWtlUHJlZml4TWFwKCdBbmltYXRpb24nLCAnQW5pbWF0aW9uRW5kJyksXG4gIGFuaW1hdGlvbml0ZXJhdGlvbjogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvbkl0ZXJhdGlvbicpLFxuICBhbmltYXRpb25zdGFydDogbWFrZVByZWZpeE1hcCgnQW5pbWF0aW9uJywgJ0FuaW1hdGlvblN0YXJ0JyksXG4gIHRyYW5zaXRpb25lbmQ6IG1ha2VQcmVmaXhNYXAoJ1RyYW5zaXRpb24nLCAnVHJhbnNpdGlvbkVuZCcpLFxufTtcblxuLyoqXG4gKiBFdmVudCBuYW1lcyB0aGF0IGhhdmUgYWxyZWFkeSBiZWVuIGRldGVjdGVkIGFuZCBwcmVmaXhlZCAoaWYgYXBwbGljYWJsZSkuXG4gKi9cbmNvbnN0IHByZWZpeGVkRXZlbnROYW1lcyA9IHt9O1xuXG4vKipcbiAqIEVsZW1lbnQgdG8gY2hlY2sgZm9yIHByZWZpeGVzIG9uLlxuICovXG5sZXQgc3R5bGUgPSB7fTtcblxuLyoqXG4gKiBCb290c3RyYXAgaWYgYSBET00gZXhpc3RzLlxuICovXG5pZiAoRXhlY3V0aW9uRW52aXJvbm1lbnQuY2FuVXNlRE9NKSB7XG4gIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG5cbiAgLy8gT24gc29tZSBwbGF0Zm9ybXMsIGluIHBhcnRpY3VsYXIgc29tZSByZWxlYXNlcyBvZiBBbmRyb2lkIDQueCxcbiAgLy8gdGhlIHVuLXByZWZpeGVkIFwiYW5pbWF0aW9uXCIgYW5kIFwidHJhbnNpdGlvblwiIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgb24gdGhlXG4gIC8vIHN0eWxlIG9iamVjdCBidXQgdGhlIGV2ZW50cyB0aGF0IGZpcmUgd2lsbCBzdGlsbCBiZSBwcmVmaXhlZCwgc28gd2UgbmVlZFxuICAvLyB0byBjaGVjayBpZiB0aGUgdW4tcHJlZml4ZWQgZXZlbnRzIGFyZSB1c2FibGUsIGFuZCBpZiBub3QgcmVtb3ZlIHRoZW0gZnJvbSB0aGUgbWFwLlxuICBpZiAoISgnQW5pbWF0aW9uRXZlbnQnIGluIHdpbmRvdykpIHtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbjtcbiAgICBkZWxldGUgdmVuZG9yUHJlZml4ZXMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uO1xuICB9XG5cbiAgLy8gU2FtZSBhcyBhYm92ZVxuICBpZiAoISgnVHJhbnNpdGlvbkV2ZW50JyBpbiB3aW5kb3cpKSB7XG4gICAgZGVsZXRlIHZlbmRvclByZWZpeGVzLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbjtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGRldGVybWluZSB0aGUgY29ycmVjdCB2ZW5kb3IgcHJlZml4ZWQgZXZlbnQgbmFtZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZShldmVudE5hbWUpIHtcbiAgaWYgKHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIHByZWZpeGVkRXZlbnROYW1lc1tldmVudE5hbWVdO1xuICB9IGVsc2UgaWYgKCF2ZW5kb3JQcmVmaXhlc1tldmVudE5hbWVdKSB7XG4gICAgcmV0dXJuIGV2ZW50TmFtZTtcbiAgfVxuXG4gIGNvbnN0IHByZWZpeE1hcCA9IHZlbmRvclByZWZpeGVzW2V2ZW50TmFtZV07XG5cbiAgZm9yIChjb25zdCBzdHlsZVByb3AgaW4gcHJlZml4TWFwKSB7XG4gICAgaWYgKHByZWZpeE1hcC5oYXNPd25Qcm9wZXJ0eShzdHlsZVByb3ApICYmIHN0eWxlUHJvcCBpbiBzdHlsZSkge1xuICAgICAgcmV0dXJuIChwcmVmaXhlZEV2ZW50TmFtZXNbZXZlbnROYW1lXSA9IHByZWZpeE1hcFtzdHlsZVByb3BdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZXZlbnROYW1lO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRWZW5kb3JQcmVmaXhlZEV2ZW50TmFtZTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Checks if an event is supported in the current execution environment.\n *\n * NOTE: This will not work correctly for non-generic events such as `change`,\n * `reset`, `load`, `error`, and `select`.\n *\n * Borrows from Modernizr.\n *\n * @param {string} eventNameSuffix Event name, e.g. \"click\".\n * @param {?boolean} capture Check if the capture phase is supported.\n * @return {boolean} True if the event is supported.\n * @internal\n * @license Modernizr 3.0.0pre (Custom Build) | MIT\n */\nfunction isEventSupported(eventNameSuffix, capture) {\n  if (!_ExecutionEnvironment2.default.canUseDOM || capture && !('addEventListener' in document)) {\n    return false;\n  }\n\n  var eventName = 'on' + eventNameSuffix;\n  var isSupported = eventName in document;\n\n  if (!isSupported) {\n    var element = document.createElement('div');\n    element.setAttribute(eventName, 'return;');\n    isSupported = typeof element[eventName] === 'function';\n  }\n\n  return isSupported;\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nexports.default = isEventSupported;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL2V2ZW50cy9pc0V2ZW50U3VwcG9ydGVkLmpzIl0sIm5hbWVzIjpbImlzRXZlbnRTdXBwb3J0ZWQiLCJldmVudE5hbWVTdWZmaXgiLCJjYXB0dXJlIiwiRXhlY3V0aW9uRW52aXJvbm1lbnQiLCJjYW5Vc2VET00iLCJkb2N1bWVudCIsImV2ZW50TmFtZSIsImlzU3VwcG9ydGVkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOzs7Ozs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7QUFjQSxTQUFTQSxnQkFBVCxDQUEwQkMsZUFBMUIsRUFBMkNDLE9BQTNDLEVBQW9EO0FBQ2xELE1BQ0UsQ0FBQ0MsK0JBQXFCQyxTQUF0QixJQUNDRixXQUFXLEVBQUUsc0JBQXNCRyxRQUF4QixDQUZkLEVBR0U7QUFDQSxXQUFPLEtBQVA7QUFDRDs7QUFFRCxNQUFNQyxZQUFZLE9BQU9MLGVBQXpCO0FBQ0EsTUFBSU0sY0FBY0QsYUFBYUQsUUFBL0I7O0FBRUEsTUFBSSxDQUFDRSxXQUFMLEVBQWtCO0FBQ2hCLFFBQU1DLFVBQVVILFNBQVNJLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBaEI7QUFDQUQsWUFBUUUsWUFBUixDQUFxQkosU0FBckIsRUFBZ0MsU0FBaEM7QUFDQUMsa0JBQWMsT0FBT0MsUUFBUUYsU0FBUixDQUFQLEtBQThCLFVBQTVDO0FBQ0Q7O0FBRUQsU0FBT0MsV0FBUDtBQUNELEMsQ0F6Q0Q7Ozs7Ozs7a0JBMkNlUCxnQiIsImZpbGUiOiJpc0V2ZW50U3VwcG9ydGVkLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IEV4ZWN1dGlvbkVudmlyb25tZW50IGZyb20gJ2ZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50JztcblxuLyoqXG4gKiBDaGVja3MgaWYgYW4gZXZlbnQgaXMgc3VwcG9ydGVkIGluIHRoZSBjdXJyZW50IGV4ZWN1dGlvbiBlbnZpcm9ubWVudC5cbiAqXG4gKiBOT1RFOiBUaGlzIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5IGZvciBub24tZ2VuZXJpYyBldmVudHMgc3VjaCBhcyBgY2hhbmdlYCxcbiAqIGByZXNldGAsIGBsb2FkYCwgYGVycm9yYCwgYW5kIGBzZWxlY3RgLlxuICpcbiAqIEJvcnJvd3MgZnJvbSBNb2Rlcm5penIuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVN1ZmZpeCBFdmVudCBuYW1lLCBlLmcuIFwiY2xpY2tcIi5cbiAqIEBwYXJhbSB7P2Jvb2xlYW59IGNhcHR1cmUgQ2hlY2sgaWYgdGhlIGNhcHR1cmUgcGhhc2UgaXMgc3VwcG9ydGVkLlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgZXZlbnQgaXMgc3VwcG9ydGVkLlxuICogQGludGVybmFsXG4gKiBAbGljZW5zZSBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiAqL1xuZnVuY3Rpb24gaXNFdmVudFN1cHBvcnRlZChldmVudE5hbWVTdWZmaXgsIGNhcHR1cmUpIHtcbiAgaWYgKFxuICAgICFFeGVjdXRpb25FbnZpcm9ubWVudC5jYW5Vc2VET00gfHxcbiAgICAoY2FwdHVyZSAmJiAhKCdhZGRFdmVudExpc3RlbmVyJyBpbiBkb2N1bWVudCkpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IGV2ZW50TmFtZSA9ICdvbicgKyBldmVudE5hbWVTdWZmaXg7XG4gIGxldCBpc1N1cHBvcnRlZCA9IGV2ZW50TmFtZSBpbiBkb2N1bWVudDtcblxuICBpZiAoIWlzU3VwcG9ydGVkKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGVsZW1lbnQuc2V0QXR0cmlidXRlKGV2ZW50TmFtZSwgJ3JldHVybjsnKTtcbiAgICBpc1N1cHBvcnRlZCA9IHR5cGVvZiBlbGVtZW50W2V2ZW50TmFtZV0gPT09ICdmdW5jdGlvbic7XG4gIH1cblxuICByZXR1cm4gaXNTdXBwb3J0ZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzRXZlbnRTdXBwb3J0ZWQ7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * CSS properties which accept numbers but are not in units of \"px\".\n */\nvar isUnitlessNumber = exports.isUnitlessNumber = {\n  animationIterationCount: true,\n  borderImageOutset: true,\n  borderImageSlice: true,\n  borderImageWidth: true,\n  boxFlex: true,\n  boxFlexGroup: true,\n  boxOrdinalGroup: true,\n  columnCount: true,\n  columns: true,\n  flex: true,\n  flexGrow: true,\n  flexPositive: true,\n  flexShrink: true,\n  flexNegative: true,\n  flexOrder: true,\n  gridRow: true,\n  gridRowEnd: true,\n  gridRowSpan: true,\n  gridRowStart: true,\n  gridColumn: true,\n  gridColumnEnd: true,\n  gridColumnSpan: true,\n  gridColumnStart: true,\n  fontWeight: true,\n  lineClamp: true,\n  lineHeight: true,\n  opacity: true,\n  order: true,\n  orphans: true,\n  tabSize: true,\n  widows: true,\n  zIndex: true,\n  zoom: true,\n\n  // SVG-related properties\n  fillOpacity: true,\n  floodOpacity: true,\n  stopOpacity: true,\n  strokeDasharray: true,\n  strokeDashoffset: true,\n  strokeMiterlimit: true,\n  strokeOpacity: true,\n  strokeWidth: true\n};\n\n/**\n * @param {string} prefix vendor-specific prefix, eg: Webkit\n * @param {string} key style name, eg: transitionDuration\n * @return {string} style name prefixed with `prefix`, properly camelCased, eg:\n * WebkitTransitionDuration\n */\nfunction prefixKey(prefix, key) {\n  return prefix + key.charAt(0).toUpperCase() + key.substring(1);\n}\n\n/**\n * Support style names that may come passed in prefixed by adding permutations\n * of vendor prefixes.\n */\nvar prefixes = ['Webkit', 'ms', 'Moz', 'O'];\n\n// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an\n// infinite loop, because it iterates over the newly added props too.\nObject.keys(isUnitlessNumber).forEach(function (prop) {\n  prefixes.forEach(function (prefix) {\n    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9DU1NQcm9wZXJ0eS5qcyJdLCJuYW1lcyI6WyJpc1VuaXRsZXNzTnVtYmVyIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicHJlZml4S2V5IiwicHJlZml4Iiwia2V5IiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJzdWJzdHJpbmciLCJwcmVmaXhlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicHJvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7OztBQU9BOzs7QUFHTyxJQUFNQSw4Q0FBbUI7QUFDOUJDLDJCQUF5QixJQURLO0FBRTlCQyxxQkFBbUIsSUFGVztBQUc5QkMsb0JBQWtCLElBSFk7QUFJOUJDLG9CQUFrQixJQUpZO0FBSzlCQyxXQUFTLElBTHFCO0FBTTlCQyxnQkFBYyxJQU5nQjtBQU85QkMsbUJBQWlCLElBUGE7QUFROUJDLGVBQWEsSUFSaUI7QUFTOUJDLFdBQVMsSUFUcUI7QUFVOUJDLFFBQU0sSUFWd0I7QUFXOUJDLFlBQVUsSUFYb0I7QUFZOUJDLGdCQUFjLElBWmdCO0FBYTlCQyxjQUFZLElBYmtCO0FBYzlCQyxnQkFBYyxJQWRnQjtBQWU5QkMsYUFBVyxJQWZtQjtBQWdCOUJDLFdBQVMsSUFoQnFCO0FBaUI5QkMsY0FBWSxJQWpCa0I7QUFrQjlCQyxlQUFhLElBbEJpQjtBQW1COUJDLGdCQUFjLElBbkJnQjtBQW9COUJDLGNBQVksSUFwQmtCO0FBcUI5QkMsaUJBQWUsSUFyQmU7QUFzQjlCQyxrQkFBZ0IsSUF0QmM7QUF1QjlCQyxtQkFBaUIsSUF2QmE7QUF3QjlCQyxjQUFZLElBeEJrQjtBQXlCOUJDLGFBQVcsSUF6Qm1CO0FBMEI5QkMsY0FBWSxJQTFCa0I7QUEyQjlCQyxXQUFTLElBM0JxQjtBQTRCOUJDLFNBQU8sSUE1QnVCO0FBNkI5QkMsV0FBUyxJQTdCcUI7QUE4QjlCQyxXQUFTLElBOUJxQjtBQStCOUJDLFVBQVEsSUEvQnNCO0FBZ0M5QkMsVUFBUSxJQWhDc0I7QUFpQzlCQyxRQUFNLElBakN3Qjs7QUFtQzlCO0FBQ0FDLGVBQWEsSUFwQ2lCO0FBcUM5QkMsZ0JBQWMsSUFyQ2dCO0FBc0M5QkMsZUFBYSxJQXRDaUI7QUF1QzlCQyxtQkFBaUIsSUF2Q2E7QUF3QzlCQyxvQkFBa0IsSUF4Q1k7QUF5QzlCQyxvQkFBa0IsSUF6Q1k7QUEwQzlCQyxpQkFBZSxJQTFDZTtBQTJDOUJDLGVBQWE7QUEzQ2lCLENBQXpCOztBQThDUDs7Ozs7O0FBTUEsU0FBU0MsU0FBVCxDQUFtQkMsTUFBbkIsRUFBMkJDLEdBQTNCLEVBQWdDO0FBQzlCLFNBQU9ELFNBQVNDLElBQUlDLE1BQUosQ0FBVyxDQUFYLEVBQWNDLFdBQWQsRUFBVCxHQUF1Q0YsSUFBSUcsU0FBSixDQUFjLENBQWQsQ0FBOUM7QUFDRDs7QUFFRDs7OztBQUlBLElBQU1DLFdBQVcsQ0FBQyxRQUFELEVBQVcsSUFBWCxFQUFpQixLQUFqQixFQUF3QixHQUF4QixDQUFqQjs7QUFFQTtBQUNBO0FBQ0FDLE9BQU9DLElBQVAsQ0FBWWxELGdCQUFaLEVBQThCbUQsT0FBOUIsQ0FBc0MsVUFBU0MsSUFBVCxFQUFlO0FBQ25ESixXQUFTRyxPQUFULENBQWlCLFVBQVNSLE1BQVQsRUFBaUI7QUFDaEMzQyxxQkFBaUIwQyxVQUFVQyxNQUFWLEVBQWtCUyxJQUFsQixDQUFqQixJQUE0Q3BELGlCQUFpQm9ELElBQWpCLENBQTVDO0FBQ0QsR0FGRDtBQUdELENBSkQiLCJmaWxlIjoiQ1NTUHJvcGVydHkuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKipcbiAqIENTUyBwcm9wZXJ0aWVzIHdoaWNoIGFjY2VwdCBudW1iZXJzIGJ1dCBhcmUgbm90IGluIHVuaXRzIG9mIFwicHhcIi5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzVW5pdGxlc3NOdW1iZXIgPSB7XG4gIGFuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiB0cnVlLFxuICBib3JkZXJJbWFnZU91dHNldDogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VTbGljZTogdHJ1ZSxcbiAgYm9yZGVySW1hZ2VXaWR0aDogdHJ1ZSxcbiAgYm94RmxleDogdHJ1ZSxcbiAgYm94RmxleEdyb3VwOiB0cnVlLFxuICBib3hPcmRpbmFsR3JvdXA6IHRydWUsXG4gIGNvbHVtbkNvdW50OiB0cnVlLFxuICBjb2x1bW5zOiB0cnVlLFxuICBmbGV4OiB0cnVlLFxuICBmbGV4R3JvdzogdHJ1ZSxcbiAgZmxleFBvc2l0aXZlOiB0cnVlLFxuICBmbGV4U2hyaW5rOiB0cnVlLFxuICBmbGV4TmVnYXRpdmU6IHRydWUsXG4gIGZsZXhPcmRlcjogdHJ1ZSxcbiAgZ3JpZFJvdzogdHJ1ZSxcbiAgZ3JpZFJvd0VuZDogdHJ1ZSxcbiAgZ3JpZFJvd1NwYW46IHRydWUsXG4gIGdyaWRSb3dTdGFydDogdHJ1ZSxcbiAgZ3JpZENvbHVtbjogdHJ1ZSxcbiAgZ3JpZENvbHVtbkVuZDogdHJ1ZSxcbiAgZ3JpZENvbHVtblNwYW46IHRydWUsXG4gIGdyaWRDb2x1bW5TdGFydDogdHJ1ZSxcbiAgZm9udFdlaWdodDogdHJ1ZSxcbiAgbGluZUNsYW1wOiB0cnVlLFxuICBsaW5lSGVpZ2h0OiB0cnVlLFxuICBvcGFjaXR5OiB0cnVlLFxuICBvcmRlcjogdHJ1ZSxcbiAgb3JwaGFuczogdHJ1ZSxcbiAgdGFiU2l6ZTogdHJ1ZSxcbiAgd2lkb3dzOiB0cnVlLFxuICB6SW5kZXg6IHRydWUsXG4gIHpvb206IHRydWUsXG5cbiAgLy8gU1ZHLXJlbGF0ZWQgcHJvcGVydGllc1xuICBmaWxsT3BhY2l0eTogdHJ1ZSxcbiAgZmxvb2RPcGFjaXR5OiB0cnVlLFxuICBzdG9wT3BhY2l0eTogdHJ1ZSxcbiAgc3Ryb2tlRGFzaGFycmF5OiB0cnVlLFxuICBzdHJva2VEYXNob2Zmc2V0OiB0cnVlLFxuICBzdHJva2VNaXRlcmxpbWl0OiB0cnVlLFxuICBzdHJva2VPcGFjaXR5OiB0cnVlLFxuICBzdHJva2VXaWR0aDogdHJ1ZSxcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IHByZWZpeCB2ZW5kb3Itc3BlY2lmaWMgcHJlZml4LCBlZzogV2Via2l0XG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IHN0eWxlIG5hbWUsIGVnOiB0cmFuc2l0aW9uRHVyYXRpb25cbiAqIEByZXR1cm4ge3N0cmluZ30gc3R5bGUgbmFtZSBwcmVmaXhlZCB3aXRoIGBwcmVmaXhgLCBwcm9wZXJseSBjYW1lbENhc2VkLCBlZzpcbiAqIFdlYmtpdFRyYW5zaXRpb25EdXJhdGlvblxuICovXG5mdW5jdGlvbiBwcmVmaXhLZXkocHJlZml4LCBrZXkpIHtcbiAgcmV0dXJuIHByZWZpeCArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zdWJzdHJpbmcoMSk7XG59XG5cbi8qKlxuICogU3VwcG9ydCBzdHlsZSBuYW1lcyB0aGF0IG1heSBjb21lIHBhc3NlZCBpbiBwcmVmaXhlZCBieSBhZGRpbmcgcGVybXV0YXRpb25zXG4gKiBvZiB2ZW5kb3IgcHJlZml4ZXMuXG4gKi9cbmNvbnN0IHByZWZpeGVzID0gWydXZWJraXQnLCAnbXMnLCAnTW96JywgJ08nXTtcblxuLy8gVXNpbmcgT2JqZWN0LmtleXMgaGVyZSwgb3IgZWxzZSB0aGUgdmFuaWxsYSBmb3ItaW4gbG9vcCBtYWtlcyBJRTggZ28gaW50byBhblxuLy8gaW5maW5pdGUgbG9vcCwgYmVjYXVzZSBpdCBpdGVyYXRlcyBvdmVyIHRoZSBuZXdseSBhZGRlZCBwcm9wcyB0b28uXG5PYmplY3Qua2V5cyhpc1VuaXRsZXNzTnVtYmVyKS5mb3JFYWNoKGZ1bmN0aW9uKHByb3ApIHtcbiAgcHJlZml4ZXMuZm9yRWFjaChmdW5jdGlvbihwcmVmaXgpIHtcbiAgICBpc1VuaXRsZXNzTnVtYmVyW3ByZWZpeEtleShwcmVmaXgsIHByb3ApXSA9IGlzVW5pdGxlc3NOdW1iZXJbcHJvcF07XG4gIH0pO1xufSk7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createDangerousStringForStyles = createDangerousStringForStyles;\nexports.setValueForStyles = setValueForStyles;\n\nvar _dangerousStyleValue = require('./dangerousStyleValue');\n\nvar _dangerousStyleValue2 = _interopRequireDefault(_dangerousStyleValue);\n\nvar _hyphenateStyleName = require('fbjs/lib/hyphenateStyleName');\n\nvar _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);\n\nvar _warnValidStyle = require('./warnValidStyle');\n\nvar _warnValidStyle2 = _interopRequireDefault(_warnValidStyle);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Operations for dealing with CSS properties.\n */\n\n/**\n * This creates a string that is expected to be equivalent to the style\n * attribute generated by server-side rendering. It by-passes warnings and\n * security checks so it's not safe to use this value for anything other than\n * comparison. It is only used in DEV for SSR validation.\n */\nfunction createDangerousStringForStyles(styles) {\n  if (__DEV__) {\n    var serialized = '';\n    var delimiter = '';\n    for (var styleName in styles) {\n      if (!styles.hasOwnProperty(styleName)) {\n        continue;\n      }\n      var styleValue = styles[styleName];\n      if (styleValue != null) {\n        var isCustomProperty = styleName.indexOf('--') === 0;\n        serialized += delimiter + (0, _hyphenateStyleName2.default)(styleName) + ':';\n        serialized += (0, _dangerousStyleValue2.default)(styleName, styleValue, isCustomProperty);\n\n        delimiter = ';';\n      }\n    }\n    return serialized || null;\n  }\n}\n\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction setValueForStyles(node, styles, getStack) {\n  var style = node.style;\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    if (__DEV__) {\n      if (!isCustomProperty) {\n        (0, _warnValidStyle2.default)(styleName, styles[styleName], getStack);\n      }\n    }\n    var styleValue = (0, _dangerousStyleValue2.default)(styleName, styles[styleName], isCustomProperty);\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n    if (isCustomProperty) {\n      style.setProperty(styleName, styleValue);\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9DU1NQcm9wZXJ0eU9wZXJhdGlvbnMuanMiXSwibmFtZXMiOlsiY3JlYXRlRGFuZ2Vyb3VzU3RyaW5nRm9yU3R5bGVzIiwic2V0VmFsdWVGb3JTdHlsZXMiLCJzdHlsZXMiLCJfX0RFVl9fIiwic2VyaWFsaXplZCIsImRlbGltaXRlciIsInN0eWxlTmFtZSIsImhhc093blByb3BlcnR5Iiwic3R5bGVWYWx1ZSIsImlzQ3VzdG9tUHJvcGVydHkiLCJpbmRleE9mIiwibm9kZSIsImdldFN0YWNrIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFxQmdCQSw4QixHQUFBQSw4QjtRQWdDQUMsaUIsR0FBQUEsaUI7O0FBOUNoQjs7OztBQUNBOzs7O0FBQ0E7Ozs7OztBQUVBOzs7O0FBSUE7Ozs7OztBQU1PLFNBQVNELDhCQUFULENBQXdDRSxNQUF4QyxFQUFnRDtBQUNyRCxNQUFJQyxPQUFKLEVBQWE7QUFDWCxRQUFJQyxhQUFhLEVBQWpCO0FBQ0EsUUFBSUMsWUFBWSxFQUFoQjtBQUNBLFNBQUssSUFBTUMsU0FBWCxJQUF3QkosTUFBeEIsRUFBZ0M7QUFDOUIsVUFBSSxDQUFDQSxPQUFPSyxjQUFQLENBQXNCRCxTQUF0QixDQUFMLEVBQXVDO0FBQ3JDO0FBQ0Q7QUFDRCxVQUFNRSxhQUFhTixPQUFPSSxTQUFQLENBQW5CO0FBQ0EsVUFBSUUsY0FBYyxJQUFsQixFQUF3QjtBQUN0QixZQUFNQyxtQkFBbUJILFVBQVVJLE9BQVYsQ0FBa0IsSUFBbEIsTUFBNEIsQ0FBckQ7QUFDQU4sc0JBQWNDLFlBQVksa0NBQW1CQyxTQUFuQixDQUFaLEdBQTRDLEdBQTFEO0FBQ0FGLHNCQUFjLG1DQUNaRSxTQURZLEVBRVpFLFVBRlksRUFHWkMsZ0JBSFksQ0FBZDs7QUFNQUosb0JBQVksR0FBWjtBQUNEO0FBQ0Y7QUFDRCxXQUFPRCxjQUFjLElBQXJCO0FBQ0Q7QUFDRjs7QUFFRDs7Ozs7OztBQTlDQTs7Ozs7OztBQXFETyxTQUFTSCxpQkFBVCxDQUEyQlUsSUFBM0IsRUFBaUNULE1BQWpDLEVBQXlDVSxRQUF6QyxFQUFtRDtBQUN4RCxNQUFNQyxRQUFRRixLQUFLRSxLQUFuQjtBQUNBLE9BQUssSUFBSVAsU0FBVCxJQUFzQkosTUFBdEIsRUFBOEI7QUFDNUIsUUFBSSxDQUFDQSxPQUFPSyxjQUFQLENBQXNCRCxTQUF0QixDQUFMLEVBQXVDO0FBQ3JDO0FBQ0Q7QUFDRCxRQUFNRyxtQkFBbUJILFVBQVVJLE9BQVYsQ0FBa0IsSUFBbEIsTUFBNEIsQ0FBckQ7QUFDQSxRQUFJUCxPQUFKLEVBQWE7QUFDWCxVQUFJLENBQUNNLGdCQUFMLEVBQXVCO0FBQ3JCLHNDQUFlSCxTQUFmLEVBQTBCSixPQUFPSSxTQUFQLENBQTFCLEVBQTZDTSxRQUE3QztBQUNEO0FBQ0Y7QUFDRCxRQUFNSixhQUFhLG1DQUNqQkYsU0FEaUIsRUFFakJKLE9BQU9JLFNBQVAsQ0FGaUIsRUFHakJHLGdCQUhpQixDQUFuQjtBQUtBLFFBQUlILGNBQWMsT0FBbEIsRUFBMkI7QUFDekJBLGtCQUFZLFVBQVo7QUFDRDtBQUNELFFBQUlHLGdCQUFKLEVBQXNCO0FBQ3BCSSxZQUFNQyxXQUFOLENBQWtCUixTQUFsQixFQUE2QkUsVUFBN0I7QUFDRCxLQUZELE1BRU87QUFDTEssWUFBTVAsU0FBTixJQUFtQkUsVUFBbkI7QUFDRDtBQUNGO0FBQ0YiLCJmaWxlIjoiQ1NTUHJvcGVydHlPcGVyYXRpb25zLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGRhbmdlcm91c1N0eWxlVmFsdWUgZnJvbSAnLi9kYW5nZXJvdXNTdHlsZVZhbHVlJztcbmltcG9ydCBoeXBoZW5hdGVTdHlsZU5hbWUgZnJvbSAnZmJqcy9saWIvaHlwaGVuYXRlU3R5bGVOYW1lJztcbmltcG9ydCB3YXJuVmFsaWRTdHlsZSBmcm9tICcuL3dhcm5WYWxpZFN0eWxlJztcblxuLyoqXG4gKiBPcGVyYXRpb25zIGZvciBkZWFsaW5nIHdpdGggQ1NTIHByb3BlcnRpZXMuXG4gKi9cblxuLyoqXG4gKiBUaGlzIGNyZWF0ZXMgYSBzdHJpbmcgdGhhdCBpcyBleHBlY3RlZCB0byBiZSBlcXVpdmFsZW50IHRvIHRoZSBzdHlsZVxuICogYXR0cmlidXRlIGdlbmVyYXRlZCBieSBzZXJ2ZXItc2lkZSByZW5kZXJpbmcuIEl0IGJ5LXBhc3NlcyB3YXJuaW5ncyBhbmRcbiAqIHNlY3VyaXR5IGNoZWNrcyBzbyBpdCdzIG5vdCBzYWZlIHRvIHVzZSB0aGlzIHZhbHVlIGZvciBhbnl0aGluZyBvdGhlciB0aGFuXG4gKiBjb21wYXJpc29uLiBJdCBpcyBvbmx5IHVzZWQgaW4gREVWIGZvciBTU1IgdmFsaWRhdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhbmdlcm91c1N0cmluZ0ZvclN0eWxlcyhzdHlsZXMpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBsZXQgc2VyaWFsaXplZCA9ICcnO1xuICAgIGxldCBkZWxpbWl0ZXIgPSAnJztcbiAgICBmb3IgKGNvbnN0IHN0eWxlTmFtZSBpbiBzdHlsZXMpIHtcbiAgICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBzdHlsZVZhbHVlID0gc3R5bGVzW3N0eWxlTmFtZV07XG4gICAgICBpZiAoc3R5bGVWYWx1ZSAhPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGlzQ3VzdG9tUHJvcGVydHkgPSBzdHlsZU5hbWUuaW5kZXhPZignLS0nKSA9PT0gMDtcbiAgICAgICAgc2VyaWFsaXplZCArPSBkZWxpbWl0ZXIgKyBoeXBoZW5hdGVTdHlsZU5hbWUoc3R5bGVOYW1lKSArICc6JztcbiAgICAgICAgc2VyaWFsaXplZCArPSBkYW5nZXJvdXNTdHlsZVZhbHVlKFxuICAgICAgICAgIHN0eWxlTmFtZSxcbiAgICAgICAgICBzdHlsZVZhbHVlLFxuICAgICAgICAgIGlzQ3VzdG9tUHJvcGVydHksXG4gICAgICAgICk7XG5cbiAgICAgICAgZGVsaW1pdGVyID0gJzsnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc2VyaWFsaXplZCB8fCBudWxsO1xuICB9XG59XG5cbi8qKlxuICogU2V0cyB0aGUgdmFsdWUgZm9yIG11bHRpcGxlIHN0eWxlcyBvbiBhIG5vZGUuICBJZiBhIHZhbHVlIGlzIHNwZWNpZmllZCBhc1xuICogJycgKGVtcHR5IHN0cmluZyksIHRoZSBjb3JyZXNwb25kaW5nIHN0eWxlIHByb3BlcnR5IHdpbGwgYmUgdW5zZXQuXG4gKlxuICogQHBhcmFtIHtET01FbGVtZW50fSBub2RlXG4gKiBAcGFyYW0ge29iamVjdH0gc3R5bGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRWYWx1ZUZvclN0eWxlcyhub2RlLCBzdHlsZXMsIGdldFN0YWNrKSB7XG4gIGNvbnN0IHN0eWxlID0gbm9kZS5zdHlsZTtcbiAgZm9yIChsZXQgc3R5bGVOYW1lIGluIHN0eWxlcykge1xuICAgIGlmICghc3R5bGVzLmhhc093blByb3BlcnR5KHN0eWxlTmFtZSkpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cbiAgICBjb25zdCBpc0N1c3RvbVByb3BlcnR5ID0gc3R5bGVOYW1lLmluZGV4T2YoJy0tJykgPT09IDA7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmICghaXNDdXN0b21Qcm9wZXJ0eSkge1xuICAgICAgICB3YXJuVmFsaWRTdHlsZShzdHlsZU5hbWUsIHN0eWxlc1tzdHlsZU5hbWVdLCBnZXRTdGFjayk7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IHN0eWxlVmFsdWUgPSBkYW5nZXJvdXNTdHlsZVZhbHVlKFxuICAgICAgc3R5bGVOYW1lLFxuICAgICAgc3R5bGVzW3N0eWxlTmFtZV0sXG4gICAgICBpc0N1c3RvbVByb3BlcnR5LFxuICAgICk7XG4gICAgaWYgKHN0eWxlTmFtZSA9PT0gJ2Zsb2F0Jykge1xuICAgICAgc3R5bGVOYW1lID0gJ2Nzc0Zsb2F0JztcbiAgICB9XG4gICAgaWYgKGlzQ3VzdG9tUHJvcGVydHkpIHtcbiAgICAgIHN0eWxlLnNldFByb3BlcnR5KHN0eWxlTmFtZSwgc3R5bGVWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlW3N0eWxlTmFtZV0gPSBzdHlsZVZhbHVlO1xuICAgIH1cbiAgfVxufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIntrinsicNamespace = getIntrinsicNamespace;\nexports.getChildNamespace = getChildNamespace;\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';\nvar MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';\nvar SVG_NAMESPACE = 'http://www.w3.org/2000/svg';\n\nvar Namespaces = exports.Namespaces = {\n  html: HTML_NAMESPACE,\n  mathml: MATH_NAMESPACE,\n  svg: SVG_NAMESPACE\n};\n\n// Assumes there is no parent namespace.\nfunction getIntrinsicNamespace(type) {\n  switch (type) {\n    case 'svg':\n      return SVG_NAMESPACE;\n    case 'math':\n      return MATH_NAMESPACE;\n    default:\n      return HTML_NAMESPACE;\n  }\n}\n\nfunction getChildNamespace(parentNamespace, type) {\n  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {\n    // No (or default) parent namespace: potential entry point.\n    return getIntrinsicNamespace(type);\n  }\n  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {\n    // We're leaving SVG.\n    return HTML_NAMESPACE;\n  }\n  // By default, pass namespace below.\n  return parentNamespace;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9ET01OYW1lc3BhY2VzLmpzIl0sIm5hbWVzIjpbImdldEludHJpbnNpY05hbWVzcGFjZSIsImdldENoaWxkTmFtZXNwYWNlIiwiSFRNTF9OQU1FU1BBQ0UiLCJNQVRIX05BTUVTUEFDRSIsIlNWR19OQU1FU1BBQ0UiLCJOYW1lc3BhY2VzIiwiaHRtbCIsIm1hdGhtbCIsInN2ZyIsInR5cGUiLCJwYXJlbnROYW1lc3BhY2UiXSwibWFwcGluZ3MiOiI7Ozs7O1FBa0JnQkEscUIsR0FBQUEscUI7UUFXQUMsaUIsR0FBQUEsaUI7QUE3QmhCOzs7Ozs7O0FBT0EsSUFBTUMsaUJBQWlCLDhCQUF2QjtBQUNBLElBQU1DLGlCQUFpQixvQ0FBdkI7QUFDQSxJQUFNQyxnQkFBZ0IsNEJBQXRCOztBQUVPLElBQU1DLGtDQUFhO0FBQ3hCQyxRQUFNSixjQURrQjtBQUV4QkssVUFBUUosY0FGZ0I7QUFHeEJLLE9BQUtKO0FBSG1CLENBQW5COztBQU1QO0FBQ08sU0FBU0oscUJBQVQsQ0FBK0JTLElBQS9CLEVBQXFEO0FBQzFELFVBQVFBLElBQVI7QUFDRSxTQUFLLEtBQUw7QUFDRSxhQUFPTCxhQUFQO0FBQ0YsU0FBSyxNQUFMO0FBQ0UsYUFBT0QsY0FBUDtBQUNGO0FBQ0UsYUFBT0QsY0FBUDtBQU5KO0FBUUQ7O0FBRU0sU0FBU0QsaUJBQVQsQ0FDTFMsZUFESyxFQUVMRCxJQUZLLEVBR0c7QUFDUixNQUFJQyxtQkFBbUIsSUFBbkIsSUFBMkJBLG9CQUFvQlIsY0FBbkQsRUFBbUU7QUFDakU7QUFDQSxXQUFPRixzQkFBc0JTLElBQXRCLENBQVA7QUFDRDtBQUNELE1BQUlDLG9CQUFvQk4sYUFBcEIsSUFBcUNLLFNBQVMsZUFBbEQsRUFBbUU7QUFDakU7QUFDQSxXQUFPUCxjQUFQO0FBQ0Q7QUFDRDtBQUNBLFNBQU9RLGVBQVA7QUFDRCIsImZpbGUiOiJET01OYW1lc3BhY2VzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuY29uc3QgSFRNTF9OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbCc7XG5jb25zdCBNQVRIX05BTUVTUEFDRSA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MJztcbmNvbnN0IFNWR19OQU1FU1BBQ0UgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuXG5leHBvcnQgY29uc3QgTmFtZXNwYWNlcyA9IHtcbiAgaHRtbDogSFRNTF9OQU1FU1BBQ0UsXG4gIG1hdGhtbDogTUFUSF9OQU1FU1BBQ0UsXG4gIHN2ZzogU1ZHX05BTUVTUEFDRSxcbn07XG5cbi8vIEFzc3VtZXMgdGhlcmUgaXMgbm8gcGFyZW50IG5hbWVzcGFjZS5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJbnRyaW5zaWNOYW1lc3BhY2UodHlwZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAnc3ZnJzpcbiAgICAgIHJldHVybiBTVkdfTkFNRVNQQUNFO1xuICAgIGNhc2UgJ21hdGgnOlxuICAgICAgcmV0dXJuIE1BVEhfTkFNRVNQQUNFO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gSFRNTF9OQU1FU1BBQ0U7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldENoaWxkTmFtZXNwYWNlKFxuICBwYXJlbnROYW1lc3BhY2U6IHN0cmluZyB8IG51bGwsXG4gIHR5cGU6IHN0cmluZyxcbik6IHN0cmluZyB7XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT0gbnVsbCB8fCBwYXJlbnROYW1lc3BhY2UgPT09IEhUTUxfTkFNRVNQQUNFKSB7XG4gICAgLy8gTm8gKG9yIGRlZmF1bHQpIHBhcmVudCBuYW1lc3BhY2U6IHBvdGVudGlhbCBlbnRyeSBwb2ludC5cbiAgICByZXR1cm4gZ2V0SW50cmluc2ljTmFtZXNwYWNlKHR5cGUpO1xuICB9XG4gIGlmIChwYXJlbnROYW1lc3BhY2UgPT09IFNWR19OQU1FU1BBQ0UgJiYgdHlwZSA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgLy8gV2UncmUgbGVhdmluZyBTVkcuXG4gICAgcmV0dXJuIEhUTUxfTkFNRVNQQUNFO1xuICB9XG4gIC8vIEJ5IGRlZmF1bHQsIHBhc3MgbmFtZXNwYWNlIGJlbG93LlxuICByZXR1cm4gcGFyZW50TmFtZXNwYWNlO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VALID_ATTRIBUTE_NAME_REGEX = exports.ROOT_ATTRIBUTE_NAME = exports.ID_ATTRIBUTE_NAME = exports.ATTRIBUTE_NAME_CHAR = exports.ATTRIBUTE_NAME_START_CHAR = exports.POSITIVE_NUMERIC = exports.NUMERIC = exports.OVERLOADED_BOOLEAN = exports.BOOLEAN = exports.BOOLEANISH_STRING = exports.STRING = exports.RESERVED = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.isAttributeNameSafe = isAttributeNameSafe;\nexports.shouldIgnoreAttribute = shouldIgnoreAttribute;\nexports.shouldRemoveAttributeWithWarning = shouldRemoveAttributeWithWarning;\nexports.shouldRemoveAttribute = shouldRemoveAttribute;\nexports.getPropertyInfo = getPropertyInfo;\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// A reserved attribute.\n// It is handled by React separately and shouldn't be written to the DOM.\nvar RESERVED = exports.RESERVED = 0;\n\n// A simple string attribute.\n// Attributes that aren't in the whitelist are presumed to have this type.\nvar STRING = exports.STRING = 1;\n\n// A string attribute that accepts booleans in React. In HTML, these are called\n// \"enumerated\" attributes with \"true\" and \"false\" as possible values.\n// When true, it should be set to a \"true\" string.\n// When false, it should be set to a \"false\" string.\nvar BOOLEANISH_STRING = exports.BOOLEANISH_STRING = 2;\n\n// A real boolean attribute.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\nvar BOOLEAN = exports.BOOLEAN = 3;\n\n// An attribute that can be used as a flag as well as with a value.\n// When true, it should be present (set either to an empty string or its name).\n// When false, it should be omitted.\n// For any other value, should be present with that value.\nvar OVERLOADED_BOOLEAN = exports.OVERLOADED_BOOLEAN = 4;\n\n// An attribute that must be numeric or parse as a numeric.\n// When falsy, it should be removed.\nvar NUMERIC = exports.NUMERIC = 5;\n\n// An attribute that must be positive numeric or parse as a positive numeric.\n// When falsy, it should be removed.\nvar POSITIVE_NUMERIC = exports.POSITIVE_NUMERIC = 6;\n\n/* eslint-disable max-len */\nvar ATTRIBUTE_NAME_START_CHAR = exports.ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\n/* eslint-enable max-len */\nvar ATTRIBUTE_NAME_CHAR = exports.ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\\\-.0-9\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\n\nvar ID_ATTRIBUTE_NAME = exports.ID_ATTRIBUTE_NAME = 'data-reactid';\nvar ROOT_ATTRIBUTE_NAME = exports.ROOT_ATTRIBUTE_NAME = 'data-reactroot';\nvar VALID_ATTRIBUTE_NAME_REGEX = exports.VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');\n\nvar illegalAttributeNameCache = {};\nvar validatedAttributeNameCache = {};\n\nfunction isAttributeNameSafe(attributeName) {\n  if (validatedAttributeNameCache.hasOwnProperty(attributeName)) {\n    return true;\n  }\n  if (illegalAttributeNameCache.hasOwnProperty(attributeName)) {\n    return false;\n  }\n  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {\n    validatedAttributeNameCache[attributeName] = true;\n    return true;\n  }\n  illegalAttributeNameCache[attributeName] = true;\n  if (__DEV__) {\n    (0, _warning2.default)(false, 'Invalid attribute name: `%s`', attributeName);\n  }\n  return false;\n}\n\nfunction shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null) {\n    return propertyInfo.type === RESERVED;\n  }\n  if (isCustomComponentTag) {\n    return false;\n  }\n  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {\n    return true;\n  }\n  return false;\n}\n\nfunction shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {\n  if (propertyInfo !== null && propertyInfo.type === RESERVED) {\n    return false;\n  }\n  switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n    case 'function':\n    // $FlowIssue symbol is perfectly valid here\n    case 'symbol':\n      // eslint-disable-line\n      return true;\n    case 'boolean':\n      {\n        if (isCustomComponentTag) {\n          return false;\n        }\n        if (propertyInfo !== null) {\n          return !propertyInfo.acceptsBooleans;\n        } else {\n          var prefix = name.toLowerCase().slice(0, 5);\n          return prefix !== 'data-' && prefix !== 'aria-';\n        }\n      }\n    default:\n      return false;\n  }\n}\n\nfunction shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {\n  if (value === null || typeof value === 'undefined') {\n    return true;\n  }\n  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {\n    return true;\n  }\n  if (propertyInfo !== null) {\n    switch (propertyInfo.type) {\n      case BOOLEAN:\n        return !value;\n      case OVERLOADED_BOOLEAN:\n        return value === false;\n      case NUMERIC:\n        return isNaN(value);\n      case POSITIVE_NUMERIC:\n        return isNaN(value) || value < 1;\n    }\n  }\n  return false;\n}\n\nfunction getPropertyInfo(name) {\n  return properties.hasOwnProperty(name) ? properties[name] : null;\n}\n\nfunction PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {\n  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;\n  this.attributeName = attributeName;\n  this.attributeNamespace = attributeNamespace;\n  this.mustUseProperty = mustUseProperty;\n  this.propertyName = name;\n  this.type = type;\n}\n\n// When adding attributes to this list, be sure to also add them to\n// the `possibleStandardNames` module to ensure casing and incorrect\n// name warnings.\nvar properties = {};\n\n// These props are reserved by React. They shouldn't be written to the DOM.\n['children', 'dangerouslySetInnerHTML',\n// TODO: This prevents the assignment of defaultValue to regular\n// elements (not just inputs). Now that ReactDOMInput assigns to the\n// defaultValue property -- do we need this?\n'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty\n  name, // attributeName\n  null);\n} // attributeNamespace\n);\n\n// A few React string attributes have a different name.\n// This is a mapping from React prop names to the attribute names.\n[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      attributeName = _ref2[1];\n\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are \"enumerated\" HTML attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are \"enumerated\" SVG attributes that accept \"true\" and \"false\".\n// In React, we let users pass `true` and `false` even though technically\n// these aren't boolean attributes (they are coerced to strings).\n// Since these are SVG attributes, their attribute names are case-sensitive.\n['autoReverse', 'externalResourcesRequired', 'preserveAlpha'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty\n  name, // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are HTML boolean attributes.\n['allowFullScreen', 'async',\n// Note: there is a special case that prevents it from being written to the DOM\n// on the client side because the browsers are inconsistent. Instead we call focus().\n'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless',\n// Microdata\n'itemScope'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are the few React props that we set as DOM properties\n// rather than attributes. These are all booleans.\n['checked',\n// Note: `option.selected` is not updated if `select.multiple` is\n// disabled with `removeAttribute`. We have special logic for handling this.\n'multiple', 'muted', 'selected'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are HTML attributes that are \"overloaded booleans\": they behave like\n// booleans, but can also accept a string value.\n['capture', 'download'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are HTML attributes that must be positive numbers.\n['cols', 'rows', 'size', 'span'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\n// These are HTML attributes that must be numbers.\n['rowSpan', 'start'].forEach(function (name) {\n  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty\n  name.toLowerCase(), // attributeName\n  null);\n} // attributeNamespace\n);\n\nvar CAMELIZE = /[\\-\\:]([a-z])/g;\nvar capitalize = function capitalize(token) {\n  return token[1].toUpperCase();\n};\n\n// This is a list of all SVG attributes that need special casing, namespacing,\n// or boolean value assignment. Regular attributes that just accept strings\n// and have the same names are omitted, just like in the HTML whitelist.\n// Some of these attributes can be hard to find. This list was created by\n// scrapping the MDN documentation.\n['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, null);\n} // attributeNamespace\n);\n\n// String SVG attributes with the xlink namespace.\n['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/1999/xlink');\n});\n\n// String SVG attributes with the xml namespace.\n['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {\n  var name = attributeName.replace(CAMELIZE, capitalize);\n  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty\n  attributeName, 'http://www.w3.org/XML/1998/namespace');\n});\n\n// Special case: this attribute exists both in HTML and SVG.\n// Its \"tabindex\" attribute name is case-sensitive in SVG so we can't just use\n// its React `tabIndex` name, like we do for attributes that exist only in HTML.\nproperties.tabIndex = new PropertyInfoRecord('tabIndex', STRING, false, // mustUseProperty\n'tabindex', // attributeName\nnull);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * HTML nodeType values that represent the type of the node\n */\n\nvar ELEMENT_NODE = exports.ELEMENT_NODE = 1;\nvar TEXT_NODE = exports.TEXT_NODE = 3;\nvar COMMENT_NODE = exports.COMMENT_NODE = 8;\nvar DOCUMENT_NODE = exports.DOCUMENT_NODE = 9;\nvar DOCUMENT_FRAGMENT_NODE = exports.DOCUMENT_FRAGMENT_NODE = 11;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9IVE1MTm9kZVR5cGUuanMiXSwibmFtZXMiOlsiRUxFTUVOVF9OT0RFIiwiVEVYVF9OT0RFIiwiQ09NTUVOVF9OT0RFIiwiRE9DVU1FTlRfTk9ERSIsIkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7QUFPQTs7OztBQUlPLElBQU1BLHNDQUFlLENBQXJCO0FBQ0EsSUFBTUMsZ0NBQVksQ0FBbEI7QUFDQSxJQUFNQyxzQ0FBZSxDQUFyQjtBQUNBLElBQU1DLHdDQUFnQixDQUF0QjtBQUNBLElBQU1DLDBEQUF5QixFQUEvQiIsImZpbGUiOiJIVE1MTm9kZVR5cGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKipcbiAqIEhUTUwgbm9kZVR5cGUgdmFsdWVzIHRoYXQgcmVwcmVzZW50IHRoZSB0eXBlIG9mIHRoZSBub2RlXG4gKi9cblxuZXhwb3J0IGNvbnN0IEVMRU1FTlRfTk9ERSA9IDE7XG5leHBvcnQgY29uc3QgVEVYVF9OT0RFID0gMztcbmV4cG9ydCBjb25zdCBDT01NRU5UX05PREUgPSA4O1xuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX05PREUgPSA5O1xuZXhwb3J0IGNvbnN0IERPQ1VNRU5UX0ZSQUdNRU5UX05PREUgPSAxMTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _checkPropTypes = require('prop-types/checkPropTypes');\n\nvar _checkPropTypes2 = _interopRequireDefault(_checkPropTypes);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ReactControlledValuePropTypes = {\n  checkPropTypes: null\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    */\n\nif (__DEV__) {\n  var hasReadOnlyValue = {\n    button: true,\n    checkbox: true,\n    image: true,\n    hidden: true,\n    radio: true,\n    reset: true,\n    submit: true\n  };\n\n  var propTypes = {\n    value: function value(props, propName, componentName) {\n      if (!props[propName] || hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled) {\n        return null;\n      }\n      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    },\n    checked: function checked(props, propName, componentName) {\n      if (!props[propName] || props.onChange || props.readOnly || props.disabled) {\n        return null;\n      }\n      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');\n    }\n  };\n\n  /**\n   * Provide a linked `value` attribute for controlled forms. You should not use\n   * this outside of the ReactDOM controlled form components.\n   */\n  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props, getStack) {\n    (0, _checkPropTypes2.default)(propTypes, props, 'prop', tagName, getStack);\n  };\n}\n\nexports.default = ReactControlledValuePropTypes;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9SZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcy5qcyJdLCJuYW1lcyI6WyJSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcyIsImNoZWNrUHJvcFR5cGVzIiwiX19ERVZfXyIsImhhc1JlYWRPbmx5VmFsdWUiLCJidXR0b24iLCJjaGVja2JveCIsImltYWdlIiwiaGlkZGVuIiwicmFkaW8iLCJyZXNldCIsInN1Ym1pdCIsInByb3BUeXBlcyIsInZhbHVlIiwicHJvcHMiLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJ0eXBlIiwib25DaGFuZ2UiLCJyZWFkT25seSIsImRpc2FibGVkIiwiRXJyb3IiLCJjaGVja2VkIiwidGFnTmFtZSIsImdldFN0YWNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFPQTs7Ozs7O0FBRUEsSUFBTUEsZ0NBQWdDO0FBQ3BDQyxrQkFBZ0I7QUFEb0IsQ0FBdEMsQyxDQVRBOzs7Ozs7O0FBYUEsSUFBSUMsT0FBSixFQUFhO0FBQ1gsTUFBTUMsbUJBQW1CO0FBQ3ZCQyxZQUFRLElBRGU7QUFFdkJDLGNBQVUsSUFGYTtBQUd2QkMsV0FBTyxJQUhnQjtBQUl2QkMsWUFBUSxJQUplO0FBS3ZCQyxXQUFPLElBTGdCO0FBTXZCQyxXQUFPLElBTmdCO0FBT3ZCQyxZQUFRO0FBUGUsR0FBekI7O0FBVUEsTUFBTUMsWUFBWTtBQUNoQkMsV0FBTyxlQUFTQyxLQUFULEVBQWdCQyxRQUFoQixFQUEwQkMsYUFBMUIsRUFBeUM7QUFDOUMsVUFDRSxDQUFDRixNQUFNQyxRQUFOLENBQUQsSUFDQVgsaUJBQWlCVSxNQUFNRyxJQUF2QixDQURBLElBRUFILE1BQU1JLFFBRk4sSUFHQUosTUFBTUssUUFITixJQUlBTCxNQUFNTSxRQUxSLEVBTUU7QUFDQSxlQUFPLElBQVA7QUFDRDtBQUNELGFBQU8sSUFBSUMsS0FBSixDQUNMLDREQUNFLDZEQURGLEdBRUUsNkRBRkYsR0FHRSxzQ0FKRyxDQUFQO0FBTUQsS0FqQmU7QUFrQmhCQyxhQUFTLGlCQUFTUixLQUFULEVBQWdCQyxRQUFoQixFQUEwQkMsYUFBMUIsRUFBeUM7QUFDaEQsVUFDRSxDQUFDRixNQUFNQyxRQUFOLENBQUQsSUFDQUQsTUFBTUksUUFETixJQUVBSixNQUFNSyxRQUZOLElBR0FMLE1BQU1NLFFBSlIsRUFLRTtBQUNBLGVBQU8sSUFBUDtBQUNEO0FBQ0QsYUFBTyxJQUFJQyxLQUFKLENBQ0wsOERBQ0UsNkRBREYsR0FFRSwrREFGRixHQUdFLHNDQUpHLENBQVA7QUFNRDtBQWpDZSxHQUFsQjs7QUFvQ0E7Ozs7QUFJQXBCLGdDQUE4QkMsY0FBOUIsR0FBK0MsVUFDN0NxQixPQUQ2QyxFQUU3Q1QsS0FGNkMsRUFHN0NVLFFBSDZDLEVBSTdDO0FBQ0Esa0NBQWVaLFNBQWYsRUFBMEJFLEtBQTFCLEVBQWlDLE1BQWpDLEVBQXlDUyxPQUF6QyxFQUFrREMsUUFBbEQ7QUFDRCxHQU5EO0FBT0Q7O2tCQUVjdkIsNkIiLCJmaWxlIjoiUmVhY3RDb250cm9sbGVkVmFsdWVQcm9wVHlwZXMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgY2hlY2tQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcy9jaGVja1Byb3BUeXBlcyc7XG5cbmNvbnN0IFJlYWN0Q29udHJvbGxlZFZhbHVlUHJvcFR5cGVzID0ge1xuICBjaGVja1Byb3BUeXBlczogbnVsbCxcbn07XG5cbmlmIChfX0RFVl9fKSB7XG4gIGNvbnN0IGhhc1JlYWRPbmx5VmFsdWUgPSB7XG4gICAgYnV0dG9uOiB0cnVlLFxuICAgIGNoZWNrYm94OiB0cnVlLFxuICAgIGltYWdlOiB0cnVlLFxuICAgIGhpZGRlbjogdHJ1ZSxcbiAgICByYWRpbzogdHJ1ZSxcbiAgICByZXNldDogdHJ1ZSxcbiAgICBzdWJtaXQ6IHRydWUsXG4gIH07XG5cbiAgY29uc3QgcHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBmdW5jdGlvbihwcm9wcywgcHJvcE5hbWUsIGNvbXBvbmVudE5hbWUpIHtcbiAgICAgIGlmIChcbiAgICAgICAgIXByb3BzW3Byb3BOYW1lXSB8fFxuICAgICAgICBoYXNSZWFkT25seVZhbHVlW3Byb3BzLnR5cGVdIHx8XG4gICAgICAgIHByb3BzLm9uQ2hhbmdlIHx8XG4gICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgIHByb3BzLmRpc2FibGVkXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAnWW91IHByb3ZpZGVkIGEgYHZhbHVlYCBwcm9wIHRvIGEgZm9ybSBmaWVsZCB3aXRob3V0IGFuICcgK1xuICAgICAgICAgICdgb25DaGFuZ2VgIGhhbmRsZXIuIFRoaXMgd2lsbCByZW5kZXIgYSByZWFkLW9ubHkgZmllbGQuIElmICcgK1xuICAgICAgICAgICd0aGUgZmllbGQgc2hvdWxkIGJlIG11dGFibGUgdXNlIGBkZWZhdWx0VmFsdWVgLiBPdGhlcndpc2UsICcgK1xuICAgICAgICAgICdzZXQgZWl0aGVyIGBvbkNoYW5nZWAgb3IgYHJlYWRPbmx5YC4nLFxuICAgICAgKTtcbiAgICB9LFxuICAgIGNoZWNrZWQ6IGZ1bmN0aW9uKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSkge1xuICAgICAgaWYgKFxuICAgICAgICAhcHJvcHNbcHJvcE5hbWVdIHx8XG4gICAgICAgIHByb3BzLm9uQ2hhbmdlIHx8XG4gICAgICAgIHByb3BzLnJlYWRPbmx5IHx8XG4gICAgICAgIHByb3BzLmRpc2FibGVkXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAnWW91IHByb3ZpZGVkIGEgYGNoZWNrZWRgIHByb3AgdG8gYSBmb3JtIGZpZWxkIHdpdGhvdXQgYW4gJyArXG4gICAgICAgICAgJ2BvbkNoYW5nZWAgaGFuZGxlci4gVGhpcyB3aWxsIHJlbmRlciBhIHJlYWQtb25seSBmaWVsZC4gSWYgJyArXG4gICAgICAgICAgJ3RoZSBmaWVsZCBzaG91bGQgYmUgbXV0YWJsZSB1c2UgYGRlZmF1bHRDaGVja2VkYC4gT3RoZXJ3aXNlLCAnICtcbiAgICAgICAgICAnc2V0IGVpdGhlciBgb25DaGFuZ2VgIG9yIGByZWFkT25seWAuJyxcbiAgICAgICk7XG4gICAgfSxcbiAgfTtcblxuICAvKipcbiAgICogUHJvdmlkZSBhIGxpbmtlZCBgdmFsdWVgIGF0dHJpYnV0ZSBmb3IgY29udHJvbGxlZCBmb3Jtcy4gWW91IHNob3VsZCBub3QgdXNlXG4gICAqIHRoaXMgb3V0c2lkZSBvZiB0aGUgUmVhY3RET00gY29udHJvbGxlZCBmb3JtIGNvbXBvbmVudHMuXG4gICAqL1xuICBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcy5jaGVja1Byb3BUeXBlcyA9IGZ1bmN0aW9uKFxuICAgIHRhZ05hbWUsXG4gICAgcHJvcHMsXG4gICAgZ2V0U3RhY2ssXG4gICkge1xuICAgIGNoZWNrUHJvcFR5cGVzKHByb3BUeXBlcywgcHJvcHMsICdwcm9wJywgdGFnTmFtZSwgZ2V0U3RhY2spO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdENvbnRyb2xsZWRWYWx1ZVByb3BUeXBlcztcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateProperties = validateProperties;\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _DOMProperty = require('./DOMProperty');\n\nvar _isCustomComponent = require('./isCustomComponent');\n\nvar _isCustomComponent2 = _interopRequireDefault(_isCustomComponent);\n\nvar _validAriaProperties = require('./validAriaProperties');\n\nvar _validAriaProperties2 = _interopRequireDefault(_validAriaProperties);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar warnedProperties = {}; /**\n                            * Copyright (c) 2013-present, Facebook, Inc.\n                            *\n                            * This source code is licensed under the MIT license found in the\n                            * LICENSE file in the root directory of this source tree.\n                            */\n\nvar rARIA = new RegExp('^(aria)-[' + _DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\nvar rARIACamel = new RegExp('^(aria)[A-Z][' + _DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction getStackAddendum() {\n  var stack = _ReactGlobalSharedState.ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\nfunction validateProperty(tagName, name) {\n  if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n    return true;\n  }\n\n  if (rARIACamel.test(name)) {\n    var ariaName = 'aria-' + name.slice(4).toLowerCase();\n    var correctName = _validAriaProperties2.default.hasOwnProperty(ariaName) ? ariaName : null;\n\n    // If this is an aria-* attribute, but is not listed in the known DOM\n    // DOM properties, then it is an invalid aria-* attribute.\n    if (correctName == null) {\n      (0, _warning2.default)(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.%s', name, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n    // aria-* attributes should be lowercase; suggest the lowercase version.\n    if (name !== correctName) {\n      (0, _warning2.default)(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?%s', name, correctName, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n  }\n\n  if (rARIA.test(name)) {\n    var lowerCasedName = name.toLowerCase();\n    var standardName = _validAriaProperties2.default.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;\n\n    // If this is an aria-* attribute, but is not listed in the known DOM\n    // DOM properties, then it is an invalid aria-* attribute.\n    if (standardName == null) {\n      warnedProperties[name] = true;\n      return false;\n    }\n    // aria-* attributes should be lowercase; suggest the lowercase version.\n    if (name !== standardName) {\n      (0, _warning2.default)(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n  }\n\n  return true;\n}\n\nfunction warnInvalidARIAProps(type, props) {\n  var invalidProps = [];\n\n  for (var key in props) {\n    var isValid = validateProperty(type, key);\n    if (!isValid) {\n      invalidProps.push(key);\n    }\n  }\n\n  var unknownPropString = invalidProps.map(function (prop) {\n    return '`' + prop + '`';\n  }).join(', ');\n\n  if (invalidProps.length === 1) {\n    (0, _warning2.default)(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());\n  } else if (invalidProps.length > 1) {\n    (0, _warning2.default)(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop%s', unknownPropString, type, getStackAddendum());\n  }\n}\n\nfunction validateProperties(type, props) {\n  if ((0, _isCustomComponent2.default)(type, props)) {\n    return;\n  }\n  warnInvalidARIAProps(type, props);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateProperties = validateProperties;\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar didWarnValueNull = false;\n\nfunction getStackAddendum() {\n  var stack = _ReactGlobalSharedState.ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\nfunction validateProperties(type, props) {\n  if (type !== 'input' && type !== 'textarea' && type !== 'select') {\n    return;\n  }\n\n  if (props != null && props.value === null && !didWarnValueNull) {\n    didWarnValueNull = true;\n    if (type === 'select' && props.multiple) {\n      (0, _warning2.default)(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.%s', type, getStackAddendum());\n    } else {\n      (0, _warning2.default)(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.%s', type, getStackAddendum());\n    }\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9SZWFjdERPTU51bGxJbnB1dFZhbHVlUHJvcEhvb2suanMiXSwibmFtZXMiOlsidmFsaWRhdGVQcm9wZXJ0aWVzIiwiZGlkV2FyblZhbHVlTnVsbCIsImdldFN0YWNrQWRkZW5kdW0iLCJzdGFjayIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUiLCJ0eXBlIiwicHJvcHMiLCJ2YWx1ZSIsIm11bHRpcGxlIl0sIm1hcHBpbmdzIjoiOzs7OztRQWlCZ0JBLGtCLEdBQUFBLGtCOztBQVZoQjs7QUFDQTs7Ozs7O0FBUkE7Ozs7Ozs7QUFVQSxJQUFJQyxtQkFBbUIsS0FBdkI7O0FBRUEsU0FBU0MsZ0JBQVQsR0FBNEI7QUFDMUIsTUFBTUMsUUFBUUMsK0NBQXVCRixnQkFBdkIsRUFBZDtBQUNBLFNBQU9DLFNBQVMsSUFBVCxHQUFnQkEsS0FBaEIsR0FBd0IsRUFBL0I7QUFDRDs7QUFFTSxTQUFTSCxrQkFBVCxDQUE0QkssSUFBNUIsRUFBa0NDLEtBQWxDLEVBQXlDO0FBQzlDLE1BQUlELFNBQVMsT0FBVCxJQUFvQkEsU0FBUyxVQUE3QixJQUEyQ0EsU0FBUyxRQUF4RCxFQUFrRTtBQUNoRTtBQUNEOztBQUVELE1BQUlDLFNBQVMsSUFBVCxJQUFpQkEsTUFBTUMsS0FBTixLQUFnQixJQUFqQyxJQUF5QyxDQUFDTixnQkFBOUMsRUFBZ0U7QUFDOURBLHVCQUFtQixJQUFuQjtBQUNBLFFBQUlJLFNBQVMsUUFBVCxJQUFxQkMsTUFBTUUsUUFBL0IsRUFBeUM7QUFDdkMsNkJBQ0UsS0FERixFQUVFLDhDQUNFLGlFQURGLEdBRUUsc0VBSkosRUFLRUgsSUFMRixFQU1FSCxrQkFORjtBQVFELEtBVEQsTUFTTztBQUNMLDZCQUNFLEtBREYsRUFFRSw4Q0FDRSx1RUFERixHQUVFLGdDQUpKLEVBS0VHLElBTEYsRUFNRUgsa0JBTkY7QUFRRDtBQUNGO0FBQ0YiLCJmaWxlIjoiUmVhY3RET01OdWxsSW5wdXRWYWx1ZVByb3BIb29rLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtSZWFjdERlYnVnQ3VycmVudEZyYW1lfSBmcm9tICdzaGFyZWQvUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICdmYmpzL2xpYi93YXJuaW5nJztcblxubGV0IGRpZFdhcm5WYWx1ZU51bGwgPSBmYWxzZTtcblxuZnVuY3Rpb24gZ2V0U3RhY2tBZGRlbmR1bSgpIHtcbiAgY29uc3Qgc3RhY2sgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldFN0YWNrQWRkZW5kdW0oKTtcbiAgcmV0dXJuIHN0YWNrICE9IG51bGwgPyBzdGFjayA6ICcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVQcm9wZXJ0aWVzKHR5cGUsIHByb3BzKSB7XG4gIGlmICh0eXBlICE9PSAnaW5wdXQnICYmIHR5cGUgIT09ICd0ZXh0YXJlYScgJiYgdHlwZSAhPT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAocHJvcHMgIT0gbnVsbCAmJiBwcm9wcy52YWx1ZSA9PT0gbnVsbCAmJiAhZGlkV2FyblZhbHVlTnVsbCkge1xuICAgIGRpZFdhcm5WYWx1ZU51bGwgPSB0cnVlO1xuICAgIGlmICh0eXBlID09PSAnc2VsZWN0JyAmJiBwcm9wcy5tdWx0aXBsZSkge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdgdmFsdWVgIHByb3Agb24gYCVzYCBzaG91bGQgbm90IGJlIG51bGwuICcgK1xuICAgICAgICAgICdDb25zaWRlciB1c2luZyBhbiBlbXB0eSBhcnJheSB3aGVuIGBtdWx0aXBsZWAgaXMgc2V0IHRvIGB0cnVlYCAnICtcbiAgICAgICAgICAndG8gY2xlYXIgdGhlIGNvbXBvbmVudCBvciBgdW5kZWZpbmVkYCBmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJXMnLFxuICAgICAgICB0eXBlLFxuICAgICAgICBnZXRTdGFja0FkZGVuZHVtKCksXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ2B2YWx1ZWAgcHJvcCBvbiBgJXNgIHNob3VsZCBub3QgYmUgbnVsbC4gJyArXG4gICAgICAgICAgJ0NvbnNpZGVyIHVzaW5nIGFuIGVtcHR5IHN0cmluZyB0byBjbGVhciB0aGUgY29tcG9uZW50IG9yIGB1bmRlZmluZWRgICcgK1xuICAgICAgICAgICdmb3IgdW5jb250cm9sbGVkIGNvbXBvbmVudHMuJXMnLFxuICAgICAgICB0eXBlLFxuICAgICAgICBnZXRTdGFja0FkZGVuZHVtKCksXG4gICAgICApO1xuICAgIH1cbiAgfVxufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nexports.validateProperties = validateProperties;\n\nvar _EventPluginRegistry = require('events/EventPluginRegistry');\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _DOMProperty = require('./DOMProperty');\n\nvar _isCustomComponent = require('./isCustomComponent');\n\nvar _isCustomComponent2 = _interopRequireDefault(_isCustomComponent);\n\nvar _possibleStandardNames = require('./possibleStandardNames');\n\nvar _possibleStandardNames2 = _interopRequireDefault(_possibleStandardNames);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getStackAddendum() {\n  var stack = _ReactGlobalSharedState.ReactDebugCurrentFrame.getStackAddendum();\n  return stack != null ? stack : '';\n}\n\nvar validateProperty = function validateProperty() {};\n\nif (__DEV__) {\n  var warnedProperties = {};\n  var _hasOwnProperty = Object.prototype.hasOwnProperty;\n  var EVENT_NAME_REGEX = /^on./;\n  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;\n  var rARIA = new RegExp('^(aria)-[' + _DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\n  var rARIACamel = new RegExp('^(aria)[A-Z][' + _DOMProperty.ATTRIBUTE_NAME_CHAR + ']*$');\n\n  validateProperty = function validateProperty(tagName, name, value, canUseEventSystem) {\n    if (_hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {\n      return true;\n    }\n\n    var lowerCasedName = name.toLowerCase();\n    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {\n      (0, _warning2.default)(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // We can't rely on the event system being injected on the server.\n    if (canUseEventSystem) {\n      if (_EventPluginRegistry.registrationNameModules.hasOwnProperty(name)) {\n        return true;\n      }\n      var registrationName = _EventPluginRegistry.possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? _EventPluginRegistry.possibleRegistrationNames[lowerCasedName] : null;\n      if (registrationName != null) {\n        (0, _warning2.default)(false, 'Invalid event handler property `%s`. Did you mean `%s`?%s', name, registrationName, getStackAddendum());\n        warnedProperties[name] = true;\n        return true;\n      }\n      if (EVENT_NAME_REGEX.test(name)) {\n        (0, _warning2.default)(false, 'Unknown event handler property `%s`. It will be ignored.%s', name, getStackAddendum());\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (EVENT_NAME_REGEX.test(name)) {\n      // If no event plugins have been injected, we are in a server environment.\n      // So we can't tell if the event name is correct for sure, but we can filter\n      // out known bad ones like `onclick`. We can't suggest a specific replacement though.\n      if (INVALID_EVENT_NAME_REGEX.test(name)) {\n        (0, _warning2.default)(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.%s', name, getStackAddendum());\n      }\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Let the ARIA attribute hook validate ARIA attributes\n    if (rARIA.test(name) || rARIACamel.test(name)) {\n      return true;\n    }\n\n    if (lowerCasedName === 'innerhtml') {\n      (0, _warning2.default)(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'aria') {\n      (0, _warning2.default)(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {\n      (0, _warning2.default)(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.%s', typeof value === 'undefined' ? 'undefined' : _typeof(value), getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'number' && isNaN(value)) {\n      (0, _warning2.default)(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.%s', name, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    var propertyInfo = (0, _DOMProperty.getPropertyInfo)(name);\n    var isReserved = propertyInfo !== null && propertyInfo.type === _DOMProperty.RESERVED;\n\n    // Known attributes should match the casing specified in the property config.\n    if (_possibleStandardNames2.default.hasOwnProperty(lowerCasedName)) {\n      var standardName = _possibleStandardNames2.default[lowerCasedName];\n      if (standardName !== name) {\n        (0, _warning2.default)(false, 'Invalid DOM property `%s`. Did you mean `%s`?%s', name, standardName, getStackAddendum());\n        warnedProperties[name] = true;\n        return true;\n      }\n    } else if (!isReserved && name !== lowerCasedName) {\n      // Unknown attributes should have lowercase casing since that's how they\n      // will be cased anyway with server rendering.\n      (0, _warning2.default)(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.%s', name, lowerCasedName, getStackAddendum());\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    if (typeof value === 'boolean' && (0, _DOMProperty.shouldRemoveAttributeWithWarning)(name, value, propertyInfo, false)) {\n      if (value) {\n        (0, _warning2.default)(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.%s', value, name, name, value, name, getStackAddendum());\n      } else {\n        (0, _warning2.default)(false, 'Received `%s` for a non-boolean attribute `%s`.\\n\\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s=\"%s\" or %s={value.toString()}.\\n\\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.%s', value, name, name, value, name, name, name, getStackAddendum());\n      }\n      warnedProperties[name] = true;\n      return true;\n    }\n\n    // Now that we've validated casing, do not validate\n    // data types for reserved props\n    if (isReserved) {\n      return true;\n    }\n\n    // Warn when a known attribute is a bad type\n    if ((0, _DOMProperty.shouldRemoveAttributeWithWarning)(name, value, propertyInfo, false)) {\n      warnedProperties[name] = true;\n      return false;\n    }\n\n    return true;\n  };\n}\n\nvar warnUnknownProperties = function warnUnknownProperties(type, props, canUseEventSystem) {\n  var unknownProps = [];\n  for (var key in props) {\n    var isValid = validateProperty(type, key, props[key], canUseEventSystem);\n    if (!isValid) {\n      unknownProps.push(key);\n    }\n  }\n\n  var unknownPropString = unknownProps.map(function (prop) {\n    return '`' + prop + '`';\n  }).join(', ');\n  if (unknownProps.length === 1) {\n    (0, _warning2.default)(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum());\n  } else if (unknownProps.length > 1) {\n    (0, _warning2.default)(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior%s', unknownPropString, type, getStackAddendum());\n  }\n};\n\nfunction validateProperties(type, props, canUseEventSystem) {\n  if ((0, _isCustomComponent2.default)(type, props)) {\n    return;\n  }\n  warnUnknownProperties(type, props, canUseEventSystem);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _voidElementTags = require('./voidElementTags');\n\nvar _voidElementTags2 = _interopRequireDefault(_voidElementTags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HTML = '__html';\n\nfunction assertValidProps(tag, props, getStack) {\n  if (!props) {\n    return;\n  }\n  // Note the use of `==` which checks for null or undefined.\n  if (_voidElementTags2.default[tag]) {\n    (0, _invariant2.default)(props.children == null && props.dangerouslySetInnerHTML == null, '%s is a void element tag and must neither have `children` nor ' + 'use `dangerouslySetInnerHTML`.%s', tag, getStack());\n  }\n  if (props.dangerouslySetInnerHTML != null) {\n    (0, _invariant2.default)(props.children == null, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.');\n    (0, _invariant2.default)(_typeof(props.dangerouslySetInnerHTML) === 'object' && HTML in props.dangerouslySetInnerHTML, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. ' + 'Please visit https://fb.me/react-invariant-dangerously-set-inner-html ' + 'for more information.');\n  }\n  if (__DEV__) {\n    (0, _warning2.default)(props.suppressContentEditableWarning || !props.contentEditable || props.children == null, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.%s', getStack());\n  }\n  (0, _invariant2.default)(props.style == null || _typeof(props.style) === 'object', 'The `style` prop expects a mapping from style properties to values, ' + \"not a string. For example, style={{marginRight: spacing + 'em'}} when \" + 'using JSX.%s', getStack());\n}\n\nexports.default = assertValidProps;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9hc3NlcnRWYWxpZFByb3BzLmpzIl0sIm5hbWVzIjpbIkhUTUwiLCJhc3NlcnRWYWxpZFByb3BzIiwidGFnIiwicHJvcHMiLCJnZXRTdGFjayIsInZvaWRFbGVtZW50VGFncyIsImNoaWxkcmVuIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJfX0RFVl9fIiwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIiwiY29udGVudEVkaXRhYmxlIiwic3R5bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs4UUFBQTs7Ozs7OztBQU9BOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBRUEsSUFBTUEsT0FBTyxRQUFiOztBQUVBLFNBQVNDLGdCQUFULENBQTBCQyxHQUExQixFQUF1Q0MsS0FBdkMsRUFBdURDLFFBQXZELEVBQStFO0FBQzdFLE1BQUksQ0FBQ0QsS0FBTCxFQUFZO0FBQ1Y7QUFDRDtBQUNEO0FBQ0EsTUFBSUUsMEJBQWdCSCxHQUFoQixDQUFKLEVBQTBCO0FBQ3hCLDZCQUNFQyxNQUFNRyxRQUFOLElBQWtCLElBQWxCLElBQTBCSCxNQUFNSSx1QkFBTixJQUFpQyxJQUQ3RCxFQUVFLG1FQUNFLGtDQUhKLEVBSUVMLEdBSkYsRUFLRUUsVUFMRjtBQU9EO0FBQ0QsTUFBSUQsTUFBTUksdUJBQU4sSUFBaUMsSUFBckMsRUFBMkM7QUFDekMsNkJBQ0VKLE1BQU1HLFFBQU4sSUFBa0IsSUFEcEIsRUFFRSxvRUFGRjtBQUlBLDZCQUNFLFFBQU9ILE1BQU1JLHVCQUFiLE1BQXlDLFFBQXpDLElBQ0VQLFFBQVFHLE1BQU1JLHVCQUZsQixFQUdFLDBFQUNFLHdFQURGLEdBRUUsdUJBTEo7QUFPRDtBQUNELE1BQUlDLE9BQUosRUFBYTtBQUNYLDJCQUNFTCxNQUFNTSw4QkFBTixJQUNFLENBQUNOLE1BQU1PLGVBRFQsSUFFRVAsTUFBTUcsUUFBTixJQUFrQixJQUh0QixFQUlFLHlFQUNFLGlFQURGLEdBRUUsK0RBRkYsR0FHRSw2QkFQSixFQVFFRixVQVJGO0FBVUQ7QUFDRCwyQkFDRUQsTUFBTVEsS0FBTixJQUFlLElBQWYsSUFBdUIsUUFBT1IsTUFBTVEsS0FBYixNQUF1QixRQURoRCxFQUVFLHlFQUNFLHdFQURGLEdBRUUsY0FKSixFQUtFUCxVQUxGO0FBT0Q7O2tCQUVjSCxnQiIsImZpbGUiOiJhc3NlcnRWYWxpZFByb3BzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnZmJqcy9saWIvd2FybmluZyc7XG5cbmltcG9ydCB2b2lkRWxlbWVudFRhZ3MgZnJvbSAnLi92b2lkRWxlbWVudFRhZ3MnO1xuXG5jb25zdCBIVE1MID0gJ19faHRtbCc7XG5cbmZ1bmN0aW9uIGFzc2VydFZhbGlkUHJvcHModGFnOiBzdHJpbmcsIHByb3BzOiA/T2JqZWN0LCBnZXRTdGFjazogKCkgPT4gc3RyaW5nKSB7XG4gIGlmICghcHJvcHMpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gTm90ZSB0aGUgdXNlIG9mIGA9PWAgd2hpY2ggY2hlY2tzIGZvciBudWxsIG9yIHVuZGVmaW5lZC5cbiAgaWYgKHZvaWRFbGVtZW50VGFnc1t0YWddKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCAmJiBwcm9wcy5kYW5nZXJvdXNseVNldElubmVySFRNTCA9PSBudWxsLFxuICAgICAgJyVzIGlzIGEgdm9pZCBlbGVtZW50IHRhZyBhbmQgbXVzdCBuZWl0aGVyIGhhdmUgYGNoaWxkcmVuYCBub3IgJyArXG4gICAgICAgICd1c2UgYGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYC4lcycsXG4gICAgICB0YWcsXG4gICAgICBnZXRTdGFjaygpLFxuICAgICk7XG4gIH1cbiAgaWYgKHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MICE9IG51bGwpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBwcm9wcy5jaGlsZHJlbiA9PSBudWxsLFxuICAgICAgJ0NhbiBvbmx5IHNldCBvbmUgb2YgYGNoaWxkcmVuYCBvciBgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxgLicsXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgPT09ICdvYmplY3QnICYmXG4gICAgICAgIEhUTUwgaW4gcHJvcHMuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwsXG4gICAgICAnYHByb3BzLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MYCBtdXN0IGJlIGluIHRoZSBmb3JtIGB7X19odG1sOiAuLi59YC4gJyArXG4gICAgICAgICdQbGVhc2UgdmlzaXQgaHR0cHM6Ly9mYi5tZS9yZWFjdC1pbnZhcmlhbnQtZGFuZ2Vyb3VzbHktc2V0LWlubmVyLWh0bWwgJyArXG4gICAgICAgICdmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgICk7XG4gIH1cbiAgaWYgKF9fREVWX18pIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcHJvcHMuc3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nIHx8XG4gICAgICAgICFwcm9wcy5jb250ZW50RWRpdGFibGUgfHxcbiAgICAgICAgcHJvcHMuY2hpbGRyZW4gPT0gbnVsbCxcbiAgICAgICdBIGNvbXBvbmVudCBpcyBgY29udGVudEVkaXRhYmxlYCBhbmQgY29udGFpbnMgYGNoaWxkcmVuYCBtYW5hZ2VkIGJ5ICcgK1xuICAgICAgICAnUmVhY3QuIEl0IGlzIG5vdyB5b3VyIHJlc3BvbnNpYmlsaXR5IHRvIGd1YXJhbnRlZSB0aGF0IG5vbmUgb2YgJyArXG4gICAgICAgICd0aG9zZSBub2RlcyBhcmUgdW5leHBlY3RlZGx5IG1vZGlmaWVkIG9yIGR1cGxpY2F0ZWQuIFRoaXMgaXMgJyArXG4gICAgICAgICdwcm9iYWJseSBub3QgaW50ZW50aW9uYWwuJXMnLFxuICAgICAgZ2V0U3RhY2soKSxcbiAgICApO1xuICB9XG4gIGludmFyaWFudChcbiAgICBwcm9wcy5zdHlsZSA9PSBudWxsIHx8IHR5cGVvZiBwcm9wcy5zdHlsZSA9PT0gJ29iamVjdCcsXG4gICAgJ1RoZSBgc3R5bGVgIHByb3AgZXhwZWN0cyBhIG1hcHBpbmcgZnJvbSBzdHlsZSBwcm9wZXJ0aWVzIHRvIHZhbHVlcywgJyArXG4gICAgICBcIm5vdCBhIHN0cmluZy4gRm9yIGV4YW1wbGUsIHN0eWxlPXt7bWFyZ2luUmlnaHQ6IHNwYWNpbmcgKyAnZW0nfX0gd2hlbiBcIiArXG4gICAgICAndXNpbmcgSlNYLiVzJyxcbiAgICBnZXRTdGFjaygpLFxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3NlcnRWYWxpZFByb3BzO1xuIl19","'use strict';\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n(0, _invariant2.default)(_react2.default, 'ReactDOM was loaded before React. Make sure you load ' + 'the React package before loading ReactDOM.');\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9jaGVja1JlYWN0LmpzIl0sIm5hbWVzIjpbIlJlYWN0Il0sIm1hcHBpbmdzIjoiOztBQVNBOzs7O0FBQ0E7Ozs7OztBQVZBOzs7Ozs7Ozs7QUFZQSx5QkFDRUEsZUFERixFQUVFLDBEQUNFLDRDQUhKIiwiZmlsZSI6ImNoZWNrUmVhY3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ZianMvbGliL2ludmFyaWFudCc7XG5cbmludmFyaWFudChcbiAgUmVhY3QsXG4gICdSZWFjdERPTSB3YXMgbG9hZGVkIGJlZm9yZSBSZWFjdC4gTWFrZSBzdXJlIHlvdSBsb2FkICcgK1xuICAgICd0aGUgUmVhY3QgcGFja2FnZSBiZWZvcmUgbG9hZGluZyBSZWFjdERPTS4nLFxuKTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* globals MSApp */\n\n/**\n * Create a function which has 'unsafe' privileges (required by windows8 apps)\n */\nvar createMicrosoftUnsafeLocalFunction = function createMicrosoftUnsafeLocalFunction(func) {\n  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {\n    return function (arg0, arg1, arg2, arg3) {\n      MSApp.execUnsafeLocalFunction(function () {\n        return func(arg0, arg1, arg2, arg3);\n      });\n    };\n  } else {\n    return func;\n  }\n};\n\nexports.default = createMicrosoftUnsafeLocalFunction;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9jcmVhdGVNaWNyb3NvZnRVbnNhZmVMb2NhbEZ1bmN0aW9uLmpzIl0sIm5hbWVzIjpbImNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24iLCJmdW5jIiwiTVNBcHAiLCJleGVjVW5zYWZlTG9jYWxGdW5jdGlvbiIsImFyZzAiLCJhcmcxIiwiYXJnMiIsImFyZzMiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7Ozs7Ozs7QUFPQTs7QUFFQTs7O0FBR0EsSUFBTUEscUNBQXFDLFNBQXJDQSxrQ0FBcUMsQ0FBU0MsSUFBVCxFQUFlO0FBQ3hELE1BQUksT0FBT0MsS0FBUCxLQUFpQixXQUFqQixJQUFnQ0EsTUFBTUMsdUJBQTFDLEVBQW1FO0FBQ2pFLFdBQU8sVUFBU0MsSUFBVCxFQUFlQyxJQUFmLEVBQXFCQyxJQUFyQixFQUEyQkMsSUFBM0IsRUFBaUM7QUFDdENMLFlBQU1DLHVCQUFOLENBQThCLFlBQVc7QUFDdkMsZUFBT0YsS0FBS0csSUFBTCxFQUFXQyxJQUFYLEVBQWlCQyxJQUFqQixFQUF1QkMsSUFBdkIsQ0FBUDtBQUNELE9BRkQ7QUFHRCxLQUpEO0FBS0QsR0FORCxNQU1PO0FBQ0wsV0FBT04sSUFBUDtBQUNEO0FBQ0YsQ0FWRDs7a0JBWWVELGtDIiwiZmlsZSI6ImNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKiBnbG9iYWxzIE1TQXBwICovXG5cbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gd2hpY2ggaGFzICd1bnNhZmUnIHByaXZpbGVnZXMgKHJlcXVpcmVkIGJ5IHdpbmRvd3M4IGFwcHMpXG4gKi9cbmNvbnN0IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb24gPSBmdW5jdGlvbihmdW5jKSB7XG4gIGlmICh0eXBlb2YgTVNBcHAgIT09ICd1bmRlZmluZWQnICYmIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyZzAsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgICAgIE1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gZnVuYyhhcmcwLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZU1pY3Jvc29mdFVuc2FmZUxvY2FsRnVuY3Rpb247XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _CSSProperty = require('./CSSProperty');\n\n/**\n * Convert a value into the proper css writable value. The style name `name`\n * should be logical (no hyphens), as specified\n * in `CSSProperty.isUnitlessNumber`.\n *\n * @param {string} name CSS property name such as `topMargin`.\n * @param {*} value CSS property value such as `10px`.\n * @return {string} Normalized style value with dimensions applied.\n */\nfunction dangerousStyleValue(name, value, isCustomProperty) {\n  // Note that we've removed escapeTextForBrowser() calls here since the\n  // whole string will be escaped when the attribute is injected into\n  // the markup. If you provide unsafe user data here they can inject\n  // arbitrary CSS which may be problematic (I couldn't repro this):\n  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/\n  // This is not an XSS hole but instead a potential CSS injection issue\n  // which has lead to a greater discussion about how we're going to\n  // trust URLs moving forward. See #2115901\n\n  var isEmpty = value == null || typeof value === 'boolean' || value === '';\n  if (isEmpty) {\n    return '';\n  }\n\n  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(_CSSProperty.isUnitlessNumber.hasOwnProperty(name) && _CSSProperty.isUnitlessNumber[name])) {\n    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers\n  }\n\n  return ('' + value).trim();\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   */\n\nexports.default = dangerousStyleValue;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9kYW5nZXJvdXNTdHlsZVZhbHVlLmpzIl0sIm5hbWVzIjpbImRhbmdlcm91c1N0eWxlVmFsdWUiLCJuYW1lIiwidmFsdWUiLCJpc0N1c3RvbVByb3BlcnR5IiwiaXNFbXB0eSIsImlzVW5pdGxlc3NOdW1iZXIiLCJoYXNPd25Qcm9wZXJ0eSIsInRyaW0iXSwibWFwcGluZ3MiOiI7Ozs7OztBQU9BOztBQUVBOzs7Ozs7Ozs7QUFTQSxTQUFTQSxtQkFBVCxDQUE2QkMsSUFBN0IsRUFBbUNDLEtBQW5DLEVBQTBDQyxnQkFBMUMsRUFBNEQ7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1DLFVBQVVGLFNBQVMsSUFBVCxJQUFpQixPQUFPQSxLQUFQLEtBQWlCLFNBQWxDLElBQStDQSxVQUFVLEVBQXpFO0FBQ0EsTUFBSUUsT0FBSixFQUFhO0FBQ1gsV0FBTyxFQUFQO0FBQ0Q7O0FBRUQsTUFDRSxDQUFDRCxnQkFBRCxJQUNBLE9BQU9ELEtBQVAsS0FBaUIsUUFEakIsSUFFQUEsVUFBVSxDQUZWLElBR0EsRUFBRUcsOEJBQWlCQyxjQUFqQixDQUFnQ0wsSUFBaEMsS0FBeUNJLDhCQUFpQkosSUFBakIsQ0FBM0MsQ0FKRixFQUtFO0FBQ0EsV0FBT0MsUUFBUSxJQUFmLENBREEsQ0FDcUI7QUFDdEI7O0FBRUQsU0FBTyxDQUFDLEtBQUtBLEtBQU4sRUFBYUssSUFBYixFQUFQO0FBQ0QsQyxDQTVDRDs7Ozs7OztrQkE4Q2VQLG1CIiwiZmlsZSI6ImRhbmdlcm91c1N0eWxlVmFsdWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQge2lzVW5pdGxlc3NOdW1iZXJ9IGZyb20gJy4vQ1NTUHJvcGVydHknO1xuXG4vKipcbiAqIENvbnZlcnQgYSB2YWx1ZSBpbnRvIHRoZSBwcm9wZXIgY3NzIHdyaXRhYmxlIHZhbHVlLiBUaGUgc3R5bGUgbmFtZSBgbmFtZWBcbiAqIHNob3VsZCBiZSBsb2dpY2FsIChubyBoeXBoZW5zKSwgYXMgc3BlY2lmaWVkXG4gKiBpbiBgQ1NTUHJvcGVydHkuaXNVbml0bGVzc051bWJlcmAuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgQ1NTIHByb3BlcnR5IG5hbWUgc3VjaCBhcyBgdG9wTWFyZ2luYC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQ1NTIHByb3BlcnR5IHZhbHVlIHN1Y2ggYXMgYDEwcHhgLlxuICogQHJldHVybiB7c3RyaW5nfSBOb3JtYWxpemVkIHN0eWxlIHZhbHVlIHdpdGggZGltZW5zaW9ucyBhcHBsaWVkLlxuICovXG5mdW5jdGlvbiBkYW5nZXJvdXNTdHlsZVZhbHVlKG5hbWUsIHZhbHVlLCBpc0N1c3RvbVByb3BlcnR5KSB7XG4gIC8vIE5vdGUgdGhhdCB3ZSd2ZSByZW1vdmVkIGVzY2FwZVRleHRGb3JCcm93c2VyKCkgY2FsbHMgaGVyZSBzaW5jZSB0aGVcbiAgLy8gd2hvbGUgc3RyaW5nIHdpbGwgYmUgZXNjYXBlZCB3aGVuIHRoZSBhdHRyaWJ1dGUgaXMgaW5qZWN0ZWQgaW50b1xuICAvLyB0aGUgbWFya3VwLiBJZiB5b3UgcHJvdmlkZSB1bnNhZmUgdXNlciBkYXRhIGhlcmUgdGhleSBjYW4gaW5qZWN0XG4gIC8vIGFyYml0cmFyeSBDU1Mgd2hpY2ggbWF5IGJlIHByb2JsZW1hdGljIChJIGNvdWxkbid0IHJlcHJvIHRoaXMpOlxuICAvLyBodHRwczovL3d3dy5vd2FzcC5vcmcvaW5kZXgucGhwL1hTU19GaWx0ZXJfRXZhc2lvbl9DaGVhdF9TaGVldFxuICAvLyBodHRwOi8vd3d3LnRoZXNwYW5uZXIuY28udWsvMjAwNy8xMS8yNi91bHRpbWF0ZS14c3MtY3NzLWluamVjdGlvbi9cbiAgLy8gVGhpcyBpcyBub3QgYW4gWFNTIGhvbGUgYnV0IGluc3RlYWQgYSBwb3RlbnRpYWwgQ1NTIGluamVjdGlvbiBpc3N1ZVxuICAvLyB3aGljaCBoYXMgbGVhZCB0byBhIGdyZWF0ZXIgZGlzY3Vzc2lvbiBhYm91dCBob3cgd2UncmUgZ29pbmcgdG9cbiAgLy8gdHJ1c3QgVVJMcyBtb3ZpbmcgZm9yd2FyZC4gU2VlICMyMTE1OTAxXG5cbiAgY29uc3QgaXNFbXB0eSA9IHZhbHVlID09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicgfHwgdmFsdWUgPT09ICcnO1xuICBpZiAoaXNFbXB0eSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuXG4gIGlmIChcbiAgICAhaXNDdXN0b21Qcm9wZXJ0eSAmJlxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSAhPT0gMCAmJlxuICAgICEoaXNVbml0bGVzc051bWJlci5oYXNPd25Qcm9wZXJ0eShuYW1lKSAmJiBpc1VuaXRsZXNzTnVtYmVyW25hbWVdKVxuICApIHtcbiAgICByZXR1cm4gdmFsdWUgKyAncHgnOyAvLyBQcmVzdW1lcyBpbXBsaWNpdCAncHgnIHN1ZmZpeCBmb3IgdW5pdGxlc3MgbnVtYmVyc1xuICB9XG5cbiAgcmV0dXJuICgnJyArIHZhbHVlKS50cmltKCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRhbmdlcm91c1N0eWxlVmFsdWU7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction isCustomComponent(tagName, props) {\n  if (tagName.indexOf('-') === -1) {\n    return typeof props.is === 'string';\n  }\n  switch (tagName) {\n    // These are reserved SVG and MathML elements.\n    // We don't mind this whitelist too much because we expect it to never grow.\n    // The alternative is to track the namespace in a few places which is convoluted.\n    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts\n    case 'annotation-xml':\n    case 'color-profile':\n    case 'font-face':\n    case 'font-face-src':\n    case 'font-face-uri':\n    case 'font-face-format':\n    case 'font-face-name':\n    case 'missing-glyph':\n      return false;\n    default:\n      return true;\n  }\n}\n\nexports.default = isCustomComponent;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9pc0N1c3RvbUNvbXBvbmVudC5qcyJdLCJuYW1lcyI6WyJpc0N1c3RvbUNvbXBvbmVudCIsInRhZ05hbWUiLCJwcm9wcyIsImluZGV4T2YiLCJpcyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTs7Ozs7Ozs7O0FBU0EsU0FBU0EsaUJBQVQsQ0FBMkJDLE9BQTNCLEVBQTRDQyxLQUE1QyxFQUEyRDtBQUN6RCxNQUFJRCxRQUFRRSxPQUFSLENBQWdCLEdBQWhCLE1BQXlCLENBQUMsQ0FBOUIsRUFBaUM7QUFDL0IsV0FBTyxPQUFPRCxNQUFNRSxFQUFiLEtBQW9CLFFBQTNCO0FBQ0Q7QUFDRCxVQUFRSCxPQUFSO0FBQ0U7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFLLGdCQUFMO0FBQ0EsU0FBSyxlQUFMO0FBQ0EsU0FBSyxXQUFMO0FBQ0EsU0FBSyxlQUFMO0FBQ0EsU0FBSyxlQUFMO0FBQ0EsU0FBSyxrQkFBTDtBQUNBLFNBQUssZ0JBQUw7QUFDQSxTQUFLLGVBQUw7QUFDRSxhQUFPLEtBQVA7QUFDRjtBQUNFLGFBQU8sSUFBUDtBQWZKO0FBaUJEOztrQkFFY0QsaUIiLCJmaWxlIjoiaXNDdXN0b21Db21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KHRhZ05hbWU6IHN0cmluZywgcHJvcHM6IE9iamVjdCkge1xuICBpZiAodGFnTmFtZS5pbmRleE9mKCctJykgPT09IC0xKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBwcm9wcy5pcyA9PT0gJ3N0cmluZyc7XG4gIH1cbiAgc3dpdGNoICh0YWdOYW1lKSB7XG4gICAgLy8gVGhlc2UgYXJlIHJlc2VydmVkIFNWRyBhbmQgTWF0aE1MIGVsZW1lbnRzLlxuICAgIC8vIFdlIGRvbid0IG1pbmQgdGhpcyB3aGl0ZWxpc3QgdG9vIG11Y2ggYmVjYXVzZSB3ZSBleHBlY3QgaXQgdG8gbmV2ZXIgZ3Jvdy5cbiAgICAvLyBUaGUgYWx0ZXJuYXRpdmUgaXMgdG8gdHJhY2sgdGhlIG5hbWVzcGFjZSBpbiBhIGZldyBwbGFjZXMgd2hpY2ggaXMgY29udm9sdXRlZC5cbiAgICAvLyBodHRwczovL3czYy5naXRodWIuaW8vd2ViY29tcG9uZW50cy9zcGVjL2N1c3RvbS8jY3VzdG9tLWVsZW1lbnRzLWNvcmUtY29uY2VwdHNcbiAgICBjYXNlICdhbm5vdGF0aW9uLXhtbCc6XG4gICAgY2FzZSAnY29sb3ItcHJvZmlsZSc6XG4gICAgY2FzZSAnZm9udC1mYWNlJzpcbiAgICBjYXNlICdmb250LWZhY2Utc3JjJzpcbiAgICBjYXNlICdmb250LWZhY2UtdXJpJzpcbiAgICBjYXNlICdmb250LWZhY2UtZm9ybWF0JzpcbiAgICBjYXNlICdmb250LWZhY2UtbmFtZSc6XG4gICAgY2FzZSAnbWlzc2luZy1nbHlwaCc6XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQ3VzdG9tQ29tcG9uZW50O1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// For HTML, certain tags should omit their close tag. We keep a whitelist for\n// those special-case tags.\n\nvar omittedCloseTags = {\n  area: true,\n  base: true,\n  br: true,\n  col: true,\n  embed: true,\n  hr: true,\n  img: true,\n  input: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n  // NOTE: menuitem's close tag should be omitted, but that causes problems.\n};\n\nexports.default = omittedCloseTags;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC9vbWl0dGVkQ2xvc2VUYWdzLmpzIl0sIm5hbWVzIjpbIm9taXR0ZWRDbG9zZVRhZ3MiLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInNvdXJjZSIsInRyYWNrIiwid2JyIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7O0FBT0E7QUFDQTs7QUFFQSxJQUFNQSxtQkFBbUI7QUFDdkJDLFFBQU0sSUFEaUI7QUFFdkJDLFFBQU0sSUFGaUI7QUFHdkJDLE1BQUksSUFIbUI7QUFJdkJDLE9BQUssSUFKa0I7QUFLdkJDLFNBQU8sSUFMZ0I7QUFNdkJDLE1BQUksSUFObUI7QUFPdkJDLE9BQUssSUFQa0I7QUFRdkJDLFNBQU8sSUFSZ0I7QUFTdkJDLFVBQVEsSUFUZTtBQVV2QkMsUUFBTSxJQVZpQjtBQVd2QkMsUUFBTSxJQVhpQjtBQVl2QkMsU0FBTyxJQVpnQjtBQWF2QkMsVUFBUSxJQWJlO0FBY3ZCQyxTQUFPLElBZGdCO0FBZXZCQyxPQUFLO0FBQ0w7QUFoQnVCLENBQXpCOztrQkFtQmVmLGdCIiwiZmlsZSI6Im9taXR0ZWRDbG9zZVRhZ3MuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vLyBGb3IgSFRNTCwgY2VydGFpbiB0YWdzIHNob3VsZCBvbWl0IHRoZWlyIGNsb3NlIHRhZy4gV2Uga2VlcCBhIHdoaXRlbGlzdCBmb3Jcbi8vIHRob3NlIHNwZWNpYWwtY2FzZSB0YWdzLlxuXG5jb25zdCBvbWl0dGVkQ2xvc2VUYWdzID0ge1xuICBhcmVhOiB0cnVlLFxuICBiYXNlOiB0cnVlLFxuICBicjogdHJ1ZSxcbiAgY29sOiB0cnVlLFxuICBlbWJlZDogdHJ1ZSxcbiAgaHI6IHRydWUsXG4gIGltZzogdHJ1ZSxcbiAgaW5wdXQ6IHRydWUsXG4gIGtleWdlbjogdHJ1ZSxcbiAgbGluazogdHJ1ZSxcbiAgbWV0YTogdHJ1ZSxcbiAgcGFyYW06IHRydWUsXG4gIHNvdXJjZTogdHJ1ZSxcbiAgdHJhY2s6IHRydWUsXG4gIHdicjogdHJ1ZSxcbiAgLy8gTk9URTogbWVudWl0ZW0ncyBjbG9zZSB0YWcgc2hvdWxkIGJlIG9taXR0ZWQsIGJ1dCB0aGF0IGNhdXNlcyBwcm9ibGVtcy5cbn07XG5cbmV4cG9ydCBkZWZhdWx0IG9taXR0ZWRDbG9zZVRhZ3M7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n// When adding attributes to the HTML or SVG whitelist, be sure to\n// also add them to this module to ensure casing and incorrect name\n// warnings.\nvar possibleStandardNames = {\n  // HTML\n  accept: 'accept',\n  acceptcharset: 'acceptCharset',\n  'accept-charset': 'acceptCharset',\n  accesskey: 'accessKey',\n  action: 'action',\n  allowfullscreen: 'allowFullScreen',\n  alt: 'alt',\n  as: 'as',\n  async: 'async',\n  autocapitalize: 'autoCapitalize',\n  autocomplete: 'autoComplete',\n  autocorrect: 'autoCorrect',\n  autofocus: 'autoFocus',\n  autoplay: 'autoPlay',\n  autosave: 'autoSave',\n  capture: 'capture',\n  cellpadding: 'cellPadding',\n  cellspacing: 'cellSpacing',\n  challenge: 'challenge',\n  charset: 'charSet',\n  checked: 'checked',\n  children: 'children',\n  cite: 'cite',\n  class: 'className',\n  classid: 'classID',\n  classname: 'className',\n  cols: 'cols',\n  colspan: 'colSpan',\n  content: 'content',\n  contenteditable: 'contentEditable',\n  contextmenu: 'contextMenu',\n  controls: 'controls',\n  controlslist: 'controlsList',\n  coords: 'coords',\n  crossorigin: 'crossOrigin',\n  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',\n  data: 'data',\n  datetime: 'dateTime',\n  default: 'default',\n  defaultchecked: 'defaultChecked',\n  defaultvalue: 'defaultValue',\n  defer: 'defer',\n  dir: 'dir',\n  disabled: 'disabled',\n  download: 'download',\n  draggable: 'draggable',\n  enctype: 'encType',\n  for: 'htmlFor',\n  form: 'form',\n  formmethod: 'formMethod',\n  formaction: 'formAction',\n  formenctype: 'formEncType',\n  formnovalidate: 'formNoValidate',\n  formtarget: 'formTarget',\n  frameborder: 'frameBorder',\n  headers: 'headers',\n  height: 'height',\n  hidden: 'hidden',\n  high: 'high',\n  href: 'href',\n  hreflang: 'hrefLang',\n  htmlfor: 'htmlFor',\n  httpequiv: 'httpEquiv',\n  'http-equiv': 'httpEquiv',\n  icon: 'icon',\n  id: 'id',\n  innerhtml: 'innerHTML',\n  inputmode: 'inputMode',\n  integrity: 'integrity',\n  is: 'is',\n  itemid: 'itemID',\n  itemprop: 'itemProp',\n  itemref: 'itemRef',\n  itemscope: 'itemScope',\n  itemtype: 'itemType',\n  keyparams: 'keyParams',\n  keytype: 'keyType',\n  kind: 'kind',\n  label: 'label',\n  lang: 'lang',\n  list: 'list',\n  loop: 'loop',\n  low: 'low',\n  manifest: 'manifest',\n  marginwidth: 'marginWidth',\n  marginheight: 'marginHeight',\n  max: 'max',\n  maxlength: 'maxLength',\n  media: 'media',\n  mediagroup: 'mediaGroup',\n  method: 'method',\n  min: 'min',\n  minlength: 'minLength',\n  multiple: 'multiple',\n  muted: 'muted',\n  name: 'name',\n  nomodule: 'noModule',\n  nonce: 'nonce',\n  novalidate: 'noValidate',\n  open: 'open',\n  optimum: 'optimum',\n  pattern: 'pattern',\n  placeholder: 'placeholder',\n  playsinline: 'playsInline',\n  poster: 'poster',\n  preload: 'preload',\n  profile: 'profile',\n  radiogroup: 'radioGroup',\n  readonly: 'readOnly',\n  referrerpolicy: 'referrerPolicy',\n  rel: 'rel',\n  required: 'required',\n  reversed: 'reversed',\n  role: 'role',\n  rows: 'rows',\n  rowspan: 'rowSpan',\n  sandbox: 'sandbox',\n  scope: 'scope',\n  scoped: 'scoped',\n  scrolling: 'scrolling',\n  seamless: 'seamless',\n  selected: 'selected',\n  shape: 'shape',\n  size: 'size',\n  sizes: 'sizes',\n  span: 'span',\n  spellcheck: 'spellCheck',\n  src: 'src',\n  srcdoc: 'srcDoc',\n  srclang: 'srcLang',\n  srcset: 'srcSet',\n  start: 'start',\n  step: 'step',\n  style: 'style',\n  summary: 'summary',\n  tabindex: 'tabIndex',\n  target: 'target',\n  title: 'title',\n  type: 'type',\n  usemap: 'useMap',\n  value: 'value',\n  width: 'width',\n  wmode: 'wmode',\n  wrap: 'wrap',\n\n  // SVG\n  about: 'about',\n  accentheight: 'accentHeight',\n  'accent-height': 'accentHeight',\n  accumulate: 'accumulate',\n  additive: 'additive',\n  alignmentbaseline: 'alignmentBaseline',\n  'alignment-baseline': 'alignmentBaseline',\n  allowreorder: 'allowReorder',\n  alphabetic: 'alphabetic',\n  amplitude: 'amplitude',\n  arabicform: 'arabicForm',\n  'arabic-form': 'arabicForm',\n  ascent: 'ascent',\n  attributename: 'attributeName',\n  attributetype: 'attributeType',\n  autoreverse: 'autoReverse',\n  azimuth: 'azimuth',\n  basefrequency: 'baseFrequency',\n  baselineshift: 'baselineShift',\n  'baseline-shift': 'baselineShift',\n  baseprofile: 'baseProfile',\n  bbox: 'bbox',\n  begin: 'begin',\n  bias: 'bias',\n  by: 'by',\n  calcmode: 'calcMode',\n  capheight: 'capHeight',\n  'cap-height': 'capHeight',\n  clip: 'clip',\n  clippath: 'clipPath',\n  'clip-path': 'clipPath',\n  clippathunits: 'clipPathUnits',\n  cliprule: 'clipRule',\n  'clip-rule': 'clipRule',\n  color: 'color',\n  colorinterpolation: 'colorInterpolation',\n  'color-interpolation': 'colorInterpolation',\n  colorinterpolationfilters: 'colorInterpolationFilters',\n  'color-interpolation-filters': 'colorInterpolationFilters',\n  colorprofile: 'colorProfile',\n  'color-profile': 'colorProfile',\n  colorrendering: 'colorRendering',\n  'color-rendering': 'colorRendering',\n  contentscripttype: 'contentScriptType',\n  contentstyletype: 'contentStyleType',\n  cursor: 'cursor',\n  cx: 'cx',\n  cy: 'cy',\n  d: 'd',\n  datatype: 'datatype',\n  decelerate: 'decelerate',\n  descent: 'descent',\n  diffuseconstant: 'diffuseConstant',\n  direction: 'direction',\n  display: 'display',\n  divisor: 'divisor',\n  dominantbaseline: 'dominantBaseline',\n  'dominant-baseline': 'dominantBaseline',\n  dur: 'dur',\n  dx: 'dx',\n  dy: 'dy',\n  edgemode: 'edgeMode',\n  elevation: 'elevation',\n  enablebackground: 'enableBackground',\n  'enable-background': 'enableBackground',\n  end: 'end',\n  exponent: 'exponent',\n  externalresourcesrequired: 'externalResourcesRequired',\n  fill: 'fill',\n  fillopacity: 'fillOpacity',\n  'fill-opacity': 'fillOpacity',\n  fillrule: 'fillRule',\n  'fill-rule': 'fillRule',\n  filter: 'filter',\n  filterres: 'filterRes',\n  filterunits: 'filterUnits',\n  floodopacity: 'floodOpacity',\n  'flood-opacity': 'floodOpacity',\n  floodcolor: 'floodColor',\n  'flood-color': 'floodColor',\n  focusable: 'focusable',\n  fontfamily: 'fontFamily',\n  'font-family': 'fontFamily',\n  fontsize: 'fontSize',\n  'font-size': 'fontSize',\n  fontsizeadjust: 'fontSizeAdjust',\n  'font-size-adjust': 'fontSizeAdjust',\n  fontstretch: 'fontStretch',\n  'font-stretch': 'fontStretch',\n  fontstyle: 'fontStyle',\n  'font-style': 'fontStyle',\n  fontvariant: 'fontVariant',\n  'font-variant': 'fontVariant',\n  fontweight: 'fontWeight',\n  'font-weight': 'fontWeight',\n  format: 'format',\n  from: 'from',\n  fx: 'fx',\n  fy: 'fy',\n  g1: 'g1',\n  g2: 'g2',\n  glyphname: 'glyphName',\n  'glyph-name': 'glyphName',\n  glyphorientationhorizontal: 'glyphOrientationHorizontal',\n  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',\n  glyphorientationvertical: 'glyphOrientationVertical',\n  'glyph-orientation-vertical': 'glyphOrientationVertical',\n  glyphref: 'glyphRef',\n  gradienttransform: 'gradientTransform',\n  gradientunits: 'gradientUnits',\n  hanging: 'hanging',\n  horizadvx: 'horizAdvX',\n  'horiz-adv-x': 'horizAdvX',\n  horizoriginx: 'horizOriginX',\n  'horiz-origin-x': 'horizOriginX',\n  ideographic: 'ideographic',\n  imagerendering: 'imageRendering',\n  'image-rendering': 'imageRendering',\n  in2: 'in2',\n  in: 'in',\n  inlist: 'inlist',\n  intercept: 'intercept',\n  k1: 'k1',\n  k2: 'k2',\n  k3: 'k3',\n  k4: 'k4',\n  k: 'k',\n  kernelmatrix: 'kernelMatrix',\n  kernelunitlength: 'kernelUnitLength',\n  kerning: 'kerning',\n  keypoints: 'keyPoints',\n  keysplines: 'keySplines',\n  keytimes: 'keyTimes',\n  lengthadjust: 'lengthAdjust',\n  letterspacing: 'letterSpacing',\n  'letter-spacing': 'letterSpacing',\n  lightingcolor: 'lightingColor',\n  'lighting-color': 'lightingColor',\n  limitingconeangle: 'limitingConeAngle',\n  local: 'local',\n  markerend: 'markerEnd',\n  'marker-end': 'markerEnd',\n  markerheight: 'markerHeight',\n  markermid: 'markerMid',\n  'marker-mid': 'markerMid',\n  markerstart: 'markerStart',\n  'marker-start': 'markerStart',\n  markerunits: 'markerUnits',\n  markerwidth: 'markerWidth',\n  mask: 'mask',\n  maskcontentunits: 'maskContentUnits',\n  maskunits: 'maskUnits',\n  mathematical: 'mathematical',\n  mode: 'mode',\n  numoctaves: 'numOctaves',\n  offset: 'offset',\n  opacity: 'opacity',\n  operator: 'operator',\n  order: 'order',\n  orient: 'orient',\n  orientation: 'orientation',\n  origin: 'origin',\n  overflow: 'overflow',\n  overlineposition: 'overlinePosition',\n  'overline-position': 'overlinePosition',\n  overlinethickness: 'overlineThickness',\n  'overline-thickness': 'overlineThickness',\n  paintorder: 'paintOrder',\n  'paint-order': 'paintOrder',\n  panose1: 'panose1',\n  'panose-1': 'panose1',\n  pathlength: 'pathLength',\n  patterncontentunits: 'patternContentUnits',\n  patterntransform: 'patternTransform',\n  patternunits: 'patternUnits',\n  pointerevents: 'pointerEvents',\n  'pointer-events': 'pointerEvents',\n  points: 'points',\n  pointsatx: 'pointsAtX',\n  pointsaty: 'pointsAtY',\n  pointsatz: 'pointsAtZ',\n  prefix: 'prefix',\n  preservealpha: 'preserveAlpha',\n  preserveaspectratio: 'preserveAspectRatio',\n  primitiveunits: 'primitiveUnits',\n  property: 'property',\n  r: 'r',\n  radius: 'radius',\n  refx: 'refX',\n  refy: 'refY',\n  renderingintent: 'renderingIntent',\n  'rendering-intent': 'renderingIntent',\n  repeatcount: 'repeatCount',\n  repeatdur: 'repeatDur',\n  requiredextensions: 'requiredExtensions',\n  requiredfeatures: 'requiredFeatures',\n  resource: 'resource',\n  restart: 'restart',\n  result: 'result',\n  results: 'results',\n  rotate: 'rotate',\n  rx: 'rx',\n  ry: 'ry',\n  scale: 'scale',\n  security: 'security',\n  seed: 'seed',\n  shaperendering: 'shapeRendering',\n  'shape-rendering': 'shapeRendering',\n  slope: 'slope',\n  spacing: 'spacing',\n  specularconstant: 'specularConstant',\n  specularexponent: 'specularExponent',\n  speed: 'speed',\n  spreadmethod: 'spreadMethod',\n  startoffset: 'startOffset',\n  stddeviation: 'stdDeviation',\n  stemh: 'stemh',\n  stemv: 'stemv',\n  stitchtiles: 'stitchTiles',\n  stopcolor: 'stopColor',\n  'stop-color': 'stopColor',\n  stopopacity: 'stopOpacity',\n  'stop-opacity': 'stopOpacity',\n  strikethroughposition: 'strikethroughPosition',\n  'strikethrough-position': 'strikethroughPosition',\n  strikethroughthickness: 'strikethroughThickness',\n  'strikethrough-thickness': 'strikethroughThickness',\n  string: 'string',\n  stroke: 'stroke',\n  strokedasharray: 'strokeDasharray',\n  'stroke-dasharray': 'strokeDasharray',\n  strokedashoffset: 'strokeDashoffset',\n  'stroke-dashoffset': 'strokeDashoffset',\n  strokelinecap: 'strokeLinecap',\n  'stroke-linecap': 'strokeLinecap',\n  strokelinejoin: 'strokeLinejoin',\n  'stroke-linejoin': 'strokeLinejoin',\n  strokemiterlimit: 'strokeMiterlimit',\n  'stroke-miterlimit': 'strokeMiterlimit',\n  strokewidth: 'strokeWidth',\n  'stroke-width': 'strokeWidth',\n  strokeopacity: 'strokeOpacity',\n  'stroke-opacity': 'strokeOpacity',\n  suppresscontenteditablewarning: 'suppressContentEditableWarning',\n  suppresshydrationwarning: 'suppressHydrationWarning',\n  surfacescale: 'surfaceScale',\n  systemlanguage: 'systemLanguage',\n  tablevalues: 'tableValues',\n  targetx: 'targetX',\n  targety: 'targetY',\n  textanchor: 'textAnchor',\n  'text-anchor': 'textAnchor',\n  textdecoration: 'textDecoration',\n  'text-decoration': 'textDecoration',\n  textlength: 'textLength',\n  textrendering: 'textRendering',\n  'text-rendering': 'textRendering',\n  to: 'to',\n  transform: 'transform',\n  typeof: 'typeof',\n  u1: 'u1',\n  u2: 'u2',\n  underlineposition: 'underlinePosition',\n  'underline-position': 'underlinePosition',\n  underlinethickness: 'underlineThickness',\n  'underline-thickness': 'underlineThickness',\n  unicode: 'unicode',\n  unicodebidi: 'unicodeBidi',\n  'unicode-bidi': 'unicodeBidi',\n  unicoderange: 'unicodeRange',\n  'unicode-range': 'unicodeRange',\n  unitsperem: 'unitsPerEm',\n  'units-per-em': 'unitsPerEm',\n  unselectable: 'unselectable',\n  valphabetic: 'vAlphabetic',\n  'v-alphabetic': 'vAlphabetic',\n  values: 'values',\n  vectoreffect: 'vectorEffect',\n  'vector-effect': 'vectorEffect',\n  version: 'version',\n  vertadvy: 'vertAdvY',\n  'vert-adv-y': 'vertAdvY',\n  vertoriginx: 'vertOriginX',\n  'vert-origin-x': 'vertOriginX',\n  vertoriginy: 'vertOriginY',\n  'vert-origin-y': 'vertOriginY',\n  vhanging: 'vHanging',\n  'v-hanging': 'vHanging',\n  videographic: 'vIdeographic',\n  'v-ideographic': 'vIdeographic',\n  viewbox: 'viewBox',\n  viewtarget: 'viewTarget',\n  visibility: 'visibility',\n  vmathematical: 'vMathematical',\n  'v-mathematical': 'vMathematical',\n  vocab: 'vocab',\n  widths: 'widths',\n  wordspacing: 'wordSpacing',\n  'word-spacing': 'wordSpacing',\n  writingmode: 'writingMode',\n  'writing-mode': 'writingMode',\n  x1: 'x1',\n  x2: 'x2',\n  x: 'x',\n  xchannelselector: 'xChannelSelector',\n  xheight: 'xHeight',\n  'x-height': 'xHeight',\n  xlinkactuate: 'xlinkActuate',\n  'xlink:actuate': 'xlinkActuate',\n  xlinkarcrole: 'xlinkArcrole',\n  'xlink:arcrole': 'xlinkArcrole',\n  xlinkhref: 'xlinkHref',\n  'xlink:href': 'xlinkHref',\n  xlinkrole: 'xlinkRole',\n  'xlink:role': 'xlinkRole',\n  xlinkshow: 'xlinkShow',\n  'xlink:show': 'xlinkShow',\n  xlinktitle: 'xlinkTitle',\n  'xlink:title': 'xlinkTitle',\n  xlinktype: 'xlinkType',\n  'xlink:type': 'xlinkType',\n  xmlbase: 'xmlBase',\n  'xml:base': 'xmlBase',\n  xmllang: 'xmlLang',\n  'xml:lang': 'xmlLang',\n  xmlns: 'xmlns',\n  'xml:space': 'xmlSpace',\n  xmlnsxlink: 'xmlnsXlink',\n  'xmlns:xlink': 'xmlnsXlink',\n  xmlspace: 'xmlSpace',\n  y1: 'y1',\n  y2: 'y2',\n  y: 'y',\n  ychannelselector: 'yChannelSelector',\n  z: 'z',\n  zoomandpan: 'zoomAndPan'\n};\n\nexports.default = possibleStandardNames;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar ariaProperties = {\n  'aria-current': 0, // state\n  'aria-details': 0,\n  'aria-disabled': 0, // state\n  'aria-hidden': 0, // state\n  'aria-invalid': 0, // state\n  'aria-keyshortcuts': 0,\n  'aria-label': 0,\n  'aria-roledescription': 0,\n  // Widget Attributes\n  'aria-autocomplete': 0,\n  'aria-checked': 0,\n  'aria-expanded': 0,\n  'aria-haspopup': 0,\n  'aria-level': 0,\n  'aria-modal': 0,\n  'aria-multiline': 0,\n  'aria-multiselectable': 0,\n  'aria-orientation': 0,\n  'aria-placeholder': 0,\n  'aria-pressed': 0,\n  'aria-readonly': 0,\n  'aria-required': 0,\n  'aria-selected': 0,\n  'aria-sort': 0,\n  'aria-valuemax': 0,\n  'aria-valuemin': 0,\n  'aria-valuenow': 0,\n  'aria-valuetext': 0,\n  // Live Region Attributes\n  'aria-atomic': 0,\n  'aria-busy': 0,\n  'aria-live': 0,\n  'aria-relevant': 0,\n  // Drag-and-Drop Attributes\n  'aria-dropeffect': 0,\n  'aria-grabbed': 0,\n  // Relationship Attributes\n  'aria-activedescendant': 0,\n  'aria-colcount': 0,\n  'aria-colindex': 0,\n  'aria-colspan': 0,\n  'aria-controls': 0,\n  'aria-describedby': 0,\n  'aria-errormessage': 0,\n  'aria-flowto': 0,\n  'aria-labelledby': 0,\n  'aria-owns': 0,\n  'aria-posinset': 0,\n  'aria-rowcount': 0,\n  'aria-rowindex': 0,\n  'aria-rowspan': 0,\n  'aria-setsize': 0\n};\n\nexports.default = ariaProperties;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC92YWxpZEFyaWFQcm9wZXJ0aWVzLmpzIl0sIm5hbWVzIjpbImFyaWFQcm9wZXJ0aWVzIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7O0FBT0EsSUFBTUEsaUJBQWlCO0FBQ3JCLGtCQUFnQixDQURLLEVBQ0Y7QUFDbkIsa0JBQWdCLENBRks7QUFHckIsbUJBQWlCLENBSEksRUFHRDtBQUNwQixpQkFBZSxDQUpNLEVBSUg7QUFDbEIsa0JBQWdCLENBTEssRUFLRjtBQUNuQix1QkFBcUIsQ0FOQTtBQU9yQixnQkFBYyxDQVBPO0FBUXJCLDBCQUF3QixDQVJIO0FBU3JCO0FBQ0EsdUJBQXFCLENBVkE7QUFXckIsa0JBQWdCLENBWEs7QUFZckIsbUJBQWlCLENBWkk7QUFhckIsbUJBQWlCLENBYkk7QUFjckIsZ0JBQWMsQ0FkTztBQWVyQixnQkFBYyxDQWZPO0FBZ0JyQixvQkFBa0IsQ0FoQkc7QUFpQnJCLDBCQUF3QixDQWpCSDtBQWtCckIsc0JBQW9CLENBbEJDO0FBbUJyQixzQkFBb0IsQ0FuQkM7QUFvQnJCLGtCQUFnQixDQXBCSztBQXFCckIsbUJBQWlCLENBckJJO0FBc0JyQixtQkFBaUIsQ0F0Qkk7QUF1QnJCLG1CQUFpQixDQXZCSTtBQXdCckIsZUFBYSxDQXhCUTtBQXlCckIsbUJBQWlCLENBekJJO0FBMEJyQixtQkFBaUIsQ0ExQkk7QUEyQnJCLG1CQUFpQixDQTNCSTtBQTRCckIsb0JBQWtCLENBNUJHO0FBNkJyQjtBQUNBLGlCQUFlLENBOUJNO0FBK0JyQixlQUFhLENBL0JRO0FBZ0NyQixlQUFhLENBaENRO0FBaUNyQixtQkFBaUIsQ0FqQ0k7QUFrQ3JCO0FBQ0EscUJBQW1CLENBbkNFO0FBb0NyQixrQkFBZ0IsQ0FwQ0s7QUFxQ3JCO0FBQ0EsMkJBQXlCLENBdENKO0FBdUNyQixtQkFBaUIsQ0F2Q0k7QUF3Q3JCLG1CQUFpQixDQXhDSTtBQXlDckIsa0JBQWdCLENBekNLO0FBMENyQixtQkFBaUIsQ0ExQ0k7QUEyQ3JCLHNCQUFvQixDQTNDQztBQTRDckIsdUJBQXFCLENBNUNBO0FBNkNyQixpQkFBZSxDQTdDTTtBQThDckIscUJBQW1CLENBOUNFO0FBK0NyQixlQUFhLENBL0NRO0FBZ0RyQixtQkFBaUIsQ0FoREk7QUFpRHJCLG1CQUFpQixDQWpESTtBQWtEckIsbUJBQWlCLENBbERJO0FBbURyQixrQkFBZ0IsQ0FuREs7QUFvRHJCLGtCQUFnQjtBQXBESyxDQUF2Qjs7a0JBdURlQSxjIiwiZmlsZSI6InZhbGlkQXJpYVByb3BlcnRpZXMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5jb25zdCBhcmlhUHJvcGVydGllcyA9IHtcbiAgJ2FyaWEtY3VycmVudCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWRldGFpbHMnOiAwLFxuICAnYXJpYS1kaXNhYmxlZCc6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWhpZGRlbic6IDAsIC8vIHN0YXRlXG4gICdhcmlhLWludmFsaWQnOiAwLCAvLyBzdGF0ZVxuICAnYXJpYS1rZXlzaG9ydGN1dHMnOiAwLFxuICAnYXJpYS1sYWJlbCc6IDAsXG4gICdhcmlhLXJvbGVkZXNjcmlwdGlvbic6IDAsXG4gIC8vIFdpZGdldCBBdHRyaWJ1dGVzXG4gICdhcmlhLWF1dG9jb21wbGV0ZSc6IDAsXG4gICdhcmlhLWNoZWNrZWQnOiAwLFxuICAnYXJpYS1leHBhbmRlZCc6IDAsXG4gICdhcmlhLWhhc3BvcHVwJzogMCxcbiAgJ2FyaWEtbGV2ZWwnOiAwLFxuICAnYXJpYS1tb2RhbCc6IDAsXG4gICdhcmlhLW11bHRpbGluZSc6IDAsXG4gICdhcmlhLW11bHRpc2VsZWN0YWJsZSc6IDAsXG4gICdhcmlhLW9yaWVudGF0aW9uJzogMCxcbiAgJ2FyaWEtcGxhY2Vob2xkZXInOiAwLFxuICAnYXJpYS1wcmVzc2VkJzogMCxcbiAgJ2FyaWEtcmVhZG9ubHknOiAwLFxuICAnYXJpYS1yZXF1aXJlZCc6IDAsXG4gICdhcmlhLXNlbGVjdGVkJzogMCxcbiAgJ2FyaWEtc29ydCc6IDAsXG4gICdhcmlhLXZhbHVlbWF4JzogMCxcbiAgJ2FyaWEtdmFsdWVtaW4nOiAwLFxuICAnYXJpYS12YWx1ZW5vdyc6IDAsXG4gICdhcmlhLXZhbHVldGV4dCc6IDAsXG4gIC8vIExpdmUgUmVnaW9uIEF0dHJpYnV0ZXNcbiAgJ2FyaWEtYXRvbWljJzogMCxcbiAgJ2FyaWEtYnVzeSc6IDAsXG4gICdhcmlhLWxpdmUnOiAwLFxuICAnYXJpYS1yZWxldmFudCc6IDAsXG4gIC8vIERyYWctYW5kLURyb3AgQXR0cmlidXRlc1xuICAnYXJpYS1kcm9wZWZmZWN0JzogMCxcbiAgJ2FyaWEtZ3JhYmJlZCc6IDAsXG4gIC8vIFJlbGF0aW9uc2hpcCBBdHRyaWJ1dGVzXG4gICdhcmlhLWFjdGl2ZWRlc2NlbmRhbnQnOiAwLFxuICAnYXJpYS1jb2xjb3VudCc6IDAsXG4gICdhcmlhLWNvbGluZGV4JzogMCxcbiAgJ2FyaWEtY29sc3Bhbic6IDAsXG4gICdhcmlhLWNvbnRyb2xzJzogMCxcbiAgJ2FyaWEtZGVzY3JpYmVkYnknOiAwLFxuICAnYXJpYS1lcnJvcm1lc3NhZ2UnOiAwLFxuICAnYXJpYS1mbG93dG8nOiAwLFxuICAnYXJpYS1sYWJlbGxlZGJ5JzogMCxcbiAgJ2FyaWEtb3ducyc6IDAsXG4gICdhcmlhLXBvc2luc2V0JzogMCxcbiAgJ2FyaWEtcm93Y291bnQnOiAwLFxuICAnYXJpYS1yb3dpbmRleCc6IDAsXG4gICdhcmlhLXJvd3NwYW4nOiAwLFxuICAnYXJpYS1zZXRzaXplJzogMCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGFyaWFQcm9wZXJ0aWVzO1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   */\n\nvar _omittedCloseTags = require('./omittedCloseTags');\n\nvar _omittedCloseTags2 = _interopRequireDefault(_omittedCloseTags);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// For HTML, certain tags cannot have children. This has the same purpose as\n// `omittedCloseTags` except that `menuitem` should still have its closing tag.\n\nvar voidElementTags = _extends({\n  menuitem: true\n}, _omittedCloseTags2.default);\n\nexports.default = voidElementTags;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1kb20vc3JjL3NoYXJlZC92b2lkRWxlbWVudFRhZ3MuanMiXSwibmFtZXMiOlsidm9pZEVsZW1lbnRUYWdzIiwibWVudWl0ZW0iLCJvbWl0dGVkQ2xvc2VUYWdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a1FBQUE7Ozs7Ozs7QUFPQTs7Ozs7O0FBRUE7QUFDQTs7QUFFQSxJQUFNQTtBQUNKQyxZQUFVO0FBRE4sR0FFREMsMEJBRkMsQ0FBTjs7a0JBS2VGLGUiLCJmaWxlIjoidm9pZEVsZW1lbnRUYWdzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IG9taXR0ZWRDbG9zZVRhZ3MgZnJvbSAnLi9vbWl0dGVkQ2xvc2VUYWdzJztcblxuLy8gRm9yIEhUTUwsIGNlcnRhaW4gdGFncyBjYW5ub3QgaGF2ZSBjaGlsZHJlbi4gVGhpcyBoYXMgdGhlIHNhbWUgcHVycG9zZSBhc1xuLy8gYG9taXR0ZWRDbG9zZVRhZ3NgIGV4Y2VwdCB0aGF0IGBtZW51aXRlbWAgc2hvdWxkIHN0aWxsIGhhdmUgaXRzIGNsb3NpbmcgdGFnLlxuXG5jb25zdCB2b2lkRWxlbWVudFRhZ3MgPSB7XG4gIG1lbnVpdGVtOiB0cnVlLFxuICAuLi5vbWl0dGVkQ2xvc2VUYWdzLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgdm9pZEVsZW1lbnRUYWdzO1xuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _camelizeStyleName = require('fbjs/lib/camelizeStyleName');\n\nvar _camelizeStyleName2 = _interopRequireDefault(_camelizeStyleName);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar warnValidStyle = _emptyFunction2.default; /**\n                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                               *\n                                               * This source code is licensed under the MIT license found in the\n                                               * LICENSE file in the root directory of this source tree.\n                                               */\n\nif (__DEV__) {\n  // 'msTransform' is correct, but the other prefixes should be capitalized\n  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;\n\n  // style values shouldn't contain a semicolon\n  var badStyleValueWithSemicolonPattern = /;\\s*$/;\n\n  var warnedStyleNames = {};\n  var warnedStyleValues = {};\n  var warnedForNaNValue = false;\n  var warnedForInfinityValue = false;\n\n  var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, getStack) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    (0, _warning2.default)(false, 'Unsupported style property %s. Did you mean %s?%s', name, (0, _camelizeStyleName2.default)(name), getStack());\n  };\n\n  var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, getStack) {\n    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {\n      return;\n    }\n\n    warnedStyleNames[name] = true;\n    (0, _warning2.default)(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), getStack());\n  };\n\n  var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, getStack) {\n    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {\n      return;\n    }\n\n    warnedStyleValues[value] = true;\n    (0, _warning2.default)(false, \"Style property values shouldn't contain a semicolon. \" + 'Try \"%s: %s\" instead.%s', name, value.replace(badStyleValueWithSemicolonPattern, ''), getStack());\n  };\n\n  var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, getStack) {\n    if (warnedForNaNValue) {\n      return;\n    }\n\n    warnedForNaNValue = true;\n    (0, _warning2.default)(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, getStack());\n  };\n\n  var warnStyleValueIsInfinity = function warnStyleValueIsInfinity(name, value, getStack) {\n    if (warnedForInfinityValue) {\n      return;\n    }\n\n    warnedForInfinityValue = true;\n    (0, _warning2.default)(false, '`Infinity` is an invalid value for the `%s` css style property.%s', name, getStack());\n  };\n\n  warnValidStyle = function warnValidStyle(name, value, getStack) {\n    if (name.indexOf('-') > -1) {\n      warnHyphenatedStyleName(name, getStack);\n    } else if (badVendoredStyleNamePattern.test(name)) {\n      warnBadVendoredStyleName(name, getStack);\n    } else if (badStyleValueWithSemicolonPattern.test(value)) {\n      warnStyleValueWithSemicolon(name, value, getStack);\n    }\n\n    if (typeof value === 'number') {\n      if (isNaN(value)) {\n        warnStyleValueIsNaN(name, value, getStack);\n      } else if (!isFinite(value)) {\n        warnStyleValueIsInfinity(name, value, getStack);\n      }\n    }\n  };\n}\n\nexports.default = warnValidStyle;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\n// TODO: bundle Flow types with the package.\n\nvar ReactFiberReconciler = require('./src/ReactFiberReconciler');\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nmodule.exports = ReactFiberReconciler.default ? ReactFiberReconciler.default : ReactFiberReconciler;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL2luZGV4LmpzIl0sIm5hbWVzIjpbIlJlYWN0RmliZXJSZWNvbmNpbGVyIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBU0E7O0FBRUE7O0FBT0EsSUFBTUEsdUJBQXVCQyxRQUFRLDRCQUFSLENBQTdCOztBQUVBO0FBQ0E7QUFDQUMsT0FBT0MsT0FBUCxHQUFpQkgscUJBQXFCSSxPQUFyQixHQUNiSixxQkFBcUJJLE9BRFIsR0FFYkosb0JBRkoiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLy8gVE9ETzogYnVuZGxlIEZsb3cgdHlwZXMgd2l0aCB0aGUgcGFja2FnZS5cbmV4cG9ydCB0eXBlIHtcbiAgSG9zdENvbmZpZyxcbiAgRGVhZGxpbmUsXG4gIFJlY29uY2lsZXIsXG59IGZyb20gJy4vc3JjL1JlYWN0RmliZXJSZWNvbmNpbGVyJztcblxuY29uc3QgUmVhY3RGaWJlclJlY29uY2lsZXIgPSByZXF1aXJlKCcuL3NyYy9SZWFjdEZpYmVyUmVjb25jaWxlcicpO1xuXG4vLyBUT0RPOiBkZWNpZGUgb24gdGhlIHRvcC1sZXZlbCBleHBvcnQgZm9ybS5cbi8vIFRoaXMgaXMgaGFja3kgYnV0IG1ha2VzIGl0IHdvcmsgd2l0aCBib3RoIFJvbGx1cCBhbmQgSmVzdC5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RGaWJlclJlY29uY2lsZXIuZGVmYXVsdFxuICA/IFJlYWN0RmliZXJSZWNvbmNpbGVyLmRlZmF1bHRcbiAgOiBSZWFjdEZpYmVyUmVjb25jaWxlcjtcbiJdfQ==","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ReactFiberTreeReflection = require('./src/ReactFiberTreeReflection');\n\nObject.keys(_ReactFiberTreeReflection).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return _ReactFiberTreeReflection[key];\n    }\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3JlZmxlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVNBOzs7Ozs7OztBQUVBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsImZpbGUiOiJyZWZsZWN0aW9uLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmV4cG9ydCAqIGZyb20gJy4vc3JjL1JlYWN0RmliZXJUcmVlUmVmbGVjdGlvbic7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createCapturedValue = createCapturedValue;\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction createCapturedValue(value, source) {\n  // If the value is an error, call this function immediately after it is thrown\n  // so the stack is accurate.\n  return {\n    value: value,\n    source: source,\n    stack: (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(source)\n  };\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdENhcHR1cmVkVmFsdWUuanMiXSwibmFtZXMiOlsiY3JlYXRlQ2FwdHVyZWRWYWx1ZSIsInZhbHVlIiwic291cmNlIiwic3RhY2siXSwibWFwcGluZ3MiOiI7Ozs7O1FBNkJnQkEsbUIsR0FBQUEsbUI7O0FBbEJoQjs7QUFYQTs7Ozs7Ozs7O0FBNkJPLFNBQVNBLG1CQUFULENBQ0xDLEtBREssRUFFTEMsTUFGSyxFQUdhO0FBQ2xCO0FBQ0E7QUFDQSxTQUFPO0FBQ0xELGdCQURLO0FBRUxDLGtCQUZLO0FBR0xDLFdBQU8sd0VBQXNDRCxNQUF0QztBQUhGLEdBQVA7QUFLRCIsImZpbGUiOiJSZWFjdENhcHR1cmVkVmFsdWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAnLi9SZWFjdEZpYmVyJztcblxuaW1wb3J0IHtnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyfSBmcm9tICdzaGFyZWQvUmVhY3RGaWJlckNvbXBvbmVudFRyZWVIb29rJztcblxuZXhwb3J0IHR5cGUgQ2FwdHVyZWRWYWx1ZTxUPiA9IHtcbiAgdmFsdWU6IFQsXG4gIHNvdXJjZTogRmliZXIgfCBudWxsLFxuICBzdGFjazogc3RyaW5nIHwgbnVsbCxcbn07XG5cbmV4cG9ydCB0eXBlIENhcHR1cmVkRXJyb3IgPSB7XG4gIGNvbXBvbmVudE5hbWU6ID9zdHJpbmcsXG4gIGNvbXBvbmVudFN0YWNrOiBzdHJpbmcsXG4gIGVycm9yOiBtaXhlZCxcbiAgZXJyb3JCb3VuZGFyeTogP09iamVjdCxcbiAgZXJyb3JCb3VuZGFyeUZvdW5kOiBib29sZWFuLFxuICBlcnJvckJvdW5kYXJ5TmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgd2lsbFJldHJ5OiBib29sZWFuLFxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNhcHR1cmVkVmFsdWU8VD4oXG4gIHZhbHVlOiBULFxuICBzb3VyY2U6IEZpYmVyIHwgbnVsbCxcbik6IENhcHR1cmVkVmFsdWU8VD4ge1xuICAvLyBJZiB0aGUgdmFsdWUgaXMgYW4gZXJyb3IsIGNhbGwgdGhpcyBmdW5jdGlvbiBpbW1lZGlhdGVseSBhZnRlciBpdCBpcyB0aHJvd25cbiAgLy8gc28gdGhlIHN0YWNrIGlzIGFjY3VyYXRlLlxuICByZXR1cm4ge1xuICAgIHZhbHVlLFxuICAgIHNvdXJjZSxcbiAgICBzdGFjazogZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihzb3VyY2UpLFxuICB9O1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mountChildFibers = exports.reconcileChildFibers = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.cloneChildFibers = cloneChildFibers;\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactFiber = require('./ReactFiber');\n\nvar _ReactDebugCurrentFiber = require('./ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar getCurrentFiberStackAddendum = _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum;\n\n\nvar didWarnAboutMaps = void 0;\nvar didWarnAboutStringRefInStrictMode = void 0;\nvar ownerHasKeyUseWarning = void 0;\nvar ownerHasFunctionTypeWarning = void 0;\nvar warnForMissingKey = function warnForMissingKey(child) {};\n\nif (__DEV__) {\n  didWarnAboutMaps = false;\n  didWarnAboutStringRefInStrictMode = {};\n\n  /**\n   * Warn if there's no key explicitly set on dynamic arrays of children or\n   * object keys are not valid. This allows us to keep track of children between\n   * updates.\n   */\n  ownerHasKeyUseWarning = {};\n  ownerHasFunctionTypeWarning = {};\n\n  warnForMissingKey = function warnForMissingKey(child) {\n    if (child === null || (typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object') {\n      return;\n    }\n    if (!child._store || child._store.validated || child.key != null) {\n      return;\n    }\n    (0, _invariant2.default)(_typeof(child._store) === 'object', 'React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n    child._store.validated = true;\n\n    var currentComponentErrorInfo = 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + (getCurrentFiberStackAddendum() || '');\n    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n      return;\n    }\n    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n    (0, _warning2.default)(false, 'Each child in an array or iterator should have a unique ' + '\"key\" prop. See https://fb.me/react-warning-keys for ' + 'more information.%s', getCurrentFiberStackAddendum());\n  };\n}\n\nvar isArray = Array.isArray;\n\nfunction coerceRef(returnFiber, current, element) {\n  var mixedRef = element.ref;\n  if (mixedRef !== null && typeof mixedRef !== 'function' && (typeof mixedRef === 'undefined' ? 'undefined' : _typeof(mixedRef)) !== 'object') {\n    if (__DEV__) {\n      if (returnFiber.mode & _ReactTypeOfMode.StrictMode) {\n        var componentName = (0, _getComponentName2.default)(returnFiber) || 'Component';\n        if (!didWarnAboutStringRefInStrictMode[componentName]) {\n          (0, _warning2.default)(false, 'A string ref, \"%s\", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\\n%s' + '\\n\\nLearn more about using refs safely here:' + '\\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(returnFiber));\n          didWarnAboutStringRefInStrictMode[componentName] = true;\n        }\n      }\n    }\n\n    if (element._owner) {\n      var owner = element._owner;\n      var inst = void 0;\n      if (owner) {\n        var ownerFiber = owner;\n        (0, _invariant2.default)(ownerFiber.tag === _ReactTypeOfWork.ClassComponent, 'Stateless function components cannot have refs.');\n        inst = ownerFiber.stateNode;\n      }\n      (0, _invariant2.default)(inst, 'Missing owner for string ref %s. This error is likely caused by a ' + 'bug in React. Please file an issue.', mixedRef);\n      var stringRef = '' + mixedRef;\n      // Check if previous string ref matches new string ref\n      if (current !== null && current.ref !== null && current.ref._stringRef === stringRef) {\n        return current.ref;\n      }\n      var ref = function ref(value) {\n        var refs = inst.refs === _emptyObject2.default ? inst.refs = {} : inst.refs;\n        if (value === null) {\n          delete refs[stringRef];\n        } else {\n          refs[stringRef] = value;\n        }\n      };\n      ref._stringRef = stringRef;\n      return ref;\n    } else {\n      (0, _invariant2.default)(typeof mixedRef === 'string', 'Expected ref to be a function or a string.');\n      (0, _invariant2.default)(element._owner, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of' + ' the following reasons:\\n' + '1. You may be adding a ref to a functional component\\n' + \"2. You may be adding a ref to a component that was not created inside a component's render method\\n\" + '3. You have multiple copies of React loaded\\n' + 'See https://fb.me/react-refs-must-have-owner for more information.', mixedRef);\n    }\n  }\n  return mixedRef;\n}\n\nfunction throwOnInvalidObjectType(returnFiber, newChild) {\n  if (returnFiber.type !== 'textarea') {\n    var addendum = '';\n    if (__DEV__) {\n      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + (getCurrentFiberStackAddendum() || '');\n    }\n    (0, _invariant2.default)(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);\n  }\n}\n\nfunction warnOnFunctionType() {\n  var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + (getCurrentFiberStackAddendum() || '');\n\n  if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;\n\n  (0, _warning2.default)(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.%s', getCurrentFiberStackAddendum() || '');\n}\n\n// This wrapper function exists because I expect to clone the code in each path\n// to be able to optimize each path individually by branching early. This needs\n// a compiler or we can do it manually. Helpers that don't need this branching\n// live outside of this function.\nfunction ChildReconciler(shouldTrackSideEffects) {\n  function deleteChild(returnFiber, childToDelete) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return;\n    }\n    // Deletions are added in reversed order so we add it to the front.\n    // At this point, the return fiber's effect list is empty except for\n    // deletions, so we can just append the deletion to the list. The remaining\n    // effects aren't added until the complete phase. Once we implement\n    // resuming, this may not be true.\n    var last = returnFiber.lastEffect;\n    if (last !== null) {\n      last.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n    childToDelete.nextEffect = null;\n    childToDelete.effectTag = _ReactTypeOfSideEffect.Deletion;\n  }\n\n  function deleteRemainingChildren(returnFiber, currentFirstChild) {\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return null;\n    }\n\n    // TODO: For the shouldClone case, this could be micro-optimized a bit by\n    // assuming that after the first child we've already added everything.\n    var childToDelete = currentFirstChild;\n    while (childToDelete !== null) {\n      deleteChild(returnFiber, childToDelete);\n      childToDelete = childToDelete.sibling;\n    }\n    return null;\n  }\n\n  function mapRemainingChildren(returnFiber, currentFirstChild) {\n    // Add the remaining children to a temporary map so that we can find them by\n    // keys quickly. Implicit (null) keys get added to this set with their index\n    var existingChildren = new Map();\n\n    var existingChild = currentFirstChild;\n    while (existingChild !== null) {\n      if (existingChild.key !== null) {\n        existingChildren.set(existingChild.key, existingChild);\n      } else {\n        existingChildren.set(existingChild.index, existingChild);\n      }\n      existingChild = existingChild.sibling;\n    }\n    return existingChildren;\n  }\n\n  function useFiber(fiber, pendingProps, expirationTime) {\n    // We currently set sibling to null and index to 0 here because it is easy\n    // to forget to do before returning it. E.g. for the single child case.\n    var clone = (0, _ReactFiber.createWorkInProgress)(fiber, pendingProps, expirationTime);\n    clone.index = 0;\n    clone.sibling = null;\n    return clone;\n  }\n\n  function placeChild(newFiber, lastPlacedIndex, newIndex) {\n    newFiber.index = newIndex;\n    if (!shouldTrackSideEffects) {\n      // Noop.\n      return lastPlacedIndex;\n    }\n    var current = newFiber.alternate;\n    if (current !== null) {\n      var oldIndex = current.index;\n      if (oldIndex < lastPlacedIndex) {\n        // This is a move.\n        newFiber.effectTag = _ReactTypeOfSideEffect.Placement;\n        return lastPlacedIndex;\n      } else {\n        // This item can stay in place.\n        return oldIndex;\n      }\n    } else {\n      // This is an insertion.\n      newFiber.effectTag = _ReactTypeOfSideEffect.Placement;\n      return lastPlacedIndex;\n    }\n  }\n\n  function placeSingleChild(newFiber) {\n    // This is simpler for the single child case. We only need to do a\n    // placement for inserting new children.\n    if (shouldTrackSideEffects && newFiber.alternate === null) {\n      newFiber.effectTag = _ReactTypeOfSideEffect.Placement;\n    }\n    return newFiber;\n  }\n\n  function updateTextNode(returnFiber, current, textContent, expirationTime) {\n    if (current === null || current.tag !== _ReactTypeOfWork.HostText) {\n      // Insert\n      var created = (0, _ReactFiber.createFiberFromText)(textContent, returnFiber.mode, expirationTime);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, textContent, expirationTime);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateElement(returnFiber, current, element, expirationTime) {\n    if (current !== null && current.type === element.type) {\n      // Move based on index\n      var existing = useFiber(current, element.props, expirationTime);\n      existing.ref = coerceRef(returnFiber, current, element);\n      existing.return = returnFiber;\n      if (__DEV__) {\n        existing._debugSource = element._source;\n        existing._debugOwner = element._owner;\n      }\n      return existing;\n    } else {\n      // Insert\n      var created = (0, _ReactFiber.createFiberFromElement)(element, returnFiber.mode, expirationTime);\n      created.ref = coerceRef(returnFiber, current, element);\n      created.return = returnFiber;\n      return created;\n    }\n  }\n\n  function updatePortal(returnFiber, current, portal, expirationTime) {\n    if (current === null || current.tag !== _ReactTypeOfWork.HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {\n      // Insert\n      var created = (0, _ReactFiber.createFiberFromPortal)(portal, returnFiber.mode, expirationTime);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, portal.children || [], expirationTime);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function updateFragment(returnFiber, current, fragment, expirationTime, key) {\n    if (current === null || current.tag !== _ReactTypeOfWork.Fragment) {\n      // Insert\n      var created = (0, _ReactFiber.createFiberFromFragment)(fragment, returnFiber.mode, expirationTime, key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      // Update\n      var existing = useFiber(current, fragment, expirationTime);\n      existing.return = returnFiber;\n      return existing;\n    }\n  }\n\n  function createChild(returnFiber, newChild, expirationTime) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      var created = (0, _ReactFiber.createFiberFromText)('' + newChild, returnFiber.mode, expirationTime);\n      created.return = returnFiber;\n      return created;\n    }\n\n    if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case _ReactSymbols.REACT_ELEMENT_TYPE:\n          {\n            var _created = (0, _ReactFiber.createFiberFromElement)(newChild, returnFiber.mode, expirationTime);\n            _created.ref = coerceRef(returnFiber, null, newChild);\n            _created.return = returnFiber;\n            return _created;\n          }\n        case _ReactSymbols.REACT_PORTAL_TYPE:\n          {\n            var _created2 = (0, _ReactFiber.createFiberFromPortal)(newChild, returnFiber.mode, expirationTime);\n            _created2.return = returnFiber;\n            return _created2;\n          }\n      }\n\n      if (isArray(newChild) || (0, _ReactSymbols.getIteratorFn)(newChild)) {\n        var _created3 = (0, _ReactFiber.createFiberFromFragment)(newChild, returnFiber.mode, expirationTime, null);\n        _created3.return = returnFiber;\n        return _created3;\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {\n    // Update the fiber if the keys match, otherwise return null.\n\n    var key = oldFiber !== null ? oldFiber.key : null;\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys. If the previous node is implicitly keyed\n      // we can continue to replace it without aborting even if it is not a text\n      // node.\n      if (key !== null) {\n        return null;\n      }\n      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);\n    }\n\n    if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case _ReactSymbols.REACT_ELEMENT_TYPE:\n          {\n            if (newChild.key === key) {\n              if (newChild.type === _ReactSymbols.REACT_FRAGMENT_TYPE) {\n                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);\n              }\n              return updateElement(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n        case _ReactSymbols.REACT_PORTAL_TYPE:\n          {\n            if (newChild.key === key) {\n              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);\n            } else {\n              return null;\n            }\n          }\n      }\n\n      if (isArray(newChild) || (0, _ReactSymbols.getIteratorFn)(newChild)) {\n        if (key !== null) {\n          return null;\n        }\n\n        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      // Text nodes don't have keys, so we neither have to check the old nor\n      // new node for the key. If both are text nodes, they match.\n      var matchedFiber = existingChildren.get(newIdx) || null;\n      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);\n    }\n\n    if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null) {\n      switch (newChild.$$typeof) {\n        case _ReactSymbols.REACT_ELEMENT_TYPE:\n          {\n            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            if (newChild.type === _ReactSymbols.REACT_FRAGMENT_TYPE) {\n              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);\n            }\n            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);\n          }\n        case _ReactSymbols.REACT_PORTAL_TYPE:\n          {\n            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;\n            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);\n          }\n      }\n\n      if (isArray(newChild) || (0, _ReactSymbols.getIteratorFn)(newChild)) {\n        var _matchedFiber3 = existingChildren.get(newIdx) || null;\n        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);\n      }\n\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Warns if there is a duplicate or missing key\n   */\n  function warnOnInvalidKey(child, knownKeys) {\n    if (__DEV__) {\n      if ((typeof child === 'undefined' ? 'undefined' : _typeof(child)) !== 'object' || child === null) {\n        return knownKeys;\n      }\n      switch (child.$$typeof) {\n        case _ReactSymbols.REACT_ELEMENT_TYPE:\n        case _ReactSymbols.REACT_PORTAL_TYPE:\n          warnForMissingKey(child);\n          var key = child.key;\n          if (typeof key !== 'string') {\n            break;\n          }\n          if (knownKeys === null) {\n            knownKeys = new Set();\n            knownKeys.add(key);\n            break;\n          }\n          if (!knownKeys.has(key)) {\n            knownKeys.add(key);\n            break;\n          }\n          (0, _warning2.default)(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.%s', key, getCurrentFiberStackAddendum());\n          break;\n        default:\n          break;\n      }\n    }\n    return knownKeys;\n  }\n\n  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {\n    // This algorithm can't optimize by searching from boths ends since we\n    // don't have backpointers on fibers. I'm trying to see how far we can get\n    // with that model. If it ends up not being worth the tradeoffs, we can\n    // add it later.\n\n    // Even with a two ended optimization, we'd want to optimize for the case\n    // where there are few changes and brute force the comparison instead of\n    // going for the Map. It'd like to explore hitting that path first in\n    // forward-only mode and only go for the Map once we notice that we need\n    // lots of look ahead. This doesn't handle reversal as well as two ended\n    // search but that's unusual. Besides, for the two ended optimization to\n    // work on Iterables, we'd need to copy the whole set.\n\n    // In this first iteration, we'll just live with hitting the bad case\n    // (adding everything to a Map) in for every insert/move.\n\n    // If you change this code, also update reconcileChildrenIterator() which\n    // uses the same algorithm.\n\n    if (__DEV__) {\n      // First, validate keys.\n      var knownKeys = null;\n      for (var i = 0; i < newChildren.length; i++) {\n        var child = newChildren[i];\n        knownKeys = warnOnInvalidKey(child, knownKeys);\n      }\n    }\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (oldFiber === null) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (newIdx === newChildren.length) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; newIdx < newChildren.length; newIdx++) {\n        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);\n        if (!_newFiber) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber;\n        } else {\n          previousNewFiber.sibling = _newFiber;\n        }\n        previousNewFiber = _newFiber;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; newIdx < newChildren.length; newIdx++) {\n      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);\n      if (_newFiber2) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber2.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);\n          }\n        }\n        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber2;\n        } else {\n          previousNewFiber.sibling = _newFiber2;\n        }\n        previousNewFiber = _newFiber2;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {\n    // This is the same implementation as reconcileChildrenArray(),\n    // but using the iterator instead.\n\n    var iteratorFn = (0, _ReactSymbols.getIteratorFn)(newChildrenIterable);\n    (0, _invariant2.default)(typeof iteratorFn === 'function', 'An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n\n    if (__DEV__) {\n      // Warn about using Maps as children\n      if (typeof newChildrenIterable.entries === 'function') {\n        var possibleMap = newChildrenIterable;\n        if (possibleMap.entries === iteratorFn) {\n          (0, _warning2.default)(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', getCurrentFiberStackAddendum());\n          didWarnAboutMaps = true;\n        }\n      }\n\n      // First, validate keys.\n      // We'll get a different iterator later for the main pass.\n      var _newChildren = iteratorFn.call(newChildrenIterable);\n      if (_newChildren) {\n        var knownKeys = null;\n        var _step = _newChildren.next();\n        for (; !_step.done; _step = _newChildren.next()) {\n          var child = _step.value;\n          knownKeys = warnOnInvalidKey(child, knownKeys);\n        }\n      }\n    }\n\n    var newChildren = iteratorFn.call(newChildrenIterable);\n    (0, _invariant2.default)(newChildren != null, 'An iterable object provided no iterator.');\n\n    var resultingFirstChild = null;\n    var previousNewFiber = null;\n\n    var oldFiber = currentFirstChild;\n    var lastPlacedIndex = 0;\n    var newIdx = 0;\n    var nextOldFiber = null;\n\n    var step = newChildren.next();\n    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {\n      if (oldFiber.index > newIdx) {\n        nextOldFiber = oldFiber;\n        oldFiber = null;\n      } else {\n        nextOldFiber = oldFiber.sibling;\n      }\n      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);\n      if (newFiber === null) {\n        // TODO: This breaks on empty slots like null children. That's\n        // unfortunate because it triggers the slow path all the time. We need\n        // a better way to communicate whether this was a miss or null,\n        // boolean, undefined, etc.\n        if (!oldFiber) {\n          oldFiber = nextOldFiber;\n        }\n        break;\n      }\n      if (shouldTrackSideEffects) {\n        if (oldFiber && newFiber.alternate === null) {\n          // We matched the slot, but we didn't reuse the existing fiber, so we\n          // need to delete the existing child.\n          deleteChild(returnFiber, oldFiber);\n        }\n      }\n      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);\n      if (previousNewFiber === null) {\n        // TODO: Move out of the loop. This only happens for the first run.\n        resultingFirstChild = newFiber;\n      } else {\n        // TODO: Defer siblings if we're not at the right index for this slot.\n        // I.e. if we had null values before, then we want to defer this\n        // for each null value. However, we also don't want to call updateSlot\n        // with the previous one.\n        previousNewFiber.sibling = newFiber;\n      }\n      previousNewFiber = newFiber;\n      oldFiber = nextOldFiber;\n    }\n\n    if (step.done) {\n      // We've reached the end of the new children. We can delete the rest.\n      deleteRemainingChildren(returnFiber, oldFiber);\n      return resultingFirstChild;\n    }\n\n    if (oldFiber === null) {\n      // If we don't have any more existing children we can choose a fast path\n      // since the rest will all be insertions.\n      for (; !step.done; newIdx++, step = newChildren.next()) {\n        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);\n        if (_newFiber3 === null) {\n          continue;\n        }\n        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          // TODO: Move out of the loop. This only happens for the first run.\n          resultingFirstChild = _newFiber3;\n        } else {\n          previousNewFiber.sibling = _newFiber3;\n        }\n        previousNewFiber = _newFiber3;\n      }\n      return resultingFirstChild;\n    }\n\n    // Add all children to a key map for quick lookups.\n    var existingChildren = mapRemainingChildren(returnFiber, oldFiber);\n\n    // Keep scanning and use the map to restore deleted items as moves.\n    for (; !step.done; newIdx++, step = newChildren.next()) {\n      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);\n      if (_newFiber4 !== null) {\n        if (shouldTrackSideEffects) {\n          if (_newFiber4.alternate !== null) {\n            // The new fiber is a work in progress, but if there exists a\n            // current, that means that we reused the fiber. We need to delete\n            // it from the child list so that we don't add it to the deletion\n            // list.\n            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);\n          }\n        }\n        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);\n        if (previousNewFiber === null) {\n          resultingFirstChild = _newFiber4;\n        } else {\n          previousNewFiber.sibling = _newFiber4;\n        }\n        previousNewFiber = _newFiber4;\n      }\n    }\n\n    if (shouldTrackSideEffects) {\n      // Any existing children that weren't consumed above were deleted. We need\n      // to add them to the deletion list.\n      existingChildren.forEach(function (child) {\n        return deleteChild(returnFiber, child);\n      });\n    }\n\n    return resultingFirstChild;\n  }\n\n  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {\n    // There's no need to check for keys on text nodes since we don't have a\n    // way to define them.\n    if (currentFirstChild !== null && currentFirstChild.tag === _ReactTypeOfWork.HostText) {\n      // We already have an existing node so let's just update it and delete\n      // the rest.\n      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);\n      var existing = useFiber(currentFirstChild, textContent, expirationTime);\n      existing.return = returnFiber;\n      return existing;\n    }\n    // The existing first child is not a text node so we need to create one\n    // and delete the existing ones.\n    deleteRemainingChildren(returnFiber, currentFirstChild);\n    var created = (0, _ReactFiber.createFiberFromText)(textContent, returnFiber.mode, expirationTime);\n    created.return = returnFiber;\n    return created;\n  }\n\n  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {\n    var key = element.key;\n    var child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === _ReactTypeOfWork.Fragment ? element.type === _ReactSymbols.REACT_FRAGMENT_TYPE : child.type === element.type) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, element.type === _ReactSymbols.REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);\n          existing.ref = coerceRef(returnFiber, child, element);\n          existing.return = returnFiber;\n          if (__DEV__) {\n            existing._debugSource = element._source;\n            existing._debugOwner = element._owner;\n          }\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    if (element.type === _ReactSymbols.REACT_FRAGMENT_TYPE) {\n      var created = (0, _ReactFiber.createFiberFromFragment)(element.props.children, returnFiber.mode, expirationTime, element.key);\n      created.return = returnFiber;\n      return created;\n    } else {\n      var _created4 = (0, _ReactFiber.createFiberFromElement)(element, returnFiber.mode, expirationTime);\n      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);\n      _created4.return = returnFiber;\n      return _created4;\n    }\n  }\n\n  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {\n    var key = portal.key;\n    var child = currentFirstChild;\n    while (child !== null) {\n      // TODO: If key === null and child.key === null, then this only applies to\n      // the first item in the list.\n      if (child.key === key) {\n        if (child.tag === _ReactTypeOfWork.HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {\n          deleteRemainingChildren(returnFiber, child.sibling);\n          var existing = useFiber(child, portal.children || [], expirationTime);\n          existing.return = returnFiber;\n          return existing;\n        } else {\n          deleteRemainingChildren(returnFiber, child);\n          break;\n        }\n      } else {\n        deleteChild(returnFiber, child);\n      }\n      child = child.sibling;\n    }\n\n    var created = (0, _ReactFiber.createFiberFromPortal)(portal, returnFiber.mode, expirationTime);\n    created.return = returnFiber;\n    return created;\n  }\n\n  // This API will tag the children with the side-effect of the reconciliation\n  // itself. They will be added to the side-effect list as we pass through the\n  // children and the parent.\n  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {\n    // This function is not recursive.\n    // If the top level item is an array, we treat it as a set of children,\n    // not as a fragment. Nested arrays on the other hand will be treated as\n    // fragment nodes. Recursion happens at the normal flow.\n\n    // Handle top level unkeyed fragments as if they were arrays.\n    // This leads to an ambiguity between <>{[...]}</> and <>...</>.\n    // We treat the ambiguous cases above the same.\n    if ((typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null && newChild.type === _ReactSymbols.REACT_FRAGMENT_TYPE && newChild.key === null) {\n      newChild = newChild.props.children;\n    }\n\n    // Handle object types\n    var isObject = (typeof newChild === 'undefined' ? 'undefined' : _typeof(newChild)) === 'object' && newChild !== null;\n\n    if (isObject) {\n      switch (newChild.$$typeof) {\n        case _ReactSymbols.REACT_ELEMENT_TYPE:\n          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));\n        case _ReactSymbols.REACT_PORTAL_TYPE:\n          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));\n      }\n    }\n\n    if (typeof newChild === 'string' || typeof newChild === 'number') {\n      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));\n    }\n\n    if (isArray(newChild)) {\n      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);\n    }\n\n    if ((0, _ReactSymbols.getIteratorFn)(newChild)) {\n      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);\n    }\n\n    if (isObject) {\n      throwOnInvalidObjectType(returnFiber, newChild);\n    }\n\n    if (__DEV__) {\n      if (typeof newChild === 'function') {\n        warnOnFunctionType();\n      }\n    }\n    if (typeof newChild === 'undefined') {\n      // If the new child is undefined, and the return fiber is a composite\n      // component, throw an error. If Fiber return types are disabled,\n      // we already threw above.\n      switch (returnFiber.tag) {\n        case _ReactTypeOfWork.ClassComponent:\n          {\n            if (__DEV__) {\n              var instance = returnFiber.stateNode;\n              if (instance.render._isMockFunction) {\n                // We allow auto-mocks to proceed as if they're returning null.\n                break;\n              }\n            }\n          }\n        // Intentionally fall through to the next case, which handles both\n        // functions and classes\n        // eslint-disable-next-lined no-fallthrough\n        case _ReactTypeOfWork.FunctionalComponent:\n          {\n            var Component = returnFiber.type;\n            (0, _invariant2.default)(false, '%s(...): Nothing was returned from render. This usually means a ' + 'return statement is missing. Or, to render nothing, ' + 'return null.', Component.displayName || Component.name || 'Component');\n          }\n      }\n    }\n\n    // Remaining cases are all treated as empty.\n    return deleteRemainingChildren(returnFiber, currentFirstChild);\n  }\n\n  return reconcileChildFibers;\n}\n\nvar reconcileChildFibers = exports.reconcileChildFibers = ChildReconciler(true);\nvar mountChildFibers = exports.mountChildFibers = ChildReconciler(false);\n\nfunction cloneChildFibers(current, workInProgress) {\n  (0, _invariant2.default)(current === null || workInProgress.child === current.child, 'Resuming work not yet implemented.');\n\n  if (workInProgress.child === null) {\n    return;\n  }\n\n  var currentChild = workInProgress.child;\n  var newChild = (0, _ReactFiber.createWorkInProgress)(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n  workInProgress.child = newChild;\n\n  newChild.return = workInProgress;\n  while (currentChild.sibling !== null) {\n    currentChild = currentChild.sibling;\n    newChild = newChild.sibling = (0, _ReactFiber.createWorkInProgress)(currentChild, currentChild.pendingProps, currentChild.expirationTime);\n    newChild.return = workInProgress;\n  }\n  newChild.sibling = null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdENoaWxkRmliZXIuanMiXSwibmFtZXMiOlsiY2xvbmVDaGlsZEZpYmVycyIsImdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0iLCJSZWFjdERlYnVnQ3VycmVudEZpYmVyIiwiZGlkV2FybkFib3V0TWFwcyIsImRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZSIsIm93bmVySGFzS2V5VXNlV2FybmluZyIsIm93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZyIsIndhcm5Gb3JNaXNzaW5nS2V5IiwiY2hpbGQiLCJfX0RFVl9fIiwiX3N0b3JlIiwidmFsaWRhdGVkIiwia2V5IiwiY3VycmVudENvbXBvbmVudEVycm9ySW5mbyIsImlzQXJyYXkiLCJBcnJheSIsImNvZXJjZVJlZiIsInJldHVybkZpYmVyIiwiY3VycmVudCIsImVsZW1lbnQiLCJtaXhlZFJlZiIsInJlZiIsIm1vZGUiLCJTdHJpY3RNb2RlIiwiY29tcG9uZW50TmFtZSIsIl9vd25lciIsIm93bmVyIiwiaW5zdCIsIm93bmVyRmliZXIiLCJ0YWciLCJDbGFzc0NvbXBvbmVudCIsInN0YXRlTm9kZSIsInN0cmluZ1JlZiIsIl9zdHJpbmdSZWYiLCJ2YWx1ZSIsInJlZnMiLCJlbXB0eU9iamVjdCIsInRocm93T25JbnZhbGlkT2JqZWN0VHlwZSIsIm5ld0NoaWxkIiwidHlwZSIsImFkZGVuZHVtIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwia2V5cyIsImpvaW4iLCJ3YXJuT25GdW5jdGlvblR5cGUiLCJDaGlsZFJlY29uY2lsZXIiLCJzaG91bGRUcmFja1NpZGVFZmZlY3RzIiwiZGVsZXRlQ2hpbGQiLCJjaGlsZFRvRGVsZXRlIiwibGFzdCIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJlZmZlY3RUYWciLCJEZWxldGlvbiIsImRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuIiwiY3VycmVudEZpcnN0Q2hpbGQiLCJzaWJsaW5nIiwibWFwUmVtYWluaW5nQ2hpbGRyZW4iLCJleGlzdGluZ0NoaWxkcmVuIiwiTWFwIiwiZXhpc3RpbmdDaGlsZCIsInNldCIsImluZGV4IiwidXNlRmliZXIiLCJmaWJlciIsInBlbmRpbmdQcm9wcyIsImV4cGlyYXRpb25UaW1lIiwiY2xvbmUiLCJwbGFjZUNoaWxkIiwibmV3RmliZXIiLCJsYXN0UGxhY2VkSW5kZXgiLCJuZXdJbmRleCIsImFsdGVybmF0ZSIsIm9sZEluZGV4IiwiUGxhY2VtZW50IiwicGxhY2VTaW5nbGVDaGlsZCIsInVwZGF0ZVRleHROb2RlIiwidGV4dENvbnRlbnQiLCJIb3N0VGV4dCIsImNyZWF0ZWQiLCJyZXR1cm4iLCJleGlzdGluZyIsInVwZGF0ZUVsZW1lbnQiLCJwcm9wcyIsIl9kZWJ1Z1NvdXJjZSIsIl9zb3VyY2UiLCJfZGVidWdPd25lciIsInVwZGF0ZVBvcnRhbCIsInBvcnRhbCIsIkhvc3RQb3J0YWwiLCJjb250YWluZXJJbmZvIiwiaW1wbGVtZW50YXRpb24iLCJjaGlsZHJlbiIsInVwZGF0ZUZyYWdtZW50IiwiZnJhZ21lbnQiLCJGcmFnbWVudCIsImNyZWF0ZUNoaWxkIiwiJCR0eXBlb2YiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9QT1JUQUxfVFlQRSIsInVwZGF0ZVNsb3QiLCJvbGRGaWJlciIsIlJFQUNUX0ZSQUdNRU5UX1RZUEUiLCJ1cGRhdGVGcm9tTWFwIiwibmV3SWR4IiwibWF0Y2hlZEZpYmVyIiwiZ2V0Iiwid2Fybk9uSW52YWxpZEtleSIsImtub3duS2V5cyIsIlNldCIsImFkZCIsImhhcyIsInJlY29uY2lsZUNoaWxkcmVuQXJyYXkiLCJuZXdDaGlsZHJlbiIsImkiLCJsZW5ndGgiLCJyZXN1bHRpbmdGaXJzdENoaWxkIiwicHJldmlvdXNOZXdGaWJlciIsIm5leHRPbGRGaWJlciIsImRlbGV0ZSIsImZvckVhY2giLCJyZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yIiwibmV3Q2hpbGRyZW5JdGVyYWJsZSIsIml0ZXJhdG9yRm4iLCJlbnRyaWVzIiwicG9zc2libGVNYXAiLCJzdGVwIiwibmV4dCIsImRvbmUiLCJyZWNvbmNpbGVTaW5nbGVUZXh0Tm9kZSIsInJlY29uY2lsZVNpbmdsZUVsZW1lbnQiLCJyZWNvbmNpbGVTaW5nbGVQb3J0YWwiLCJyZWNvbmNpbGVDaGlsZEZpYmVycyIsImlzT2JqZWN0IiwiaW5zdGFuY2UiLCJyZW5kZXIiLCJfaXNNb2NrRnVuY3Rpb24iLCJGdW5jdGlvbmFsQ29tcG9uZW50IiwiQ29tcG9uZW50IiwiZGlzcGxheU5hbWUiLCJuYW1lIiwibW91bnRDaGlsZEZpYmVycyIsIndvcmtJblByb2dyZXNzIiwiY3VycmVudENoaWxkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OzhRQUFBOzs7Ozs7Ozs7UUE2eUNnQkEsZ0IsR0FBQUEsZ0I7O0FBL3hDaEI7Ozs7QUFDQTs7QUFDQTs7QUFNQTs7QUFPQTs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFFQTs7QUFPQTs7OztBQUNBOzs7O0lBRU9DLDRCLEdBQWdDQyxnQyxDQUFoQ0QsNEI7OztBQUVQLElBQUlFLHlCQUFKO0FBQ0EsSUFBSUMsMENBQUo7QUFDQSxJQUFJQyw4QkFBSjtBQUNBLElBQUlDLG9DQUFKO0FBQ0EsSUFBSUMsb0JBQW9CLDJCQUFDQyxLQUFELEVBQWtCLENBQUUsQ0FBNUM7O0FBRUEsSUFBSUMsT0FBSixFQUFhO0FBQ1hOLHFCQUFtQixLQUFuQjtBQUNBQyxzQ0FBb0MsRUFBcEM7O0FBRUE7Ozs7O0FBS0FDLDBCQUF3QixFQUF4QjtBQUNBQyxnQ0FBOEIsRUFBOUI7O0FBRUFDLHNCQUFvQiwyQkFBQ0MsS0FBRCxFQUFrQjtBQUNwQyxRQUFJQSxVQUFVLElBQVYsSUFBa0IsUUFBT0EsS0FBUCx5Q0FBT0EsS0FBUCxPQUFpQixRQUF2QyxFQUFpRDtBQUMvQztBQUNEO0FBQ0QsUUFBSSxDQUFDQSxNQUFNRSxNQUFQLElBQWlCRixNQUFNRSxNQUFOLENBQWFDLFNBQTlCLElBQTJDSCxNQUFNSSxHQUFOLElBQWEsSUFBNUQsRUFBa0U7QUFDaEU7QUFDRDtBQUNELDZCQUNFLFFBQU9KLE1BQU1FLE1BQWIsTUFBd0IsUUFEMUIsRUFFRSxnRUFDRSxzRUFISjtBQUtBRixVQUFNRSxNQUFOLENBQWFDLFNBQWIsR0FBeUIsSUFBekI7O0FBRUEsUUFBTUUsNEJBQ0osNkRBQ0EsdURBREEsR0FFQSxtQkFGQSxJQUdDWixrQ0FBa0MsRUFIbkMsQ0FERjtBQUtBLFFBQUlJLHNCQUFzQlEseUJBQXRCLENBQUosRUFBc0Q7QUFDcEQ7QUFDRDtBQUNEUiwwQkFBc0JRLHlCQUF0QixJQUFtRCxJQUFuRDs7QUFFQSwyQkFDRSxLQURGLEVBRUUsNkRBQ0UsdURBREYsR0FFRSxxQkFKSixFQUtFWiw4QkFMRjtBQU9ELEdBL0JEO0FBZ0NEOztBQUVELElBQU1hLFVBQVVDLE1BQU1ELE9BQXRCOztBQUVBLFNBQVNFLFNBQVQsQ0FDRUMsV0FERixFQUVFQyxPQUZGLEVBR0VDLE9BSEYsRUFJRTtBQUNBLE1BQUlDLFdBQVdELFFBQVFFLEdBQXZCO0FBQ0EsTUFDRUQsYUFBYSxJQUFiLElBQ0EsT0FBT0EsUUFBUCxLQUFvQixVQURwQixJQUVBLFFBQU9BLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFIdEIsRUFJRTtBQUNBLFFBQUlYLE9BQUosRUFBYTtBQUNYLFVBQUlRLFlBQVlLLElBQVosR0FBbUJDLDJCQUF2QixFQUFtQztBQUNqQyxZQUFNQyxnQkFBZ0IsZ0NBQWlCUCxXQUFqQixLQUFpQyxXQUF2RDtBQUNBLFlBQUksQ0FBQ2Isa0NBQWtDb0IsYUFBbEMsQ0FBTCxFQUF1RDtBQUNyRCxpQ0FDRSxLQURGLEVBRUUsbUVBQ0Usb0VBREYsR0FFRSx5Q0FGRixHQUdFLE1BSEYsR0FJRSw4Q0FKRixHQUtFLDhDQVBKLEVBUUVKLFFBUkYsRUFTRSx3RUFBc0NILFdBQXRDLENBVEY7QUFXQWIsNENBQWtDb0IsYUFBbEMsSUFBbUQsSUFBbkQ7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsUUFBSUwsUUFBUU0sTUFBWixFQUFvQjtBQUNsQixVQUFNQyxRQUFpQlAsUUFBUU0sTUFBL0I7QUFDQSxVQUFJRSxhQUFKO0FBQ0EsVUFBSUQsS0FBSixFQUFXO0FBQ1QsWUFBTUUsYUFBZUYsS0FBckI7QUFDQSxpQ0FDRUUsV0FBV0MsR0FBWCxLQUFtQkMsK0JBRHJCLEVBRUUsaURBRkY7QUFJQUgsZUFBT0MsV0FBV0csU0FBbEI7QUFDRDtBQUNELCtCQUNFSixJQURGLEVBRUUsdUVBQ0UscUNBSEosRUFJRVAsUUFKRjtBQU1BLFVBQU1ZLFlBQVksS0FBS1osUUFBdkI7QUFDQTtBQUNBLFVBQ0VGLFlBQVksSUFBWixJQUNBQSxRQUFRRyxHQUFSLEtBQWdCLElBRGhCLElBRUFILFFBQVFHLEdBQVIsQ0FBWVksVUFBWixLQUEyQkQsU0FIN0IsRUFJRTtBQUNBLGVBQU9kLFFBQVFHLEdBQWY7QUFDRDtBQUNELFVBQU1BLE1BQU0sU0FBTkEsR0FBTSxDQUFTYSxLQUFULEVBQWdCO0FBQzFCLFlBQU1DLE9BQU9SLEtBQUtRLElBQUwsS0FBY0MscUJBQWQsR0FBNkJULEtBQUtRLElBQUwsR0FBWSxFQUF6QyxHQUErQ1IsS0FBS1EsSUFBakU7QUFDQSxZQUFJRCxVQUFVLElBQWQsRUFBb0I7QUFDbEIsaUJBQU9DLEtBQUtILFNBQUwsQ0FBUDtBQUNELFNBRkQsTUFFTztBQUNMRyxlQUFLSCxTQUFMLElBQWtCRSxLQUFsQjtBQUNEO0FBQ0YsT0FQRDtBQVFBYixVQUFJWSxVQUFKLEdBQWlCRCxTQUFqQjtBQUNBLGFBQU9YLEdBQVA7QUFDRCxLQXBDRCxNQW9DTztBQUNMLCtCQUNFLE9BQU9ELFFBQVAsS0FBb0IsUUFEdEIsRUFFRSw0Q0FGRjtBQUlBLCtCQUNFRCxRQUFRTSxNQURWLEVBRUUsa0dBQ0UsMkJBREYsR0FFRSx3REFGRixHQUdFLHFHQUhGLEdBSUUsK0NBSkYsR0FLRSxvRUFQSixFQVFFTCxRQVJGO0FBVUQ7QUFDRjtBQUNELFNBQU9BLFFBQVA7QUFDRDs7QUFFRCxTQUFTaUIsd0JBQVQsQ0FBa0NwQixXQUFsQyxFQUFzRHFCLFFBQXRELEVBQXdFO0FBQ3RFLE1BQUlyQixZQUFZc0IsSUFBWixLQUFxQixVQUF6QixFQUFxQztBQUNuQyxRQUFJQyxXQUFXLEVBQWY7QUFDQSxRQUFJL0IsT0FBSixFQUFhO0FBQ1grQixpQkFDRSxvRUFDQSxVQURBLElBRUN2QyxrQ0FBa0MsRUFGbkMsQ0FERjtBQUlEO0FBQ0QsNkJBQ0UsS0FERixFQUVFLHVEQUZGLEVBR0V3QyxPQUFPQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JOLFFBQS9CLE1BQTZDLGlCQUE3QyxHQUNJLHVCQUF1QkcsT0FBT0ksSUFBUCxDQUFZUCxRQUFaLEVBQXNCUSxJQUF0QixDQUEyQixJQUEzQixDQUF2QixHQUEwRCxHQUQ5RCxHQUVJUixRQUxOLEVBTUVFLFFBTkY7QUFRRDtBQUNGOztBQUVELFNBQVNPLGtCQUFULEdBQThCO0FBQzVCLE1BQU1sQyw0QkFDSixrRUFDQSwrREFEQSxHQUVBLGlFQUZBLElBR0NaLGtDQUFrQyxFQUhuQyxDQURGOztBQU1BLE1BQUlLLDRCQUE0Qk8seUJBQTVCLENBQUosRUFBNEQ7QUFDMUQ7QUFDRDtBQUNEUCw4QkFBNEJPLHlCQUE1QixJQUF5RCxJQUF6RDs7QUFFQSx5QkFDRSxLQURGLEVBRUUsa0VBQ0UsK0RBREYsR0FFRSxtRUFKSixFQUtFWixrQ0FBa0MsRUFMcEM7QUFPRDs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMrQyxlQUFULENBQXlCQyxzQkFBekIsRUFBaUQ7QUFDL0MsV0FBU0MsV0FBVCxDQUFxQmpDLFdBQXJCLEVBQXlDa0MsYUFBekMsRUFBcUU7QUFDbkUsUUFBSSxDQUFDRixzQkFBTCxFQUE2QjtBQUMzQjtBQUNBO0FBQ0Q7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBTUcsT0FBT25DLFlBQVlvQyxVQUF6QjtBQUNBLFFBQUlELFNBQVMsSUFBYixFQUFtQjtBQUNqQkEsV0FBS0UsVUFBTCxHQUFrQkgsYUFBbEI7QUFDQWxDLGtCQUFZb0MsVUFBWixHQUF5QkYsYUFBekI7QUFDRCxLQUhELE1BR087QUFDTGxDLGtCQUFZc0MsV0FBWixHQUEwQnRDLFlBQVlvQyxVQUFaLEdBQXlCRixhQUFuRDtBQUNEO0FBQ0RBLGtCQUFjRyxVQUFkLEdBQTJCLElBQTNCO0FBQ0FILGtCQUFjSyxTQUFkLEdBQTBCQywrQkFBMUI7QUFDRDs7QUFFRCxXQUFTQyx1QkFBVCxDQUNFekMsV0FERixFQUVFMEMsaUJBRkYsRUFHUTtBQUNOLFFBQUksQ0FBQ1Ysc0JBQUwsRUFBNkI7QUFDM0I7QUFDQSxhQUFPLElBQVA7QUFDRDs7QUFFRDtBQUNBO0FBQ0EsUUFBSUUsZ0JBQWdCUSxpQkFBcEI7QUFDQSxXQUFPUixrQkFBa0IsSUFBekIsRUFBK0I7QUFDN0JELGtCQUFZakMsV0FBWixFQUF5QmtDLGFBQXpCO0FBQ0FBLHNCQUFnQkEsY0FBY1MsT0FBOUI7QUFDRDtBQUNELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVNDLG9CQUFULENBQ0U1QyxXQURGLEVBRUUwQyxpQkFGRixFQUcrQjtBQUM3QjtBQUNBO0FBRUEsUUFBTUcsbUJBQWdELElBQUlDLEdBQUosRUFBdEQ7O0FBRUEsUUFBSUMsZ0JBQWdCTCxpQkFBcEI7QUFDQSxXQUFPSyxrQkFBa0IsSUFBekIsRUFBK0I7QUFDN0IsVUFBSUEsY0FBY3BELEdBQWQsS0FBc0IsSUFBMUIsRUFBZ0M7QUFDOUJrRCx5QkFBaUJHLEdBQWpCLENBQXFCRCxjQUFjcEQsR0FBbkMsRUFBd0NvRCxhQUF4QztBQUNELE9BRkQsTUFFTztBQUNMRix5QkFBaUJHLEdBQWpCLENBQXFCRCxjQUFjRSxLQUFuQyxFQUEwQ0YsYUFBMUM7QUFDRDtBQUNEQSxzQkFBZ0JBLGNBQWNKLE9BQTlCO0FBQ0Q7QUFDRCxXQUFPRSxnQkFBUDtBQUNEOztBQUVELFdBQVNLLFFBQVQsQ0FDRUMsS0FERixFQUVFQyxZQUZGLEVBR0VDLGNBSEYsRUFJUztBQUNQO0FBQ0E7QUFDQSxRQUFNQyxRQUFRLHNDQUFxQkgsS0FBckIsRUFBNEJDLFlBQTVCLEVBQTBDQyxjQUExQyxDQUFkO0FBQ0FDLFVBQU1MLEtBQU4sR0FBYyxDQUFkO0FBQ0FLLFVBQU1YLE9BQU4sR0FBZ0IsSUFBaEI7QUFDQSxXQUFPVyxLQUFQO0FBQ0Q7O0FBRUQsV0FBU0MsVUFBVCxDQUNFQyxRQURGLEVBRUVDLGVBRkYsRUFHRUMsUUFIRixFQUlVO0FBQ1JGLGFBQVNQLEtBQVQsR0FBaUJTLFFBQWpCO0FBQ0EsUUFBSSxDQUFDMUIsc0JBQUwsRUFBNkI7QUFDM0I7QUFDQSxhQUFPeUIsZUFBUDtBQUNEO0FBQ0QsUUFBTXhELFVBQVV1RCxTQUFTRyxTQUF6QjtBQUNBLFFBQUkxRCxZQUFZLElBQWhCLEVBQXNCO0FBQ3BCLFVBQU0yRCxXQUFXM0QsUUFBUWdELEtBQXpCO0FBQ0EsVUFBSVcsV0FBV0gsZUFBZixFQUFnQztBQUM5QjtBQUNBRCxpQkFBU2pCLFNBQVQsR0FBcUJzQixnQ0FBckI7QUFDQSxlQUFPSixlQUFQO0FBQ0QsT0FKRCxNQUlPO0FBQ0w7QUFDQSxlQUFPRyxRQUFQO0FBQ0Q7QUFDRixLQVZELE1BVU87QUFDTDtBQUNBSixlQUFTakIsU0FBVCxHQUFxQnNCLGdDQUFyQjtBQUNBLGFBQU9KLGVBQVA7QUFDRDtBQUNGOztBQUVELFdBQVNLLGdCQUFULENBQTBCTixRQUExQixFQUFrRDtBQUNoRDtBQUNBO0FBQ0EsUUFBSXhCLDBCQUEwQndCLFNBQVNHLFNBQVQsS0FBdUIsSUFBckQsRUFBMkQ7QUFDekRILGVBQVNqQixTQUFULEdBQXFCc0IsZ0NBQXJCO0FBQ0Q7QUFDRCxXQUFPTCxRQUFQO0FBQ0Q7O0FBRUQsV0FBU08sY0FBVCxDQUNFL0QsV0FERixFQUVFQyxPQUZGLEVBR0UrRCxXQUhGLEVBSUVYLGNBSkYsRUFLRTtBQUNBLFFBQUlwRCxZQUFZLElBQVosSUFBb0JBLFFBQVFXLEdBQVIsS0FBZ0JxRCx5QkFBeEMsRUFBa0Q7QUFDaEQ7QUFDQSxVQUFNQyxVQUFVLHFDQUNkRixXQURjLEVBRWRoRSxZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLENBQWhCO0FBS0FhLGNBQVFDLE1BQVIsR0FBaUJuRSxXQUFqQjtBQUNBLGFBQU9rRSxPQUFQO0FBQ0QsS0FURCxNQVNPO0FBQ0w7QUFDQSxVQUFNRSxXQUFXbEIsU0FBU2pELE9BQVQsRUFBa0IrRCxXQUFsQixFQUErQlgsY0FBL0IsQ0FBakI7QUFDQWUsZUFBU0QsTUFBVCxHQUFrQm5FLFdBQWxCO0FBQ0EsYUFBT29FLFFBQVA7QUFDRDtBQUNGOztBQUVELFdBQVNDLGFBQVQsQ0FDRXJFLFdBREYsRUFFRUMsT0FGRixFQUdFQyxPQUhGLEVBSUVtRCxjQUpGLEVBS1M7QUFDUCxRQUFJcEQsWUFBWSxJQUFaLElBQW9CQSxRQUFRcUIsSUFBUixLQUFpQnBCLFFBQVFvQixJQUFqRCxFQUF1RDtBQUNyRDtBQUNBLFVBQU04QyxXQUFXbEIsU0FBU2pELE9BQVQsRUFBa0JDLFFBQVFvRSxLQUExQixFQUFpQ2pCLGNBQWpDLENBQWpCO0FBQ0FlLGVBQVNoRSxHQUFULEdBQWVMLFVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEVBQWdDQyxPQUFoQyxDQUFmO0FBQ0FrRSxlQUFTRCxNQUFULEdBQWtCbkUsV0FBbEI7QUFDQSxVQUFJUixPQUFKLEVBQWE7QUFDWDRFLGlCQUFTRyxZQUFULEdBQXdCckUsUUFBUXNFLE9BQWhDO0FBQ0FKLGlCQUFTSyxXQUFULEdBQXVCdkUsUUFBUU0sTUFBL0I7QUFDRDtBQUNELGFBQU80RCxRQUFQO0FBQ0QsS0FWRCxNQVVPO0FBQ0w7QUFDQSxVQUFNRixVQUFVLHdDQUNkaEUsT0FEYyxFQUVkRixZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLENBQWhCO0FBS0FhLGNBQVE5RCxHQUFSLEdBQWNMLFVBQVVDLFdBQVYsRUFBdUJDLE9BQXZCLEVBQWdDQyxPQUFoQyxDQUFkO0FBQ0FnRSxjQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxhQUFPa0UsT0FBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBU1EsWUFBVCxDQUNFMUUsV0FERixFQUVFQyxPQUZGLEVBR0UwRSxNQUhGLEVBSUV0QixjQUpGLEVBS1M7QUFDUCxRQUNFcEQsWUFBWSxJQUFaLElBQ0FBLFFBQVFXLEdBQVIsS0FBZ0JnRSwyQkFEaEIsSUFFQTNFLFFBQVFhLFNBQVIsQ0FBa0IrRCxhQUFsQixLQUFvQ0YsT0FBT0UsYUFGM0MsSUFHQTVFLFFBQVFhLFNBQVIsQ0FBa0JnRSxjQUFsQixLQUFxQ0gsT0FBT0csY0FKOUMsRUFLRTtBQUNBO0FBQ0EsVUFBTVosVUFBVSx1Q0FDZFMsTUFEYyxFQUVkM0UsWUFBWUssSUFGRSxFQUdkZ0QsY0FIYyxDQUFoQjtBQUtBYSxjQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxhQUFPa0UsT0FBUDtBQUNELEtBZEQsTUFjTztBQUNMO0FBQ0EsVUFBTUUsV0FBV2xCLFNBQVNqRCxPQUFULEVBQWtCMEUsT0FBT0ksUUFBUCxJQUFtQixFQUFyQyxFQUF5QzFCLGNBQXpDLENBQWpCO0FBQ0FlLGVBQVNELE1BQVQsR0FBa0JuRSxXQUFsQjtBQUNBLGFBQU9vRSxRQUFQO0FBQ0Q7QUFDRjs7QUFFRCxXQUFTWSxjQUFULENBQ0VoRixXQURGLEVBRUVDLE9BRkYsRUFHRWdGLFFBSEYsRUFJRTVCLGNBSkYsRUFLRTFELEdBTEYsRUFNUztBQUNQLFFBQUlNLFlBQVksSUFBWixJQUFvQkEsUUFBUVcsR0FBUixLQUFnQnNFLHlCQUF4QyxFQUFrRDtBQUNoRDtBQUNBLFVBQU1oQixVQUFVLHlDQUNkZSxRQURjLEVBRWRqRixZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLEVBSWQxRCxHQUpjLENBQWhCO0FBTUF1RSxjQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxhQUFPa0UsT0FBUDtBQUNELEtBVkQsTUFVTztBQUNMO0FBQ0EsVUFBTUUsV0FBV2xCLFNBQVNqRCxPQUFULEVBQWtCZ0YsUUFBbEIsRUFBNEI1QixjQUE1QixDQUFqQjtBQUNBZSxlQUFTRCxNQUFULEdBQWtCbkUsV0FBbEI7QUFDQSxhQUFPb0UsUUFBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBU2UsV0FBVCxDQUNFbkYsV0FERixFQUVFcUIsUUFGRixFQUdFZ0MsY0FIRixFQUlnQjtBQUNkLFFBQUksT0FBT2hDLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsT0FBT0EsUUFBUCxLQUFvQixRQUF4RCxFQUFrRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxVQUFNNkMsVUFBVSxxQ0FDZCxLQUFLN0MsUUFEUyxFQUVkckIsWUFBWUssSUFGRSxFQUdkZ0QsY0FIYyxDQUFoQjtBQUtBYSxjQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxhQUFPa0UsT0FBUDtBQUNEOztBQUVELFFBQUksUUFBTzdDLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBcEIsSUFBZ0NBLGFBQWEsSUFBakQsRUFBdUQ7QUFDckQsY0FBUUEsU0FBUytELFFBQWpCO0FBQ0UsYUFBS0MsZ0NBQUw7QUFBeUI7QUFDdkIsZ0JBQU1uQixXQUFVLHdDQUNkN0MsUUFEYyxFQUVkckIsWUFBWUssSUFGRSxFQUdkZ0QsY0FIYyxDQUFoQjtBQUtBYSxxQkFBUTlELEdBQVIsR0FBY0wsVUFBVUMsV0FBVixFQUF1QixJQUF2QixFQUE2QnFCLFFBQTdCLENBQWQ7QUFDQTZDLHFCQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxtQkFBT2tFLFFBQVA7QUFDRDtBQUNELGFBQUtvQiwrQkFBTDtBQUF3QjtBQUN0QixnQkFBTXBCLFlBQVUsdUNBQ2Q3QyxRQURjLEVBRWRyQixZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLENBQWhCO0FBS0FhLHNCQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxtQkFBT2tFLFNBQVA7QUFDRDtBQW5CSDs7QUFzQkEsVUFBSXJFLFFBQVF3QixRQUFSLEtBQXFCLGlDQUFjQSxRQUFkLENBQXpCLEVBQWtEO0FBQ2hELFlBQU02QyxZQUFVLHlDQUNkN0MsUUFEYyxFQUVkckIsWUFBWUssSUFGRSxFQUdkZ0QsY0FIYyxFQUlkLElBSmMsQ0FBaEI7QUFNQWEsa0JBQVFDLE1BQVIsR0FBaUJuRSxXQUFqQjtBQUNBLGVBQU9rRSxTQUFQO0FBQ0Q7O0FBRUQ5QywrQkFBeUJwQixXQUF6QixFQUFzQ3FCLFFBQXRDO0FBQ0Q7O0FBRUQsUUFBSTdCLE9BQUosRUFBYTtBQUNYLFVBQUksT0FBTzZCLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbENTO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRCxXQUFTeUQsVUFBVCxDQUNFdkYsV0FERixFQUVFd0YsUUFGRixFQUdFbkUsUUFIRixFQUlFZ0MsY0FKRixFQUtnQjtBQUNkOztBQUVBLFFBQU0xRCxNQUFNNkYsYUFBYSxJQUFiLEdBQW9CQSxTQUFTN0YsR0FBN0IsR0FBbUMsSUFBL0M7O0FBRUEsUUFBSSxPQUFPMEIsUUFBUCxLQUFvQixRQUFwQixJQUFnQyxPQUFPQSxRQUFQLEtBQW9CLFFBQXhELEVBQWtFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLFVBQUkxQixRQUFRLElBQVosRUFBa0I7QUFDaEIsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxhQUFPb0UsZUFDTC9ELFdBREssRUFFTHdGLFFBRkssRUFHTCxLQUFLbkUsUUFIQSxFQUlMZ0MsY0FKSyxDQUFQO0FBTUQ7O0FBRUQsUUFBSSxRQUFPaEMsUUFBUCx5Q0FBT0EsUUFBUCxPQUFvQixRQUFwQixJQUFnQ0EsYUFBYSxJQUFqRCxFQUF1RDtBQUNyRCxjQUFRQSxTQUFTK0QsUUFBakI7QUFDRSxhQUFLQyxnQ0FBTDtBQUF5QjtBQUN2QixnQkFBSWhFLFNBQVMxQixHQUFULEtBQWlCQSxHQUFyQixFQUEwQjtBQUN4QixrQkFBSTBCLFNBQVNDLElBQVQsS0FBa0JtRSxpQ0FBdEIsRUFBMkM7QUFDekMsdUJBQU9ULGVBQ0xoRixXQURLLEVBRUx3RixRQUZLLEVBR0xuRSxTQUFTaUQsS0FBVCxDQUFlUyxRQUhWLEVBSUwxQixjQUpLLEVBS0wxRCxHQUxLLENBQVA7QUFPRDtBQUNELHFCQUFPMEUsY0FDTHJFLFdBREssRUFFTHdGLFFBRkssRUFHTG5FLFFBSEssRUFJTGdDLGNBSkssQ0FBUDtBQU1ELGFBaEJELE1BZ0JPO0FBQ0wscUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFDRCxhQUFLaUMsK0JBQUw7QUFBd0I7QUFDdEIsZ0JBQUlqRSxTQUFTMUIsR0FBVCxLQUFpQkEsR0FBckIsRUFBMEI7QUFDeEIscUJBQU8rRSxhQUNMMUUsV0FESyxFQUVMd0YsUUFGSyxFQUdMbkUsUUFISyxFQUlMZ0MsY0FKSyxDQUFQO0FBTUQsYUFQRCxNQU9PO0FBQ0wscUJBQU8sSUFBUDtBQUNEO0FBQ0Y7QUFqQ0g7O0FBb0NBLFVBQUl4RCxRQUFRd0IsUUFBUixLQUFxQixpQ0FBY0EsUUFBZCxDQUF6QixFQUFrRDtBQUNoRCxZQUFJMUIsUUFBUSxJQUFaLEVBQWtCO0FBQ2hCLGlCQUFPLElBQVA7QUFDRDs7QUFFRCxlQUFPcUYsZUFDTGhGLFdBREssRUFFTHdGLFFBRkssRUFHTG5FLFFBSEssRUFJTGdDLGNBSkssRUFLTCxJQUxLLENBQVA7QUFPRDs7QUFFRGpDLCtCQUF5QnBCLFdBQXpCLEVBQXNDcUIsUUFBdEM7QUFDRDs7QUFFRCxRQUFJN0IsT0FBSixFQUFhO0FBQ1gsVUFBSSxPQUFPNkIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQ1M7QUFDRDtBQUNGOztBQUVELFdBQU8sSUFBUDtBQUNEOztBQUVELFdBQVM0RCxhQUFULENBQ0U3QyxnQkFERixFQUVFN0MsV0FGRixFQUdFMkYsTUFIRixFQUlFdEUsUUFKRixFQUtFZ0MsY0FMRixFQU1nQjtBQUNkLFFBQUksT0FBT2hDLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsT0FBT0EsUUFBUCxLQUFvQixRQUF4RCxFQUFrRTtBQUNoRTtBQUNBO0FBQ0EsVUFBTXVFLGVBQWUvQyxpQkFBaUJnRCxHQUFqQixDQUFxQkYsTUFBckIsS0FBZ0MsSUFBckQ7QUFDQSxhQUFPNUIsZUFDTC9ELFdBREssRUFFTDRGLFlBRkssRUFHTCxLQUFLdkUsUUFIQSxFQUlMZ0MsY0FKSyxDQUFQO0FBTUQ7O0FBRUQsUUFBSSxRQUFPaEMsUUFBUCx5Q0FBT0EsUUFBUCxPQUFvQixRQUFwQixJQUFnQ0EsYUFBYSxJQUFqRCxFQUF1RDtBQUNyRCxjQUFRQSxTQUFTK0QsUUFBakI7QUFDRSxhQUFLQyxnQ0FBTDtBQUF5QjtBQUN2QixnQkFBTU8sZ0JBQ0ovQyxpQkFBaUJnRCxHQUFqQixDQUNFeEUsU0FBUzFCLEdBQVQsS0FBaUIsSUFBakIsR0FBd0JnRyxNQUF4QixHQUFpQ3RFLFNBQVMxQixHQUQ1QyxLQUVLLElBSFA7QUFJQSxnQkFBSTBCLFNBQVNDLElBQVQsS0FBa0JtRSxpQ0FBdEIsRUFBMkM7QUFDekMscUJBQU9ULGVBQ0xoRixXQURLLEVBRUw0RixhQUZLLEVBR0x2RSxTQUFTaUQsS0FBVCxDQUFlUyxRQUhWLEVBSUwxQixjQUpLLEVBS0xoQyxTQUFTMUIsR0FMSixDQUFQO0FBT0Q7QUFDRCxtQkFBTzBFLGNBQ0xyRSxXQURLLEVBRUw0RixhQUZLLEVBR0x2RSxRQUhLLEVBSUxnQyxjQUpLLENBQVA7QUFNRDtBQUNELGFBQUtpQywrQkFBTDtBQUF3QjtBQUN0QixnQkFBTU0saUJBQ0ovQyxpQkFBaUJnRCxHQUFqQixDQUNFeEUsU0FBUzFCLEdBQVQsS0FBaUIsSUFBakIsR0FBd0JnRyxNQUF4QixHQUFpQ3RFLFNBQVMxQixHQUQ1QyxLQUVLLElBSFA7QUFJQSxtQkFBTytFLGFBQ0wxRSxXQURLLEVBRUw0RixjQUZLLEVBR0x2RSxRQUhLLEVBSUxnQyxjQUpLLENBQVA7QUFNRDtBQWpDSDs7QUFvQ0EsVUFBSXhELFFBQVF3QixRQUFSLEtBQXFCLGlDQUFjQSxRQUFkLENBQXpCLEVBQWtEO0FBQ2hELFlBQU11RSxpQkFBZS9DLGlCQUFpQmdELEdBQWpCLENBQXFCRixNQUFyQixLQUFnQyxJQUFyRDtBQUNBLGVBQU9YLGVBQ0xoRixXQURLLEVBRUw0RixjQUZLLEVBR0x2RSxRQUhLLEVBSUxnQyxjQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7O0FBRURqQywrQkFBeUJwQixXQUF6QixFQUFzQ3FCLFFBQXRDO0FBQ0Q7O0FBRUQsUUFBSTdCLE9BQUosRUFBYTtBQUNYLFVBQUksT0FBTzZCLFFBQVAsS0FBb0IsVUFBeEIsRUFBb0M7QUFDbENTO0FBQ0Q7QUFDRjs7QUFFRCxXQUFPLElBQVA7QUFDRDs7QUFFRDs7O0FBR0EsV0FBU2dFLGdCQUFULENBQ0V2RyxLQURGLEVBRUV3RyxTQUZGLEVBR3NCO0FBQ3BCLFFBQUl2RyxPQUFKLEVBQWE7QUFDWCxVQUFJLFFBQU9ELEtBQVAseUNBQU9BLEtBQVAsT0FBaUIsUUFBakIsSUFBNkJBLFVBQVUsSUFBM0MsRUFBaUQ7QUFDL0MsZUFBT3dHLFNBQVA7QUFDRDtBQUNELGNBQVF4RyxNQUFNNkYsUUFBZDtBQUNFLGFBQUtDLGdDQUFMO0FBQ0EsYUFBS0MsK0JBQUw7QUFDRWhHLDRCQUFrQkMsS0FBbEI7QUFDQSxjQUFNSSxNQUFNSixNQUFNSSxHQUFsQjtBQUNBLGNBQUksT0FBT0EsR0FBUCxLQUFlLFFBQW5CLEVBQTZCO0FBQzNCO0FBQ0Q7QUFDRCxjQUFJb0csY0FBYyxJQUFsQixFQUF3QjtBQUN0QkEsd0JBQVksSUFBSUMsR0FBSixFQUFaO0FBQ0FELHNCQUFVRSxHQUFWLENBQWN0RyxHQUFkO0FBQ0E7QUFDRDtBQUNELGNBQUksQ0FBQ29HLFVBQVVHLEdBQVYsQ0FBY3ZHLEdBQWQsQ0FBTCxFQUF5QjtBQUN2Qm9HLHNCQUFVRSxHQUFWLENBQWN0RyxHQUFkO0FBQ0E7QUFDRDtBQUNELGlDQUNFLEtBREYsRUFFRSx1REFDRSxtRUFERixHQUVFLDJEQUZGLEdBR0UsOERBSEYsR0FJRSxxQ0FOSixFQU9FQSxHQVBGLEVBUUVYLDhCQVJGO0FBVUE7QUFDRjtBQUNFO0FBN0JKO0FBK0JEO0FBQ0QsV0FBTytHLFNBQVA7QUFDRDs7QUFFRCxXQUFTSSxzQkFBVCxDQUNFbkcsV0FERixFQUVFMEMsaUJBRkYsRUFHRTBELFdBSEYsRUFJRS9DLGNBSkYsRUFLZ0I7QUFDZDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsUUFBSTdELE9BQUosRUFBYTtBQUNYO0FBQ0EsVUFBSXVHLFlBQVksSUFBaEI7QUFDQSxXQUFLLElBQUlNLElBQUksQ0FBYixFQUFnQkEsSUFBSUQsWUFBWUUsTUFBaEMsRUFBd0NELEdBQXhDLEVBQTZDO0FBQzNDLFlBQU05RyxRQUFRNkcsWUFBWUMsQ0FBWixDQUFkO0FBQ0FOLG9CQUFZRCxpQkFBaUJ2RyxLQUFqQixFQUF3QndHLFNBQXhCLENBQVo7QUFDRDtBQUNGOztBQUVELFFBQUlRLHNCQUFvQyxJQUF4QztBQUNBLFFBQUlDLG1CQUFpQyxJQUFyQzs7QUFFQSxRQUFJaEIsV0FBVzlDLGlCQUFmO0FBQ0EsUUFBSWUsa0JBQWtCLENBQXRCO0FBQ0EsUUFBSWtDLFNBQVMsQ0FBYjtBQUNBLFFBQUljLGVBQWUsSUFBbkI7QUFDQSxXQUFPakIsYUFBYSxJQUFiLElBQXFCRyxTQUFTUyxZQUFZRSxNQUFqRCxFQUF5RFgsUUFBekQsRUFBbUU7QUFDakUsVUFBSUgsU0FBU3ZDLEtBQVQsR0FBaUIwQyxNQUFyQixFQUE2QjtBQUMzQmMsdUJBQWVqQixRQUFmO0FBQ0FBLG1CQUFXLElBQVg7QUFDRCxPQUhELE1BR087QUFDTGlCLHVCQUFlakIsU0FBUzdDLE9BQXhCO0FBQ0Q7QUFDRCxVQUFNYSxXQUFXK0IsV0FDZnZGLFdBRGUsRUFFZndGLFFBRmUsRUFHZlksWUFBWVQsTUFBWixDQUhlLEVBSWZ0QyxjQUplLENBQWpCO0FBTUEsVUFBSUcsYUFBYSxJQUFqQixFQUF1QjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQUlnQyxhQUFhLElBQWpCLEVBQXVCO0FBQ3JCQSxxQkFBV2lCLFlBQVg7QUFDRDtBQUNEO0FBQ0Q7QUFDRCxVQUFJekUsc0JBQUosRUFBNEI7QUFDMUIsWUFBSXdELFlBQVloQyxTQUFTRyxTQUFULEtBQXVCLElBQXZDLEVBQTZDO0FBQzNDO0FBQ0E7QUFDQTFCLHNCQUFZakMsV0FBWixFQUF5QndGLFFBQXpCO0FBQ0Q7QUFDRjtBQUNEL0Isd0JBQWtCRixXQUFXQyxRQUFYLEVBQXFCQyxlQUFyQixFQUFzQ2tDLE1BQXRDLENBQWxCO0FBQ0EsVUFBSWEscUJBQXFCLElBQXpCLEVBQStCO0FBQzdCO0FBQ0FELDhCQUFzQi9DLFFBQXRCO0FBQ0QsT0FIRCxNQUdPO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQWdELHlCQUFpQjdELE9BQWpCLEdBQTJCYSxRQUEzQjtBQUNEO0FBQ0RnRCx5QkFBbUJoRCxRQUFuQjtBQUNBZ0MsaUJBQVdpQixZQUFYO0FBQ0Q7O0FBRUQsUUFBSWQsV0FBV1MsWUFBWUUsTUFBM0IsRUFBbUM7QUFDakM7QUFDQTdELDhCQUF3QnpDLFdBQXhCLEVBQXFDd0YsUUFBckM7QUFDQSxhQUFPZSxtQkFBUDtBQUNEOztBQUVELFFBQUlmLGFBQWEsSUFBakIsRUFBdUI7QUFDckI7QUFDQTtBQUNBLGFBQU9HLFNBQVNTLFlBQVlFLE1BQTVCLEVBQW9DWCxRQUFwQyxFQUE4QztBQUM1QyxZQUFNbkMsWUFBVzJCLFlBQ2ZuRixXQURlLEVBRWZvRyxZQUFZVCxNQUFaLENBRmUsRUFHZnRDLGNBSGUsQ0FBakI7QUFLQSxZQUFJLENBQUNHLFNBQUwsRUFBZTtBQUNiO0FBQ0Q7QUFDREMsMEJBQWtCRixXQUFXQyxTQUFYLEVBQXFCQyxlQUFyQixFQUFzQ2tDLE1BQXRDLENBQWxCO0FBQ0EsWUFBSWEscUJBQXFCLElBQXpCLEVBQStCO0FBQzdCO0FBQ0FELGdDQUFzQi9DLFNBQXRCO0FBQ0QsU0FIRCxNQUdPO0FBQ0xnRCwyQkFBaUI3RCxPQUFqQixHQUEyQmEsU0FBM0I7QUFDRDtBQUNEZ0QsMkJBQW1CaEQsU0FBbkI7QUFDRDtBQUNELGFBQU8rQyxtQkFBUDtBQUNEOztBQUVEO0FBQ0EsUUFBTTFELG1CQUFtQkQscUJBQXFCNUMsV0FBckIsRUFBa0N3RixRQUFsQyxDQUF6Qjs7QUFFQTtBQUNBLFdBQU9HLFNBQVNTLFlBQVlFLE1BQTVCLEVBQW9DWCxRQUFwQyxFQUE4QztBQUM1QyxVQUFNbkMsYUFBV2tDLGNBQ2Y3QyxnQkFEZSxFQUVmN0MsV0FGZSxFQUdmMkYsTUFIZSxFQUlmUyxZQUFZVCxNQUFaLENBSmUsRUFLZnRDLGNBTGUsQ0FBakI7QUFPQSxVQUFJRyxVQUFKLEVBQWM7QUFDWixZQUFJeEIsc0JBQUosRUFBNEI7QUFDMUIsY0FBSXdCLFdBQVNHLFNBQVQsS0FBdUIsSUFBM0IsRUFBaUM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQWQsNkJBQWlCNkQsTUFBakIsQ0FDRWxELFdBQVM3RCxHQUFULEtBQWlCLElBQWpCLEdBQXdCZ0csTUFBeEIsR0FBaUNuQyxXQUFTN0QsR0FENUM7QUFHRDtBQUNGO0FBQ0Q4RCwwQkFBa0JGLFdBQVdDLFVBQVgsRUFBcUJDLGVBQXJCLEVBQXNDa0MsTUFBdEMsQ0FBbEI7QUFDQSxZQUFJYSxxQkFBcUIsSUFBekIsRUFBK0I7QUFDN0JELGdDQUFzQi9DLFVBQXRCO0FBQ0QsU0FGRCxNQUVPO0FBQ0xnRCwyQkFBaUI3RCxPQUFqQixHQUEyQmEsVUFBM0I7QUFDRDtBQUNEZ0QsMkJBQW1CaEQsVUFBbkI7QUFDRDtBQUNGOztBQUVELFFBQUl4QixzQkFBSixFQUE0QjtBQUMxQjtBQUNBO0FBQ0FhLHVCQUFpQjhELE9BQWpCLENBQXlCO0FBQUEsZUFBUzFFLFlBQVlqQyxXQUFaLEVBQXlCVCxLQUF6QixDQUFUO0FBQUEsT0FBekI7QUFDRDs7QUFFRCxXQUFPZ0gsbUJBQVA7QUFDRDs7QUFFRCxXQUFTSyx5QkFBVCxDQUNFNUcsV0FERixFQUVFMEMsaUJBRkYsRUFHRW1FLG1CQUhGLEVBSUV4RCxjQUpGLEVBS2dCO0FBQ2Q7QUFDQTs7QUFFQSxRQUFNeUQsYUFBYSxpQ0FBY0QsbUJBQWQsQ0FBbkI7QUFDQSw2QkFDRSxPQUFPQyxVQUFQLEtBQXNCLFVBRHhCLEVBRUUsMkVBQ0UsOEJBSEo7O0FBTUEsUUFBSXRILE9BQUosRUFBYTtBQUNYO0FBQ0EsVUFBSSxPQUFPcUgsb0JBQW9CRSxPQUEzQixLQUF1QyxVQUEzQyxFQUF1RDtBQUNyRCxZQUFNQyxjQUFlSCxtQkFBckI7QUFDQSxZQUFJRyxZQUFZRCxPQUFaLEtBQXdCRCxVQUE1QixFQUF3QztBQUN0QyxpQ0FDRTVILGdCQURGLEVBRUUsaUVBQ0UsaUVBREYsR0FFRSwwQkFKSixFQUtFRiw4QkFMRjtBQU9BRSw2QkFBbUIsSUFBbkI7QUFDRDtBQUNGOztBQUVEO0FBQ0E7QUFDQSxVQUFNa0gsZUFBY1UsV0FBV25GLElBQVgsQ0FBZ0JrRixtQkFBaEIsQ0FBcEI7QUFDQSxVQUFJVCxZQUFKLEVBQWlCO0FBQ2YsWUFBSUwsWUFBWSxJQUFoQjtBQUNBLFlBQUlrQixRQUFPYixhQUFZYyxJQUFaLEVBQVg7QUFDQSxlQUFPLENBQUNELE1BQUtFLElBQWIsRUFBbUJGLFFBQU9iLGFBQVljLElBQVosRUFBMUIsRUFBOEM7QUFDNUMsY0FBTTNILFFBQVEwSCxNQUFLaEcsS0FBbkI7QUFDQThFLHNCQUFZRCxpQkFBaUJ2RyxLQUFqQixFQUF3QndHLFNBQXhCLENBQVo7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsUUFBTUssY0FBY1UsV0FBV25GLElBQVgsQ0FBZ0JrRixtQkFBaEIsQ0FBcEI7QUFDQSw2QkFBVVQsZUFBZSxJQUF6QixFQUErQiwwQ0FBL0I7O0FBRUEsUUFBSUcsc0JBQW9DLElBQXhDO0FBQ0EsUUFBSUMsbUJBQWlDLElBQXJDOztBQUVBLFFBQUloQixXQUFXOUMsaUJBQWY7QUFDQSxRQUFJZSxrQkFBa0IsQ0FBdEI7QUFDQSxRQUFJa0MsU0FBUyxDQUFiO0FBQ0EsUUFBSWMsZUFBZSxJQUFuQjs7QUFFQSxRQUFJUSxPQUFPYixZQUFZYyxJQUFaLEVBQVg7QUFDQSxXQUVFMUIsYUFBYSxJQUFiLElBQXFCLENBQUN5QixLQUFLRSxJQUY3QixFQUdFeEIsVUFBVXNCLE9BQU9iLFlBQVljLElBQVosRUFIbkIsRUFJRTtBQUNBLFVBQUkxQixTQUFTdkMsS0FBVCxHQUFpQjBDLE1BQXJCLEVBQTZCO0FBQzNCYyx1QkFBZWpCLFFBQWY7QUFDQUEsbUJBQVcsSUFBWDtBQUNELE9BSEQsTUFHTztBQUNMaUIsdUJBQWVqQixTQUFTN0MsT0FBeEI7QUFDRDtBQUNELFVBQU1hLFdBQVcrQixXQUNmdkYsV0FEZSxFQUVmd0YsUUFGZSxFQUdmeUIsS0FBS2hHLEtBSFUsRUFJZm9DLGNBSmUsQ0FBakI7QUFNQSxVQUFJRyxhQUFhLElBQWpCLEVBQXVCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBSSxDQUFDZ0MsUUFBTCxFQUFlO0FBQ2JBLHFCQUFXaUIsWUFBWDtBQUNEO0FBQ0Q7QUFDRDtBQUNELFVBQUl6RSxzQkFBSixFQUE0QjtBQUMxQixZQUFJd0QsWUFBWWhDLFNBQVNHLFNBQVQsS0FBdUIsSUFBdkMsRUFBNkM7QUFDM0M7QUFDQTtBQUNBMUIsc0JBQVlqQyxXQUFaLEVBQXlCd0YsUUFBekI7QUFDRDtBQUNGO0FBQ0QvQix3QkFBa0JGLFdBQVdDLFFBQVgsRUFBcUJDLGVBQXJCLEVBQXNDa0MsTUFBdEMsQ0FBbEI7QUFDQSxVQUFJYSxxQkFBcUIsSUFBekIsRUFBK0I7QUFDN0I7QUFDQUQsOEJBQXNCL0MsUUFBdEI7QUFDRCxPQUhELE1BR087QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBZ0QseUJBQWlCN0QsT0FBakIsR0FBMkJhLFFBQTNCO0FBQ0Q7QUFDRGdELHlCQUFtQmhELFFBQW5CO0FBQ0FnQyxpQkFBV2lCLFlBQVg7QUFDRDs7QUFFRCxRQUFJUSxLQUFLRSxJQUFULEVBQWU7QUFDYjtBQUNBMUUsOEJBQXdCekMsV0FBeEIsRUFBcUN3RixRQUFyQztBQUNBLGFBQU9lLG1CQUFQO0FBQ0Q7O0FBRUQsUUFBSWYsYUFBYSxJQUFqQixFQUF1QjtBQUNyQjtBQUNBO0FBQ0EsYUFBTyxDQUFDeUIsS0FBS0UsSUFBYixFQUFtQnhCLFVBQVVzQixPQUFPYixZQUFZYyxJQUFaLEVBQXBDLEVBQXdEO0FBQ3RELFlBQU0xRCxhQUFXMkIsWUFBWW5GLFdBQVosRUFBeUJpSCxLQUFLaEcsS0FBOUIsRUFBcUNvQyxjQUFyQyxDQUFqQjtBQUNBLFlBQUlHLGVBQWEsSUFBakIsRUFBdUI7QUFDckI7QUFDRDtBQUNEQywwQkFBa0JGLFdBQVdDLFVBQVgsRUFBcUJDLGVBQXJCLEVBQXNDa0MsTUFBdEMsQ0FBbEI7QUFDQSxZQUFJYSxxQkFBcUIsSUFBekIsRUFBK0I7QUFDN0I7QUFDQUQsZ0NBQXNCL0MsVUFBdEI7QUFDRCxTQUhELE1BR087QUFDTGdELDJCQUFpQjdELE9BQWpCLEdBQTJCYSxVQUEzQjtBQUNEO0FBQ0RnRCwyQkFBbUJoRCxVQUFuQjtBQUNEO0FBQ0QsYUFBTytDLG1CQUFQO0FBQ0Q7O0FBRUQ7QUFDQSxRQUFNMUQsbUJBQW1CRCxxQkFBcUI1QyxXQUFyQixFQUFrQ3dGLFFBQWxDLENBQXpCOztBQUVBO0FBQ0EsV0FBTyxDQUFDeUIsS0FBS0UsSUFBYixFQUFtQnhCLFVBQVVzQixPQUFPYixZQUFZYyxJQUFaLEVBQXBDLEVBQXdEO0FBQ3RELFVBQU0xRCxhQUFXa0MsY0FDZjdDLGdCQURlLEVBRWY3QyxXQUZlLEVBR2YyRixNQUhlLEVBSWZzQixLQUFLaEcsS0FKVSxFQUtmb0MsY0FMZSxDQUFqQjtBQU9BLFVBQUlHLGVBQWEsSUFBakIsRUFBdUI7QUFDckIsWUFBSXhCLHNCQUFKLEVBQTRCO0FBQzFCLGNBQUl3QixXQUFTRyxTQUFULEtBQXVCLElBQTNCLEVBQWlDO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0FkLDZCQUFpQjZELE1BQWpCLENBQ0VsRCxXQUFTN0QsR0FBVCxLQUFpQixJQUFqQixHQUF3QmdHLE1BQXhCLEdBQWlDbkMsV0FBUzdELEdBRDVDO0FBR0Q7QUFDRjtBQUNEOEQsMEJBQWtCRixXQUFXQyxVQUFYLEVBQXFCQyxlQUFyQixFQUFzQ2tDLE1BQXRDLENBQWxCO0FBQ0EsWUFBSWEscUJBQXFCLElBQXpCLEVBQStCO0FBQzdCRCxnQ0FBc0IvQyxVQUF0QjtBQUNELFNBRkQsTUFFTztBQUNMZ0QsMkJBQWlCN0QsT0FBakIsR0FBMkJhLFVBQTNCO0FBQ0Q7QUFDRGdELDJCQUFtQmhELFVBQW5CO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJeEIsc0JBQUosRUFBNEI7QUFDMUI7QUFDQTtBQUNBYSx1QkFBaUI4RCxPQUFqQixDQUF5QjtBQUFBLGVBQVMxRSxZQUFZakMsV0FBWixFQUF5QlQsS0FBekIsQ0FBVDtBQUFBLE9BQXpCO0FBQ0Q7O0FBRUQsV0FBT2dILG1CQUFQO0FBQ0Q7O0FBRUQsV0FBU2EsdUJBQVQsQ0FDRXBILFdBREYsRUFFRTBDLGlCQUZGLEVBR0VzQixXQUhGLEVBSUVYLGNBSkYsRUFLUztBQUNQO0FBQ0E7QUFDQSxRQUFJWCxzQkFBc0IsSUFBdEIsSUFBOEJBLGtCQUFrQjlCLEdBQWxCLEtBQTBCcUQseUJBQTVELEVBQXNFO0FBQ3BFO0FBQ0E7QUFDQXhCLDhCQUF3QnpDLFdBQXhCLEVBQXFDMEMsa0JBQWtCQyxPQUF2RDtBQUNBLFVBQU15QixXQUFXbEIsU0FBU1IsaUJBQVQsRUFBNEJzQixXQUE1QixFQUF5Q1gsY0FBekMsQ0FBakI7QUFDQWUsZUFBU0QsTUFBVCxHQUFrQm5FLFdBQWxCO0FBQ0EsYUFBT29FLFFBQVA7QUFDRDtBQUNEO0FBQ0E7QUFDQTNCLDRCQUF3QnpDLFdBQXhCLEVBQXFDMEMsaUJBQXJDO0FBQ0EsUUFBTXdCLFVBQVUscUNBQ2RGLFdBRGMsRUFFZGhFLFlBQVlLLElBRkUsRUFHZGdELGNBSGMsQ0FBaEI7QUFLQWEsWUFBUUMsTUFBUixHQUFpQm5FLFdBQWpCO0FBQ0EsV0FBT2tFLE9BQVA7QUFDRDs7QUFFRCxXQUFTbUQsc0JBQVQsQ0FDRXJILFdBREYsRUFFRTBDLGlCQUZGLEVBR0V4QyxPQUhGLEVBSUVtRCxjQUpGLEVBS1M7QUFDUCxRQUFNMUQsTUFBTU8sUUFBUVAsR0FBcEI7QUFDQSxRQUFJSixRQUFRbUQsaUJBQVo7QUFDQSxXQUFPbkQsVUFBVSxJQUFqQixFQUF1QjtBQUNyQjtBQUNBO0FBQ0EsVUFBSUEsTUFBTUksR0FBTixLQUFjQSxHQUFsQixFQUF1QjtBQUNyQixZQUNFSixNQUFNcUIsR0FBTixLQUFjc0UseUJBQWQsR0FDSWhGLFFBQVFvQixJQUFSLEtBQWlCbUUsaUNBRHJCLEdBRUlsRyxNQUFNK0IsSUFBTixLQUFlcEIsUUFBUW9CLElBSDdCLEVBSUU7QUFDQW1CLGtDQUF3QnpDLFdBQXhCLEVBQXFDVCxNQUFNb0QsT0FBM0M7QUFDQSxjQUFNeUIsV0FBV2xCLFNBQ2YzRCxLQURlLEVBRWZXLFFBQVFvQixJQUFSLEtBQWlCbUUsaUNBQWpCLEdBQ0l2RixRQUFRb0UsS0FBUixDQUFjUyxRQURsQixHQUVJN0UsUUFBUW9FLEtBSkcsRUFLZmpCLGNBTGUsQ0FBakI7QUFPQWUsbUJBQVNoRSxHQUFULEdBQWVMLFVBQVVDLFdBQVYsRUFBdUJULEtBQXZCLEVBQThCVyxPQUE5QixDQUFmO0FBQ0FrRSxtQkFBU0QsTUFBVCxHQUFrQm5FLFdBQWxCO0FBQ0EsY0FBSVIsT0FBSixFQUFhO0FBQ1g0RSxxQkFBU0csWUFBVCxHQUF3QnJFLFFBQVFzRSxPQUFoQztBQUNBSixxQkFBU0ssV0FBVCxHQUF1QnZFLFFBQVFNLE1BQS9CO0FBQ0Q7QUFDRCxpQkFBTzRELFFBQVA7QUFDRCxTQXBCRCxNQW9CTztBQUNMM0Isa0NBQXdCekMsV0FBeEIsRUFBcUNULEtBQXJDO0FBQ0E7QUFDRDtBQUNGLE9BekJELE1BeUJPO0FBQ0wwQyxvQkFBWWpDLFdBQVosRUFBeUJULEtBQXpCO0FBQ0Q7QUFDREEsY0FBUUEsTUFBTW9ELE9BQWQ7QUFDRDs7QUFFRCxRQUFJekMsUUFBUW9CLElBQVIsS0FBaUJtRSxpQ0FBckIsRUFBMEM7QUFDeEMsVUFBTXZCLFVBQVUseUNBQ2RoRSxRQUFRb0UsS0FBUixDQUFjUyxRQURBLEVBRWQvRSxZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLEVBSWRuRCxRQUFRUCxHQUpNLENBQWhCO0FBTUF1RSxjQUFRQyxNQUFSLEdBQWlCbkUsV0FBakI7QUFDQSxhQUFPa0UsT0FBUDtBQUNELEtBVEQsTUFTTztBQUNMLFVBQU1BLFlBQVUsd0NBQ2RoRSxPQURjLEVBRWRGLFlBQVlLLElBRkUsRUFHZGdELGNBSGMsQ0FBaEI7QUFLQWEsZ0JBQVE5RCxHQUFSLEdBQWNMLFVBQVVDLFdBQVYsRUFBdUIwQyxpQkFBdkIsRUFBMEN4QyxPQUExQyxDQUFkO0FBQ0FnRSxnQkFBUUMsTUFBUixHQUFpQm5FLFdBQWpCO0FBQ0EsYUFBT2tFLFNBQVA7QUFDRDtBQUNGOztBQUVELFdBQVNvRCxxQkFBVCxDQUNFdEgsV0FERixFQUVFMEMsaUJBRkYsRUFHRWlDLE1BSEYsRUFJRXRCLGNBSkYsRUFLUztBQUNQLFFBQU0xRCxNQUFNZ0YsT0FBT2hGLEdBQW5CO0FBQ0EsUUFBSUosUUFBUW1ELGlCQUFaO0FBQ0EsV0FBT25ELFVBQVUsSUFBakIsRUFBdUI7QUFDckI7QUFDQTtBQUNBLFVBQUlBLE1BQU1JLEdBQU4sS0FBY0EsR0FBbEIsRUFBdUI7QUFDckIsWUFDRUosTUFBTXFCLEdBQU4sS0FBY2dFLDJCQUFkLElBQ0FyRixNQUFNdUIsU0FBTixDQUFnQitELGFBQWhCLEtBQWtDRixPQUFPRSxhQUR6QyxJQUVBdEYsTUFBTXVCLFNBQU4sQ0FBZ0JnRSxjQUFoQixLQUFtQ0gsT0FBT0csY0FINUMsRUFJRTtBQUNBckMsa0NBQXdCekMsV0FBeEIsRUFBcUNULE1BQU1vRCxPQUEzQztBQUNBLGNBQU15QixXQUFXbEIsU0FDZjNELEtBRGUsRUFFZm9GLE9BQU9JLFFBQVAsSUFBbUIsRUFGSixFQUdmMUIsY0FIZSxDQUFqQjtBQUtBZSxtQkFBU0QsTUFBVCxHQUFrQm5FLFdBQWxCO0FBQ0EsaUJBQU9vRSxRQUFQO0FBQ0QsU0FiRCxNQWFPO0FBQ0wzQixrQ0FBd0J6QyxXQUF4QixFQUFxQ1QsS0FBckM7QUFDQTtBQUNEO0FBQ0YsT0FsQkQsTUFrQk87QUFDTDBDLG9CQUFZakMsV0FBWixFQUF5QlQsS0FBekI7QUFDRDtBQUNEQSxjQUFRQSxNQUFNb0QsT0FBZDtBQUNEOztBQUVELFFBQU11QixVQUFVLHVDQUNkUyxNQURjLEVBRWQzRSxZQUFZSyxJQUZFLEVBR2RnRCxjQUhjLENBQWhCO0FBS0FhLFlBQVFDLE1BQVIsR0FBaUJuRSxXQUFqQjtBQUNBLFdBQU9rRSxPQUFQO0FBQ0Q7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsV0FBU3FELG9CQUFULENBQ0V2SCxXQURGLEVBRUUwQyxpQkFGRixFQUdFckIsUUFIRixFQUlFZ0MsY0FKRixFQUtnQjtBQUNkO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFFBQ0UsUUFBT2hDLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBcEIsSUFDQUEsYUFBYSxJQURiLElBRUFBLFNBQVNDLElBQVQsS0FBa0JtRSxpQ0FGbEIsSUFHQXBFLFNBQVMxQixHQUFULEtBQWlCLElBSm5CLEVBS0U7QUFDQTBCLGlCQUFXQSxTQUFTaUQsS0FBVCxDQUFlUyxRQUExQjtBQUNEOztBQUVEO0FBQ0EsUUFBTXlDLFdBQVcsUUFBT25HLFFBQVAseUNBQU9BLFFBQVAsT0FBb0IsUUFBcEIsSUFBZ0NBLGFBQWEsSUFBOUQ7O0FBRUEsUUFBSW1HLFFBQUosRUFBYztBQUNaLGNBQVFuRyxTQUFTK0QsUUFBakI7QUFDRSxhQUFLQyxnQ0FBTDtBQUNFLGlCQUFPdkIsaUJBQ0x1RCx1QkFDRXJILFdBREYsRUFFRTBDLGlCQUZGLEVBR0VyQixRQUhGLEVBSUVnQyxjQUpGLENBREssQ0FBUDtBQVFGLGFBQUtpQywrQkFBTDtBQUNFLGlCQUFPeEIsaUJBQ0x3RCxzQkFDRXRILFdBREYsRUFFRTBDLGlCQUZGLEVBR0VyQixRQUhGLEVBSUVnQyxjQUpGLENBREssQ0FBUDtBQVhKO0FBb0JEOztBQUVELFFBQUksT0FBT2hDLFFBQVAsS0FBb0IsUUFBcEIsSUFBZ0MsT0FBT0EsUUFBUCxLQUFvQixRQUF4RCxFQUFrRTtBQUNoRSxhQUFPeUMsaUJBQ0xzRCx3QkFDRXBILFdBREYsRUFFRTBDLGlCQUZGLEVBR0UsS0FBS3JCLFFBSFAsRUFJRWdDLGNBSkYsQ0FESyxDQUFQO0FBUUQ7O0FBRUQsUUFBSXhELFFBQVF3QixRQUFSLENBQUosRUFBdUI7QUFDckIsYUFBTzhFLHVCQUNMbkcsV0FESyxFQUVMMEMsaUJBRkssRUFHTHJCLFFBSEssRUFJTGdDLGNBSkssQ0FBUDtBQU1EOztBQUVELFFBQUksaUNBQWNoQyxRQUFkLENBQUosRUFBNkI7QUFDM0IsYUFBT3VGLDBCQUNMNUcsV0FESyxFQUVMMEMsaUJBRkssRUFHTHJCLFFBSEssRUFJTGdDLGNBSkssQ0FBUDtBQU1EOztBQUVELFFBQUltRSxRQUFKLEVBQWM7QUFDWnBHLCtCQUF5QnBCLFdBQXpCLEVBQXNDcUIsUUFBdEM7QUFDRDs7QUFFRCxRQUFJN0IsT0FBSixFQUFhO0FBQ1gsVUFBSSxPQUFPNkIsUUFBUCxLQUFvQixVQUF4QixFQUFvQztBQUNsQ1M7QUFDRDtBQUNGO0FBQ0QsUUFBSSxPQUFPVCxRQUFQLEtBQW9CLFdBQXhCLEVBQXFDO0FBQ25DO0FBQ0E7QUFDQTtBQUNBLGNBQVFyQixZQUFZWSxHQUFwQjtBQUNFLGFBQUtDLCtCQUFMO0FBQXFCO0FBQ25CLGdCQUFJckIsT0FBSixFQUFhO0FBQ1gsa0JBQU1pSSxXQUFXekgsWUFBWWMsU0FBN0I7QUFDQSxrQkFBSTJHLFNBQVNDLE1BQVQsQ0FBZ0JDLGVBQXBCLEVBQXFDO0FBQ25DO0FBQ0E7QUFDRDtBQUNGO0FBQ0Y7QUFDRDtBQUNBO0FBQ0E7QUFDQSxhQUFLQyxvQ0FBTDtBQUEwQjtBQUN4QixnQkFBTUMsWUFBWTdILFlBQVlzQixJQUE5QjtBQUNBLHFDQUNFLEtBREYsRUFFRSxxRUFDRSxzREFERixHQUVFLGNBSkosRUFLRXVHLFVBQVVDLFdBQVYsSUFBeUJELFVBQVVFLElBQW5DLElBQTJDLFdBTDdDO0FBT0Q7QUF0Qkg7QUF3QkQ7O0FBRUQ7QUFDQSxXQUFPdEYsd0JBQXdCekMsV0FBeEIsRUFBcUMwQyxpQkFBckMsQ0FBUDtBQUNEOztBQUVELFNBQU82RSxvQkFBUDtBQUNEOztBQUVNLElBQU1BLHNEQUF1QnhGLGdCQUFnQixJQUFoQixDQUE3QjtBQUNBLElBQU1pRyw4Q0FBbUJqRyxnQkFBZ0IsS0FBaEIsQ0FBekI7O0FBRUEsU0FBU2hELGdCQUFULENBQ0xrQixPQURLLEVBRUxnSSxjQUZLLEVBR0M7QUFDTiwyQkFDRWhJLFlBQVksSUFBWixJQUFvQmdJLGVBQWUxSSxLQUFmLEtBQXlCVSxRQUFRVixLQUR2RCxFQUVFLG9DQUZGOztBQUtBLE1BQUkwSSxlQUFlMUksS0FBZixLQUF5QixJQUE3QixFQUFtQztBQUNqQztBQUNEOztBQUVELE1BQUkySSxlQUFlRCxlQUFlMUksS0FBbEM7QUFDQSxNQUFJOEIsV0FBVyxzQ0FDYjZHLFlBRGEsRUFFYkEsYUFBYTlFLFlBRkEsRUFHYjhFLGFBQWE3RSxjQUhBLENBQWY7QUFLQTRFLGlCQUFlMUksS0FBZixHQUF1QjhCLFFBQXZCOztBQUVBQSxXQUFTOEMsTUFBVCxHQUFrQjhELGNBQWxCO0FBQ0EsU0FBT0MsYUFBYXZGLE9BQWIsS0FBeUIsSUFBaEMsRUFBc0M7QUFDcEN1RixtQkFBZUEsYUFBYXZGLE9BQTVCO0FBQ0F0QixlQUFXQSxTQUFTc0IsT0FBVCxHQUFtQixzQ0FDNUJ1RixZQUQ0QixFQUU1QkEsYUFBYTlFLFlBRmUsRUFHNUI4RSxhQUFhN0UsY0FIZSxDQUE5QjtBQUtBaEMsYUFBUzhDLE1BQVQsR0FBa0I4RCxjQUFsQjtBQUNEO0FBQ0Q1RyxXQUFTc0IsT0FBVCxHQUFtQixJQUFuQjtBQUNEIiwiZmlsZSI6IlJlYWN0Q2hpbGRGaWJlci5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge1JlYWN0RWxlbWVudH0gZnJvbSAnc2hhcmVkL1JlYWN0RWxlbWVudFR5cGUnO1xuaW1wb3J0IHR5cGUge1JlYWN0UG9ydGFsfSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlcyc7XG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJ3JlYWN0LXJlY29uY2lsZXIvc3JjL1JlYWN0RmliZXInO1xuaW1wb3J0IHR5cGUge0V4cGlyYXRpb25UaW1lfSBmcm9tICdyZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyRXhwaXJhdGlvblRpbWUnO1xuXG5pbXBvcnQgZ2V0Q29tcG9uZW50TmFtZSBmcm9tICdzaGFyZWQvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQge1BsYWNlbWVudCwgRGVsZXRpb259IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVPZlNpZGVFZmZlY3QnO1xuaW1wb3J0IHtcbiAgZ2V0SXRlcmF0b3JGbixcbiAgUkVBQ1RfRUxFTUVOVF9UWVBFLFxuICBSRUFDVF9GUkFHTUVOVF9UWVBFLFxuICBSRUFDVF9QT1JUQUxfVFlQRSxcbn0gZnJvbSAnc2hhcmVkL1JlYWN0U3ltYm9scyc7XG5pbXBvcnQge1xuICBGdW5jdGlvbmFsQ29tcG9uZW50LFxuICBDbGFzc0NvbXBvbmVudCxcbiAgSG9zdFRleHQsXG4gIEhvc3RQb3J0YWwsXG4gIEZyYWdtZW50LFxufSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlT2ZXb3JrJztcbmltcG9ydCB7Z2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcn0gZnJvbSAnc2hhcmVkL1JlYWN0RmliZXJDb21wb25lbnRUcmVlSG9vayc7XG5pbXBvcnQgZW1wdHlPYmplY3QgZnJvbSAnZmJqcy9saWIvZW1wdHlPYmplY3QnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdmYmpzL2xpYi9pbnZhcmlhbnQnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnZmJqcy9saWIvd2FybmluZyc7XG5cbmltcG9ydCB7XG4gIGNyZWF0ZVdvcmtJblByb2dyZXNzLFxuICBjcmVhdGVGaWJlckZyb21FbGVtZW50LFxuICBjcmVhdGVGaWJlckZyb21GcmFnbWVudCxcbiAgY3JlYXRlRmliZXJGcm9tVGV4dCxcbiAgY3JlYXRlRmliZXJGcm9tUG9ydGFsLFxufSBmcm9tICcuL1JlYWN0RmliZXInO1xuaW1wb3J0IFJlYWN0RGVidWdDdXJyZW50RmliZXIgZnJvbSAnLi9SZWFjdERlYnVnQ3VycmVudEZpYmVyJztcbmltcG9ydCB7U3RyaWN0TW9kZX0gZnJvbSAnLi9SZWFjdFR5cGVPZk1vZGUnO1xuXG5jb25zdCB7Z2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bX0gPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyO1xuXG5sZXQgZGlkV2FybkFib3V0TWFwcztcbmxldCBkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGU7XG5sZXQgb3duZXJIYXNLZXlVc2VXYXJuaW5nO1xubGV0IG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZztcbmxldCB3YXJuRm9yTWlzc2luZ0tleSA9IChjaGlsZDogbWl4ZWQpID0+IHt9O1xuXG5pZiAoX19ERVZfXykge1xuICBkaWRXYXJuQWJvdXRNYXBzID0gZmFsc2U7XG4gIGRpZFdhcm5BYm91dFN0cmluZ1JlZkluU3RyaWN0TW9kZSA9IHt9O1xuXG4gIC8qKlxuICAgKiBXYXJuIGlmIHRoZXJlJ3Mgbm8ga2V5IGV4cGxpY2l0bHkgc2V0IG9uIGR5bmFtaWMgYXJyYXlzIG9mIGNoaWxkcmVuIG9yXG4gICAqIG9iamVjdCBrZXlzIGFyZSBub3QgdmFsaWQuIFRoaXMgYWxsb3dzIHVzIHRvIGtlZXAgdHJhY2sgb2YgY2hpbGRyZW4gYmV0d2VlblxuICAgKiB1cGRhdGVzLlxuICAgKi9cbiAgb3duZXJIYXNLZXlVc2VXYXJuaW5nID0ge307XG4gIG93bmVySGFzRnVuY3Rpb25UeXBlV2FybmluZyA9IHt9O1xuXG4gIHdhcm5Gb3JNaXNzaW5nS2V5ID0gKGNoaWxkOiBtaXhlZCkgPT4ge1xuICAgIGlmIChjaGlsZCA9PT0gbnVsbCB8fCB0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghY2hpbGQuX3N0b3JlIHx8IGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgfHwgY2hpbGQua2V5ICE9IG51bGwpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGNoaWxkLl9zdG9yZSA9PT0gJ29iamVjdCcsXG4gICAgICAnUmVhY3QgQ29tcG9uZW50IGluIHdhcm5Gb3JNaXNzaW5nS2V5IHNob3VsZCBoYXZlIGEgX3N0b3JlLiAnICtcbiAgICAgICAgJ1RoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyxcbiAgICApO1xuICAgIGNoaWxkLl9zdG9yZS52YWxpZGF0ZWQgPSB0cnVlO1xuXG4gICAgY29uc3QgY3VycmVudENvbXBvbmVudEVycm9ySW5mbyA9XG4gICAgICAnRWFjaCBjaGlsZCBpbiBhbiBhcnJheSBvciBpdGVyYXRvciBzaG91bGQgaGF2ZSBhIHVuaXF1ZSAnICtcbiAgICAgICdcImtleVwiIHByb3AuIFNlZSBodHRwczovL2ZiLm1lL3JlYWN0LXdhcm5pbmcta2V5cyBmb3IgJyArXG4gICAgICAnbW9yZSBpbmZvcm1hdGlvbi4nICtcbiAgICAgIChnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkgfHwgJycpO1xuICAgIGlmIChvd25lckhhc0tleVVzZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb3duZXJIYXNLZXlVc2VXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTtcblxuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgICdFYWNoIGNoaWxkIGluIGFuIGFycmF5IG9yIGl0ZXJhdG9yIHNob3VsZCBoYXZlIGEgdW5pcXVlICcgK1xuICAgICAgICAnXCJrZXlcIiBwcm9wLiBTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC13YXJuaW5nLWtleXMgZm9yICcgK1xuICAgICAgICAnbW9yZSBpbmZvcm1hdGlvbi4lcycsXG4gICAgICBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCksXG4gICAgKTtcbiAgfTtcbn1cblxuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmZ1bmN0aW9uIGNvZXJjZVJlZihcbiAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICBjdXJyZW50OiBGaWJlciB8IG51bGwsXG4gIGVsZW1lbnQ6IFJlYWN0RWxlbWVudCxcbikge1xuICBsZXQgbWl4ZWRSZWYgPSBlbGVtZW50LnJlZjtcbiAgaWYgKFxuICAgIG1peGVkUmVmICE9PSBudWxsICYmXG4gICAgdHlwZW9mIG1peGVkUmVmICE9PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIG1peGVkUmVmICE9PSAnb2JqZWN0J1xuICApIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHJldHVybkZpYmVyLm1vZGUgJiBTdHJpY3RNb2RlKSB7XG4gICAgICAgIGNvbnN0IGNvbXBvbmVudE5hbWUgPSBnZXRDb21wb25lbnROYW1lKHJldHVybkZpYmVyKSB8fCAnQ29tcG9uZW50JztcbiAgICAgICAgaWYgKCFkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGVbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAnQSBzdHJpbmcgcmVmLCBcIiVzXCIswqBoYXMgYmVlbiBmb3VuZCB3aXRoaW4gYSBzdHJpY3QgbW9kZSB0cmVlLiAnICtcbiAgICAgICAgICAgICAgJ1N0cmluZyByZWZzIGFyZSBhIHNvdXJjZSBvZiBwb3RlbnRpYWwgYnVncyBhbmQgc2hvdWxkIGJlIGF2b2lkZWQuICcgK1xuICAgICAgICAgICAgICAnV2UgcmVjb21tZW5kIHVzaW5nIGNyZWF0ZVJlZigpIGluc3RlYWQuJyArXG4gICAgICAgICAgICAgICdcXG4lcycgK1xuICAgICAgICAgICAgICAnXFxuXFxuTGVhcm4gbW9yZSBhYm91dCB1c2luZyByZWZzIHNhZmVseSBoZXJlOicgK1xuICAgICAgICAgICAgICAnXFxuaHR0cHM6Ly9mYi5tZS9yZWFjdC1zdHJpY3QtbW9kZS1zdHJpbmctcmVmJyxcbiAgICAgICAgICAgIG1peGVkUmVmLFxuICAgICAgICAgICAgZ2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcihyZXR1cm5GaWJlciksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRTdHJpbmdSZWZJblN0cmljdE1vZGVbY29tcG9uZW50TmFtZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQuX293bmVyKSB7XG4gICAgICBjb25zdCBvd25lcjogP0ZpYmVyID0gKGVsZW1lbnQuX293bmVyOiBhbnkpO1xuICAgICAgbGV0IGluc3Q7XG4gICAgICBpZiAob3duZXIpIHtcbiAgICAgICAgY29uc3Qgb3duZXJGaWJlciA9ICgob3duZXI6IGFueSk6IEZpYmVyKTtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIG93bmVyRmliZXIudGFnID09PSBDbGFzc0NvbXBvbmVudCxcbiAgICAgICAgICAnU3RhdGVsZXNzIGZ1bmN0aW9uIGNvbXBvbmVudHMgY2Fubm90IGhhdmUgcmVmcy4nLFxuICAgICAgICApO1xuICAgICAgICBpbnN0ID0gb3duZXJGaWJlci5zdGF0ZU5vZGU7XG4gICAgICB9XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIGluc3QsXG4gICAgICAgICdNaXNzaW5nIG93bmVyIGZvciBzdHJpbmcgcmVmICVzLiBUaGlzIGVycm9yIGlzIGxpa2VseSBjYXVzZWQgYnkgYSAnICtcbiAgICAgICAgICAnYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLFxuICAgICAgICBtaXhlZFJlZixcbiAgICAgICk7XG4gICAgICBjb25zdCBzdHJpbmdSZWYgPSAnJyArIG1peGVkUmVmO1xuICAgICAgLy8gQ2hlY2sgaWYgcHJldmlvdXMgc3RyaW5nIHJlZiBtYXRjaGVzIG5ldyBzdHJpbmcgcmVmXG4gICAgICBpZiAoXG4gICAgICAgIGN1cnJlbnQgIT09IG51bGwgJiZcbiAgICAgICAgY3VycmVudC5yZWYgIT09IG51bGwgJiZcbiAgICAgICAgY3VycmVudC5yZWYuX3N0cmluZ1JlZiA9PT0gc3RyaW5nUmVmXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIGN1cnJlbnQucmVmO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVmID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgY29uc3QgcmVmcyA9IGluc3QucmVmcyA9PT0gZW1wdHlPYmplY3QgPyAoaW5zdC5yZWZzID0ge30pIDogaW5zdC5yZWZzO1xuICAgICAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgICAgICBkZWxldGUgcmVmc1tzdHJpbmdSZWZdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnNbc3RyaW5nUmVmXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmVmLl9zdHJpbmdSZWYgPSBzdHJpbmdSZWY7XG4gICAgICByZXR1cm4gcmVmO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgIHR5cGVvZiBtaXhlZFJlZiA9PT0gJ3N0cmluZycsXG4gICAgICAgICdFeHBlY3RlZCByZWYgdG8gYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZy4nLFxuICAgICAgKTtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZWxlbWVudC5fb3duZXIsXG4gICAgICAgICdFbGVtZW50IHJlZiB3YXMgc3BlY2lmaWVkIGFzIGEgc3RyaW5nICglcykgYnV0IG5vIG93bmVyIHdhcyBzZXQuIFRoaXMgY291bGQgaGFwcGVuIGZvciBvbmUgb2YnICtcbiAgICAgICAgICAnIHRoZSBmb2xsb3dpbmcgcmVhc29uczpcXG4nICtcbiAgICAgICAgICAnMS4gWW91IG1heSBiZSBhZGRpbmcgYSByZWYgdG8gYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxcbicgK1xuICAgICAgICAgIFwiMi4gWW91IG1heSBiZSBhZGRpbmcgYSByZWYgdG8gYSBjb21wb25lbnQgdGhhdCB3YXMgbm90IGNyZWF0ZWQgaW5zaWRlIGEgY29tcG9uZW50J3MgcmVuZGVyIG1ldGhvZFxcblwiICtcbiAgICAgICAgICAnMy4gWW91IGhhdmUgbXVsdGlwbGUgY29waWVzIG9mIFJlYWN0IGxvYWRlZFxcbicgK1xuICAgICAgICAgICdTZWUgaHR0cHM6Ly9mYi5tZS9yZWFjdC1yZWZzLW11c3QtaGF2ZS1vd25lciBmb3IgbW9yZSBpbmZvcm1hdGlvbi4nLFxuICAgICAgICBtaXhlZFJlZixcbiAgICAgICk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaXhlZFJlZjtcbn1cblxuZnVuY3Rpb24gdGhyb3dPbkludmFsaWRPYmplY3RUeXBlKHJldHVybkZpYmVyOiBGaWJlciwgbmV3Q2hpbGQ6IE9iamVjdCkge1xuICBpZiAocmV0dXJuRmliZXIudHlwZSAhPT0gJ3RleHRhcmVhJykge1xuICAgIGxldCBhZGRlbmR1bSA9ICcnO1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBhZGRlbmR1bSA9XG4gICAgICAgICcgSWYgeW91IG1lYW50IHRvIHJlbmRlciBhIGNvbGxlY3Rpb24gb2YgY2hpbGRyZW4sIHVzZSBhbiBhcnJheSAnICtcbiAgICAgICAgJ2luc3RlYWQuJyArXG4gICAgICAgIChnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkgfHwgJycpO1xuICAgIH1cbiAgICBpbnZhcmlhbnQoXG4gICAgICBmYWxzZSxcbiAgICAgICdPYmplY3RzIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZCAoZm91bmQ6ICVzKS4lcycsXG4gICAgICBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobmV3Q2hpbGQpID09PSAnW29iamVjdCBPYmplY3RdJ1xuICAgICAgICA/ICdvYmplY3Qgd2l0aCBrZXlzIHsnICsgT2JqZWN0LmtleXMobmV3Q2hpbGQpLmpvaW4oJywgJykgKyAnfSdcbiAgICAgICAgOiBuZXdDaGlsZCxcbiAgICAgIGFkZGVuZHVtLFxuICAgICk7XG4gIH1cbn1cblxuZnVuY3Rpb24gd2Fybk9uRnVuY3Rpb25UeXBlKCkge1xuICBjb25zdCBjdXJyZW50Q29tcG9uZW50RXJyb3JJbmZvID1cbiAgICAnRnVuY3Rpb25zIGFyZSBub3QgdmFsaWQgYXMgYSBSZWFjdCBjaGlsZC4gVGhpcyBtYXkgaGFwcGVuIGlmICcgK1xuICAgICd5b3UgcmV0dXJuIGEgQ29tcG9uZW50IGluc3RlYWQgb2YgPENvbXBvbmVudCAvPiBmcm9tIHJlbmRlci4gJyArXG4gICAgJ09yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LicgK1xuICAgIChnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkgfHwgJycpO1xuXG4gIGlmIChvd25lckhhc0Z1bmN0aW9uVHlwZVdhcm5pbmdbY3VycmVudENvbXBvbmVudEVycm9ySW5mb10pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgb3duZXJIYXNGdW5jdGlvblR5cGVXYXJuaW5nW2N1cnJlbnRDb21wb25lbnRFcnJvckluZm9dID0gdHJ1ZTtcblxuICB3YXJuaW5nKFxuICAgIGZhbHNlLFxuICAgICdGdW5jdGlvbnMgYXJlIG5vdCB2YWxpZCBhcyBhIFJlYWN0IGNoaWxkLiBUaGlzIG1heSBoYXBwZW4gaWYgJyArXG4gICAgICAneW91IHJldHVybiBhIENvbXBvbmVudCBpbnN0ZWFkIG9mIDxDb21wb25lbnQgLz4gZnJvbSByZW5kZXIuICcgK1xuICAgICAgJ09yIG1heWJlIHlvdSBtZWFudCB0byBjYWxsIHRoaXMgZnVuY3Rpb24gcmF0aGVyIHRoYW4gcmV0dXJuIGl0LiVzJyxcbiAgICBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCkgfHwgJycsXG4gICk7XG59XG5cbi8vIFRoaXMgd3JhcHBlciBmdW5jdGlvbiBleGlzdHMgYmVjYXVzZSBJIGV4cGVjdCB0byBjbG9uZSB0aGUgY29kZSBpbiBlYWNoIHBhdGhcbi8vIHRvIGJlIGFibGUgdG8gb3B0aW1pemUgZWFjaCBwYXRoIGluZGl2aWR1YWxseSBieSBicmFuY2hpbmcgZWFybHkuIFRoaXMgbmVlZHNcbi8vIGEgY29tcGlsZXIgb3Igd2UgY2FuIGRvIGl0IG1hbnVhbGx5LiBIZWxwZXJzIHRoYXQgZG9uJ3QgbmVlZCB0aGlzIGJyYW5jaGluZ1xuLy8gbGl2ZSBvdXRzaWRlIG9mIHRoaXMgZnVuY3Rpb24uXG5mdW5jdGlvbiBDaGlsZFJlY29uY2lsZXIoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICBmdW5jdGlvbiBkZWxldGVDaGlsZChyZXR1cm5GaWJlcjogRmliZXIsIGNoaWxkVG9EZWxldGU6IEZpYmVyKTogdm9pZCB7XG4gICAgaWYgKCFzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAvLyBOb29wLlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBEZWxldGlvbnMgYXJlIGFkZGVkIGluIHJldmVyc2VkIG9yZGVyIHNvIHdlIGFkZCBpdCB0byB0aGUgZnJvbnQuXG4gICAgLy8gQXQgdGhpcyBwb2ludCwgdGhlIHJldHVybiBmaWJlcidzIGVmZmVjdCBsaXN0IGlzIGVtcHR5IGV4Y2VwdCBmb3JcbiAgICAvLyBkZWxldGlvbnMsIHNvIHdlIGNhbiBqdXN0IGFwcGVuZCB0aGUgZGVsZXRpb24gdG8gdGhlIGxpc3QuIFRoZSByZW1haW5pbmdcbiAgICAvLyBlZmZlY3RzIGFyZW4ndCBhZGRlZCB1bnRpbCB0aGUgY29tcGxldGUgcGhhc2UuIE9uY2Ugd2UgaW1wbGVtZW50XG4gICAgLy8gcmVzdW1pbmcsIHRoaXMgbWF5IG5vdCBiZSB0cnVlLlxuICAgIGNvbnN0IGxhc3QgPSByZXR1cm5GaWJlci5sYXN0RWZmZWN0O1xuICAgIGlmIChsYXN0ICE9PSBudWxsKSB7XG4gICAgICBsYXN0Lm5leHRFZmZlY3QgPSBjaGlsZFRvRGVsZXRlO1xuICAgICAgcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gcmV0dXJuRmliZXIubGFzdEVmZmVjdCA9IGNoaWxkVG9EZWxldGU7XG4gICAgfVxuICAgIGNoaWxkVG9EZWxldGUubmV4dEVmZmVjdCA9IG51bGw7XG4gICAgY2hpbGRUb0RlbGV0ZS5lZmZlY3RUYWcgPSBEZWxldGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKFxuICAgIHJldHVybkZpYmVyOiBGaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZDogRmliZXIgfCBudWxsLFxuICApOiBudWxsIHtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvLyBUT0RPOiBGb3IgdGhlIHNob3VsZENsb25lIGNhc2UsIHRoaXMgY291bGQgYmUgbWljcm8tb3B0aW1pemVkIGEgYml0IGJ5XG4gICAgLy8gYXNzdW1pbmcgdGhhdCBhZnRlciB0aGUgZmlyc3QgY2hpbGQgd2UndmUgYWxyZWFkeSBhZGRlZCBldmVyeXRoaW5nLlxuICAgIGxldCBjaGlsZFRvRGVsZXRlID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgd2hpbGUgKGNoaWxkVG9EZWxldGUgIT09IG51bGwpIHtcbiAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZFRvRGVsZXRlKTtcbiAgICAgIGNoaWxkVG9EZWxldGUgPSBjaGlsZFRvRGVsZXRlLnNpYmxpbmc7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFwUmVtYWluaW5nQ2hpbGRyZW4oXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkOiBGaWJlcixcbiAgKTogTWFwPHN0cmluZyB8IG51bWJlciwgRmliZXI+IHtcbiAgICAvLyBBZGQgdGhlIHJlbWFpbmluZyBjaGlsZHJlbiB0byBhIHRlbXBvcmFyeSBtYXAgc28gdGhhdCB3ZSBjYW4gZmluZCB0aGVtIGJ5XG4gICAgLy8ga2V5cyBxdWlja2x5LiBJbXBsaWNpdCAobnVsbCkga2V5cyBnZXQgYWRkZWQgdG8gdGhpcyBzZXQgd2l0aCB0aGVpciBpbmRleFxuICAgIC8vIGluc3RlYWQuXG4gICAgY29uc3QgZXhpc3RpbmdDaGlsZHJlbjogTWFwPHN0cmluZyB8IG51bWJlciwgRmliZXI+ID0gbmV3IE1hcCgpO1xuXG4gICAgbGV0IGV4aXN0aW5nQ2hpbGQgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICB3aGlsZSAoZXhpc3RpbmdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgaWYgKGV4aXN0aW5nQ2hpbGQua2V5ICE9PSBudWxsKSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQua2V5LCBleGlzdGluZ0NoaWxkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uc2V0KGV4aXN0aW5nQ2hpbGQuaW5kZXgsIGV4aXN0aW5nQ2hpbGQpO1xuICAgICAgfVxuICAgICAgZXhpc3RpbmdDaGlsZCA9IGV4aXN0aW5nQ2hpbGQuc2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIGV4aXN0aW5nQ2hpbGRyZW47XG4gIH1cblxuICBmdW5jdGlvbiB1c2VGaWJlcihcbiAgICBmaWJlcjogRmliZXIsXG4gICAgcGVuZGluZ1Byb3BzOiBtaXhlZCxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHtcbiAgICAvLyBXZSBjdXJyZW50bHkgc2V0IHNpYmxpbmcgdG8gbnVsbCBhbmQgaW5kZXggdG8gMCBoZXJlIGJlY2F1c2UgaXQgaXMgZWFzeVxuICAgIC8vIHRvIGZvcmdldCB0byBkbyBiZWZvcmUgcmV0dXJuaW5nIGl0LiBFLmcuIGZvciB0aGUgc2luZ2xlIGNoaWxkIGNhc2UuXG4gICAgY29uc3QgY2xvbmUgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhmaWJlciwgcGVuZGluZ1Byb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgY2xvbmUuaW5kZXggPSAwO1xuICAgIGNsb25lLnNpYmxpbmcgPSBudWxsO1xuICAgIHJldHVybiBjbG9uZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBsYWNlQ2hpbGQoXG4gICAgbmV3RmliZXI6IEZpYmVyLFxuICAgIGxhc3RQbGFjZWRJbmRleDogbnVtYmVyLFxuICAgIG5ld0luZGV4OiBudW1iZXIsXG4gICk6IG51bWJlciB7XG4gICAgbmV3RmliZXIuaW5kZXggPSBuZXdJbmRleDtcbiAgICBpZiAoIXNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgIC8vIE5vb3AuXG4gICAgICByZXR1cm4gbGFzdFBsYWNlZEluZGV4O1xuICAgIH1cbiAgICBjb25zdCBjdXJyZW50ID0gbmV3RmliZXIuYWx0ZXJuYXRlO1xuICAgIGlmIChjdXJyZW50ICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBvbGRJbmRleCA9IGN1cnJlbnQuaW5kZXg7XG4gICAgICBpZiAob2xkSW5kZXggPCBsYXN0UGxhY2VkSW5kZXgpIHtcbiAgICAgICAgLy8gVGhpcyBpcyBhIG1vdmUuXG4gICAgICAgIG5ld0ZpYmVyLmVmZmVjdFRhZyA9IFBsYWNlbWVudDtcbiAgICAgICAgcmV0dXJuIGxhc3RQbGFjZWRJbmRleDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRoaXMgaXRlbSBjYW4gc3RheSBpbiBwbGFjZS5cbiAgICAgICAgcmV0dXJuIG9sZEluZGV4O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBUaGlzIGlzIGFuIGluc2VydGlvbi5cbiAgICAgIG5ld0ZpYmVyLmVmZmVjdFRhZyA9IFBsYWNlbWVudDtcbiAgICAgIHJldHVybiBsYXN0UGxhY2VkSW5kZXg7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGxhY2VTaW5nbGVDaGlsZChuZXdGaWJlcjogRmliZXIpOiBGaWJlciB7XG4gICAgLy8gVGhpcyBpcyBzaW1wbGVyIGZvciB0aGUgc2luZ2xlIGNoaWxkIGNhc2UuIFdlIG9ubHkgbmVlZCB0byBkbyBhXG4gICAgLy8gcGxhY2VtZW50IGZvciBpbnNlcnRpbmcgbmV3IGNoaWxkcmVuLlxuICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzICYmIG5ld0ZpYmVyLmFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgICAgbmV3RmliZXIuZWZmZWN0VGFnID0gUGxhY2VtZW50O1xuICAgIH1cbiAgICByZXR1cm4gbmV3RmliZXI7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVUZXh0Tm9kZShcbiAgICByZXR1cm5GaWJlcjogRmliZXIsXG4gICAgY3VycmVudDogRmliZXIgfCBudWxsLFxuICAgIHRleHRDb250ZW50OiBzdHJpbmcsXG4gICAgZXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICApIHtcbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50LnRhZyAhPT0gSG9zdFRleHQpIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQoXG4gICAgICAgIHRleHRDb250ZW50LFxuICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgICBjcmVhdGVkLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFVwZGF0ZVxuICAgICAgY29uc3QgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCB0ZXh0Q29udGVudCwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRWxlbWVudChcbiAgICByZXR1cm5GaWJlcjogRmliZXIsXG4gICAgY3VycmVudDogRmliZXIgfCBudWxsLFxuICAgIGVsZW1lbnQ6IFJlYWN0RWxlbWVudCxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHtcbiAgICBpZiAoY3VycmVudCAhPT0gbnVsbCAmJiBjdXJyZW50LnR5cGUgPT09IGVsZW1lbnQudHlwZSkge1xuICAgICAgLy8gTW92ZSBiYXNlZCBvbiBpbmRleFxuICAgICAgY29uc3QgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50LCBlbGVtZW50LnByb3BzLCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnQsIGVsZW1lbnQpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBleGlzdGluZy5fZGVidWdTb3VyY2UgPSBlbGVtZW50Ll9zb3VyY2U7XG4gICAgICAgIGV4aXN0aW5nLl9kZWJ1Z093bmVyID0gZWxlbWVudC5fb3duZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIEluc2VydFxuICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUVsZW1lbnQoXG4gICAgICAgIGVsZW1lbnQsXG4gICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgKTtcbiAgICAgIGNyZWF0ZWQucmVmID0gY29lcmNlUmVmKHJldHVybkZpYmVyLCBjdXJyZW50LCBlbGVtZW50KTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQb3J0YWwoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnQ6IEZpYmVyIHwgbnVsbCxcbiAgICBwb3J0YWw6IFJlYWN0UG9ydGFsLFxuICAgIGV4cGlyYXRpb25UaW1lOiBFeHBpcmF0aW9uVGltZSxcbiAgKTogRmliZXIge1xuICAgIGlmIChcbiAgICAgIGN1cnJlbnQgPT09IG51bGwgfHxcbiAgICAgIGN1cnJlbnQudGFnICE9PSBIb3N0UG9ydGFsIHx8XG4gICAgICBjdXJyZW50LnN0YXRlTm9kZS5jb250YWluZXJJbmZvICE9PSBwb3J0YWwuY29udGFpbmVySW5mbyB8fFxuICAgICAgY3VycmVudC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gIT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgICkge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgICBwb3J0YWwsXG4gICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgKTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXBkYXRlXG4gICAgICBjb25zdCBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQsIHBvcnRhbC5jaGlsZHJlbiB8fCBbXSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgZXhpc3RpbmcucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnJhZ21lbnQoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnQ6IEZpYmVyIHwgbnVsbCxcbiAgICBmcmFnbWVudDogSXRlcmFibGU8Kj4sXG4gICAgZXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICAgIGtleTogbnVsbCB8IHN0cmluZyxcbiAgKTogRmliZXIge1xuICAgIGlmIChjdXJyZW50ID09PSBudWxsIHx8IGN1cnJlbnQudGFnICE9PSBGcmFnbWVudCkge1xuICAgICAgLy8gSW5zZXJ0XG4gICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRnJhZ21lbnQoXG4gICAgICAgIGZyYWdtZW50LFxuICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAga2V5LFxuICAgICAgKTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVXBkYXRlXG4gICAgICBjb25zdCBleGlzdGluZyA9IHVzZUZpYmVyKGN1cnJlbnQsIGZyYWdtZW50LCBleHBpcmF0aW9uVGltZSk7XG4gICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBleGlzdGluZztcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDaGlsZChcbiAgICByZXR1cm5GaWJlcjogRmliZXIsXG4gICAgbmV3Q2hpbGQ6IGFueSxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHwgbnVsbCB7XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gVGV4dCBub2RlcyBkb24ndCBoYXZlIGtleXMuIElmIHRoZSBwcmV2aW91cyBub2RlIGlzIGltcGxpY2l0bHkga2V5ZWRcbiAgICAgIC8vIHdlIGNhbiBjb250aW51ZSB0byByZXBsYWNlIGl0IHdpdGhvdXQgYWJvcnRpbmcgZXZlbiBpZiBpdCBpcyBub3QgYSB0ZXh0XG4gICAgICAvLyBub2RlLlxuICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbVRleHQoXG4gICAgICAgICcnICsgbmV3Q2hpbGQsXG4gICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgKTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnb2JqZWN0JyAmJiBuZXdDaGlsZCAhPT0gbnVsbCkge1xuICAgICAgc3dpdGNoIChuZXdDaGlsZC4kJHR5cGVvZikge1xuICAgICAgICBjYXNlIFJFQUNUX0VMRU1FTlRfVFlQRToge1xuICAgICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21FbGVtZW50KFxuICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjcmVhdGVkLnJlZiA9IGNvZXJjZVJlZihyZXR1cm5GaWJlciwgbnVsbCwgbmV3Q2hpbGQpO1xuICAgICAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRToge1xuICAgICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21Qb3J0YWwoXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIHJldHVybkZpYmVyLm1vZGUsXG4gICAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGNvbnN0IGNyZWF0ZWQgPSBjcmVhdGVGaWJlckZyb21GcmFnbWVudChcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgICAgIG51bGwsXG4gICAgICAgICk7XG4gICAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVNsb3QoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIG9sZEZpYmVyOiBGaWJlciB8IG51bGwsXG4gICAgbmV3Q2hpbGQ6IGFueSxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHwgbnVsbCB7XG4gICAgLy8gVXBkYXRlIHRoZSBmaWJlciBpZiB0aGUga2V5cyBtYXRjaCwgb3RoZXJ3aXNlIHJldHVybiBudWxsLlxuXG4gICAgY29uc3Qga2V5ID0gb2xkRmliZXIgIT09IG51bGwgPyBvbGRGaWJlci5rZXkgOiBudWxsO1xuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgLy8gVGV4dCBub2RlcyBkb24ndCBoYXZlIGtleXMuIElmIHRoZSBwcmV2aW91cyBub2RlIGlzIGltcGxpY2l0bHkga2V5ZWRcbiAgICAgIC8vIHdlIGNhbiBjb250aW51ZSB0byByZXBsYWNlIGl0IHdpdGhvdXQgYWJvcnRpbmcgZXZlbiBpZiBpdCBpcyBub3QgYSB0ZXh0XG4gICAgICAvLyBub2RlLlxuICAgICAgaWYgKGtleSAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAnJyArIG5ld0NoaWxkLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6IHtcbiAgICAgICAgICBpZiAobmV3Q2hpbGQua2V5ID09PSBrZXkpIHtcbiAgICAgICAgICAgIGlmIChuZXdDaGlsZC50eXBlID09PSBSRUFDVF9GUkFHTUVOVF9UWVBFKSB7XG4gICAgICAgICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICAgICAgICBuZXdDaGlsZC5wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlRWxlbWVudChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRToge1xuICAgICAgICAgIGlmIChuZXdDaGlsZC5rZXkgPT09IGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVBvcnRhbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIG9sZEZpYmVyLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGlmIChrZXkgIT09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBvbGRGaWJlcixcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUZyb21NYXAoXG4gICAgZXhpc3RpbmdDaGlsZHJlbjogTWFwPHN0cmluZyB8IG51bWJlciwgRmliZXI+LFxuICAgIHJldHVybkZpYmVyOiBGaWJlcixcbiAgICBuZXdJZHg6IG51bWJlcixcbiAgICBuZXdDaGlsZDogYW55LFxuICAgIGV4cGlyYXRpb25UaW1lOiBFeHBpcmF0aW9uVGltZSxcbiAgKTogRmliZXIgfCBudWxsIHtcbiAgICBpZiAodHlwZW9mIG5ld0NoaWxkID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbmV3Q2hpbGQgPT09ICdudW1iZXInKSB7XG4gICAgICAvLyBUZXh0IG5vZGVzIGRvbid0IGhhdmUga2V5cywgc28gd2UgbmVpdGhlciBoYXZlIHRvIGNoZWNrIHRoZSBvbGQgbm9yXG4gICAgICAvLyBuZXcgbm9kZSBmb3IgdGhlIGtleS4gSWYgYm90aCBhcmUgdGV4dCBub2RlcywgdGhleSBtYXRjaC5cbiAgICAgIGNvbnN0IG1hdGNoZWRGaWJlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgIHJldHVybiB1cGRhdGVUZXh0Tm9kZShcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG1hdGNoZWRGaWJlcixcbiAgICAgICAgJycgKyBuZXdDaGlsZCxcbiAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmIG5ld0NoaWxkICE9PSBudWxsKSB7XG4gICAgICBzd2l0Y2ggKG5ld0NoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOiB7XG4gICAgICAgICAgY29uc3QgbWF0Y2hlZEZpYmVyID1cbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KFxuICAgICAgICAgICAgICBuZXdDaGlsZC5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICApIHx8IG51bGw7XG4gICAgICAgICAgaWYgKG5ld0NoaWxkLnR5cGUgPT09IFJFQUNUX0ZSQUdNRU5UX1RZUEUpIHtcbiAgICAgICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIG1hdGNoZWRGaWJlcixcbiAgICAgICAgICAgICAgbmV3Q2hpbGQucHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgICAgICAgICBuZXdDaGlsZC5rZXksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdXBkYXRlRWxlbWVudChcbiAgICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgICAgbWF0Y2hlZEZpYmVyLFxuICAgICAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgUkVBQ1RfUE9SVEFMX1RZUEU6IHtcbiAgICAgICAgICBjb25zdCBtYXRjaGVkRmliZXIgPVxuICAgICAgICAgICAgZXhpc3RpbmdDaGlsZHJlbi5nZXQoXG4gICAgICAgICAgICAgIG5ld0NoaWxkLmtleSA9PT0gbnVsbCA/IG5ld0lkeCA6IG5ld0NoaWxkLmtleSxcbiAgICAgICAgICAgICkgfHwgbnVsbDtcbiAgICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsKFxuICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICBtYXRjaGVkRmliZXIsXG4gICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzQXJyYXkobmV3Q2hpbGQpIHx8IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGQpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoZWRGaWJlciA9IGV4aXN0aW5nQ2hpbGRyZW4uZ2V0KG5ld0lkeCkgfHwgbnVsbDtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUZyYWdtZW50KFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIG1hdGNoZWRGaWJlcixcbiAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICBudWxsLFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBXYXJucyBpZiB0aGVyZSBpcyBhIGR1cGxpY2F0ZSBvciBtaXNzaW5nIGtleVxuICAgKi9cbiAgZnVuY3Rpb24gd2Fybk9uSW52YWxpZEtleShcbiAgICBjaGlsZDogbWl4ZWQsXG4gICAga25vd25LZXlzOiBTZXQ8c3RyaW5nPiB8IG51bGwsXG4gICk6IFNldDxzdHJpbmc+IHwgbnVsbCB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmICh0eXBlb2YgY2hpbGQgIT09ICdvYmplY3QnIHx8IGNoaWxkID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBrbm93bktleXM7XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNoaWxkLiQkdHlwZW9mKSB7XG4gICAgICAgIGNhc2UgUkVBQ1RfRUxFTUVOVF9UWVBFOlxuICAgICAgICBjYXNlIFJFQUNUX1BPUlRBTF9UWVBFOlxuICAgICAgICAgIHdhcm5Gb3JNaXNzaW5nS2V5KGNoaWxkKTtcbiAgICAgICAgICBjb25zdCBrZXkgPSBjaGlsZC5rZXk7XG4gICAgICAgICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGtub3duS2V5cyA9PT0gbnVsbCkge1xuICAgICAgICAgICAga25vd25LZXlzID0gbmV3IFNldCgpO1xuICAgICAgICAgICAga25vd25LZXlzLmFkZChrZXkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICgha25vd25LZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICBrbm93bktleXMuYWRkKGtleSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgJ0VuY291bnRlcmVkIHR3byBjaGlsZHJlbiB3aXRoIHRoZSBzYW1lIGtleSwgYCVzYC4gJyArXG4gICAgICAgICAgICAgICdLZXlzIHNob3VsZCBiZSB1bmlxdWUgc28gdGhhdCBjb21wb25lbnRzIG1haW50YWluIHRoZWlyIGlkZW50aXR5ICcgK1xuICAgICAgICAgICAgICAnYWNyb3NzIHVwZGF0ZXMuIE5vbi11bmlxdWUga2V5cyBtYXkgY2F1c2UgY2hpbGRyZW4gdG8gYmUgJyArXG4gICAgICAgICAgICAgICdkdXBsaWNhdGVkIGFuZC9vciBvbWl0dGVkIOKAlCB0aGUgYmVoYXZpb3IgaXMgdW5zdXBwb3J0ZWQgYW5kICcgK1xuICAgICAgICAgICAgICAnY291bGQgY2hhbmdlIGluIGEgZnV0dXJlIHZlcnNpb24uJXMnLFxuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSgpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBrbm93bktleXM7XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbkFycmF5KFxuICAgIHJldHVybkZpYmVyOiBGaWJlcixcbiAgICBjdXJyZW50Rmlyc3RDaGlsZDogRmliZXIgfCBudWxsLFxuICAgIG5ld0NoaWxkcmVuOiBBcnJheTwqPixcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBhbGdvcml0aG0gY2FuJ3Qgb3B0aW1pemUgYnkgc2VhcmNoaW5nIGZyb20gYm90aHMgZW5kcyBzaW5jZSB3ZVxuICAgIC8vIGRvbid0IGhhdmUgYmFja3BvaW50ZXJzIG9uIGZpYmVycy4gSSdtIHRyeWluZyB0byBzZWUgaG93IGZhciB3ZSBjYW4gZ2V0XG4gICAgLy8gd2l0aCB0aGF0IG1vZGVsLiBJZiBpdCBlbmRzIHVwIG5vdCBiZWluZyB3b3J0aCB0aGUgdHJhZGVvZmZzLCB3ZSBjYW5cbiAgICAvLyBhZGQgaXQgbGF0ZXIuXG5cbiAgICAvLyBFdmVuIHdpdGggYSB0d28gZW5kZWQgb3B0aW1pemF0aW9uLCB3ZSdkIHdhbnQgdG8gb3B0aW1pemUgZm9yIHRoZSBjYXNlXG4gICAgLy8gd2hlcmUgdGhlcmUgYXJlIGZldyBjaGFuZ2VzIGFuZCBicnV0ZSBmb3JjZSB0aGUgY29tcGFyaXNvbiBpbnN0ZWFkIG9mXG4gICAgLy8gZ29pbmcgZm9yIHRoZSBNYXAuIEl0J2QgbGlrZSB0byBleHBsb3JlIGhpdHRpbmcgdGhhdCBwYXRoIGZpcnN0IGluXG4gICAgLy8gZm9yd2FyZC1vbmx5IG1vZGUgYW5kIG9ubHkgZ28gZm9yIHRoZSBNYXAgb25jZSB3ZSBub3RpY2UgdGhhdCB3ZSBuZWVkXG4gICAgLy8gbG90cyBvZiBsb29rIGFoZWFkLiBUaGlzIGRvZXNuJ3QgaGFuZGxlIHJldmVyc2FsIGFzIHdlbGwgYXMgdHdvIGVuZGVkXG4gICAgLy8gc2VhcmNoIGJ1dCB0aGF0J3MgdW51c3VhbC4gQmVzaWRlcywgZm9yIHRoZSB0d28gZW5kZWQgb3B0aW1pemF0aW9uIHRvXG4gICAgLy8gd29yayBvbiBJdGVyYWJsZXMsIHdlJ2QgbmVlZCB0byBjb3B5IHRoZSB3aG9sZSBzZXQuXG5cbiAgICAvLyBJbiB0aGlzIGZpcnN0IGl0ZXJhdGlvbiwgd2UnbGwganVzdCBsaXZlIHdpdGggaGl0dGluZyB0aGUgYmFkIGNhc2VcbiAgICAvLyAoYWRkaW5nIGV2ZXJ5dGhpbmcgdG8gYSBNYXApIGluIGZvciBldmVyeSBpbnNlcnQvbW92ZS5cblxuICAgIC8vIElmIHlvdSBjaGFuZ2UgdGhpcyBjb2RlLCBhbHNvIHVwZGF0ZSByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKCkgd2hpY2hcbiAgICAvLyB1c2VzIHRoZSBzYW1lIGFsZ29yaXRobS5cblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAvLyBGaXJzdCwgdmFsaWRhdGUga2V5cy5cbiAgICAgIGxldCBrbm93bktleXMgPSBudWxsO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZCA9IG5ld0NoaWxkcmVuW2ldO1xuICAgICAgICBrbm93bktleXMgPSB3YXJuT25JbnZhbGlkS2V5KGNoaWxkLCBrbm93bktleXMpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZXN1bHRpbmdGaXJzdENoaWxkOiBGaWJlciB8IG51bGwgPSBudWxsO1xuICAgIGxldCBwcmV2aW91c05ld0ZpYmVyOiBGaWJlciB8IG51bGwgPSBudWxsO1xuXG4gICAgbGV0IG9sZEZpYmVyID0gY3VycmVudEZpcnN0Q2hpbGQ7XG4gICAgbGV0IGxhc3RQbGFjZWRJbmRleCA9IDA7XG4gICAgbGV0IG5ld0lkeCA9IDA7XG4gICAgbGV0IG5leHRPbGRGaWJlciA9IG51bGw7XG4gICAgZm9yICg7IG9sZEZpYmVyICE9PSBudWxsICYmIG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0ZpYmVyID0gdXBkYXRlU2xvdChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIG9sZEZpYmVyID0gbmV4dE9sZEZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKHNob3VsZFRyYWNrU2lkZUVmZmVjdHMpIHtcbiAgICAgICAgaWYgKG9sZEZpYmVyICYmIG5ld0ZpYmVyLmFsdGVybmF0ZSA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFdlIG1hdGNoZWQgdGhlIHNsb3QsIGJ1dCB3ZSBkaWRuJ3QgcmV1c2UgdGhlIGV4aXN0aW5nIGZpYmVyLCBzbyB3ZVxuICAgICAgICAgIC8vIG5lZWQgdG8gZGVsZXRlIHRoZSBleGlzdGluZyBjaGlsZC5cbiAgICAgICAgICBkZWxldGVDaGlsZChyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAvLyBUT0RPOiBNb3ZlIG91dCBvZiB0aGUgbG9vcC4gVGhpcyBvbmx5IGhhcHBlbnMgZm9yIHRoZSBmaXJzdCBydW4uXG4gICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFRPRE86IERlZmVyIHNpYmxpbmdzIGlmIHdlJ3JlIG5vdCBhdCB0aGUgcmlnaHQgaW5kZXggZm9yIHRoaXMgc2xvdC5cbiAgICAgICAgLy8gSS5lLiBpZiB3ZSBoYWQgbnVsbCB2YWx1ZXMgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gZGVmZXIgdGhpc1xuICAgICAgICAvLyBmb3IgZWFjaCBudWxsIHZhbHVlLiBIb3dldmVyLCB3ZSBhbHNvIGRvbid0IHdhbnQgdG8gY2FsbCB1cGRhdGVTbG90XG4gICAgICAgIC8vIHdpdGggdGhlIHByZXZpb3VzIG9uZS5cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXI7XG4gICAgICB9XG4gICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICB9XG5cbiAgICBpZiAobmV3SWR4ID09PSBuZXdDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgIC8vIFdlJ3ZlIHJlYWNoZWQgdGhlIGVuZCBvZiB0aGUgbmV3IGNoaWxkcmVuLiBXZSBjYW4gZGVsZXRlIHRoZSByZXN0LlxuICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICAgIH1cblxuICAgIGlmIChvbGRGaWJlciA9PT0gbnVsbCkge1xuICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhbnkgbW9yZSBleGlzdGluZyBjaGlsZHJlbiB3ZSBjYW4gY2hvb3NlIGEgZmFzdCBwYXRoXG4gICAgICAvLyBzaW5jZSB0aGUgcmVzdCB3aWxsIGFsbCBiZSBpbnNlcnRpb25zLlxuICAgICAgZm9yICg7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgICAgY29uc3QgbmV3RmliZXIgPSBjcmVhdGVDaGlsZChcbiAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICBuZXdDaGlsZHJlbltuZXdJZHhdLFxuICAgICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgICBpZiAoIW5ld0ZpYmVyKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgICBpZiAocHJldmlvdXNOZXdGaWJlciA9PT0gbnVsbCkge1xuICAgICAgICAgIC8vIFRPRE86IE1vdmUgb3V0IG9mIHRoZSBsb29wLiBUaGlzIG9ubHkgaGFwcGVucyBmb3IgdGhlIGZpcnN0IHJ1bi5cbiAgICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJldmlvdXNOZXdGaWJlci5zaWJsaW5nID0gbmV3RmliZXI7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgLy8gQWRkIGFsbCBjaGlsZHJlbiB0byBhIGtleSBtYXAgZm9yIHF1aWNrIGxvb2t1cHMuXG4gICAgY29uc3QgZXhpc3RpbmdDaGlsZHJlbiA9IG1hcFJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBvbGRGaWJlcik7XG5cbiAgICAvLyBLZWVwIHNjYW5uaW5nIGFuZCB1c2UgdGhlIG1hcCB0byByZXN0b3JlIGRlbGV0ZWQgaXRlbXMgYXMgbW92ZXMuXG4gICAgZm9yICg7IG5ld0lkeCA8IG5ld0NoaWxkcmVuLmxlbmd0aDsgbmV3SWR4KyspIHtcbiAgICAgIGNvbnN0IG5ld0ZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG5ld0lkeCxcbiAgICAgICAgbmV3Q2hpbGRyZW5bbmV3SWR4XSxcbiAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgICAgaWYgKG5ld0ZpYmVyKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKG5ld0ZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhlIG5ldyBmaWJlciBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MsIGJ1dCBpZiB0aGVyZSBleGlzdHMgYVxuICAgICAgICAgICAgLy8gY3VycmVudCwgdGhhdCBtZWFucyB0aGF0IHdlIHJldXNlZCB0aGUgZmliZXIuIFdlIG5lZWQgdG8gZGVsZXRlXG4gICAgICAgICAgICAvLyBpdCBmcm9tIHRoZSBjaGlsZCBsaXN0IHNvIHRoYXQgd2UgZG9uJ3QgYWRkIGl0IHRvIHRoZSBkZWxldGlvblxuICAgICAgICAgICAgLy8gbGlzdC5cbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZGVsZXRlKFxuICAgICAgICAgICAgICBuZXdGaWJlci5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdGaWJlci5rZXksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gQW55IGV4aXN0aW5nIGNoaWxkcmVuIHRoYXQgd2VyZW4ndCBjb25zdW1lZCBhYm92ZSB3ZXJlIGRlbGV0ZWQuIFdlIG5lZWRcbiAgICAgIC8vIHRvIGFkZCB0aGVtIHRvIHRoZSBkZWxldGlvbiBsaXN0LlxuICAgICAgZXhpc3RpbmdDaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRyZW5JdGVyYXRvcihcbiAgICByZXR1cm5GaWJlcjogRmliZXIsXG4gICAgY3VycmVudEZpcnN0Q2hpbGQ6IEZpYmVyIHwgbnVsbCxcbiAgICBuZXdDaGlsZHJlbkl0ZXJhYmxlOiBJdGVyYWJsZTwqPixcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBpcyB0aGUgc2FtZSBpbXBsZW1lbnRhdGlvbiBhcyByZWNvbmNpbGVDaGlsZHJlbkFycmF5KCksXG4gICAgLy8gYnV0IHVzaW5nIHRoZSBpdGVyYXRvciBpbnN0ZWFkLlxuXG4gICAgY29uc3QgaXRlcmF0b3JGbiA9IGdldEl0ZXJhdG9yRm4obmV3Q2hpbGRyZW5JdGVyYWJsZSk7XG4gICAgaW52YXJpYW50KFxuICAgICAgdHlwZW9mIGl0ZXJhdG9yRm4gPT09ICdmdW5jdGlvbicsXG4gICAgICAnQW4gb2JqZWN0IGlzIG5vdCBhbiBpdGVyYWJsZS4gVGhpcyBlcnJvciBpcyBsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluICcgK1xuICAgICAgICAnUmVhY3QuIFBsZWFzZSBmaWxlIGFuIGlzc3VlLicsXG4gICAgKTtcblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAvLyBXYXJuIGFib3V0IHVzaW5nIE1hcHMgYXMgY2hpbGRyZW5cbiAgICAgIGlmICh0eXBlb2YgbmV3Q2hpbGRyZW5JdGVyYWJsZS5lbnRyaWVzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHBvc3NpYmxlTWFwID0gKG5ld0NoaWxkcmVuSXRlcmFibGU6IGFueSk7XG4gICAgICAgIGlmIChwb3NzaWJsZU1hcC5lbnRyaWVzID09PSBpdGVyYXRvckZuKSB7XG4gICAgICAgICAgd2FybmluZyhcbiAgICAgICAgICAgIGRpZFdhcm5BYm91dE1hcHMsXG4gICAgICAgICAgICAnVXNpbmcgTWFwcyBhcyBjaGlsZHJlbiBpcyB1bnN1cHBvcnRlZCBhbmQgd2lsbCBsaWtlbHkgeWllbGQgJyArXG4gICAgICAgICAgICAgICd1bmV4cGVjdGVkIHJlc3VsdHMuIENvbnZlcnQgaXQgdG8gYSBzZXF1ZW5jZS9pdGVyYWJsZSBvZiBrZXllZCAnICtcbiAgICAgICAgICAgICAgJ1JlYWN0RWxlbWVudHMgaW5zdGVhZC4lcycsXG4gICAgICAgICAgICBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCksXG4gICAgICAgICAgKTtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRNYXBzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBGaXJzdCwgdmFsaWRhdGUga2V5cy5cbiAgICAgIC8vIFdlJ2xsIGdldCBhIGRpZmZlcmVudCBpdGVyYXRvciBsYXRlciBmb3IgdGhlIG1haW4gcGFzcy5cbiAgICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgICAgaWYgKG5ld0NoaWxkcmVuKSB7XG4gICAgICAgIGxldCBrbm93bktleXMgPSBudWxsO1xuICAgICAgICBsZXQgc3RlcCA9IG5ld0NoaWxkcmVuLm5leHQoKTtcbiAgICAgICAgZm9yICg7ICFzdGVwLmRvbmU7IHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgICBjb25zdCBjaGlsZCA9IHN0ZXAudmFsdWU7XG4gICAgICAgICAga25vd25LZXlzID0gd2Fybk9uSW52YWxpZEtleShjaGlsZCwga25vd25LZXlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gaXRlcmF0b3JGbi5jYWxsKG5ld0NoaWxkcmVuSXRlcmFibGUpO1xuICAgIGludmFyaWFudChuZXdDaGlsZHJlbiAhPSBudWxsLCAnQW4gaXRlcmFibGUgb2JqZWN0IHByb3ZpZGVkIG5vIGl0ZXJhdG9yLicpO1xuXG4gICAgbGV0IHJlc3VsdGluZ0ZpcnN0Q2hpbGQ6IEZpYmVyIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IHByZXZpb3VzTmV3RmliZXI6IEZpYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICBsZXQgb2xkRmliZXIgPSBjdXJyZW50Rmlyc3RDaGlsZDtcbiAgICBsZXQgbGFzdFBsYWNlZEluZGV4ID0gMDtcbiAgICBsZXQgbmV3SWR4ID0gMDtcbiAgICBsZXQgbmV4dE9sZEZpYmVyID0gbnVsbDtcblxuICAgIGxldCBzdGVwID0gbmV3Q2hpbGRyZW4ubmV4dCgpO1xuICAgIGZvciAoXG4gICAgICA7XG4gICAgICBvbGRGaWJlciAhPT0gbnVsbCAmJiAhc3RlcC5kb25lO1xuICAgICAgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KClcbiAgICApIHtcbiAgICAgIGlmIChvbGRGaWJlci5pbmRleCA+IG5ld0lkeCkge1xuICAgICAgICBuZXh0T2xkRmliZXIgPSBvbGRGaWJlcjtcbiAgICAgICAgb2xkRmliZXIgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dE9sZEZpYmVyID0gb2xkRmliZXIuc2libGluZztcbiAgICAgIH1cbiAgICAgIGNvbnN0IG5ld0ZpYmVyID0gdXBkYXRlU2xvdChcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG9sZEZpYmVyLFxuICAgICAgICBzdGVwLnZhbHVlLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogVGhpcyBicmVha3Mgb24gZW1wdHkgc2xvdHMgbGlrZSBudWxsIGNoaWxkcmVuLiBUaGF0J3NcbiAgICAgICAgLy8gdW5mb3J0dW5hdGUgYmVjYXVzZSBpdCB0cmlnZ2VycyB0aGUgc2xvdyBwYXRoIGFsbCB0aGUgdGltZS4gV2UgbmVlZFxuICAgICAgICAvLyBhIGJldHRlciB3YXkgdG8gY29tbXVuaWNhdGUgd2hldGhlciB0aGlzIHdhcyBhIG1pc3Mgb3IgbnVsbCxcbiAgICAgICAgLy8gYm9vbGVhbiwgdW5kZWZpbmVkLCBldGMuXG4gICAgICAgIGlmICghb2xkRmliZXIpIHtcbiAgICAgICAgICBvbGRGaWJlciA9IG5leHRPbGRGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgIGlmIChvbGRGaWJlciAmJiBuZXdGaWJlci5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICAvLyBXZSBtYXRjaGVkIHRoZSBzbG90LCBidXQgd2UgZGlkbid0IHJldXNlIHRoZSBleGlzdGluZyBmaWJlciwgc28gd2VcbiAgICAgICAgICAvLyBuZWVkIHRvIGRlbGV0ZSB0aGUgZXhpc3RpbmcgY2hpbGQuXG4gICAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGFzdFBsYWNlZEluZGV4ID0gcGxhY2VDaGlsZChuZXdGaWJlciwgbGFzdFBsYWNlZEluZGV4LCBuZXdJZHgpO1xuICAgICAgaWYgKHByZXZpb3VzTmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICByZXN1bHRpbmdGaXJzdENoaWxkID0gbmV3RmliZXI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUT0RPOiBEZWZlciBzaWJsaW5ncyBpZiB3ZSdyZSBub3QgYXQgdGhlIHJpZ2h0IGluZGV4IGZvciB0aGlzIHNsb3QuXG4gICAgICAgIC8vIEkuZS4gaWYgd2UgaGFkIG51bGwgdmFsdWVzIGJlZm9yZSwgdGhlbiB3ZSB3YW50IHRvIGRlZmVyIHRoaXNcbiAgICAgICAgLy8gZm9yIGVhY2ggbnVsbCB2YWx1ZS4gSG93ZXZlciwgd2UgYWxzbyBkb24ndCB3YW50IHRvIGNhbGwgdXBkYXRlU2xvdFxuICAgICAgICAvLyB3aXRoIHRoZSBwcmV2aW91cyBvbmUuXG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgfVxuICAgICAgcHJldmlvdXNOZXdGaWJlciA9IG5ld0ZpYmVyO1xuICAgICAgb2xkRmliZXIgPSBuZXh0T2xkRmliZXI7XG4gICAgfVxuXG4gICAgaWYgKHN0ZXAuZG9uZSkge1xuICAgICAgLy8gV2UndmUgcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBuZXcgY2hpbGRyZW4uIFdlIGNhbiBkZWxldGUgdGhlIHJlc3QuXG4gICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgb2xkRmliZXIpO1xuICAgICAgcmV0dXJuIHJlc3VsdGluZ0ZpcnN0Q2hpbGQ7XG4gICAgfVxuXG4gICAgaWYgKG9sZEZpYmVyID09PSBudWxsKSB7XG4gICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBtb3JlIGV4aXN0aW5nIGNoaWxkcmVuIHdlIGNhbiBjaG9vc2UgYSBmYXN0IHBhdGhcbiAgICAgIC8vIHNpbmNlIHRoZSByZXN0IHdpbGwgYWxsIGJlIGluc2VydGlvbnMuXG4gICAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgICAgY29uc3QgbmV3RmliZXIgPSBjcmVhdGVDaGlsZChyZXR1cm5GaWJlciwgc3RlcC52YWx1ZSwgZXhwaXJhdGlvblRpbWUpO1xuICAgICAgICBpZiAobmV3RmliZXIgPT09IG51bGwpIHtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgLy8gVE9ETzogTW92ZSBvdXQgb2YgdGhlIGxvb3AuIFRoaXMgb25seSBoYXBwZW5zIGZvciB0aGUgZmlyc3QgcnVuLlxuICAgICAgICAgIHJlc3VsdGluZ0ZpcnN0Q2hpbGQgPSBuZXdGaWJlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwcmV2aW91c05ld0ZpYmVyLnNpYmxpbmcgPSBuZXdGaWJlcjtcbiAgICAgICAgfVxuICAgICAgICBwcmV2aW91c05ld0ZpYmVyID0gbmV3RmliZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0aW5nRmlyc3RDaGlsZDtcbiAgICB9XG5cbiAgICAvLyBBZGQgYWxsIGNoaWxkcmVuIHRvIGEga2V5IG1hcCBmb3IgcXVpY2sgbG9va3Vwcy5cbiAgICBjb25zdCBleGlzdGluZ0NoaWxkcmVuID0gbWFwUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIG9sZEZpYmVyKTtcblxuICAgIC8vIEtlZXAgc2Nhbm5pbmcgYW5kIHVzZSB0aGUgbWFwIHRvIHJlc3RvcmUgZGVsZXRlZCBpdGVtcyBhcyBtb3Zlcy5cbiAgICBmb3IgKDsgIXN0ZXAuZG9uZTsgbmV3SWR4KyssIHN0ZXAgPSBuZXdDaGlsZHJlbi5uZXh0KCkpIHtcbiAgICAgIGNvbnN0IG5ld0ZpYmVyID0gdXBkYXRlRnJvbU1hcChcbiAgICAgICAgZXhpc3RpbmdDaGlsZHJlbixcbiAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgIG5ld0lkeCxcbiAgICAgICAgc3RlcC52YWx1ZSxcbiAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgICAgaWYgKG5ld0ZpYmVyICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChzaG91bGRUcmFja1NpZGVFZmZlY3RzKSB7XG4gICAgICAgICAgaWYgKG5ld0ZpYmVyLmFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gVGhlIG5ldyBmaWJlciBpcyBhIHdvcmsgaW4gcHJvZ3Jlc3MsIGJ1dCBpZiB0aGVyZSBleGlzdHMgYVxuICAgICAgICAgICAgLy8gY3VycmVudCwgdGhhdCBtZWFucyB0aGF0IHdlIHJldXNlZCB0aGUgZmliZXIuIFdlIG5lZWQgdG8gZGVsZXRlXG4gICAgICAgICAgICAvLyBpdCBmcm9tIHRoZSBjaGlsZCBsaXN0IHNvIHRoYXQgd2UgZG9uJ3QgYWRkIGl0IHRvIHRoZSBkZWxldGlvblxuICAgICAgICAgICAgLy8gbGlzdC5cbiAgICAgICAgICAgIGV4aXN0aW5nQ2hpbGRyZW4uZGVsZXRlKFxuICAgICAgICAgICAgICBuZXdGaWJlci5rZXkgPT09IG51bGwgPyBuZXdJZHggOiBuZXdGaWJlci5rZXksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsYXN0UGxhY2VkSW5kZXggPSBwbGFjZUNoaWxkKG5ld0ZpYmVyLCBsYXN0UGxhY2VkSW5kZXgsIG5ld0lkeCk7XG4gICAgICAgIGlmIChwcmV2aW91c05ld0ZpYmVyID09PSBudWxsKSB7XG4gICAgICAgICAgcmVzdWx0aW5nRmlyc3RDaGlsZCA9IG5ld0ZpYmVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHByZXZpb3VzTmV3RmliZXIuc2libGluZyA9IG5ld0ZpYmVyO1xuICAgICAgICB9XG4gICAgICAgIHByZXZpb3VzTmV3RmliZXIgPSBuZXdGaWJlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvdWxkVHJhY2tTaWRlRWZmZWN0cykge1xuICAgICAgLy8gQW55IGV4aXN0aW5nIGNoaWxkcmVuIHRoYXQgd2VyZW4ndCBjb25zdW1lZCBhYm92ZSB3ZXJlIGRlbGV0ZWQuIFdlIG5lZWRcbiAgICAgIC8vIHRvIGFkZCB0aGVtIHRvIHRoZSBkZWxldGlvbiBsaXN0LlxuICAgICAgZXhpc3RpbmdDaGlsZHJlbi5mb3JFYWNoKGNoaWxkID0+IGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCkpO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRpbmdGaXJzdENoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVjb25jaWxlU2luZ2xlVGV4dE5vZGUoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkOiBGaWJlciB8IG51bGwsXG4gICAgdGV4dENvbnRlbnQ6IHN0cmluZyxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHtcbiAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gY2hlY2sgZm9yIGtleXMgb24gdGV4dCBub2RlcyBzaW5jZSB3ZSBkb24ndCBoYXZlIGFcbiAgICAvLyB3YXkgdG8gZGVmaW5lIHRoZW0uXG4gICAgaWYgKGN1cnJlbnRGaXJzdENoaWxkICE9PSBudWxsICYmIGN1cnJlbnRGaXJzdENoaWxkLnRhZyA9PT0gSG9zdFRleHQpIHtcbiAgICAgIC8vIFdlIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBub2RlIHNvIGxldCdzIGp1c3QgdXBkYXRlIGl0IGFuZCBkZWxldGVcbiAgICAgIC8vIHRoZSByZXN0LlxuICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLnNpYmxpbmcpO1xuICAgICAgY29uc3QgZXhpc3RpbmcgPSB1c2VGaWJlcihjdXJyZW50Rmlyc3RDaGlsZCwgdGV4dENvbnRlbnQsIGV4cGlyYXRpb25UaW1lKTtcbiAgICAgIGV4aXN0aW5nLnJldHVybiA9IHJldHVybkZpYmVyO1xuICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgIH1cbiAgICAvLyBUaGUgZXhpc3RpbmcgZmlyc3QgY2hpbGQgaXMgbm90IGEgdGV4dCBub2RlIHNvIHdlIG5lZWQgdG8gY3JlYXRlIG9uZVxuICAgIC8vIGFuZCBkZWxldGUgdGhlIGV4aXN0aW5nIG9uZXMuXG4gICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkKTtcbiAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tVGV4dChcbiAgICAgIHRleHRDb250ZW50LFxuICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICk7XG4gICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3JlYXRlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZVNpbmdsZUVsZW1lbnQoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkOiBGaWJlciB8IG51bGwsXG4gICAgZWxlbWVudDogUmVhY3RFbGVtZW50LFxuICAgIGV4cGlyYXRpb25UaW1lOiBFeHBpcmF0aW9uVGltZSxcbiAgKTogRmliZXIge1xuICAgIGNvbnN0IGtleSA9IGVsZW1lbnQua2V5O1xuICAgIGxldCBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgLy8gVE9ETzogSWYga2V5ID09PSBudWxsIGFuZCBjaGlsZC5rZXkgPT09IG51bGwsIHRoZW4gdGhpcyBvbmx5IGFwcGxpZXMgdG9cbiAgICAgIC8vIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGlsZC50YWcgPT09IEZyYWdtZW50XG4gICAgICAgICAgICA/IGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRVxuICAgICAgICAgICAgOiBjaGlsZC50eXBlID09PSBlbGVtZW50LnR5cGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkLnNpYmxpbmcpO1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gdXNlRmliZXIoXG4gICAgICAgICAgICBjaGlsZCxcbiAgICAgICAgICAgIGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRVxuICAgICAgICAgICAgICA/IGVsZW1lbnQucHJvcHMuY2hpbGRyZW5cbiAgICAgICAgICAgICAgOiBlbGVtZW50LnByb3BzLFxuICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBleGlzdGluZy5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGNoaWxkLCBlbGVtZW50KTtcbiAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgZXhpc3RpbmcuX2RlYnVnU291cmNlID0gZWxlbWVudC5fc291cmNlO1xuICAgICAgICAgICAgZXhpc3RpbmcuX2RlYnVnT3duZXIgPSBlbGVtZW50Ll9vd25lcjtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRlbGV0ZVJlbWFpbmluZ0NoaWxkcmVuKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlbGV0ZUNoaWxkKHJldHVybkZpYmVyLCBjaGlsZCk7XG4gICAgICB9XG4gICAgICBjaGlsZCA9IGNoaWxkLnNpYmxpbmc7XG4gICAgfVxuXG4gICAgaWYgKGVsZW1lbnQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSkge1xuICAgICAgY29uc3QgY3JlYXRlZCA9IGNyZWF0ZUZpYmVyRnJvbUZyYWdtZW50KFxuICAgICAgICBlbGVtZW50LnByb3BzLmNoaWxkcmVuLFxuICAgICAgICByZXR1cm5GaWJlci5tb2RlLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgZWxlbWVudC5rZXksXG4gICAgICApO1xuICAgICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgIHJldHVybiBjcmVhdGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tRWxlbWVudChcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgICAgY3JlYXRlZC5yZWYgPSBjb2VyY2VSZWYocmV0dXJuRmliZXIsIGN1cnJlbnRGaXJzdENoaWxkLCBlbGVtZW50KTtcbiAgICAgIGNyZWF0ZWQucmV0dXJuID0gcmV0dXJuRmliZXI7XG4gICAgICByZXR1cm4gY3JlYXRlZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWNvbmNpbGVTaW5nbGVQb3J0YWwoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkOiBGaWJlciB8IG51bGwsXG4gICAgcG9ydGFsOiBSZWFjdFBvcnRhbCxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHtcbiAgICBjb25zdCBrZXkgPSBwb3J0YWwua2V5O1xuICAgIGxldCBjaGlsZCA9IGN1cnJlbnRGaXJzdENoaWxkO1xuICAgIHdoaWxlIChjaGlsZCAhPT0gbnVsbCkge1xuICAgICAgLy8gVE9ETzogSWYga2V5ID09PSBudWxsIGFuZCBjaGlsZC5rZXkgPT09IG51bGwsIHRoZW4gdGhpcyBvbmx5IGFwcGxpZXMgdG9cbiAgICAgIC8vIHRoZSBmaXJzdCBpdGVtIGluIHRoZSBsaXN0LlxuICAgICAgaWYgKGNoaWxkLmtleSA9PT0ga2V5KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjaGlsZC50YWcgPT09IEhvc3RQb3J0YWwgJiZcbiAgICAgICAgICBjaGlsZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyA9PT0gcG9ydGFsLmNvbnRhaW5lckluZm8gJiZcbiAgICAgICAgICBjaGlsZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24gPT09IHBvcnRhbC5pbXBsZW1lbnRhdGlvblxuICAgICAgICApIHtcbiAgICAgICAgICBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY2hpbGQuc2libGluZyk7XG4gICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB1c2VGaWJlcihcbiAgICAgICAgICAgIGNoaWxkLFxuICAgICAgICAgICAgcG9ydGFsLmNoaWxkcmVuIHx8IFtdLFxuICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBleGlzdGluZy5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICAgICAgICByZXR1cm4gZXhpc3Rpbmc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlUmVtYWluaW5nQ2hpbGRyZW4ocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVsZXRlQ2hpbGQocmV0dXJuRmliZXIsIGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGNoaWxkID0gY2hpbGQuc2libGluZztcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGVkID0gY3JlYXRlRmliZXJGcm9tUG9ydGFsKFxuICAgICAgcG9ydGFsLFxuICAgICAgcmV0dXJuRmliZXIubW9kZSxcbiAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICk7XG4gICAgY3JlYXRlZC5yZXR1cm4gPSByZXR1cm5GaWJlcjtcbiAgICByZXR1cm4gY3JlYXRlZDtcbiAgfVxuXG4gIC8vIFRoaXMgQVBJIHdpbGwgdGFnIHRoZSBjaGlsZHJlbiB3aXRoIHRoZSBzaWRlLWVmZmVjdCBvZiB0aGUgcmVjb25jaWxpYXRpb25cbiAgLy8gaXRzZWxmLiBUaGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlIHNpZGUtZWZmZWN0IGxpc3QgYXMgd2UgcGFzcyB0aHJvdWdoIHRoZVxuICAvLyBjaGlsZHJlbiBhbmQgdGhlIHBhcmVudC5cbiAgZnVuY3Rpb24gcmVjb25jaWxlQ2hpbGRGaWJlcnMoXG4gICAgcmV0dXJuRmliZXI6IEZpYmVyLFxuICAgIGN1cnJlbnRGaXJzdENoaWxkOiBGaWJlciB8IG51bGwsXG4gICAgbmV3Q2hpbGQ6IGFueSxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICk6IEZpYmVyIHwgbnVsbCB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBpcyBub3QgcmVjdXJzaXZlLlxuICAgIC8vIElmIHRoZSB0b3AgbGV2ZWwgaXRlbSBpcyBhbiBhcnJheSwgd2UgdHJlYXQgaXQgYXMgYSBzZXQgb2YgY2hpbGRyZW4sXG4gICAgLy8gbm90IGFzIGEgZnJhZ21lbnQuIE5lc3RlZCBhcnJheXMgb24gdGhlIG90aGVyIGhhbmQgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAgLy8gZnJhZ21lbnQgbm9kZXMuIFJlY3Vyc2lvbiBoYXBwZW5zIGF0IHRoZSBub3JtYWwgZmxvdy5cblxuICAgIC8vIEhhbmRsZSB0b3AgbGV2ZWwgdW5rZXllZCBmcmFnbWVudHMgYXMgaWYgdGhleSB3ZXJlIGFycmF5cy5cbiAgICAvLyBUaGlzIGxlYWRzIHRvIGFuIGFtYmlndWl0eSBiZXR3ZWVuIDw+e1suLi5dfTwvPiBhbmQgPD4uLi48Lz4uXG4gICAgLy8gV2UgdHJlYXQgdGhlIGFtYmlndW91cyBjYXNlcyBhYm92ZSB0aGUgc2FtZS5cbiAgICBpZiAoXG4gICAgICB0eXBlb2YgbmV3Q2hpbGQgPT09ICdvYmplY3QnICYmXG4gICAgICBuZXdDaGlsZCAhPT0gbnVsbCAmJlxuICAgICAgbmV3Q2hpbGQudHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSAmJlxuICAgICAgbmV3Q2hpbGQua2V5ID09PSBudWxsXG4gICAgKSB7XG4gICAgICBuZXdDaGlsZCA9IG5ld0NoaWxkLnByb3BzLmNoaWxkcmVuO1xuICAgIH1cblxuICAgIC8vIEhhbmRsZSBvYmplY3QgdHlwZXNcbiAgICBjb25zdCBpc09iamVjdCA9IHR5cGVvZiBuZXdDaGlsZCA9PT0gJ29iamVjdCcgJiYgbmV3Q2hpbGQgIT09IG51bGw7XG5cbiAgICBpZiAoaXNPYmplY3QpIHtcbiAgICAgIHN3aXRjaCAobmV3Q2hpbGQuJCR0eXBlb2YpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9FTEVNRU5UX1RZUEU6XG4gICAgICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQoXG4gICAgICAgICAgICByZWNvbmNpbGVTaW5nbGVFbGVtZW50KFxuICAgICAgICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgICAgICAgIG5ld0NoaWxkLFxuICAgICAgICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgICAgICksXG4gICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgICAgICByZXR1cm4gcGxhY2VTaW5nbGVDaGlsZChcbiAgICAgICAgICAgIHJlY29uY2lsZVNpbmdsZVBvcnRhbChcbiAgICAgICAgICAgICAgcmV0dXJuRmliZXIsXG4gICAgICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICAgICBuZXdDaGlsZCxcbiAgICAgICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIG5ld0NoaWxkID09PSAnbnVtYmVyJykge1xuICAgICAgcmV0dXJuIHBsYWNlU2luZ2xlQ2hpbGQoXG4gICAgICAgIHJlY29uY2lsZVNpbmdsZVRleHROb2RlKFxuICAgICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICAgIGN1cnJlbnRGaXJzdENoaWxkLFxuICAgICAgICAgICcnICsgbmV3Q2hpbGQsXG4gICAgICAgICAgZXhwaXJhdGlvblRpbWUsXG4gICAgICAgICksXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KG5ld0NoaWxkKSkge1xuICAgICAgcmV0dXJuIHJlY29uY2lsZUNoaWxkcmVuQXJyYXkoXG4gICAgICAgIHJldHVybkZpYmVyLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGlsZCxcbiAgICAgICAgbmV3Q2hpbGQsXG4gICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoZ2V0SXRlcmF0b3JGbihuZXdDaGlsZCkpIHtcbiAgICAgIHJldHVybiByZWNvbmNpbGVDaGlsZHJlbkl0ZXJhdG9yKFxuICAgICAgICByZXR1cm5GaWJlcixcbiAgICAgICAgY3VycmVudEZpcnN0Q2hpbGQsXG4gICAgICAgIG5ld0NoaWxkLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0KSB7XG4gICAgICB0aHJvd09uSW52YWxpZE9iamVjdFR5cGUocmV0dXJuRmliZXIsIG5ld0NoaWxkKTtcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuT25GdW5jdGlvblR5cGUoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXdDaGlsZCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIElmIHRoZSBuZXcgY2hpbGQgaXMgdW5kZWZpbmVkLCBhbmQgdGhlIHJldHVybiBmaWJlciBpcyBhIGNvbXBvc2l0ZVxuICAgICAgLy8gY29tcG9uZW50LCB0aHJvdyBhbiBlcnJvci4gSWYgRmliZXIgcmV0dXJuIHR5cGVzIGFyZSBkaXNhYmxlZCxcbiAgICAgIC8vIHdlIGFscmVhZHkgdGhyZXcgYWJvdmUuXG4gICAgICBzd2l0Y2ggKHJldHVybkZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIENsYXNzQ29tcG9uZW50OiB7XG4gICAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gcmV0dXJuRmliZXIuc3RhdGVOb2RlO1xuICAgICAgICAgICAgaWYgKGluc3RhbmNlLnJlbmRlci5faXNNb2NrRnVuY3Rpb24pIHtcbiAgICAgICAgICAgICAgLy8gV2UgYWxsb3cgYXV0by1tb2NrcyB0byBwcm9jZWVkIGFzIGlmIHRoZXkncmUgcmV0dXJuaW5nIG51bGwuXG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBJbnRlbnRpb25hbGx5IGZhbGwgdGhyb3VnaCB0byB0aGUgbmV4dCBjYXNlLCB3aGljaCBoYW5kbGVzIGJvdGhcbiAgICAgICAgLy8gZnVuY3Rpb25zIGFuZCBjbGFzc2VzXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZWQgbm8tZmFsbHRocm91Z2hcbiAgICAgICAgY2FzZSBGdW5jdGlvbmFsQ29tcG9uZW50OiB7XG4gICAgICAgICAgY29uc3QgQ29tcG9uZW50ID0gcmV0dXJuRmliZXIudHlwZTtcbiAgICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICclcyguLi4pOiBOb3RoaW5nIHdhcyByZXR1cm5lZCBmcm9tIHJlbmRlci4gVGhpcyB1c3VhbGx5IG1lYW5zIGEgJyArXG4gICAgICAgICAgICAgICdyZXR1cm4gc3RhdGVtZW50IGlzIG1pc3NpbmcuIE9yLCB0byByZW5kZXIgbm90aGluZywgJyArXG4gICAgICAgICAgICAgICdyZXR1cm4gbnVsbC4nLFxuICAgICAgICAgICAgQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lIHx8ICdDb21wb25lbnQnLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1haW5pbmcgY2FzZXMgYXJlIGFsbCB0cmVhdGVkIGFzIGVtcHR5LlxuICAgIHJldHVybiBkZWxldGVSZW1haW5pbmdDaGlsZHJlbihyZXR1cm5GaWJlciwgY3VycmVudEZpcnN0Q2hpbGQpO1xuICB9XG5cbiAgcmV0dXJuIHJlY29uY2lsZUNoaWxkRmliZXJzO1xufVxuXG5leHBvcnQgY29uc3QgcmVjb25jaWxlQ2hpbGRGaWJlcnMgPSBDaGlsZFJlY29uY2lsZXIodHJ1ZSk7XG5leHBvcnQgY29uc3QgbW91bnRDaGlsZEZpYmVycyA9IENoaWxkUmVjb25jaWxlcihmYWxzZSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZUNoaWxkRmliZXJzKFxuICBjdXJyZW50OiBGaWJlciB8IG51bGwsXG4gIHdvcmtJblByb2dyZXNzOiBGaWJlcixcbik6IHZvaWQge1xuICBpbnZhcmlhbnQoXG4gICAgY3VycmVudCA9PT0gbnVsbCB8fCB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9PT0gY3VycmVudC5jaGlsZCxcbiAgICAnUmVzdW1pbmcgd29yayBub3QgeWV0IGltcGxlbWVudGVkLicsXG4gICk7XG5cbiAgaWYgKHdvcmtJblByb2dyZXNzLmNoaWxkID09PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgbGV0IGN1cnJlbnRDaGlsZCA9IHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICBsZXQgbmV3Q2hpbGQgPSBjcmVhdGVXb3JrSW5Qcm9ncmVzcyhcbiAgICBjdXJyZW50Q2hpbGQsXG4gICAgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcyxcbiAgICBjdXJyZW50Q2hpbGQuZXhwaXJhdGlvblRpbWUsXG4gICk7XG4gIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbmV3Q2hpbGQ7XG5cbiAgbmV3Q2hpbGQucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gIHdoaWxlIChjdXJyZW50Q2hpbGQuc2libGluZyAhPT0gbnVsbCkge1xuICAgIGN1cnJlbnRDaGlsZCA9IGN1cnJlbnRDaGlsZC5zaWJsaW5nO1xuICAgIG5ld0NoaWxkID0gbmV3Q2hpbGQuc2libGluZyA9IGNyZWF0ZVdvcmtJblByb2dyZXNzKFxuICAgICAgY3VycmVudENoaWxkLFxuICAgICAgY3VycmVudENoaWxkLnBlbmRpbmdQcm9wcyxcbiAgICAgIGN1cnJlbnRDaGlsZC5leHBpcmF0aW9uVGltZSxcbiAgICApO1xuICAgIG5ld0NoaWxkLnJldHVybiA9IHdvcmtJblByb2dyZXNzO1xuICB9XG4gIG5ld0NoaWxkLnNpYmxpbmcgPSBudWxsO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction getCurrentFiberOwnerName() {\n  if (__DEV__) {\n    var fiber = ReactDebugCurrentFiber.current;\n    if (fiber === null) {\n      return null;\n    }\n    var owner = fiber._debugOwner;\n    if (owner !== null && typeof owner !== 'undefined') {\n      return (0, _getComponentName2.default)(owner);\n    }\n  }\n  return null;\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n\nfunction getCurrentFiberStackAddendum() {\n  if (__DEV__) {\n    var fiber = ReactDebugCurrentFiber.current;\n    if (fiber === null) {\n      return null;\n    }\n    // Safe because if current fiber exists, we are reconciling,\n    // and it is guaranteed to be the work-in-progress version.\n    return (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(fiber);\n  }\n  return null;\n}\n\nfunction resetCurrentFiber() {\n  _ReactGlobalSharedState.ReactDebugCurrentFrame.getCurrentStack = null;\n  ReactDebugCurrentFiber.current = null;\n  ReactDebugCurrentFiber.phase = null;\n}\n\nfunction setCurrentFiber(fiber) {\n  _ReactGlobalSharedState.ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackAddendum;\n  ReactDebugCurrentFiber.current = fiber;\n  ReactDebugCurrentFiber.phase = null;\n}\n\nfunction setCurrentPhase(phase) {\n  ReactDebugCurrentFiber.phase = phase;\n}\n\nvar ReactDebugCurrentFiber = {\n  current: null,\n  phase: null,\n  resetCurrentFiber: resetCurrentFiber,\n  setCurrentFiber: setCurrentFiber,\n  setCurrentPhase: setCurrentPhase,\n  getCurrentFiberOwnerName: getCurrentFiberOwnerName,\n  getCurrentFiberStackAddendum: getCurrentFiberStackAddendum\n};\n\nexports.default = ReactDebugCurrentFiber;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdERlYnVnQ3VycmVudEZpYmVyLmpzIl0sIm5hbWVzIjpbImdldEN1cnJlbnRGaWJlck93bmVyTmFtZSIsIl9fREVWX18iLCJmaWJlciIsIlJlYWN0RGVidWdDdXJyZW50RmliZXIiLCJjdXJyZW50Iiwib3duZXIiLCJfZGVidWdPd25lciIsImdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0iLCJyZXNldEN1cnJlbnRGaWJlciIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUiLCJnZXRDdXJyZW50U3RhY2siLCJwaGFzZSIsInNldEN1cnJlbnRGaWJlciIsInNldEN1cnJlbnRQaGFzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7O0FBQ0E7O0FBQ0E7Ozs7OztBQU1BLFNBQVNBLHdCQUFULEdBQW1EO0FBQ2pELE1BQUlDLE9BQUosRUFBYTtBQUNYLFFBQU1DLFFBQVFDLHVCQUF1QkMsT0FBckM7QUFDQSxRQUFJRixVQUFVLElBQWQsRUFBb0I7QUFDbEIsYUFBTyxJQUFQO0FBQ0Q7QUFDRCxRQUFNRyxRQUFRSCxNQUFNSSxXQUFwQjtBQUNBLFFBQUlELFVBQVUsSUFBVixJQUFrQixPQUFPQSxLQUFQLEtBQWlCLFdBQXZDLEVBQW9EO0FBQ2xELGFBQU8sZ0NBQWlCQSxLQUFqQixDQUFQO0FBQ0Q7QUFDRjtBQUNELFNBQU8sSUFBUDtBQUNELEMsQ0E3QkQ7Ozs7Ozs7OztBQStCQSxTQUFTRSw0QkFBVCxHQUF1RDtBQUNyRCxNQUFJTixPQUFKLEVBQWE7QUFDWCxRQUFNQyxRQUFRQyx1QkFBdUJDLE9BQXJDO0FBQ0EsUUFBSUYsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLGFBQU8sSUFBUDtBQUNEO0FBQ0Q7QUFDQTtBQUNBLFdBQU8sd0VBQXNDQSxLQUF0QyxDQUFQO0FBQ0Q7QUFDRCxTQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFTTSxpQkFBVCxHQUE2QjtBQUMzQkMsaURBQXVCQyxlQUF2QixHQUF5QyxJQUF6QztBQUNBUCx5QkFBdUJDLE9BQXZCLEdBQWlDLElBQWpDO0FBQ0FELHlCQUF1QlEsS0FBdkIsR0FBK0IsSUFBL0I7QUFDRDs7QUFFRCxTQUFTQyxlQUFULENBQXlCVixLQUF6QixFQUF1QztBQUNyQ08saURBQXVCQyxlQUF2QixHQUF5Q0gsNEJBQXpDO0FBQ0FKLHlCQUF1QkMsT0FBdkIsR0FBaUNGLEtBQWpDO0FBQ0FDLHlCQUF1QlEsS0FBdkIsR0FBK0IsSUFBL0I7QUFDRDs7QUFFRCxTQUFTRSxlQUFULENBQXlCRixLQUF6QixFQUF1RDtBQUNyRFIseUJBQXVCUSxLQUF2QixHQUErQkEsS0FBL0I7QUFDRDs7QUFFRCxJQUFNUix5QkFBeUI7QUFDN0JDLFdBQVUsSUFEbUI7QUFFN0JPLFNBQVEsSUFGcUI7QUFHN0JILHNDQUg2QjtBQUk3Qkksa0NBSjZCO0FBSzdCQyxrQ0FMNkI7QUFNN0JiLG9EQU42QjtBQU83Qk87QUFQNkIsQ0FBL0I7O2tCQVVlSixzQiIsImZpbGUiOiJSZWFjdERlYnVnQ3VycmVudEZpYmVyLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge1JlYWN0RGVidWdDdXJyZW50RnJhbWV9IGZyb20gJ3NoYXJlZC9SZWFjdEdsb2JhbFNoYXJlZFN0YXRlJztcbmltcG9ydCB7Z2V0U3RhY2tBZGRlbmR1bUJ5V29ya0luUHJvZ3Jlc3NGaWJlcn0gZnJvbSAnc2hhcmVkL1JlYWN0RmliZXJDb21wb25lbnRUcmVlSG9vayc7XG5pbXBvcnQgZ2V0Q29tcG9uZW50TmFtZSBmcm9tICdzaGFyZWQvZ2V0Q29tcG9uZW50TmFtZSc7XG5cbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAnLi9SZWFjdEZpYmVyJztcblxudHlwZSBMaWZlQ3ljbGVQaGFzZSA9ICdyZW5kZXInIHwgJ2dldENoaWxkQ29udGV4dCc7XG5cbmZ1bmN0aW9uIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZSgpOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb25zdCBmaWJlciA9IFJlYWN0RGVidWdDdXJyZW50RmliZXIuY3VycmVudDtcbiAgICBpZiAoZmliZXIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBjb25zdCBvd25lciA9IGZpYmVyLl9kZWJ1Z093bmVyO1xuICAgIGlmIChvd25lciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3duZXIgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICByZXR1cm4gZ2V0Q29tcG9uZW50TmFtZShvd25lcik7XG4gICAgfVxuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBnZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCk6IHN0cmluZyB8IG51bGwge1xuICBpZiAoX19ERVZfXykge1xuICAgIGNvbnN0IGZpYmVyID0gUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5jdXJyZW50O1xuICAgIGlmIChmaWJlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIFNhZmUgYmVjYXVzZSBpZiBjdXJyZW50IGZpYmVyIGV4aXN0cywgd2UgYXJlIHJlY29uY2lsaW5nLFxuICAgIC8vIGFuZCBpdCBpcyBndWFyYW50ZWVkIHRvIGJlIHRoZSB3b3JrLWluLXByb2dyZXNzIHZlcnNpb24uXG4gICAgcmV0dXJuIGdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIoZmliZXIpO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiByZXNldEN1cnJlbnRGaWJlcigpIHtcbiAgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5nZXRDdXJyZW50U3RhY2sgPSBudWxsO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmN1cnJlbnQgPSBudWxsO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnBoYXNlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudEZpYmVyKGZpYmVyOiBGaWJlcikge1xuICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjayA9IGdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW07XG4gIFJlYWN0RGVidWdDdXJyZW50RmliZXIuY3VycmVudCA9IGZpYmVyO1xuICBSZWFjdERlYnVnQ3VycmVudEZpYmVyLnBoYXNlID0gbnVsbDtcbn1cblxuZnVuY3Rpb24gc2V0Q3VycmVudFBoYXNlKHBoYXNlOiBMaWZlQ3ljbGVQaGFzZSB8IG51bGwpIHtcbiAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5waGFzZSA9IHBoYXNlO1xufVxuXG5jb25zdCBSZWFjdERlYnVnQ3VycmVudEZpYmVyID0ge1xuICBjdXJyZW50OiAobnVsbDogRmliZXIgfCBudWxsKSxcbiAgcGhhc2U6IChudWxsOiBMaWZlQ3ljbGVQaGFzZSB8IG51bGwpLFxuICByZXNldEN1cnJlbnRGaWJlcixcbiAgc2V0Q3VycmVudEZpYmVyLFxuICBzZXRDdXJyZW50UGhhc2UsXG4gIGdldEN1cnJlbnRGaWJlck93bmVyTmFtZSxcbiAgZ2V0Q3VycmVudEZpYmVyU3RhY2tBZGRlbmR1bSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0RGVidWdDdXJyZW50RmliZXI7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.recordEffect = recordEffect;\nexports.recordScheduleUpdate = recordScheduleUpdate;\nexports.startRequestCallbackTimer = startRequestCallbackTimer;\nexports.stopRequestCallbackTimer = stopRequestCallbackTimer;\nexports.startWorkTimer = startWorkTimer;\nexports.cancelWorkTimer = cancelWorkTimer;\nexports.stopWorkTimer = stopWorkTimer;\nexports.stopFailedWorkTimer = stopFailedWorkTimer;\nexports.startPhaseTimer = startPhaseTimer;\nexports.stopPhaseTimer = stopPhaseTimer;\nexports.startWorkLoopTimer = startWorkLoopTimer;\nexports.stopWorkLoopTimer = stopWorkLoopTimer;\nexports.startCommitTimer = startCommitTimer;\nexports.stopCommitTimer = stopCommitTimer;\nexports.startCommitSnapshotEffectsTimer = startCommitSnapshotEffectsTimer;\nexports.stopCommitSnapshotEffectsTimer = stopCommitSnapshotEffectsTimer;\nexports.startCommitHostEffectsTimer = startCommitHostEffectsTimer;\nexports.stopCommitHostEffectsTimer = stopCommitHostEffectsTimer;\nexports.startCommitLifeCyclesTimer = startCommitLifeCyclesTimer;\nexports.stopCommitLifeCyclesTimer = stopCommitLifeCyclesTimer;\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Prefix measurements so that it's possible to filter them.\n// Longer prefixes are hard to read in DevTools.\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar reactEmoji = '\\u269B';\nvar warningEmoji = '\\u26D4';\nvar supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';\n\n// Keep track of current fiber so that we know the path to unwind on pause.\n// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?\nvar currentFiber = null;\n// If we're in the middle of user code, which fiber and method is it?\n// Reusing `currentFiber` would be confusing for this because user code fiber\n// can change during commit phase too, but we don't need to unwind it (since\n// lifecycles in the commit phase don't resemble a tree).\nvar currentPhase = null;\nvar currentPhaseFiber = null;\n// Did lifecycle hook schedule an update? This is often a performance problem,\n// so we will keep track of it, and include it in the report.\n// Track commits caused by cascading updates.\nvar isCommitting = false;\nvar hasScheduledUpdateInCurrentCommit = false;\nvar hasScheduledUpdateInCurrentPhase = false;\nvar commitCountInCurrentWorkLoop = 0;\nvar effectCountInCurrentCommit = 0;\nvar isWaitingForCallback = false;\n// During commits, we only show a measurement once per method name\n// to avoid stretch the commit phase with measurement overhead.\nvar labelsInCurrentCommit = new Set();\n\nvar formatMarkName = function formatMarkName(markName) {\n  return reactEmoji + ' ' + markName;\n};\n\nvar formatLabel = function formatLabel(label, warning) {\n  var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';\n  var suffix = warning ? ' Warning: ' + warning : '';\n  return '' + prefix + label + suffix;\n};\n\nvar beginMark = function beginMark(markName) {\n  performance.mark(formatMarkName(markName));\n};\n\nvar clearMark = function clearMark(markName) {\n  performance.clearMarks(formatMarkName(markName));\n};\n\nvar endMark = function endMark(label, markName, warning) {\n  var formattedMarkName = formatMarkName(markName);\n  var formattedLabel = formatLabel(label, warning);\n  try {\n    performance.measure(formattedLabel, formattedMarkName);\n  } catch (err) {}\n  // If previous mark was missing for some reason, this will throw.\n  // This could only happen if React crashed in an unexpected place earlier.\n  // Don't pile on with more errors.\n\n  // Clear marks immediately to avoid growing buffer.\n  performance.clearMarks(formattedMarkName);\n  performance.clearMeasures(formattedLabel);\n};\n\nvar getFiberMarkName = function getFiberMarkName(label, debugID) {\n  return label + ' (#' + debugID + ')';\n};\n\nvar getFiberLabel = function getFiberLabel(componentName, isMounted, phase) {\n  if (phase === null) {\n    // These are composite component total time measurements.\n    return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';\n  } else {\n    // Composite component methods.\n    return componentName + '.' + phase;\n  }\n};\n\nvar beginFiberMark = function beginFiberMark(fiber, phase) {\n  var componentName = (0, _getComponentName2.default)(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n\n  if (isCommitting && labelsInCurrentCommit.has(label)) {\n    // During the commit phase, we don't show duplicate labels because\n    // there is a fixed overhead for every measurement, and we don't\n    // want to stretch the commit phase beyond necessary.\n    return false;\n  }\n  labelsInCurrentCommit.add(label);\n\n  var markName = getFiberMarkName(label, debugID);\n  beginMark(markName);\n  return true;\n};\n\nvar clearFiberMark = function clearFiberMark(fiber, phase) {\n  var componentName = (0, _getComponentName2.default)(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n  var markName = getFiberMarkName(label, debugID);\n  clearMark(markName);\n};\n\nvar endFiberMark = function endFiberMark(fiber, phase, warning) {\n  var componentName = (0, _getComponentName2.default)(fiber) || 'Unknown';\n  var debugID = fiber._debugID;\n  var isMounted = fiber.alternate !== null;\n  var label = getFiberLabel(componentName, isMounted, phase);\n  var markName = getFiberMarkName(label, debugID);\n  endMark(label, markName, warning);\n};\n\nvar shouldIgnoreFiber = function shouldIgnoreFiber(fiber) {\n  // Host components should be skipped in the timeline.\n  // We could check typeof fiber.type, but does this work with RN?\n  switch (fiber.tag) {\n    case _ReactTypeOfWork.HostRoot:\n    case _ReactTypeOfWork.HostComponent:\n    case _ReactTypeOfWork.HostText:\n    case _ReactTypeOfWork.HostPortal:\n    case _ReactTypeOfWork.CallComponent:\n    case _ReactTypeOfWork.ReturnComponent:\n    case _ReactTypeOfWork.Fragment:\n    case _ReactTypeOfWork.ContextProvider:\n    case _ReactTypeOfWork.ContextConsumer:\n      return true;\n    default:\n      return false;\n  }\n};\n\nvar clearPendingPhaseMeasurement = function clearPendingPhaseMeasurement() {\n  if (currentPhase !== null && currentPhaseFiber !== null) {\n    clearFiberMark(currentPhaseFiber, currentPhase);\n  }\n  currentPhaseFiber = null;\n  currentPhase = null;\n  hasScheduledUpdateInCurrentPhase = false;\n};\n\nvar pauseTimers = function pauseTimers() {\n  // Stops all currently active measurements so that they can be resumed\n  // if we continue in a later deferred loop from the same unit of work.\n  var fiber = currentFiber;\n  while (fiber) {\n    if (fiber._debugIsCurrentlyTiming) {\n      endFiberMark(fiber, null, null);\n    }\n    fiber = fiber.return;\n  }\n};\n\nvar resumeTimersRecursively = function resumeTimersRecursively(fiber) {\n  if (fiber.return !== null) {\n    resumeTimersRecursively(fiber.return);\n  }\n  if (fiber._debugIsCurrentlyTiming) {\n    beginFiberMark(fiber, null);\n  }\n};\n\nvar resumeTimers = function resumeTimers() {\n  // Resumes all measurements that were active during the last deferred loop.\n  if (currentFiber !== null) {\n    resumeTimersRecursively(currentFiber);\n  }\n};\n\nfunction recordEffect() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    effectCountInCurrentCommit++;\n  }\n}\n\nfunction recordScheduleUpdate() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (isCommitting) {\n      hasScheduledUpdateInCurrentCommit = true;\n    }\n    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {\n      hasScheduledUpdateInCurrentPhase = true;\n    }\n  }\n}\n\nfunction startRequestCallbackTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (supportsUserTiming && !isWaitingForCallback) {\n      isWaitingForCallback = true;\n      beginMark('(Waiting for async callback...)');\n    }\n  }\n}\n\nfunction stopRequestCallbackTimer(didExpire, expirationTime) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (supportsUserTiming) {\n      isWaitingForCallback = false;\n      var warning = didExpire ? 'React was blocked by main thread' : null;\n      endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);\n    }\n  }\n}\n\nfunction startWorkTimer(fiber) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, this is the fiber to unwind from.\n    currentFiber = fiber;\n    if (!beginFiberMark(fiber, null)) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = true;\n  }\n}\n\nfunction cancelWorkTimer(fiber) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // Remember we shouldn't complete measurement for this fiber.\n    // Otherwise flamechart will be deep even for small updates.\n    fiber._debugIsCurrentlyTiming = false;\n    clearFiberMark(fiber, null);\n  }\n}\n\nfunction stopWorkTimer(fiber) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, its parent is the fiber to unwind from.\n    currentFiber = fiber.return;\n    if (!fiber._debugIsCurrentlyTiming) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = false;\n    endFiberMark(fiber, null, null);\n  }\n}\n\nfunction stopFailedWorkTimer(fiber) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {\n      return;\n    }\n    // If we pause, its parent is the fiber to unwind from.\n    currentFiber = fiber.return;\n    if (!fiber._debugIsCurrentlyTiming) {\n      return;\n    }\n    fiber._debugIsCurrentlyTiming = false;\n    var warning = 'An error was thrown inside this error boundary';\n    endFiberMark(fiber, null, warning);\n  }\n}\n\nfunction startPhaseTimer(fiber, phase) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    clearPendingPhaseMeasurement();\n    if (!beginFiberMark(fiber, phase)) {\n      return;\n    }\n    currentPhaseFiber = fiber;\n    currentPhase = phase;\n  }\n}\n\nfunction stopPhaseTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    if (currentPhase !== null && currentPhaseFiber !== null) {\n      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;\n      endFiberMark(currentPhaseFiber, currentPhase, warning);\n    }\n    currentPhase = null;\n    currentPhaseFiber = null;\n  }\n}\n\nfunction startWorkLoopTimer(nextUnitOfWork) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    currentFiber = nextUnitOfWork;\n    if (!supportsUserTiming) {\n      return;\n    }\n    commitCountInCurrentWorkLoop = 0;\n    // This is top level call.\n    // Any other measurements are performed within.\n    beginMark('(React Tree Reconciliation)');\n    // Resume any measurements that were in progress during the last loop.\n    resumeTimers();\n  }\n}\n\nfunction stopWorkLoopTimer(interruptedBy, didCompleteRoot) {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var warning = null;\n    if (interruptedBy !== null) {\n      if (interruptedBy.tag === _ReactTypeOfWork.HostRoot) {\n        warning = 'A top-level update interrupted the previous render';\n      } else {\n        var componentName = (0, _getComponentName2.default)(interruptedBy) || 'Unknown';\n        warning = 'An update to ' + componentName + ' interrupted the previous render';\n      }\n    } else if (commitCountInCurrentWorkLoop > 1) {\n      warning = 'There were cascading updates';\n    }\n    commitCountInCurrentWorkLoop = 0;\n    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)';\n    // Pause any measurements until the next loop.\n    pauseTimers();\n    endMark(label, '(React Tree Reconciliation)', warning);\n  }\n}\n\nfunction startCommitTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    isCommitting = true;\n    hasScheduledUpdateInCurrentCommit = false;\n    labelsInCurrentCommit.clear();\n    beginMark('(Committing Changes)');\n  }\n}\n\nfunction stopCommitTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n\n    var warning = null;\n    if (hasScheduledUpdateInCurrentCommit) {\n      warning = 'Lifecycle hook scheduled a cascading update';\n    } else if (commitCountInCurrentWorkLoop > 0) {\n      warning = 'Caused by a cascading update in earlier commit';\n    }\n    hasScheduledUpdateInCurrentCommit = false;\n    commitCountInCurrentWorkLoop++;\n    isCommitting = false;\n    labelsInCurrentCommit.clear();\n\n    endMark('(Committing Changes)', '(Committing Changes)', warning);\n  }\n}\n\nfunction startCommitSnapshotEffectsTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    effectCountInCurrentCommit = 0;\n    beginMark('(Committing Snapshot Effects)');\n  }\n}\n\nfunction stopCommitSnapshotEffectsTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var count = effectCountInCurrentCommit;\n    effectCountInCurrentCommit = 0;\n    endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);\n  }\n}\n\nfunction startCommitHostEffectsTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    effectCountInCurrentCommit = 0;\n    beginMark('(Committing Host Effects)');\n  }\n}\n\nfunction stopCommitHostEffectsTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var count = effectCountInCurrentCommit;\n    effectCountInCurrentCommit = 0;\n    endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);\n  }\n}\n\nfunction startCommitLifeCyclesTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    effectCountInCurrentCommit = 0;\n    beginMark('(Calling Lifecycle Methods)');\n  }\n}\n\nfunction stopCommitLifeCyclesTimer() {\n  if (_ReactFeatureFlags.enableUserTimingAPI) {\n    if (!supportsUserTiming) {\n      return;\n    }\n    var count = effectCountInCurrentCommit;\n    effectCountInCurrentCommit = 0;\n    endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               */\n\nexports.createWorkInProgress = createWorkInProgress;\nexports.createHostRootFiber = createHostRootFiber;\nexports.createFiberFromElement = createFiberFromElement;\nexports.createFiberFromFragment = createFiberFromFragment;\nexports.createFiberFromText = createFiberFromText;\nexports.createFiberFromHostInstanceForDeletion = createFiberFromHostInstanceForDeletion;\nexports.createFiberFromPortal = createFiberFromPortal;\nexports.assignFiberPropertiesInDEV = assignFiberPropertiesInDEV;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactFiberExpirationTime = require('./ReactFiberExpirationTime');\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasBadMapPolyfill = void 0;\n\nif (__DEV__) {\n  hasBadMapPolyfill = false;\n  try {\n    var nonExtensibleObject = Object.preventExtensions({});\n    var testMap = new Map([[nonExtensibleObject, null]]);\n    var testSet = new Set([nonExtensibleObject]);\n    // This is necessary for Rollup to not consider these unused.\n    // https://github.com/rollup/rollup/issues/1771\n    // TODO: we can remove these if Rollup fixes the bug.\n    testMap.set(0, 0);\n    testSet.add(0);\n  } catch (e) {\n    // TODO: Consider warning about bad polyfills\n    hasBadMapPolyfill = true;\n  }\n}\n\n// A Fiber is work on a Component that needs to be done or was done. There can\n// be more than one per component.\n\n\nvar debugCounter = void 0;\n\nif (__DEV__) {\n  debugCounter = 1;\n}\n\nfunction FiberNode(tag, pendingProps, key, mode) {\n  // Instance\n  this.tag = tag;\n  this.key = key;\n  this.type = null;\n  this.stateNode = null;\n\n  // Fiber\n  this.return = null;\n  this.child = null;\n  this.sibling = null;\n  this.index = 0;\n\n  this.ref = null;\n\n  this.pendingProps = pendingProps;\n  this.memoizedProps = null;\n  this.updateQueue = null;\n  this.memoizedState = null;\n\n  this.mode = mode;\n\n  // Effects\n  this.effectTag = _ReactTypeOfSideEffect.NoEffect;\n  this.nextEffect = null;\n\n  this.firstEffect = null;\n  this.lastEffect = null;\n\n  this.expirationTime = _ReactFiberExpirationTime.NoWork;\n\n  this.alternate = null;\n\n  if (__DEV__) {\n    this._debugID = debugCounter++;\n    this._debugSource = null;\n    this._debugOwner = null;\n    this._debugIsCurrentlyTiming = false;\n    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {\n      Object.preventExtensions(this);\n    }\n  }\n}\n\n// This is a constructor function, rather than a POJO constructor, still\n// please ensure we do the following:\n// 1) Nobody should add any instance methods on this. Instance methods can be\n//    more difficult to predict when they get optimized and they are almost\n//    never inlined properly in static compilers.\n// 2) Nobody should rely on `instanceof Fiber` for type testing. We should\n//    always know when it is a fiber.\n// 3) We might want to experiment with using numeric keys since they are easier\n//    to optimize in a non-JIT environment.\n// 4) We can easily go from a constructor to a createFiber object literal if that\n//    is faster.\n// 5) It should be easy to port this to a C struct and keep a C implementation\n//    compatible.\nvar createFiber = function createFiber(tag, pendingProps, key, mode) {\n  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors\n  return new FiberNode(tag, pendingProps, key, mode);\n};\n\nfunction shouldConstruct(Component) {\n  return !!(Component.prototype && Component.prototype.isReactComponent);\n}\n\n// This is used to create an alternate fiber to do work on.\nfunction createWorkInProgress(current, pendingProps, expirationTime) {\n  var workInProgress = current.alternate;\n  if (workInProgress === null) {\n    // We use a double buffering pooling technique because we know that we'll\n    // only ever need at most two versions of a tree. We pool the \"other\" unused\n    // node that we're free to reuse. This is lazily created to avoid allocating\n    // extra objects for things that are never updated. It also allow us to\n    // reclaim the extra memory if needed.\n    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);\n    workInProgress.type = current.type;\n    workInProgress.stateNode = current.stateNode;\n\n    if (__DEV__) {\n      // DEV-only fields\n      workInProgress._debugID = current._debugID;\n      workInProgress._debugSource = current._debugSource;\n      workInProgress._debugOwner = current._debugOwner;\n    }\n\n    workInProgress.alternate = current;\n    current.alternate = workInProgress;\n  } else {\n    workInProgress.pendingProps = pendingProps;\n\n    // We already have an alternate.\n    // Reset the effect tag.\n    workInProgress.effectTag = _ReactTypeOfSideEffect.NoEffect;\n\n    // The effect list is no longer valid.\n    workInProgress.nextEffect = null;\n    workInProgress.firstEffect = null;\n    workInProgress.lastEffect = null;\n  }\n\n  workInProgress.expirationTime = expirationTime;\n\n  workInProgress.child = current.child;\n  workInProgress.memoizedProps = current.memoizedProps;\n  workInProgress.memoizedState = current.memoizedState;\n  workInProgress.updateQueue = current.updateQueue;\n\n  // These will be overridden during the parent's reconciliation\n  workInProgress.sibling = current.sibling;\n  workInProgress.index = current.index;\n  workInProgress.ref = current.ref;\n\n  return workInProgress;\n}\n\nfunction createHostRootFiber(isAsync) {\n  var mode = isAsync ? _ReactTypeOfMode.AsyncMode | _ReactTypeOfMode.StrictMode : _ReactTypeOfMode.NoContext;\n  return createFiber(_ReactTypeOfWork.HostRoot, null, null, mode);\n}\n\nfunction createFiberFromElement(element, mode, expirationTime) {\n  var owner = null;\n  if (__DEV__) {\n    owner = element._owner;\n  }\n\n  var fiber = void 0;\n  var type = element.type;\n  var key = element.key;\n  var pendingProps = element.props;\n\n  var fiberTag = void 0;\n  if (typeof type === 'function') {\n    fiberTag = shouldConstruct(type) ? _ReactTypeOfWork.ClassComponent : _ReactTypeOfWork.IndeterminateComponent;\n  } else if (typeof type === 'string') {\n    fiberTag = _ReactTypeOfWork.HostComponent;\n  } else {\n    switch (type) {\n      case _ReactSymbols.REACT_FRAGMENT_TYPE:\n        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);\n      case _ReactSymbols.REACT_ASYNC_MODE_TYPE:\n        fiberTag = _ReactTypeOfWork.Mode;\n        mode |= _ReactTypeOfMode.AsyncMode | _ReactTypeOfMode.StrictMode;\n        break;\n      case _ReactSymbols.REACT_STRICT_MODE_TYPE:\n        fiberTag = _ReactTypeOfWork.Mode;\n        mode |= _ReactTypeOfMode.StrictMode;\n        break;\n      case _ReactSymbols.REACT_CALL_TYPE:\n        fiberTag = _ReactTypeOfWork.CallComponent;\n        break;\n      case _ReactSymbols.REACT_RETURN_TYPE:\n        fiberTag = _ReactTypeOfWork.ReturnComponent;\n        break;\n      default:\n        {\n          if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null) {\n            switch (type.$$typeof) {\n              case _ReactSymbols.REACT_PROVIDER_TYPE:\n                fiberTag = _ReactTypeOfWork.ContextProvider;\n                break;\n              case _ReactSymbols.REACT_CONTEXT_TYPE:\n                // This is a consumer\n                fiberTag = _ReactTypeOfWork.ContextConsumer;\n                break;\n              case _ReactSymbols.REACT_FORWARD_REF_TYPE:\n                fiberTag = _ReactTypeOfWork.ForwardRef;\n                break;\n              default:\n                if (typeof type.tag === 'number') {\n                  // Currently assumed to be a continuation and therefore is a\n                  // fiber already.\n                  // TODO: The yield system is currently broken for updates in\n                  // some cases. The reified yield stores a fiber, but we don't\n                  // know which fiber that is; the current or a workInProgress?\n                  // When the continuation gets rendered here we don't know if we\n                  // can reuse that fiber or if we need to clone it. There is\n                  // probably a clever way to restructure this.\n                  fiber = type;\n                  fiber.pendingProps = pendingProps;\n                  fiber.expirationTime = expirationTime;\n                  return fiber;\n                } else {\n                  throwOnInvalidElementType(type, owner);\n                }\n                break;\n            }\n          } else {\n            throwOnInvalidElementType(type, owner);\n          }\n        }\n    }\n  }\n\n  fiber = createFiber(fiberTag, pendingProps, key, mode);\n  fiber.type = type;\n  fiber.expirationTime = expirationTime;\n\n  if (__DEV__) {\n    fiber._debugSource = element._source;\n    fiber._debugOwner = element._owner;\n  }\n\n  return fiber;\n}\n\nfunction throwOnInvalidElementType(type, owner) {\n  var info = '';\n  if (__DEV__) {\n    if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and \" + 'named imports.';\n    }\n    var ownerName = owner ? (0, _getComponentName2.default)(owner) : null;\n    if (ownerName) {\n      info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n    }\n  }\n  (0, _invariant2.default)(false, 'Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + 'but got: %s.%s', type == null ? type : typeof type === 'undefined' ? 'undefined' : _typeof(type), info);\n}\n\nfunction createFiberFromFragment(elements, mode, expirationTime, key) {\n  var fiber = createFiber(_ReactTypeOfWork.Fragment, elements, key, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromText(content, mode, expirationTime) {\n  var fiber = createFiber(_ReactTypeOfWork.HostText, content, null, mode);\n  fiber.expirationTime = expirationTime;\n  return fiber;\n}\n\nfunction createFiberFromHostInstanceForDeletion() {\n  var fiber = createFiber(_ReactTypeOfWork.HostComponent, null, null, _ReactTypeOfMode.NoContext);\n  fiber.type = 'DELETED';\n  return fiber;\n}\n\nfunction createFiberFromPortal(portal, mode, expirationTime) {\n  var pendingProps = portal.children !== null ? portal.children : [];\n  var fiber = createFiber(_ReactTypeOfWork.HostPortal, pendingProps, portal.key, mode);\n  fiber.expirationTime = expirationTime;\n  fiber.stateNode = {\n    containerInfo: portal.containerInfo,\n    pendingChildren: null, // Used by persistent updates\n    implementation: portal.implementation\n  };\n  return fiber;\n}\n\n// Used for stashing WIP properties to replay failed work in DEV.\nfunction assignFiberPropertiesInDEV(target, source) {\n  if (target === null) {\n    // This Fiber's initial properties will always be overwritten.\n    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.\n    target = createFiber(_ReactTypeOfWork.IndeterminateComponent, null, null, _ReactTypeOfMode.NoContext);\n  }\n\n  // This is intentionally written as a list of all properties.\n  // We tried to use Object.assign() instead but this is called in\n  // the hottest path, and Object.assign() was too slow:\n  // https://github.com/facebook/react/issues/12502\n  // This code is DEV-only so size is not a concern.\n\n  target.tag = source.tag;\n  target.key = source.key;\n  target.type = source.type;\n  target.stateNode = source.stateNode;\n  target.return = source.return;\n  target.child = source.child;\n  target.sibling = source.sibling;\n  target.index = source.index;\n  target.ref = source.ref;\n  target.pendingProps = source.pendingProps;\n  target.memoizedProps = source.memoizedProps;\n  target.updateQueue = source.updateQueue;\n  target.memoizedState = source.memoizedState;\n  target.mode = source.mode;\n  target.effectTag = source.effectTag;\n  target.nextEffect = source.nextEffect;\n  target.firstEffect = source.firstEffect;\n  target.lastEffect = source.lastEffect;\n  target.expirationTime = source.expirationTime;\n  target.alternate = source.alternate;\n  target._debugID = source._debugID;\n  target._debugSource = source._debugSource;\n  target._debugOwner = source._debugOwner;\n  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;\n  return target;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.default = function (config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber) {\n  var shouldSetTextContent = config.shouldSetTextContent,\n      shouldDeprioritizeSubtree = config.shouldDeprioritizeSubtree;\n  var pushHostContext = hostContext.pushHostContext,\n      pushHostContainer = hostContext.pushHostContainer;\n  var pushProvider = newContext.pushProvider;\n  var getMaskedContext = legacyContext.getMaskedContext,\n      getUnmaskedContext = legacyContext.getUnmaskedContext,\n      hasLegacyContextChanged = legacyContext.hasContextChanged,\n      pushLegacyContextProvider = legacyContext.pushContextProvider,\n      pushTopLevelContextObject = legacyContext.pushTopLevelContextObject,\n      invalidateContextProvider = legacyContext.invalidateContextProvider;\n  var enterHydrationState = hydrationContext.enterHydrationState,\n      resetHydrationState = hydrationContext.resetHydrationState,\n      tryToClaimNextHydratableInstance = hydrationContext.tryToClaimNextHydratableInstance;\n\n  var _ReactFiberClassCompo = (0, _ReactFiberClassComponent2.default)(legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState),\n      adoptClassInstance = _ReactFiberClassCompo.adoptClassInstance,\n      callGetDerivedStateFromProps = _ReactFiberClassCompo.callGetDerivedStateFromProps,\n      constructClassInstance = _ReactFiberClassCompo.constructClassInstance,\n      mountClassInstance = _ReactFiberClassCompo.mountClassInstance,\n      resumeMountClassInstance = _ReactFiberClassCompo.resumeMountClassInstance,\n      updateClassInstance = _ReactFiberClassCompo.updateClassInstance;\n\n  // TODO: Remove this and use reconcileChildrenAtExpirationTime directly.\n\n\n  function reconcileChildren(current, workInProgress, nextChildren) {\n    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, workInProgress.expirationTime);\n  }\n\n  function reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime) {\n    if (current === null) {\n      // If this is a fresh new component that hasn't been rendered yet, we\n      // won't update its child set by applying minimal side-effects. Instead,\n      // we will add them all to the child before it gets rendered. That means\n      // we can optimize this reconciliation pass by not tracking side-effects.\n      workInProgress.child = (0, _ReactChildFiber.mountChildFibers)(workInProgress, null, nextChildren, renderExpirationTime);\n    } else {\n      // If the current child is the same as the work in progress, it means that\n      // we haven't yet started any work on these children. Therefore, we use\n      // the clone algorithm to create a copy of all the current children.\n\n      // If we had any progressed work already, that is invalid at this point so\n      // let's throw it out.\n      workInProgress.child = (0, _ReactChildFiber.reconcileChildFibers)(workInProgress, current.child, nextChildren, renderExpirationTime);\n    }\n  }\n\n  function updateForwardRef(current, workInProgress) {\n    var render = workInProgress.type.render;\n    var nextChildren = render(workInProgress.pendingProps, workInProgress.ref);\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextChildren);\n    return workInProgress.child;\n  }\n\n  function updateFragment(current, workInProgress) {\n    var nextChildren = workInProgress.pendingProps;\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (workInProgress.memoizedProps === nextChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextChildren);\n    return workInProgress.child;\n  }\n\n  function updateMode(current, workInProgress) {\n    var nextChildren = workInProgress.pendingProps.children;\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (nextChildren === null || workInProgress.memoizedProps === nextChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextChildren);\n    return workInProgress.child;\n  }\n\n  function markRef(current, workInProgress) {\n    var ref = workInProgress.ref;\n    if (current === null && ref !== null || current !== null && current.ref !== ref) {\n      // Schedule a Ref effect\n      workInProgress.effectTag |= _ReactTypeOfSideEffect.Ref;\n    }\n  }\n\n  function updateFunctionalComponent(current, workInProgress) {\n    var fn = workInProgress.type;\n    var nextProps = workInProgress.pendingProps;\n\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else {\n      if (workInProgress.memoizedProps === nextProps) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress);\n      }\n      // TODO: consider bringing fn.shouldComponentUpdate() back.\n      // It used to be here.\n    }\n\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var context = getMaskedContext(workInProgress, unmaskedContext);\n\n    var nextChildren = void 0;\n\n    if (__DEV__) {\n      _ReactGlobalSharedState.ReactCurrentOwner.current = workInProgress;\n      _ReactDebugCurrentFiber2.default.setCurrentPhase('render');\n      nextChildren = fn(nextProps, context);\n      _ReactDebugCurrentFiber2.default.setCurrentPhase(null);\n    } else {\n      nextChildren = fn(nextProps, context);\n    }\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.PerformedWork;\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextProps);\n    return workInProgress.child;\n  }\n\n  function updateClassComponent(current, workInProgress, renderExpirationTime) {\n    // Push context providers early to prevent context stack mismatches.\n    // During mounting we don't know the child context yet as the instance doesn't exist.\n    // We will invalidate the child context in finishClassComponent() right after rendering.\n    var hasContext = pushLegacyContextProvider(workInProgress);\n    var shouldUpdate = void 0;\n    if (current === null) {\n      if (workInProgress.stateNode === null) {\n        // In the initial pass we might need to construct the instance.\n        constructClassInstance(workInProgress, workInProgress.pendingProps);\n        mountClassInstance(workInProgress, renderExpirationTime);\n\n        shouldUpdate = true;\n      } else {\n        // In a resume, we'll already have an instance we can reuse.\n        shouldUpdate = resumeMountClassInstance(workInProgress, renderExpirationTime);\n      }\n    } else {\n      shouldUpdate = updateClassInstance(current, workInProgress, renderExpirationTime);\n    }\n\n    // We processed the update queue inside updateClassInstance. It may have\n    // included some errors that were dispatched during the commit phase.\n    // TODO: Refactor class components so this is less awkward.\n    var didCaptureError = false;\n    var updateQueue = workInProgress.updateQueue;\n    if (updateQueue !== null && updateQueue.capturedValues !== null) {\n      shouldUpdate = true;\n      didCaptureError = true;\n    }\n    return finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime);\n  }\n\n  function finishClassComponent(current, workInProgress, shouldUpdate, hasContext, didCaptureError, renderExpirationTime) {\n    // Refs should update even if shouldComponentUpdate returns false\n    markRef(current, workInProgress);\n\n    if (!shouldUpdate && !didCaptureError) {\n      // Context providers should defer to sCU for rendering\n      if (hasContext) {\n        invalidateContextProvider(workInProgress, false);\n      }\n\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var ctor = workInProgress.type;\n    var instance = workInProgress.stateNode;\n\n    // Rerender\n    _ReactGlobalSharedState.ReactCurrentOwner.current = workInProgress;\n    var nextChildren = void 0;\n    if (didCaptureError && (!_ReactFeatureFlags.enableGetDerivedStateFromCatch || typeof ctor.getDerivedStateFromCatch !== 'function')) {\n      // If we captured an error, but getDerivedStateFrom catch is not defined,\n      // unmount all the children. componentDidCatch will schedule an update to\n      // re-render a fallback. This is temporary until we migrate everyone to\n      // the new API.\n      // TODO: Warn in a future release.\n      nextChildren = null;\n    } else {\n      if (__DEV__) {\n        _ReactDebugCurrentFiber2.default.setCurrentPhase('render');\n        nextChildren = instance.render();\n        if (_ReactFeatureFlags.debugRenderPhaseSideEffects || _ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n          instance.render();\n        }\n        _ReactDebugCurrentFiber2.default.setCurrentPhase(null);\n      } else {\n        if (_ReactFeatureFlags.debugRenderPhaseSideEffects || _ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n          instance.render();\n        }\n        nextChildren = instance.render();\n      }\n    }\n\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.PerformedWork;\n    if (didCaptureError) {\n      // If we're recovering from an error, reconcile twice: first to delete\n      // all the existing children.\n      reconcileChildrenAtExpirationTime(current, workInProgress, null, renderExpirationTime);\n      workInProgress.child = null;\n      // Now we can continue reconciling like normal. This has the effect of\n      // remounting all children regardless of whether their their\n      // identity matches.\n    }\n    reconcileChildrenAtExpirationTime(current, workInProgress, nextChildren, renderExpirationTime);\n    // Memoize props and state using the values we just used to render.\n    // TODO: Restructure so we never read values from the instance.\n    memoizeState(workInProgress, instance.state);\n    memoizeProps(workInProgress, instance.props);\n\n    // The context might have changed so we need to recalculate it.\n    if (hasContext) {\n      invalidateContextProvider(workInProgress, true);\n    }\n\n    return workInProgress.child;\n  }\n\n  function pushHostRootContext(workInProgress) {\n    var root = workInProgress.stateNode;\n    if (root.pendingContext) {\n      pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);\n    } else if (root.context) {\n      // Should always be set\n      pushTopLevelContextObject(workInProgress, root.context, false);\n    }\n    pushHostContainer(workInProgress, root.containerInfo);\n  }\n\n  function updateHostRoot(current, workInProgress, renderExpirationTime) {\n    pushHostRootContext(workInProgress);\n    var updateQueue = workInProgress.updateQueue;\n    if (updateQueue !== null) {\n      var prevState = workInProgress.memoizedState;\n      var state = (0, _ReactFiberUpdateQueue.processUpdateQueue)(current, workInProgress, updateQueue, null, null, renderExpirationTime);\n      memoizeState(workInProgress, state);\n      updateQueue = workInProgress.updateQueue;\n\n      var element = void 0;\n      if (updateQueue !== null && updateQueue.capturedValues !== null) {\n        // There's an uncaught error. Unmount the whole root.\n        element = null;\n      } else if (prevState === state) {\n        // If the state is the same as before, that's a bailout because we had\n        // no work that expires at this time.\n        resetHydrationState();\n        return bailoutOnAlreadyFinishedWork(current, workInProgress);\n      } else {\n        element = state.element;\n      }\n      var root = workInProgress.stateNode;\n      if ((current === null || current.child === null) && root.hydrate && enterHydrationState(workInProgress)) {\n        // If we don't have any current children this might be the first pass.\n        // We always try to hydrate. If this isn't a hydration pass there won't\n        // be any children to hydrate which is effectively the same thing as\n        // not hydrating.\n\n        // This is a bit of a hack. We track the host root as a placement to\n        // know that we're currently in a mounting state. That way isMounted\n        // works as expected. We must reset this before committing.\n        // TODO: Delete this when we delete isMounted and findDOMNode.\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Placement;\n\n        // Ensure that children mount into this root without tracking\n        // side-effects. This ensures that we don't store Placement effects on\n        // nodes that will be hydrated.\n        workInProgress.child = (0, _ReactChildFiber.mountChildFibers)(workInProgress, null, element, renderExpirationTime);\n      } else {\n        // Otherwise reset hydration state in case we aborted and resumed another\n        // root.\n        resetHydrationState();\n        reconcileChildren(current, workInProgress, element);\n      }\n      memoizeState(workInProgress, state);\n      return workInProgress.child;\n    }\n    resetHydrationState();\n    // If there is no update queue, that's a bailout because the root has no props.\n    return bailoutOnAlreadyFinishedWork(current, workInProgress);\n  }\n\n  function updateHostComponent(current, workInProgress, renderExpirationTime) {\n    pushHostContext(workInProgress);\n\n    if (current === null) {\n      tryToClaimNextHydratableInstance(workInProgress);\n    }\n\n    var type = workInProgress.type;\n    var memoizedProps = workInProgress.memoizedProps;\n    var nextProps = workInProgress.pendingProps;\n    var prevProps = current !== null ? current.memoizedProps : null;\n\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (memoizedProps === nextProps) {\n      var isHidden = workInProgress.mode & _ReactTypeOfMode.AsyncMode && shouldDeprioritizeSubtree(type, nextProps);\n      if (isHidden) {\n        // Before bailing out, make sure we've deprioritized a hidden component.\n        workInProgress.expirationTime = _ReactFiberExpirationTime.Never;\n      }\n      if (!isHidden || renderExpirationTime !== _ReactFiberExpirationTime.Never) {\n        return bailoutOnAlreadyFinishedWork(current, workInProgress);\n      }\n      // If we're rendering a hidden node at hidden priority, don't bailout. The\n      // parent is complete, but the children may not be.\n    }\n\n    var nextChildren = nextProps.children;\n    var isDirectTextChild = shouldSetTextContent(type, nextProps);\n\n    if (isDirectTextChild) {\n      // We special case a direct text child of a host node. This is a common\n      // case. We won't handle it as a reified child. We will instead handle\n      // this in the host environment that also have access to this prop. That\n      // avoids allocating another HostText fiber and traversing it.\n      nextChildren = null;\n    } else if (prevProps && shouldSetTextContent(type, prevProps)) {\n      // If we're switching from a direct text child to a normal child, or to\n      // empty, we need to schedule the text content to be reset.\n      workInProgress.effectTag |= _ReactTypeOfSideEffect.ContentReset;\n    }\n\n    markRef(current, workInProgress);\n\n    // Check the host config to see if the children are offscreen/hidden.\n    if (renderExpirationTime !== _ReactFiberExpirationTime.Never && workInProgress.mode & _ReactTypeOfMode.AsyncMode && shouldDeprioritizeSubtree(type, nextProps)) {\n      // Down-prioritize the children.\n      workInProgress.expirationTime = _ReactFiberExpirationTime.Never;\n      // Bailout and come back to this fiber later.\n      workInProgress.memoizedProps = nextProps;\n      return null;\n    }\n\n    reconcileChildren(current, workInProgress, nextChildren);\n    memoizeProps(workInProgress, nextProps);\n    return workInProgress.child;\n  }\n\n  function updateHostText(current, workInProgress) {\n    if (current === null) {\n      tryToClaimNextHydratableInstance(workInProgress);\n    }\n    var nextProps = workInProgress.pendingProps;\n    memoizeProps(workInProgress, nextProps);\n    // Nothing to do here. This is terminal. We'll do the completion step\n    // immediately after.\n    return null;\n  }\n\n  function mountIndeterminateComponent(current, workInProgress, renderExpirationTime) {\n    (0, _invariant2.default)(current === null, 'An indeterminate component should never have mounted. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    var fn = workInProgress.type;\n    var props = workInProgress.pendingProps;\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var context = getMaskedContext(workInProgress, unmaskedContext);\n\n    var value = void 0;\n\n    if (__DEV__) {\n      if (fn.prototype && typeof fn.prototype.render === 'function') {\n        var componentName = (0, _getComponentName2.default)(workInProgress) || 'Unknown';\n\n        if (!didWarnAboutBadClass[componentName]) {\n          (0, _warning2.default)(false, \"The <%s /> component appears to have a render method, but doesn't extend React.Component. \" + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);\n          didWarnAboutBadClass[componentName] = true;\n        }\n      }\n      _ReactGlobalSharedState.ReactCurrentOwner.current = workInProgress;\n      value = fn(props, context);\n    } else {\n      value = fn(props, context);\n    }\n    // React DevTools reads this flag.\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.PerformedWork;\n\n    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {\n      var Component = workInProgress.type;\n\n      // Proceed under the assumption that this is a class instance\n      workInProgress.tag = _ReactTypeOfWork.ClassComponent;\n\n      workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;\n\n      if (typeof Component.getDerivedStateFromProps === 'function') {\n        var partialState = callGetDerivedStateFromProps(workInProgress, value, props, workInProgress.memoizedState);\n\n        if (partialState !== null && partialState !== undefined) {\n          workInProgress.memoizedState = Object.assign({}, workInProgress.memoizedState, partialState);\n        }\n      }\n\n      // Push context providers early to prevent context stack mismatches.\n      // During mounting we don't know the child context yet as the instance doesn't exist.\n      // We will invalidate the child context in finishClassComponent() right after rendering.\n      var hasContext = pushLegacyContextProvider(workInProgress);\n      adoptClassInstance(workInProgress, value);\n      mountClassInstance(workInProgress, renderExpirationTime);\n      return finishClassComponent(current, workInProgress, true, hasContext, false, renderExpirationTime);\n    } else {\n      // Proceed under the assumption that this is a functional component\n      workInProgress.tag = _ReactTypeOfWork.FunctionalComponent;\n      if (__DEV__) {\n        var _Component = workInProgress.type;\n\n        if (_Component) {\n          (0, _warning2.default)(!_Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', _Component.displayName || _Component.name || 'Component');\n        }\n        if (workInProgress.ref !== null) {\n          var info = '';\n          var ownerName = _ReactDebugCurrentFiber2.default.getCurrentFiberOwnerName();\n          if (ownerName) {\n            info += '\\n\\nCheck the render method of `' + ownerName + '`.';\n          }\n\n          var warningKey = ownerName || workInProgress._debugID || '';\n          var debugSource = workInProgress._debugSource;\n          if (debugSource) {\n            warningKey = debugSource.fileName + ':' + debugSource.lineNumber;\n          }\n          if (!didWarnAboutStatelessRefs[warningKey]) {\n            didWarnAboutStatelessRefs[warningKey] = true;\n            (0, _warning2.default)(false, 'Stateless function components cannot be given refs. ' + 'Attempts to access this ref will fail.%s%s', info, _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum());\n          }\n        }\n\n        if (typeof fn.getDerivedStateFromProps === 'function') {\n          var _componentName = (0, _getComponentName2.default)(workInProgress) || 'Unknown';\n\n          if (!didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName]) {\n            (0, _warning2.default)(false, '%s: Stateless functional components do not support getDerivedStateFromProps.', _componentName);\n            didWarnAboutGetDerivedStateOnFunctionalComponent[_componentName] = true;\n          }\n        }\n      }\n      reconcileChildren(current, workInProgress, value);\n      memoizeProps(workInProgress, props);\n      return workInProgress.child;\n    }\n  }\n\n  function updateCallComponent(current, workInProgress, renderExpirationTime) {\n    var nextProps = workInProgress.pendingProps;\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (workInProgress.memoizedProps === nextProps) {\n      nextProps = workInProgress.memoizedProps;\n      // TODO: When bailing out, we might need to return the stateNode instead\n      // of the child. To check it for work.\n      // return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var nextChildren = nextProps.children;\n\n    // The following is a fork of reconcileChildrenAtExpirationTime but using\n    // stateNode to store the child.\n    if (current === null) {\n      workInProgress.stateNode = (0, _ReactChildFiber.mountChildFibers)(workInProgress, workInProgress.stateNode, nextChildren, renderExpirationTime);\n    } else {\n      workInProgress.stateNode = (0, _ReactChildFiber.reconcileChildFibers)(workInProgress, current.stateNode, nextChildren, renderExpirationTime);\n    }\n\n    memoizeProps(workInProgress, nextProps);\n    // This doesn't take arbitrary time so we could synchronously just begin\n    // eagerly do the work of workInProgress.child as an optimization.\n    return workInProgress.stateNode;\n  }\n\n  function updatePortalComponent(current, workInProgress, renderExpirationTime) {\n    pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n    var nextChildren = workInProgress.pendingProps;\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (workInProgress.memoizedProps === nextChildren) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    if (current === null) {\n      // Portals are special because we don't append the children during mount\n      // but at commit. Therefore we need to track insertions which the normal\n      // flow doesn't do during mount. This doesn't happen at the root because\n      // the root always starts with a \"current\" with a null child.\n      // TODO: Consider unifying this with how the root works.\n      workInProgress.child = (0, _ReactChildFiber.reconcileChildFibers)(workInProgress, null, nextChildren, renderExpirationTime);\n      memoizeProps(workInProgress, nextChildren);\n    } else {\n      reconcileChildren(current, workInProgress, nextChildren);\n      memoizeProps(workInProgress, nextChildren);\n    }\n    return workInProgress.child;\n  }\n\n  function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {\n    var fiber = workInProgress.child;\n    if (fiber !== null) {\n      // Set the return pointer of the child to the work-in-progress fiber.\n      fiber.return = workInProgress;\n    }\n    while (fiber !== null) {\n      var nextFiber = void 0;\n      // Visit this fiber.\n      switch (fiber.tag) {\n        case _ReactTypeOfWork.ContextConsumer:\n          // Check if the context matches.\n          var observedBits = fiber.stateNode | 0;\n          if (fiber.type === context && (observedBits & changedBits) !== 0) {\n            // Update the expiration time of all the ancestors, including\n            // the alternates.\n            var node = fiber;\n            while (node !== null) {\n              var alternate = node.alternate;\n              if (node.expirationTime === _ReactFiberExpirationTime.NoWork || node.expirationTime > renderExpirationTime) {\n                node.expirationTime = renderExpirationTime;\n                if (alternate !== null && (alternate.expirationTime === _ReactFiberExpirationTime.NoWork || alternate.expirationTime > renderExpirationTime)) {\n                  alternate.expirationTime = renderExpirationTime;\n                }\n              } else if (alternate !== null && (alternate.expirationTime === _ReactFiberExpirationTime.NoWork || alternate.expirationTime > renderExpirationTime)) {\n                alternate.expirationTime = renderExpirationTime;\n              } else {\n                // Neither alternate was updated, which means the rest of the\n                // ancestor path already has sufficient priority.\n                break;\n              }\n              node = node.return;\n            }\n            // Don't scan deeper than a matching consumer. When we render the\n            // consumer, we'll continue scanning from that point. This way the\n            // scanning work is time-sliced.\n            nextFiber = null;\n          } else {\n            // Traverse down.\n            nextFiber = fiber.child;\n          }\n          break;\n        case _ReactTypeOfWork.ContextProvider:\n          // Don't scan deeper if this is a matching provider\n          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;\n          break;\n        default:\n          // Traverse down.\n          nextFiber = fiber.child;\n          break;\n      }\n      if (nextFiber !== null) {\n        // Set the return pointer of the child to the work-in-progress fiber.\n        nextFiber.return = fiber;\n      } else {\n        // No child. Traverse to next sibling.\n        nextFiber = fiber;\n        while (nextFiber !== null) {\n          if (nextFiber === workInProgress) {\n            // We're back to the root of this subtree. Exit.\n            nextFiber = null;\n            break;\n          }\n          var sibling = nextFiber.sibling;\n          if (sibling !== null) {\n            nextFiber = sibling;\n            break;\n          }\n          // No more siblings. Traverse up.\n          nextFiber = nextFiber.return;\n        }\n      }\n      fiber = nextFiber;\n    }\n  }\n\n  function updateContextProvider(current, workInProgress, renderExpirationTime) {\n    var providerType = workInProgress.type;\n    var context = providerType._context;\n\n    var newProps = workInProgress.pendingProps;\n    var oldProps = workInProgress.memoizedProps;\n\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (oldProps === newProps) {\n      workInProgress.stateNode = 0;\n      pushProvider(workInProgress);\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n\n    var newValue = newProps.value;\n    workInProgress.memoizedProps = newProps;\n\n    var changedBits = void 0;\n    if (oldProps === null) {\n      // Initial render\n      changedBits = _maxSigned31BitInt2.default;\n    } else {\n      if (oldProps.value === newProps.value) {\n        // No change. Bailout early if children are the same.\n        if (oldProps.children === newProps.children) {\n          workInProgress.stateNode = 0;\n          pushProvider(workInProgress);\n          return bailoutOnAlreadyFinishedWork(current, workInProgress);\n        }\n        changedBits = 0;\n      } else {\n        var oldValue = oldProps.value;\n        // Use Object.is to compare the new context value to the old value.\n        // Inlined Object.is polyfill.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n        if (oldValue === newValue && (oldValue !== 0 || 1 / oldValue === 1 / newValue) || oldValue !== oldValue && newValue !== newValue // eslint-disable-line no-self-compare\n        ) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children) {\n              workInProgress.stateNode = 0;\n              pushProvider(workInProgress);\n              return bailoutOnAlreadyFinishedWork(current, workInProgress);\n            }\n            changedBits = 0;\n          } else {\n          changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : _maxSigned31BitInt2.default;\n          if (__DEV__) {\n            (0, _warning2.default)((changedBits & _maxSigned31BitInt2.default) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);\n          }\n          changedBits |= 0;\n\n          if (changedBits === 0) {\n            // No change. Bailout early if children are the same.\n            if (oldProps.children === newProps.children) {\n              workInProgress.stateNode = 0;\n              pushProvider(workInProgress);\n              return bailoutOnAlreadyFinishedWork(current, workInProgress);\n            }\n          } else {\n            propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);\n          }\n        }\n      }\n    }\n\n    workInProgress.stateNode = changedBits;\n    pushProvider(workInProgress);\n\n    var newChildren = newProps.children;\n    reconcileChildren(current, workInProgress, newChildren);\n    return workInProgress.child;\n  }\n\n  function updateContextConsumer(current, workInProgress, renderExpirationTime) {\n    var context = workInProgress.type;\n    var newProps = workInProgress.pendingProps;\n    var oldProps = workInProgress.memoizedProps;\n\n    var newValue = context._currentValue;\n    var changedBits = context._changedBits;\n\n    if (hasLegacyContextChanged()) {\n      // Normally we can bail out on props equality but if context has changed\n      // we don't do the bailout and we have to reuse existing props instead.\n    } else if (changedBits === 0 && oldProps === newProps) {\n      return bailoutOnAlreadyFinishedWork(current, workInProgress);\n    }\n    workInProgress.memoizedProps = newProps;\n\n    var observedBits = newProps.unstable_observedBits;\n    if (observedBits === undefined || observedBits === null) {\n      // Subscribe to all changes by default\n      observedBits = _maxSigned31BitInt2.default;\n    }\n    // Store the observedBits on the fiber's stateNode for quick access.\n    workInProgress.stateNode = observedBits;\n\n    if ((changedBits & observedBits) !== 0) {\n      // Context change propagation stops at matching consumers, for time-\n      // slicing. Continue the propagation here.\n      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);\n    }\n    // There is no bailout on `children` equality because we expect people\n    // to often pass a bound method as a child, but it may reference\n    // `this.state` or `this.props` (and thus needs to re-render on `setState`).\n\n    var render = newProps.children;\n\n    if (__DEV__) {\n      (0, _warning2.default)(typeof render === 'function', 'A context consumer was rendered with multiple children, or a child ' + \"that isn't a function. A context consumer expects a single child \" + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');\n    }\n\n    var newChildren = render(newValue);\n    reconcileChildren(current, workInProgress, newChildren);\n    return workInProgress.child;\n  }\n\n  /*\n  function reuseChildrenEffects(returnFiber : Fiber, firstChild : Fiber) {\n    let child = firstChild;\n    do {\n      // Ensure that the first and last effect of the parent corresponds\n      // to the children's first and last effect.\n      if (!returnFiber.firstEffect) {\n        returnFiber.firstEffect = child.firstEffect;\n      }\n      if (child.lastEffect) {\n        if (returnFiber.lastEffect) {\n          returnFiber.lastEffect.nextEffect = child.firstEffect;\n        }\n        returnFiber.lastEffect = child.lastEffect;\n      }\n    } while (child = child.sibling);\n  }\n  */\n\n  function bailoutOnAlreadyFinishedWork(current, workInProgress) {\n    (0, _ReactDebugFiberPerf.cancelWorkTimer)(workInProgress);\n\n    // TODO: We should ideally be able to bail out early if the children have no\n    // more work to do. However, since we don't have a separation of this\n    // Fiber's priority and its children yet - we don't know without doing lots\n    // of the same work we do anyway. Once we have that separation we can just\n    // bail out here if the children has no more work at this priority level.\n    // if (workInProgress.priorityOfChildren <= priorityLevel) {\n    //   // If there are side-effects in these children that have not yet been\n    //   // committed we need to ensure that they get properly transferred up.\n    //   if (current && current.child !== workInProgress.child) {\n    //     reuseChildrenEffects(workInProgress, child);\n    //   }\n    //   return null;\n    // }\n\n    (0, _ReactChildFiber.cloneChildFibers)(current, workInProgress);\n    return workInProgress.child;\n  }\n\n  function bailoutOnLowPriority(current, workInProgress) {\n    (0, _ReactDebugFiberPerf.cancelWorkTimer)(workInProgress);\n\n    // TODO: Handle HostComponent tags here as well and call pushHostContext()?\n    // See PR 8590 discussion for context\n    switch (workInProgress.tag) {\n      case _ReactTypeOfWork.HostRoot:\n        pushHostRootContext(workInProgress);\n        break;\n      case _ReactTypeOfWork.ClassComponent:\n        pushLegacyContextProvider(workInProgress);\n        break;\n      case _ReactTypeOfWork.HostPortal:\n        pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);\n        break;\n      case _ReactTypeOfWork.ContextProvider:\n        pushProvider(workInProgress);\n        break;\n    }\n    // TODO: What if this is currently in progress?\n    // How can that happen? How is this not being cloned?\n    return null;\n  }\n\n  // TODO: Delete memoizeProps/State and move to reconcile/bailout instead\n  function memoizeProps(workInProgress, nextProps) {\n    workInProgress.memoizedProps = nextProps;\n  }\n\n  function memoizeState(workInProgress, nextState) {\n    workInProgress.memoizedState = nextState;\n    // Don't reset the updateQueue, in case there are pending updates. Resetting\n    // is handled by processUpdateQueue.\n  }\n\n  function beginWork(current, workInProgress, renderExpirationTime) {\n    if (workInProgress.expirationTime === _ReactFiberExpirationTime.NoWork || workInProgress.expirationTime > renderExpirationTime) {\n      return bailoutOnLowPriority(current, workInProgress);\n    }\n\n    switch (workInProgress.tag) {\n      case _ReactTypeOfWork.IndeterminateComponent:\n        return mountIndeterminateComponent(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.FunctionalComponent:\n        return updateFunctionalComponent(current, workInProgress);\n      case _ReactTypeOfWork.ClassComponent:\n        return updateClassComponent(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.HostRoot:\n        return updateHostRoot(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.HostComponent:\n        return updateHostComponent(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.HostText:\n        return updateHostText(current, workInProgress);\n      case _ReactTypeOfWork.CallHandlerPhase:\n        // This is a restart. Reset the tag to the initial phase.\n        workInProgress.tag = _ReactTypeOfWork.CallComponent;\n      // Intentionally fall through since this is now the same.\n      case _ReactTypeOfWork.CallComponent:\n        return updateCallComponent(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.ReturnComponent:\n        // A return component is just a placeholder, we can just run through the\n        // next one immediately.\n        return null;\n      case _ReactTypeOfWork.HostPortal:\n        return updatePortalComponent(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.ForwardRef:\n        return updateForwardRef(current, workInProgress);\n      case _ReactTypeOfWork.Fragment:\n        return updateFragment(current, workInProgress);\n      case _ReactTypeOfWork.Mode:\n        return updateMode(current, workInProgress);\n      case _ReactTypeOfWork.ContextProvider:\n        return updateContextProvider(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.ContextConsumer:\n        return updateContextConsumer(current, workInProgress, renderExpirationTime);\n      default:\n        (0, _invariant2.default)(false, 'Unknown unit of work tag. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n  }\n\n  return {\n    beginWork: beginWork\n  };\n};\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactDebugCurrentFiber = require('./ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _ReactDebugFiberPerf = require('./ReactDebugFiberPerf');\n\nvar _ReactFiberClassComponent = require('./ReactFiberClassComponent');\n\nvar _ReactFiberClassComponent2 = _interopRequireDefault(_ReactFiberClassComponent);\n\nvar _ReactChildFiber = require('./ReactChildFiber');\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nvar _ReactFiberExpirationTime = require('./ReactFiberExpirationTime');\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _maxSigned31BitInt = require('./maxSigned31BitInt');\n\nvar _maxSigned31BitInt2 = _interopRequireDefault(_maxSigned31BitInt);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar didWarnAboutBadClass = void 0;\nvar didWarnAboutGetDerivedStateOnFunctionalComponent = void 0;\nvar didWarnAboutStatelessRefs = void 0;\n\nif (__DEV__) {\n  didWarnAboutBadClass = {};\n  didWarnAboutGetDerivedStateOnFunctionalComponent = {};\n  didWarnAboutStatelessRefs = {};\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyQmVnaW5Xb3JrLmpzIl0sIm5hbWVzIjpbImNvbmZpZyIsImhvc3RDb250ZXh0IiwibGVnYWN5Q29udGV4dCIsIm5ld0NvbnRleHQiLCJoeWRyYXRpb25Db250ZXh0Iiwic2NoZWR1bGVXb3JrIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNob3VsZFNldFRleHRDb250ZW50Iiwic2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSIsInB1c2hIb3N0Q29udGV4dCIsInB1c2hIb3N0Q29udGFpbmVyIiwicHVzaFByb3ZpZGVyIiwiZ2V0TWFza2VkQ29udGV4dCIsImdldFVubWFza2VkQ29udGV4dCIsImhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkIiwiaGFzQ29udGV4dENoYW5nZWQiLCJwdXNoTGVnYWN5Q29udGV4dFByb3ZpZGVyIiwicHVzaENvbnRleHRQcm92aWRlciIsInB1c2hUb3BMZXZlbENvbnRleHRPYmplY3QiLCJpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyIiwiZW50ZXJIeWRyYXRpb25TdGF0ZSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJ0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSIsIm1lbW9pemVQcm9wcyIsIm1lbW9pemVTdGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsInJlY29uY2lsZUNoaWxkcmVuIiwiY3VycmVudCIsIndvcmtJblByb2dyZXNzIiwibmV4dENoaWxkcmVuIiwicmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWUiLCJyZW5kZXJFeHBpcmF0aW9uVGltZSIsImNoaWxkIiwidXBkYXRlRm9yd2FyZFJlZiIsInJlbmRlciIsInR5cGUiLCJwZW5kaW5nUHJvcHMiLCJyZWYiLCJ1cGRhdGVGcmFnbWVudCIsIm1lbW9pemVkUHJvcHMiLCJiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrIiwidXBkYXRlTW9kZSIsImNoaWxkcmVuIiwibWFya1JlZiIsImVmZmVjdFRhZyIsIlJlZiIsInVwZGF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJmbiIsIm5leHRQcm9wcyIsInVubWFza2VkQ29udGV4dCIsImNvbnRleHQiLCJfX0RFVl9fIiwiUmVhY3RDdXJyZW50T3duZXIiLCJSZWFjdERlYnVnQ3VycmVudEZpYmVyIiwic2V0Q3VycmVudFBoYXNlIiwiUGVyZm9ybWVkV29yayIsInVwZGF0ZUNsYXNzQ29tcG9uZW50IiwiaGFzQ29udGV4dCIsInNob3VsZFVwZGF0ZSIsInN0YXRlTm9kZSIsImRpZENhcHR1cmVFcnJvciIsInVwZGF0ZVF1ZXVlIiwiY2FwdHVyZWRWYWx1ZXMiLCJmaW5pc2hDbGFzc0NvbXBvbmVudCIsImN0b3IiLCJpbnN0YW5jZSIsImVuYWJsZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCIsImRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyIsImRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUiLCJtb2RlIiwiU3RyaWN0TW9kZSIsInN0YXRlIiwicHJvcHMiLCJwdXNoSG9zdFJvb3RDb250ZXh0Iiwicm9vdCIsInBlbmRpbmdDb250ZXh0IiwiY29udGFpbmVySW5mbyIsInVwZGF0ZUhvc3RSb290IiwicHJldlN0YXRlIiwibWVtb2l6ZWRTdGF0ZSIsImVsZW1lbnQiLCJoeWRyYXRlIiwiUGxhY2VtZW50IiwidXBkYXRlSG9zdENvbXBvbmVudCIsInByZXZQcm9wcyIsImlzSGlkZGVuIiwiQXN5bmNNb2RlIiwiTmV2ZXIiLCJpc0RpcmVjdFRleHRDaGlsZCIsIkNvbnRlbnRSZXNldCIsInVwZGF0ZUhvc3RUZXh0IiwibW91bnRJbmRldGVybWluYXRlQ29tcG9uZW50IiwidmFsdWUiLCJwcm90b3R5cGUiLCJjb21wb25lbnROYW1lIiwiZGlkV2FybkFib3V0QmFkQ2xhc3MiLCIkJHR5cGVvZiIsInVuZGVmaW5lZCIsIkNvbXBvbmVudCIsInRhZyIsIkNsYXNzQ29tcG9uZW50IiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwicGFydGlhbFN0YXRlIiwiT2JqZWN0IiwiYXNzaWduIiwiRnVuY3Rpb25hbENvbXBvbmVudCIsImNoaWxkQ29udGV4dFR5cGVzIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiaW5mbyIsIm93bmVyTmFtZSIsImdldEN1cnJlbnRGaWJlck93bmVyTmFtZSIsIndhcm5pbmdLZXkiLCJfZGVidWdJRCIsImRlYnVnU291cmNlIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmcyIsImdldEN1cnJlbnRGaWJlclN0YWNrQWRkZW5kdW0iLCJkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uYWxDb21wb25lbnQiLCJ1cGRhdGVDYWxsQ29tcG9uZW50IiwidXBkYXRlUG9ydGFsQ29tcG9uZW50IiwicHJvcGFnYXRlQ29udGV4dENoYW5nZSIsImNoYW5nZWRCaXRzIiwiZmliZXIiLCJyZXR1cm4iLCJuZXh0RmliZXIiLCJDb250ZXh0Q29uc3VtZXIiLCJvYnNlcnZlZEJpdHMiLCJub2RlIiwiYWx0ZXJuYXRlIiwiTm9Xb3JrIiwiQ29udGV4dFByb3ZpZGVyIiwic2libGluZyIsInVwZGF0ZUNvbnRleHRQcm92aWRlciIsInByb3ZpZGVyVHlwZSIsIl9jb250ZXh0IiwibmV3UHJvcHMiLCJvbGRQcm9wcyIsIm5ld1ZhbHVlIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwib2xkVmFsdWUiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJuZXdDaGlsZHJlbiIsInVwZGF0ZUNvbnRleHRDb25zdW1lciIsIl9jdXJyZW50VmFsdWUiLCJfY2hhbmdlZEJpdHMiLCJ1bnN0YWJsZV9vYnNlcnZlZEJpdHMiLCJiYWlsb3V0T25Mb3dQcmlvcml0eSIsIkhvc3RSb290IiwiSG9zdFBvcnRhbCIsIm5leHRTdGF0ZSIsImJlZ2luV29yayIsIkluZGV0ZXJtaW5hdGVDb21wb25lbnQiLCJIb3N0Q29tcG9uZW50IiwiSG9zdFRleHQiLCJDYWxsSGFuZGxlclBoYXNlIiwiQ2FsbENvbXBvbmVudCIsIlJldHVybkNvbXBvbmVudCIsIkZvcndhcmRSZWYiLCJGcmFnbWVudCIsIk1vZGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs4UUFBQTs7Ozs7Ozs7O2tCQTJFZSxVQUNiQSxNQURhLEVBRWJDLFdBRmEsRUFHYkMsYUFIYSxFQUliQyxVQUphLEVBS2JDLGdCQUxhLEVBTWJDLFlBTmEsRUFPYkMseUJBUGEsRUFRYjtBQUFBLE1BQ09DLG9CQURQLEdBQzBEUCxNQUQxRCxDQUNPTyxvQkFEUDtBQUFBLE1BQzZCQyx5QkFEN0IsR0FDMERSLE1BRDFELENBQzZCUSx5QkFEN0I7QUFBQSxNQUdPQyxlQUhQLEdBRzZDUixXQUg3QyxDQUdPUSxlQUhQO0FBQUEsTUFHd0JDLGlCQUh4QixHQUc2Q1QsV0FIN0MsQ0FHd0JTLGlCQUh4QjtBQUFBLE1BS09DLFlBTFAsR0FLdUJSLFVBTHZCLENBS09RLFlBTFA7QUFBQSxNQVFFQyxnQkFSRixHQWNJVixhQWRKLENBUUVVLGdCQVJGO0FBQUEsTUFTRUMsa0JBVEYsR0FjSVgsYUFkSixDQVNFVyxrQkFURjtBQUFBLE1BVXFCQyx1QkFWckIsR0FjSVosYUFkSixDQVVFYSxpQkFWRjtBQUFBLE1BV3VCQyx5QkFYdkIsR0FjSWQsYUFkSixDQVdFZSxtQkFYRjtBQUFBLE1BWUVDLHlCQVpGLEdBY0loQixhQWRKLENBWUVnQix5QkFaRjtBQUFBLE1BYUVDLHlCQWJGLEdBY0lqQixhQWRKLENBYUVpQix5QkFiRjtBQUFBLE1BaUJFQyxtQkFqQkYsR0FvQkloQixnQkFwQkosQ0FpQkVnQixtQkFqQkY7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b3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0hvc3RDb25maWd9IGZyb20gJ3JlYWN0LXJlY29uY2lsZXInO1xuaW1wb3J0IHR5cGUge1JlYWN0UHJvdmlkZXJUeXBlLCBSZWFjdENvbnRleHR9IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVzJztcbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAncmVhY3QtcmVjb25jaWxlci9zcmMvUmVhY3RGaWJlcic7XG5pbXBvcnQgdHlwZSB7SG9zdENvbnRleHR9IGZyb20gJy4vUmVhY3RGaWJlckhvc3RDb250ZXh0JztcbmltcG9ydCB0eXBlIHtMZWdhY3lDb250ZXh0fSBmcm9tICcuL1JlYWN0RmliZXJDb250ZXh0JztcbmltcG9ydCB0eXBlIHtOZXdDb250ZXh0fSBmcm9tICcuL1JlYWN0RmliZXJOZXdDb250ZXh0JztcbmltcG9ydCB0eXBlIHtIeWRyYXRpb25Db250ZXh0fSBmcm9tICcuL1JlYWN0RmliZXJIeWRyYXRpb25Db250ZXh0JztcbmltcG9ydCB0eXBlIHtGaWJlclJvb3R9IGZyb20gJy4vUmVhY3RGaWJlclJvb3QnO1xuaW1wb3J0IHR5cGUge0V4cGlyYXRpb25UaW1lfSBmcm9tICcuL1JlYWN0RmliZXJFeHBpcmF0aW9uVGltZSc7XG5cbmltcG9ydCB7XG4gIEluZGV0ZXJtaW5hdGVDb21wb25lbnQsXG4gIEZ1bmN0aW9uYWxDb21wb25lbnQsXG4gIENsYXNzQ29tcG9uZW50LFxuICBIb3N0Um9vdCxcbiAgSG9zdENvbXBvbmVudCxcbiAgSG9zdFRleHQsXG4gIEhvc3RQb3J0YWwsXG4gIENhbGxDb21wb25lbnQsXG4gIENhbGxIYW5kbGVyUGhhc2UsXG4gIFJldHVybkNvbXBvbmVudCxcbiAgRm9yd2FyZFJlZixcbiAgRnJhZ21lbnQsXG4gIE1vZGUsXG4gIENvbnRleHRQcm92aWRlcixcbiAgQ29udGV4dENvbnN1bWVyLFxufSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlT2ZXb3JrJztcbmltcG9ydCB7XG4gIFBlcmZvcm1lZFdvcmssXG4gIFBsYWNlbWVudCxcbiAgQ29udGVudFJlc2V0LFxuICBSZWYsXG59IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVPZlNpZGVFZmZlY3QnO1xuaW1wb3J0IHtSZWFjdEN1cnJlbnRPd25lcn0gZnJvbSAnc2hhcmVkL1JlYWN0R2xvYmFsU2hhcmVkU3RhdGUnO1xuaW1wb3J0IHtcbiAgZW5hYmxlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoLFxuICBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMsXG4gIGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUsXG59IGZyb20gJ3NoYXJlZC9SZWFjdEZlYXR1cmVGbGFncyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ZianMvbGliL2ludmFyaWFudCc7XG5pbXBvcnQgZ2V0Q29tcG9uZW50TmFtZSBmcm9tICdzaGFyZWQvZ2V0Q29tcG9uZW50TmFtZSc7XG5pbXBvcnQgd2FybmluZyBmcm9tICdmYmpzL2xpYi93YXJuaW5nJztcbmltcG9ydCBSZWFjdERlYnVnQ3VycmVudEZpYmVyIGZyb20gJy4vUmVhY3REZWJ1Z0N1cnJlbnRGaWJlcic7XG5pbXBvcnQge2NhbmNlbFdvcmtUaW1lcn0gZnJvbSAnLi9SZWFjdERlYnVnRmliZXJQZXJmJztcblxuaW1wb3J0IFJlYWN0RmliZXJDbGFzc0NvbXBvbmVudCBmcm9tICcuL1JlYWN0RmliZXJDbGFzc0NvbXBvbmVudCc7XG5pbXBvcnQge1xuICBtb3VudENoaWxkRmliZXJzLFxuICByZWNvbmNpbGVDaGlsZEZpYmVycyxcbiAgY2xvbmVDaGlsZEZpYmVycyxcbn0gZnJvbSAnLi9SZWFjdENoaWxkRmliZXInO1xuaW1wb3J0IHtwcm9jZXNzVXBkYXRlUXVldWV9IGZyb20gJy4vUmVhY3RGaWJlclVwZGF0ZVF1ZXVlJztcbmltcG9ydCB7Tm9Xb3JrLCBOZXZlcn0gZnJvbSAnLi9SZWFjdEZpYmVyRXhwaXJhdGlvblRpbWUnO1xuaW1wb3J0IHtBc3luY01vZGUsIFN0cmljdE1vZGV9IGZyb20gJy4vUmVhY3RUeXBlT2ZNb2RlJztcbmltcG9ydCBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgZnJvbSAnLi9tYXhTaWduZWQzMUJpdEludCc7XG5cbmxldCBkaWRXYXJuQWJvdXRCYWRDbGFzcztcbmxldCBkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uYWxDb21wb25lbnQ7XG5sZXQgZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmcztcblxuaWYgKF9fREVWX18pIHtcbiAgZGlkV2FybkFib3V0QmFkQ2xhc3MgPSB7fTtcbiAgZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbmFsQ29tcG9uZW50ID0ge307XG4gIGRpZFdhcm5BYm91dFN0YXRlbGVzc1JlZnMgPSB7fTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb248VCwgUCwgSSwgVEksIEhJLCBQSSwgQywgQ0MsIENYLCBQTD4oXG4gIGNvbmZpZzogSG9zdENvbmZpZzxULCBQLCBJLCBUSSwgSEksIFBJLCBDLCBDQywgQ1gsIFBMPixcbiAgaG9zdENvbnRleHQ6IEhvc3RDb250ZXh0PEMsIENYPixcbiAgbGVnYWN5Q29udGV4dDogTGVnYWN5Q29udGV4dCxcbiAgbmV3Q29udGV4dDogTmV3Q29udGV4dCxcbiAgaHlkcmF0aW9uQ29udGV4dDogSHlkcmF0aW9uQ29udGV4dDxDLCBDWD4sXG4gIHNjaGVkdWxlV29yazogKGZpYmVyOiBGaWJlciwgZXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lKSA9PiB2b2lkLFxuICBjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOiAoZmliZXI6IEZpYmVyKSA9PiBFeHBpcmF0aW9uVGltZSxcbikge1xuICBjb25zdCB7c2hvdWxkU2V0VGV4dENvbnRlbnQsIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWV9ID0gY29uZmlnO1xuXG4gIGNvbnN0IHtwdXNoSG9zdENvbnRleHQsIHB1c2hIb3N0Q29udGFpbmVyfSA9IGhvc3RDb250ZXh0O1xuXG4gIGNvbnN0IHtwdXNoUHJvdmlkZXJ9ID0gbmV3Q29udGV4dDtcblxuICBjb25zdCB7XG4gICAgZ2V0TWFza2VkQ29udGV4dCxcbiAgICBnZXRVbm1hc2tlZENvbnRleHQsXG4gICAgaGFzQ29udGV4dENoYW5nZWQ6IGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkLFxuICAgIHB1c2hDb250ZXh0UHJvdmlkZXI6IHB1c2hMZWdhY3lDb250ZXh0UHJvdmlkZXIsXG4gICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdCxcbiAgICBpbnZhbGlkYXRlQ29udGV4dFByb3ZpZGVyLFxuICB9ID0gbGVnYWN5Q29udGV4dDtcblxuICBjb25zdCB7XG4gICAgZW50ZXJIeWRyYXRpb25TdGF0ZSxcbiAgICByZXNldEh5ZHJhdGlvblN0YXRlLFxuICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlLFxuICB9ID0gaHlkcmF0aW9uQ29udGV4dDtcblxuICBjb25zdCB7XG4gICAgYWRvcHRDbGFzc0luc3RhbmNlLFxuICAgIGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsXG4gICAgY29uc3RydWN0Q2xhc3NJbnN0YW5jZSxcbiAgICBtb3VudENsYXNzSW5zdGFuY2UsXG4gICAgcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLFxuICAgIHVwZGF0ZUNsYXNzSW5zdGFuY2UsXG4gIH0gPSBSZWFjdEZpYmVyQ2xhc3NDb21wb25lbnQoXG4gICAgbGVnYWN5Q29udGV4dCxcbiAgICBzY2hlZHVsZVdvcmssXG4gICAgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixcbiAgICBtZW1vaXplUHJvcHMsXG4gICAgbWVtb2l6ZVN0YXRlLFxuICApO1xuXG4gIC8vIFRPRE86IFJlbW92ZSB0aGlzIGFuZCB1c2UgcmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lIGRpcmVjdGx5LlxuICBmdW5jdGlvbiByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKSB7XG4gICAgcmVjb25jaWxlQ2hpbGRyZW5BdEV4cGlyYXRpb25UaW1lKFxuICAgICAgY3VycmVudCxcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgd29ya0luUHJvZ3Jlc3MuZXhwaXJhdGlvblRpbWUsXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlY29uY2lsZUNoaWxkcmVuQXRFeHBpcmF0aW9uVGltZShcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIG5leHRDaGlsZHJlbixcbiAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIElmIHRoaXMgaXMgYSBmcmVzaCBuZXcgY29tcG9uZW50IHRoYXQgaGFzbid0IGJlZW4gcmVuZGVyZWQgeWV0LCB3ZVxuICAgICAgLy8gd29uJ3QgdXBkYXRlIGl0cyBjaGlsZCBzZXQgYnkgYXBwbHlpbmcgbWluaW1hbCBzaWRlLWVmZmVjdHMuIEluc3RlYWQsXG4gICAgICAvLyB3ZSB3aWxsIGFkZCB0aGVtIGFsbCB0byB0aGUgY2hpbGQgYmVmb3JlIGl0IGdldHMgcmVuZGVyZWQuIFRoYXQgbWVhbnNcbiAgICAgIC8vIHdlIGNhbiBvcHRpbWl6ZSB0aGlzIHJlY29uY2lsaWF0aW9uIHBhc3MgYnkgbm90IHRyYWNraW5nIHNpZGUtZWZmZWN0cy5cbiAgICAgIHdvcmtJblByb2dyZXNzLmNoaWxkID0gbW91bnRDaGlsZEZpYmVycyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBJZiB0aGUgY3VycmVudCBjaGlsZCBpcyB0aGUgc2FtZSBhcyB0aGUgd29yayBpbiBwcm9ncmVzcywgaXQgbWVhbnMgdGhhdFxuICAgICAgLy8gd2UgaGF2ZW4ndCB5ZXQgc3RhcnRlZCBhbnkgd29yayBvbiB0aGVzZSBjaGlsZHJlbi4gVGhlcmVmb3JlLCB3ZSB1c2VcbiAgICAgIC8vIHRoZSBjbG9uZSBhbGdvcml0aG0gdG8gY3JlYXRlIGEgY29weSBvZiBhbGwgdGhlIGN1cnJlbnQgY2hpbGRyZW4uXG5cbiAgICAgIC8vIElmIHdlIGhhZCBhbnkgcHJvZ3Jlc3NlZCB3b3JrIGFscmVhZHksIHRoYXQgaXMgaW52YWxpZCBhdCB0aGlzIHBvaW50IHNvXG4gICAgICAvLyBsZXQncyB0aHJvdyBpdCBvdXQuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgY3VycmVudC5jaGlsZCxcbiAgICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRm9yd2FyZFJlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGNvbnN0IHJlbmRlciA9IHdvcmtJblByb2dyZXNzLnR5cGUucmVuZGVyO1xuICAgIGNvbnN0IG5leHRDaGlsZHJlbiA9IHJlbmRlcihcbiAgICAgIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyxcbiAgICAgIHdvcmtJblByb2dyZXNzLnJlZixcbiAgICApO1xuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVGcmFnbWVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGNvbnN0IG5leHRDaGlsZHJlbiA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICBpZiAoaGFzTGVnYWN5Q29udGV4dENoYW5nZWQoKSkge1xuICAgICAgLy8gTm9ybWFsbHkgd2UgY2FuIGJhaWwgb3V0IG9uIHByb3BzIGVxdWFsaXR5IGJ1dCBpZiBjb250ZXh0IGhhcyBjaGFuZ2VkXG4gICAgICAvLyB3ZSBkb24ndCBkbyB0aGUgYmFpbG91dCBhbmQgd2UgaGF2ZSB0byByZXVzZSBleGlzdGluZyBwcm9wcyBpbnN0ZWFkLlxuICAgIH0gZWxzZSBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dENoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVNb2RlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgY29uc3QgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzLmNoaWxkcmVuO1xuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIG5leHRDaGlsZHJlbiA9PT0gbnVsbCB8fFxuICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dENoaWxkcmVuXG4gICAgKSB7XG4gICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3MuY2hpbGQ7XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrUmVmKGN1cnJlbnQ6IEZpYmVyIHwgbnVsbCwgd29ya0luUHJvZ3Jlc3M6IEZpYmVyKSB7XG4gICAgY29uc3QgcmVmID0gd29ya0luUHJvZ3Jlc3MucmVmO1xuICAgIGlmIChcbiAgICAgIChjdXJyZW50ID09PSBudWxsICYmIHJlZiAhPT0gbnVsbCkgfHxcbiAgICAgIChjdXJyZW50ICE9PSBudWxsICYmIGN1cnJlbnQucmVmICE9PSByZWYpXG4gICAgKSB7XG4gICAgICAvLyBTY2hlZHVsZSBhIFJlZiBlZmZlY3RcbiAgICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBSZWY7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcykge1xuICAgIGNvbnN0IGZuID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICBjb25zdCBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG5cbiAgICBpZiAoaGFzTGVnYWN5Q29udGV4dENoYW5nZWQoKSkge1xuICAgICAgLy8gTm9ybWFsbHkgd2UgY2FuIGJhaWwgb3V0IG9uIHByb3BzIGVxdWFsaXR5IGJ1dCBpZiBjb250ZXh0IGhhcyBjaGFuZ2VkXG4gICAgICAvLyB3ZSBkb24ndCBkbyB0aGUgYmFpbG91dCBhbmQgd2UgaGF2ZSB0byByZXVzZSBleGlzdGluZyBwcm9wcyBpbnN0ZWFkLlxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAod29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcyA9PT0gbmV4dFByb3BzKSB7XG4gICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIC8vIFRPRE86IGNvbnNpZGVyIGJyaW5naW5nIGZuLnNob3VsZENvbXBvbmVudFVwZGF0ZSgpIGJhY2suXG4gICAgICAvLyBJdCB1c2VkIHRvIGJlIGhlcmUuXG4gICAgfVxuXG4gICAgY29uc3QgdW5tYXNrZWRDb250ZXh0ID0gZ2V0VW5tYXNrZWRDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0TWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcywgdW5tYXNrZWRDb250ZXh0KTtcblxuICAgIGxldCBuZXh0Q2hpbGRyZW47XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgUmVhY3RDdXJyZW50T3duZXIuY3VycmVudCA9IHdvcmtJblByb2dyZXNzO1xuICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5zZXRDdXJyZW50UGhhc2UoJ3JlbmRlcicpO1xuICAgICAgbmV4dENoaWxkcmVuID0gZm4obmV4dFByb3BzLCBjb250ZXh0KTtcbiAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXh0Q2hpbGRyZW4gPSBmbihuZXh0UHJvcHMsIGNvbnRleHQpO1xuICAgIH1cbiAgICAvLyBSZWFjdCBEZXZUb29scyByZWFkcyB0aGlzIGZsYWcuXG4gICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBlcmZvcm1lZFdvcms7XG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUNsYXNzQ29tcG9uZW50KFxuICAgIGN1cnJlbnQ6IEZpYmVyIHwgbnVsbCxcbiAgICB3b3JrSW5Qcm9ncmVzczogRmliZXIsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICApIHtcbiAgICAvLyBQdXNoIGNvbnRleHQgcHJvdmlkZXJzIGVhcmx5IHRvIHByZXZlbnQgY29udGV4dCBzdGFjayBtaXNtYXRjaGVzLlxuICAgIC8vIER1cmluZyBtb3VudGluZyB3ZSBkb24ndCBrbm93IHRoZSBjaGlsZCBjb250ZXh0IHlldCBhcyB0aGUgaW5zdGFuY2UgZG9lc24ndCBleGlzdC5cbiAgICAvLyBXZSB3aWxsIGludmFsaWRhdGUgdGhlIGNoaWxkIGNvbnRleHQgaW4gZmluaXNoQ2xhc3NDb21wb25lbnQoKSByaWdodCBhZnRlciByZW5kZXJpbmcuXG4gICAgY29uc3QgaGFzQ29udGV4dCA9IHB1c2hMZWdhY3lDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgIGxldCBzaG91bGRVcGRhdGU7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIGlmICh3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPT09IG51bGwpIHtcbiAgICAgICAgLy8gSW4gdGhlIGluaXRpYWwgcGFzcyB3ZSBtaWdodCBuZWVkIHRvIGNvbnN0cnVjdCB0aGUgaW5zdGFuY2UuXG4gICAgICAgIGNvbnN0cnVjdENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcyk7XG4gICAgICAgIG1vdW50Q2xhc3NJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuXG4gICAgICAgIHNob3VsZFVwZGF0ZSA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBJbiBhIHJlc3VtZSwgd2UnbGwgYWxyZWFkeSBoYXZlIGFuIGluc3RhbmNlIHdlIGNhbiByZXVzZS5cbiAgICAgICAgc2hvdWxkVXBkYXRlID0gcmVzdW1lTW91bnRDbGFzc0luc3RhbmNlKFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRVcGRhdGUgPSB1cGRhdGVDbGFzc0luc3RhbmNlKFxuICAgICAgICBjdXJyZW50LFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFdlIHByb2Nlc3NlZCB0aGUgdXBkYXRlIHF1ZXVlIGluc2lkZSB1cGRhdGVDbGFzc0luc3RhbmNlLiBJdCBtYXkgaGF2ZVxuICAgIC8vIGluY2x1ZGVkIHNvbWUgZXJyb3JzIHRoYXQgd2VyZSBkaXNwYXRjaGVkIGR1cmluZyB0aGUgY29tbWl0IHBoYXNlLlxuICAgIC8vIFRPRE86IFJlZmFjdG9yIGNsYXNzIGNvbXBvbmVudHMgc28gdGhpcyBpcyBsZXNzIGF3a3dhcmQuXG4gICAgbGV0IGRpZENhcHR1cmVFcnJvciA9IGZhbHNlO1xuICAgIGNvbnN0IHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG4gICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICBzaG91bGRVcGRhdGUgPSB0cnVlO1xuICAgICAgZGlkQ2FwdHVyZUVycm9yID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbmlzaENsYXNzQ29tcG9uZW50KFxuICAgICAgY3VycmVudCxcbiAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgc2hvdWxkVXBkYXRlLFxuICAgICAgaGFzQ29udGV4dCxcbiAgICAgIGRpZENhcHR1cmVFcnJvcixcbiAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBmaW5pc2hDbGFzc0NvbXBvbmVudChcbiAgICBjdXJyZW50OiBGaWJlciB8IG51bGwsXG4gICAgd29ya0luUHJvZ3Jlc3M6IEZpYmVyLFxuICAgIHNob3VsZFVwZGF0ZTogYm9vbGVhbixcbiAgICBoYXNDb250ZXh0OiBib29sZWFuLFxuICAgIGRpZENhcHR1cmVFcnJvcjogYm9vbGVhbixcbiAgICByZW5kZXJFeHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICkge1xuICAgIC8vIFJlZnMgc2hvdWxkIHVwZGF0ZSBldmVuIGlmIHNob3VsZENvbXBvbmVudFVwZGF0ZSByZXR1cm5zIGZhbHNlXG4gICAgbWFya1JlZihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICBpZiAoIXNob3VsZFVwZGF0ZSAmJiAhZGlkQ2FwdHVyZUVycm9yKSB7XG4gICAgICAvLyBDb250ZXh0IHByb3ZpZGVycyBzaG91bGQgZGVmZXIgdG8gc0NVIGZvciByZW5kZXJpbmdcbiAgICAgIGlmIChoYXNDb250ZXh0KSB7XG4gICAgICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIGZhbHNlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cblxuICAgIGNvbnN0IGN0b3IgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIGNvbnN0IGluc3RhbmNlID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuXG4gICAgLy8gUmVyZW5kZXJcbiAgICBSZWFjdEN1cnJlbnRPd25lci5jdXJyZW50ID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgbGV0IG5leHRDaGlsZHJlbjtcbiAgICBpZiAoXG4gICAgICBkaWRDYXB0dXJlRXJyb3IgJiZcbiAgICAgICghZW5hYmxlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIHx8XG4gICAgICAgIHR5cGVvZiBjdG9yLmdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCAhPT0gJ2Z1bmN0aW9uJylcbiAgICApIHtcbiAgICAgIC8vIElmIHdlIGNhcHR1cmVkIGFuIGVycm9yLCBidXQgZ2V0RGVyaXZlZFN0YXRlRnJvbSBjYXRjaCBpcyBub3QgZGVmaW5lZCxcbiAgICAgIC8vIHVubW91bnQgYWxsIHRoZSBjaGlsZHJlbi4gY29tcG9uZW50RGlkQ2F0Y2ggd2lsbCBzY2hlZHVsZSBhbiB1cGRhdGUgdG9cbiAgICAgIC8vIHJlLXJlbmRlciBhIGZhbGxiYWNrLiBUaGlzIGlzIHRlbXBvcmFyeSB1bnRpbCB3ZSBtaWdyYXRlIGV2ZXJ5b25lIHRvXG4gICAgICAvLyB0aGUgbmV3IEFQSS5cbiAgICAgIC8vIFRPRE86IFdhcm4gaW4gYSBmdXR1cmUgcmVsZWFzZS5cbiAgICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKCdyZW5kZXInKTtcbiAgICAgICAgbmV4dENoaWxkcmVuID0gaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHMgfHxcbiAgICAgICAgICAoZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSAmJlxuICAgICAgICAgICAgd29ya0luUHJvZ3Jlc3MubW9kZSAmIFN0cmljdE1vZGUpXG4gICAgICAgICkge1xuICAgICAgICAgIGluc3RhbmNlLnJlbmRlcigpO1xuICAgICAgICB9XG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuc2V0Q3VycmVudFBoYXNlKG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0cyB8fFxuICAgICAgICAgIChkZWJ1Z1JlbmRlclBoYXNlU2lkZUVmZmVjdHNGb3JTdHJpY3RNb2RlICYmXG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgU3RyaWN0TW9kZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV4dENoaWxkcmVuID0gaW5zdGFuY2UucmVuZGVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQZXJmb3JtZWRXb3JrO1xuICAgIGlmIChkaWRDYXB0dXJlRXJyb3IpIHtcbiAgICAgIC8vIElmIHdlJ3JlIHJlY292ZXJpbmcgZnJvbSBhbiBlcnJvciwgcmVjb25jaWxlIHR3aWNlOiBmaXJzdCB0byBkZWxldGVcbiAgICAgIC8vIGFsbCB0aGUgZXhpc3RpbmcgY2hpbGRyZW4uXG4gICAgICByZWNvbmNpbGVDaGlsZHJlbkF0RXhwaXJhdGlvblRpbWUoXG4gICAgICAgIGN1cnJlbnQsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBudWxsLFxuICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG51bGw7XG4gICAgICAvLyBOb3cgd2UgY2FuIGNvbnRpbnVlIHJlY29uY2lsaW5nIGxpa2Ugbm9ybWFsLiBUaGlzIGhhcyB0aGUgZWZmZWN0IG9mXG4gICAgICAvLyByZW1vdW50aW5nIGFsbCBjaGlsZHJlbiByZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhlaXIgdGhlaXJcbiAgICAgIC8vIGlkZW50aXR5IG1hdGNoZXMuXG4gICAgfVxuICAgIHJlY29uY2lsZUNoaWxkcmVuQXRFeHBpcmF0aW9uVGltZShcbiAgICAgIGN1cnJlbnQsXG4gICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICk7XG4gICAgLy8gTWVtb2l6ZSBwcm9wcyBhbmQgc3RhdGUgdXNpbmcgdGhlIHZhbHVlcyB3ZSBqdXN0IHVzZWQgdG8gcmVuZGVyLlxuICAgIC8vIFRPRE86IFJlc3RydWN0dXJlIHNvIHdlIG5ldmVyIHJlYWQgdmFsdWVzIGZyb20gdGhlIGluc3RhbmNlLlxuICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2Uuc3RhdGUpO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgaW5zdGFuY2UucHJvcHMpO1xuXG4gICAgLy8gVGhlIGNvbnRleHQgbWlnaHQgaGF2ZSBjaGFuZ2VkIHNvIHdlIG5lZWQgdG8gcmVjYWxjdWxhdGUgaXQuXG4gICAgaWYgKGhhc0NvbnRleHQpIHtcbiAgICAgIGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MsIHRydWUpO1xuICAgIH1cblxuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2hIb3N0Um9vdENvbnRleHQod29ya0luUHJvZ3Jlc3MpIHtcbiAgICBjb25zdCByb290ID0gKHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZTogRmliZXJSb290KTtcbiAgICBpZiAocm9vdC5wZW5kaW5nQ29udGV4dCkge1xuICAgICAgcHVzaFRvcExldmVsQ29udGV4dE9iamVjdChcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHJvb3QucGVuZGluZ0NvbnRleHQsXG4gICAgICAgIHJvb3QucGVuZGluZ0NvbnRleHQgIT09IHJvb3QuY29udGV4dCxcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmIChyb290LmNvbnRleHQpIHtcbiAgICAgIC8vIFNob3VsZCBhbHdheXMgYmUgc2V0XG4gICAgICBwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0KHdvcmtJblByb2dyZXNzLCByb290LmNvbnRleHQsIGZhbHNlKTtcbiAgICB9XG4gICAgcHVzaEhvc3RDb250YWluZXIod29ya0luUHJvZ3Jlc3MsIHJvb3QuY29udGFpbmVySW5mbyk7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVIb3N0Um9vdChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpIHtcbiAgICBwdXNoSG9zdFJvb3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcbiAgICBsZXQgdXBkYXRlUXVldWUgPSB3b3JrSW5Qcm9ncmVzcy51cGRhdGVRdWV1ZTtcbiAgICBpZiAodXBkYXRlUXVldWUgIT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHByZXZTdGF0ZSA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGU7XG4gICAgICBjb25zdCBzdGF0ZSA9IHByb2Nlc3NVcGRhdGVRdWV1ZShcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHVwZGF0ZVF1ZXVlLFxuICAgICAgICBudWxsLFxuICAgICAgICBudWxsLFxuICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgICBtZW1vaXplU3RhdGUod29ya0luUHJvZ3Jlc3MsIHN0YXRlKTtcbiAgICAgIHVwZGF0ZVF1ZXVlID0gd29ya0luUHJvZ3Jlc3MudXBkYXRlUXVldWU7XG5cbiAgICAgIGxldCBlbGVtZW50O1xuICAgICAgaWYgKHVwZGF0ZVF1ZXVlICE9PSBudWxsICYmIHVwZGF0ZVF1ZXVlLmNhcHR1cmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgIC8vIFRoZXJlJ3MgYW4gdW5jYXVnaHQgZXJyb3IuIFVubW91bnQgdGhlIHdob2xlIHJvb3QuXG4gICAgICAgIGVsZW1lbnQgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmIChwcmV2U3RhdGUgPT09IHN0YXRlKSB7XG4gICAgICAgIC8vIElmIHRoZSBzdGF0ZSBpcyB0aGUgc2FtZSBhcyBiZWZvcmUsIHRoYXQncyBhIGJhaWxvdXQgYmVjYXVzZSB3ZSBoYWRcbiAgICAgICAgLy8gbm8gd29yayB0aGF0IGV4cGlyZXMgYXQgdGhpcyB0aW1lLlxuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsZW1lbnQgPSBzdGF0ZS5lbGVtZW50O1xuICAgICAgfVxuICAgICAgY29uc3Qgcm9vdDogRmliZXJSb290ID0gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICAgICAgaWYgKFxuICAgICAgICAoY3VycmVudCA9PT0gbnVsbCB8fCBjdXJyZW50LmNoaWxkID09PSBudWxsKSAmJlxuICAgICAgICByb290Lmh5ZHJhdGUgJiZcbiAgICAgICAgZW50ZXJIeWRyYXRpb25TdGF0ZSh3b3JrSW5Qcm9ncmVzcylcbiAgICAgICkge1xuICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGFueSBjdXJyZW50IGNoaWxkcmVuIHRoaXMgbWlnaHQgYmUgdGhlIGZpcnN0IHBhc3MuXG4gICAgICAgIC8vIFdlIGFsd2F5cyB0cnkgdG8gaHlkcmF0ZS4gSWYgdGhpcyBpc24ndCBhIGh5ZHJhdGlvbiBwYXNzIHRoZXJlIHdvbid0XG4gICAgICAgIC8vIGJlIGFueSBjaGlsZHJlbiB0byBoeWRyYXRlIHdoaWNoIGlzIGVmZmVjdGl2ZWx5IHRoZSBzYW1lIHRoaW5nIGFzXG4gICAgICAgIC8vIG5vdCBoeWRyYXRpbmcuXG5cbiAgICAgICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIHRyYWNrIHRoZSBob3N0IHJvb3QgYXMgYSBwbGFjZW1lbnQgdG9cbiAgICAgICAgLy8ga25vdyB0aGF0IHdlJ3JlIGN1cnJlbnRseSBpbiBhIG1vdW50aW5nIHN0YXRlLiBUaGF0IHdheSBpc01vdW50ZWRcbiAgICAgICAgLy8gd29ya3MgYXMgZXhwZWN0ZWQuIFdlIG11c3QgcmVzZXQgdGhpcyBiZWZvcmUgY29tbWl0dGluZy5cbiAgICAgICAgLy8gVE9ETzogRGVsZXRlIHRoaXMgd2hlbiB3ZSBkZWxldGUgaXNNb3VudGVkIGFuZCBmaW5kRE9NTm9kZS5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZWZmZWN0VGFnIHw9IFBsYWNlbWVudDtcblxuICAgICAgICAvLyBFbnN1cmUgdGhhdCBjaGlsZHJlbiBtb3VudCBpbnRvIHRoaXMgcm9vdCB3aXRob3V0IHRyYWNraW5nXG4gICAgICAgIC8vIHNpZGUtZWZmZWN0cy4gVGhpcyBlbnN1cmVzIHRoYXQgd2UgZG9uJ3Qgc3RvcmUgUGxhY2VtZW50IGVmZmVjdHMgb25cbiAgICAgICAgLy8gbm9kZXMgdGhhdCB3aWxsIGJlIGh5ZHJhdGVkLlxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5jaGlsZCA9IG1vdW50Q2hpbGRGaWJlcnMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gT3RoZXJ3aXNlIHJlc2V0IGh5ZHJhdGlvbiBzdGF0ZSBpbiBjYXNlIHdlIGFib3J0ZWQgYW5kIHJlc3VtZWQgYW5vdGhlclxuICAgICAgICAvLyByb290LlxuICAgICAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBlbGVtZW50KTtcbiAgICAgIH1cbiAgICAgIG1lbW9pemVTdGF0ZSh3b3JrSW5Qcm9ncmVzcywgc3RhdGUpO1xuICAgICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICAgIH1cbiAgICByZXNldEh5ZHJhdGlvblN0YXRlKCk7XG4gICAgLy8gSWYgdGhlcmUgaXMgbm8gdXBkYXRlIHF1ZXVlLCB0aGF0J3MgYSBiYWlsb3V0IGJlY2F1c2UgdGhlIHJvb3QgaGFzIG5vIHByb3BzLlxuICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUhvc3RDb21wb25lbnQoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKSB7XG4gICAgcHVzaEhvc3RDb250ZXh0KHdvcmtJblByb2dyZXNzKTtcblxuICAgIGlmIChjdXJyZW50ID09PSBudWxsKSB7XG4gICAgICB0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZSh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgY29uc3QgdHlwZSA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgY29uc3QgbWVtb2l6ZWRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG4gICAgY29uc3QgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIGNvbnN0IHByZXZQcm9wcyA9IGN1cnJlbnQgIT09IG51bGwgPyBjdXJyZW50Lm1lbW9pemVkUHJvcHMgOiBudWxsO1xuXG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKG1lbW9pemVkUHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgY29uc3QgaXNIaWRkZW4gPVxuICAgICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQXN5bmNNb2RlICYmXG4gICAgICAgIHNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUodHlwZSwgbmV4dFByb3BzKTtcbiAgICAgIGlmIChpc0hpZGRlbikge1xuICAgICAgICAvLyBCZWZvcmUgYmFpbGluZyBvdXQsIG1ha2Ugc3VyZSB3ZSd2ZSBkZXByaW9yaXRpemVkIGEgaGlkZGVuIGNvbXBvbmVudC5cbiAgICAgICAgd29ya0luUHJvZ3Jlc3MuZXhwaXJhdGlvblRpbWUgPSBOZXZlcjtcbiAgICAgIH1cbiAgICAgIGlmICghaXNIaWRkZW4gfHwgcmVuZGVyRXhwaXJhdGlvblRpbWUgIT09IE5ldmVyKSB7XG4gICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHdlJ3JlIHJlbmRlcmluZyBhIGhpZGRlbiBub2RlIGF0IGhpZGRlbiBwcmlvcml0eSwgZG9uJ3QgYmFpbG91dC4gVGhlXG4gICAgICAvLyBwYXJlbnQgaXMgY29tcGxldGUsIGJ1dCB0aGUgY2hpbGRyZW4gbWF5IG5vdCBiZS5cbiAgICB9XG5cbiAgICBsZXQgbmV4dENoaWxkcmVuID0gbmV4dFByb3BzLmNoaWxkcmVuO1xuICAgIGNvbnN0IGlzRGlyZWN0VGV4dENoaWxkID0gc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgbmV4dFByb3BzKTtcblxuICAgIGlmIChpc0RpcmVjdFRleHRDaGlsZCkge1xuICAgICAgLy8gV2Ugc3BlY2lhbCBjYXNlIGEgZGlyZWN0IHRleHQgY2hpbGQgb2YgYSBob3N0IG5vZGUuIFRoaXMgaXMgYSBjb21tb25cbiAgICAgIC8vIGNhc2UuIFdlIHdvbid0IGhhbmRsZSBpdCBhcyBhIHJlaWZpZWQgY2hpbGQuIFdlIHdpbGwgaW5zdGVhZCBoYW5kbGVcbiAgICAgIC8vIHRoaXMgaW4gdGhlIGhvc3QgZW52aXJvbm1lbnQgdGhhdCBhbHNvIGhhdmUgYWNjZXNzIHRvIHRoaXMgcHJvcC4gVGhhdFxuICAgICAgLy8gYXZvaWRzIGFsbG9jYXRpbmcgYW5vdGhlciBIb3N0VGV4dCBmaWJlciBhbmQgdHJhdmVyc2luZyBpdC5cbiAgICAgIG5leHRDaGlsZHJlbiA9IG51bGw7XG4gICAgfSBlbHNlIGlmIChwcmV2UHJvcHMgJiYgc2hvdWxkU2V0VGV4dENvbnRlbnQodHlwZSwgcHJldlByb3BzKSkge1xuICAgICAgLy8gSWYgd2UncmUgc3dpdGNoaW5nIGZyb20gYSBkaXJlY3QgdGV4dCBjaGlsZCB0byBhIG5vcm1hbCBjaGlsZCwgb3IgdG9cbiAgICAgIC8vIGVtcHR5LCB3ZSBuZWVkIHRvIHNjaGVkdWxlIHRoZSB0ZXh0IGNvbnRlbnQgdG8gYmUgcmVzZXQuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5lZmZlY3RUYWcgfD0gQ29udGVudFJlc2V0O1xuICAgIH1cblxuICAgIG1hcmtSZWYoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuXG4gICAgLy8gQ2hlY2sgdGhlIGhvc3QgY29uZmlnIHRvIHNlZSBpZiB0aGUgY2hpbGRyZW4gYXJlIG9mZnNjcmVlbi9oaWRkZW4uXG4gICAgaWYgKFxuICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUgIT09IE5ldmVyICYmXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tb2RlICYgQXN5bmNNb2RlICYmXG4gICAgICBzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlKHR5cGUsIG5leHRQcm9wcylcbiAgICApIHtcbiAgICAgIC8vIERvd24tcHJpb3JpdGl6ZSB0aGUgY2hpbGRyZW4uXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5leHBpcmF0aW9uVGltZSA9IE5ldmVyO1xuICAgICAgLy8gQmFpbG91dCBhbmQgY29tZSBiYWNrIHRvIHRoaXMgZmliZXIgbGF0ZXIuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV4dFByb3BzO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmVjb25jaWxlQ2hpbGRyZW4oY3VycmVudCwgd29ya0luUHJvZ3Jlc3MsIG5leHRDaGlsZHJlbik7XG4gICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0UHJvcHMpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgaWYgKGN1cnJlbnQgPT09IG51bGwpIHtcbiAgICAgIHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlKHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKTtcbiAgICAvLyBOb3RoaW5nIHRvIGRvIGhlcmUuIFRoaXMgaXMgdGVybWluYWwuIFdlJ2xsIGRvIHRoZSBjb21wbGV0aW9uIHN0ZXBcbiAgICAvLyBpbW1lZGlhdGVseSBhZnRlci5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChcbiAgICBjdXJyZW50LFxuICAgIHdvcmtJblByb2dyZXNzLFxuICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICApIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBjdXJyZW50ID09PSBudWxsLFxuICAgICAgJ0FuIGluZGV0ZXJtaW5hdGUgY29tcG9uZW50IHNob3VsZCBuZXZlciBoYXZlIG1vdW50ZWQuIFRoaXMgZXJyb3IgaXMgJyArXG4gICAgICAgICdsaWtlbHkgY2F1c2VkIGJ5IGEgYnVnIGluIFJlYWN0LiBQbGVhc2UgZmlsZSBhbiBpc3N1ZS4nLFxuICAgICk7XG4gICAgY29uc3QgZm4gPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuICAgIGNvbnN0IHByb3BzID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIGNvbnN0IHVubWFza2VkQ29udGV4dCA9IGdldFVubWFza2VkQ29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgY29uc3QgY29udGV4dCA9IGdldE1hc2tlZENvbnRleHQod29ya0luUHJvZ3Jlc3MsIHVubWFza2VkQ29udGV4dCk7XG5cbiAgICBsZXQgdmFsdWU7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaWYgKGZuLnByb3RvdHlwZSAmJiB0eXBlb2YgZm4ucHJvdG90eXBlLnJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBjb25zdCBjb21wb25lbnROYW1lID0gZ2V0Q29tcG9uZW50TmFtZSh3b3JrSW5Qcm9ncmVzcykgfHwgJ1Vua25vd24nO1xuXG4gICAgICAgIGlmICghZGlkV2FybkFib3V0QmFkQ2xhc3NbY29tcG9uZW50TmFtZV0pIHtcbiAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICBcIlRoZSA8JXMgLz4gY29tcG9uZW50IGFwcGVhcnMgdG8gaGF2ZSBhIHJlbmRlciBtZXRob2QsIGJ1dCBkb2Vzbid0IGV4dGVuZCBSZWFjdC5Db21wb25lbnQuIFwiICtcbiAgICAgICAgICAgICAgJ1RoaXMgaXMgbGlrZWx5IHRvIGNhdXNlIGVycm9ycy4gQ2hhbmdlICVzIHRvIGV4dGVuZCBSZWFjdC5Db21wb25lbnQgaW5zdGVhZC4nLFxuICAgICAgICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBkaWRXYXJuQWJvdXRCYWRDbGFzc1tjb21wb25lbnROYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFJlYWN0Q3VycmVudE93bmVyLmN1cnJlbnQgPSB3b3JrSW5Qcm9ncmVzcztcbiAgICAgIHZhbHVlID0gZm4ocHJvcHMsIGNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YWx1ZSA9IGZuKHByb3BzLCBjb250ZXh0KTtcbiAgICB9XG4gICAgLy8gUmVhY3QgRGV2VG9vbHMgcmVhZHMgdGhpcyBmbGFnLlxuICAgIHdvcmtJblByb2dyZXNzLmVmZmVjdFRhZyB8PSBQZXJmb3JtZWRXb3JrO1xuXG4gICAgaWYgKFxuICAgICAgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJlxuICAgICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICAgIHR5cGVvZiB2YWx1ZS5yZW5kZXIgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHZhbHVlLiQkdHlwZW9mID09PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIGNvbnN0IENvbXBvbmVudCA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG5cbiAgICAgIC8vIFByb2NlZWQgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGlzIGlzIGEgY2xhc3MgaW5zdGFuY2VcbiAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IENsYXNzQ29tcG9uZW50O1xuXG4gICAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFN0YXRlID1cbiAgICAgICAgdmFsdWUuc3RhdGUgIT09IG51bGwgJiYgdmFsdWUuc3RhdGUgIT09IHVuZGVmaW5lZCA/IHZhbHVlLnN0YXRlIDogbnVsbDtcblxuICAgICAgaWYgKHR5cGVvZiBDb21wb25lbnQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHBhcnRpYWxTdGF0ZSA9IGNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgcHJvcHMsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSxcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAocGFydGlhbFN0YXRlICE9PSBudWxsICYmIHBhcnRpYWxTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRTdGF0ZSA9IE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICB7fSxcbiAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUsXG4gICAgICAgICAgICBwYXJ0aWFsU3RhdGUsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBQdXNoIGNvbnRleHQgcHJvdmlkZXJzIGVhcmx5IHRvIHByZXZlbnQgY29udGV4dCBzdGFjayBtaXNtYXRjaGVzLlxuICAgICAgLy8gRHVyaW5nIG1vdW50aW5nIHdlIGRvbid0IGtub3cgdGhlIGNoaWxkIGNvbnRleHQgeWV0IGFzIHRoZSBpbnN0YW5jZSBkb2Vzbid0IGV4aXN0LlxuICAgICAgLy8gV2Ugd2lsbCBpbnZhbGlkYXRlIHRoZSBjaGlsZCBjb250ZXh0IGluIGZpbmlzaENsYXNzQ29tcG9uZW50KCkgcmlnaHQgYWZ0ZXIgcmVuZGVyaW5nLlxuICAgICAgY29uc3QgaGFzQ29udGV4dCA9IHB1c2hMZWdhY3lDb250ZXh0UHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgYWRvcHRDbGFzc0luc3RhbmNlKHdvcmtJblByb2dyZXNzLCB2YWx1ZSk7XG4gICAgICBtb3VudENsYXNzSW5zdGFuY2Uod29ya0luUHJvZ3Jlc3MsIHJlbmRlckV4cGlyYXRpb25UaW1lKTtcbiAgICAgIHJldHVybiBmaW5pc2hDbGFzc0NvbXBvbmVudChcbiAgICAgICAgY3VycmVudCxcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHRydWUsXG4gICAgICAgIGhhc0NvbnRleHQsXG4gICAgICAgIGZhbHNlLFxuICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFByb2NlZWQgdW5kZXIgdGhlIGFzc3VtcHRpb24gdGhhdCB0aGlzIGlzIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IEZ1bmN0aW9uYWxDb21wb25lbnQ7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBjb25zdCBDb21wb25lbnQgPSB3b3JrSW5Qcm9ncmVzcy50eXBlO1xuXG4gICAgICAgIGlmIChDb21wb25lbnQpIHtcbiAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgIUNvbXBvbmVudC5jaGlsZENvbnRleHRUeXBlcyxcbiAgICAgICAgICAgICclcyguLi4pOiBjaGlsZENvbnRleHRUeXBlcyBjYW5ub3QgYmUgZGVmaW5lZCBvbiBhIGZ1bmN0aW9uYWwgY29tcG9uZW50LicsXG4gICAgICAgICAgICBDb21wb25lbnQuZGlzcGxheU5hbWUgfHwgQ29tcG9uZW50Lm5hbWUgfHwgJ0NvbXBvbmVudCcsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod29ya0luUHJvZ3Jlc3MucmVmICE9PSBudWxsKSB7XG4gICAgICAgICAgbGV0IGluZm8gPSAnJztcbiAgICAgICAgICBjb25zdCBvd25lck5hbWUgPSBSZWFjdERlYnVnQ3VycmVudEZpYmVyLmdldEN1cnJlbnRGaWJlck93bmVyTmFtZSgpO1xuICAgICAgICAgIGlmIChvd25lck5hbWUpIHtcbiAgICAgICAgICAgIGluZm8gKz0gJ1xcblxcbkNoZWNrIHRoZSByZW5kZXIgbWV0aG9kIG9mIGAnICsgb3duZXJOYW1lICsgJ2AuJztcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBsZXQgd2FybmluZ0tleSA9IG93bmVyTmFtZSB8fCB3b3JrSW5Qcm9ncmVzcy5fZGVidWdJRCB8fCAnJztcbiAgICAgICAgICBjb25zdCBkZWJ1Z1NvdXJjZSA9IHdvcmtJblByb2dyZXNzLl9kZWJ1Z1NvdXJjZTtcbiAgICAgICAgICBpZiAoZGVidWdTb3VyY2UpIHtcbiAgICAgICAgICAgIHdhcm5pbmdLZXkgPSBkZWJ1Z1NvdXJjZS5maWxlTmFtZSArICc6JyArIGRlYnVnU291cmNlLmxpbmVOdW1iZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmc1t3YXJuaW5nS2V5XSkge1xuICAgICAgICAgICAgZGlkV2FybkFib3V0U3RhdGVsZXNzUmVmc1t3YXJuaW5nS2V5XSA9IHRydWU7XG4gICAgICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgICAgJ1N0YXRlbGVzcyBmdW5jdGlvbiBjb21wb25lbnRzIGNhbm5vdCBiZSBnaXZlbiByZWZzLiAnICtcbiAgICAgICAgICAgICAgICAnQXR0ZW1wdHMgdG8gYWNjZXNzIHRoaXMgcmVmIHdpbGwgZmFpbC4lcyVzJyxcbiAgICAgICAgICAgICAgaW5mbyxcbiAgICAgICAgICAgICAgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlci5nZXRDdXJyZW50RmliZXJTdGFja0FkZGVuZHVtKCksXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgZm4uZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgY29uc3QgY29tcG9uZW50TmFtZSA9IGdldENvbXBvbmVudE5hbWUod29ya0luUHJvZ3Jlc3MpIHx8ICdVbmtub3duJztcblxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICFkaWRXYXJuQWJvdXRHZXREZXJpdmVkU3RhdGVPbkZ1bmN0aW9uYWxDb21wb25lbnRbY29tcG9uZW50TmFtZV1cbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAnJXM6IFN0YXRlbGVzcyBmdW5jdGlvbmFsIGNvbXBvbmVudHMgZG8gbm90IHN1cHBvcnQgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLicsXG4gICAgICAgICAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZGlkV2FybkFib3V0R2V0RGVyaXZlZFN0YXRlT25GdW5jdGlvbmFsQ29tcG9uZW50W1xuICAgICAgICAgICAgICBjb21wb25lbnROYW1lXG4gICAgICAgICAgICBdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCB2YWx1ZSk7XG4gICAgICBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3MsIHByb3BzKTtcbiAgICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDYWxsQ29tcG9uZW50KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCByZW5kZXJFeHBpcmF0aW9uVGltZSkge1xuICAgIGxldCBuZXh0UHJvcHMgPSB3b3JrSW5Qcm9ncmVzcy5wZW5kaW5nUHJvcHM7XG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPT09IG5leHRQcm9wcykge1xuICAgICAgbmV4dFByb3BzID0gd29ya0luUHJvZ3Jlc3MubWVtb2l6ZWRQcm9wcztcbiAgICAgIC8vIFRPRE86IFdoZW4gYmFpbGluZyBvdXQsIHdlIG1pZ2h0IG5lZWQgdG8gcmV0dXJuIHRoZSBzdGF0ZU5vZGUgaW5zdGVhZFxuICAgICAgLy8gb2YgdGhlIGNoaWxkLiBUbyBjaGVjayBpdCBmb3Igd29yay5cbiAgICAgIC8vIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXh0Q2hpbGRyZW4gPSBuZXh0UHJvcHMuY2hpbGRyZW47XG5cbiAgICAvLyBUaGUgZm9sbG93aW5nIGlzIGEgZm9yayBvZiByZWNvbmNpbGVDaGlsZHJlbkF0RXhwaXJhdGlvblRpbWUgYnV0IHVzaW5nXG4gICAgLy8gc3RhdGVOb2RlIHRvIHN0b3JlIHRoZSBjaGlsZC5cbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gbW91bnRDaGlsZEZpYmVycyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSxcbiAgICAgICAgbmV4dENoaWxkcmVuLFxuICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IHJlY29uY2lsZUNoaWxkRmliZXJzKFxuICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgY3VycmVudC5zdGF0ZU5vZGUsXG4gICAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgIH1cblxuICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dFByb3BzKTtcbiAgICAvLyBUaGlzIGRvZXNuJ3QgdGFrZSBhcmJpdHJhcnkgdGltZSBzbyB3ZSBjb3VsZCBzeW5jaHJvbm91c2x5IGp1c3QgYmVnaW5cbiAgICAvLyBlYWdlcmx5IGRvIHRoZSB3b3JrIG9mIHdvcmtJblByb2dyZXNzLmNoaWxkIGFzIGFuIG9wdGltaXphdGlvbi5cbiAgICByZXR1cm4gd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlUG9ydGFsQ29tcG9uZW50KFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICkge1xuICAgIHB1c2hIb3N0Q29udGFpbmVyKHdvcmtJblByb2dyZXNzLCB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7XG4gICAgY29uc3QgbmV4dENoaWxkcmVuID0gd29ya0luUHJvZ3Jlc3MucGVuZGluZ1Byb3BzO1xuICAgIGlmIChoYXNMZWdhY3lDb250ZXh0Q2hhbmdlZCgpKSB7XG4gICAgICAvLyBOb3JtYWxseSB3ZSBjYW4gYmFpbCBvdXQgb24gcHJvcHMgZXF1YWxpdHkgYnV0IGlmIGNvbnRleHQgaGFzIGNoYW5nZWRcbiAgICAgIC8vIHdlIGRvbid0IGRvIHRoZSBiYWlsb3V0IGFuZCB3ZSBoYXZlIHRvIHJldXNlIGV4aXN0aW5nIHByb3BzIGluc3RlYWQuXG4gICAgfSBlbHNlIGlmICh3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID09PSBuZXh0Q2hpbGRyZW4pIHtcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY3VycmVudCA9PT0gbnVsbCkge1xuICAgICAgLy8gUG9ydGFscyBhcmUgc3BlY2lhbCBiZWNhdXNlIHdlIGRvbid0IGFwcGVuZCB0aGUgY2hpbGRyZW4gZHVyaW5nIG1vdW50XG4gICAgICAvLyBidXQgYXQgY29tbWl0LiBUaGVyZWZvcmUgd2UgbmVlZCB0byB0cmFjayBpbnNlcnRpb25zIHdoaWNoIHRoZSBub3JtYWxcbiAgICAgIC8vIGZsb3cgZG9lc24ndCBkbyBkdXJpbmcgbW91bnQuIFRoaXMgZG9lc24ndCBoYXBwZW4gYXQgdGhlIHJvb3QgYmVjYXVzZVxuICAgICAgLy8gdGhlIHJvb3QgYWx3YXlzIHN0YXJ0cyB3aXRoIGEgXCJjdXJyZW50XCIgd2l0aCBhIG51bGwgY2hpbGQuXG4gICAgICAvLyBUT0RPOiBDb25zaWRlciB1bmlmeWluZyB0aGlzIHdpdGggaG93IHRoZSByb290IHdvcmtzLlxuICAgICAgd29ya0luUHJvZ3Jlc3MuY2hpbGQgPSByZWNvbmNpbGVDaGlsZEZpYmVycyhcbiAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgIG51bGwsXG4gICAgICAgIG5leHRDaGlsZHJlbixcbiAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgICAgbWVtb2l6ZVByb3BzKHdvcmtJblByb2dyZXNzLCBuZXh0Q2hpbGRyZW4pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICAgIG1lbW9pemVQcm9wcyh3b3JrSW5Qcm9ncmVzcywgbmV4dENoaWxkcmVuKTtcbiAgICB9XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvcGFnYXRlQ29udGV4dENoYW5nZTxWPihcbiAgICB3b3JrSW5Qcm9ncmVzczogRmliZXIsXG4gICAgY29udGV4dDogUmVhY3RDb250ZXh0PFY+LFxuICAgIGNoYW5nZWRCaXRzOiBudW1iZXIsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICApOiB2b2lkIHtcbiAgICBsZXQgZmliZXIgPSB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgICBpZiAoZmliZXIgIT09IG51bGwpIHtcbiAgICAgIC8vIFNldCB0aGUgcmV0dXJuIHBvaW50ZXIgb2YgdGhlIGNoaWxkIHRvIHRoZSB3b3JrLWluLXByb2dyZXNzIGZpYmVyLlxuICAgICAgZmliZXIucmV0dXJuID0gd29ya0luUHJvZ3Jlc3M7XG4gICAgfVxuICAgIHdoaWxlIChmaWJlciAhPT0gbnVsbCkge1xuICAgICAgbGV0IG5leHRGaWJlcjtcbiAgICAgIC8vIFZpc2l0IHRoaXMgZmliZXIuXG4gICAgICBzd2l0Y2ggKGZpYmVyLnRhZykge1xuICAgICAgICBjYXNlIENvbnRleHRDb25zdW1lcjpcbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgY29udGV4dCBtYXRjaGVzLlxuICAgICAgICAgIGNvbnN0IG9ic2VydmVkQml0czogbnVtYmVyID0gZmliZXIuc3RhdGVOb2RlIHwgMDtcbiAgICAgICAgICBpZiAoZmliZXIudHlwZSA9PT0gY29udGV4dCAmJiAob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGV4cGlyYXRpb24gdGltZSBvZiBhbGwgdGhlIGFuY2VzdG9ycywgaW5jbHVkaW5nXG4gICAgICAgICAgICAvLyB0aGUgYWx0ZXJuYXRlcy5cbiAgICAgICAgICAgIGxldCBub2RlID0gZmliZXI7XG4gICAgICAgICAgICB3aGlsZSAobm9kZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBjb25zdCBhbHRlcm5hdGUgPSBub2RlLmFsdGVybmF0ZTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIG5vZGUuZXhwaXJhdGlvblRpbWUgPT09IE5vV29yayB8fFxuICAgICAgICAgICAgICAgIG5vZGUuZXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBub2RlLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAoYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHxcbiAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWUpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPSByZW5kZXJFeHBpcmF0aW9uVGltZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRlICE9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgKGFsdGVybmF0ZS5leHBpcmF0aW9uVGltZSA9PT0gTm9Xb3JrIHx8XG4gICAgICAgICAgICAgICAgICBhbHRlcm5hdGUuZXhwaXJhdGlvblRpbWUgPiByZW5kZXJFeHBpcmF0aW9uVGltZSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lID0gcmVuZGVyRXhwaXJhdGlvblRpbWU7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gTmVpdGhlciBhbHRlcm5hdGUgd2FzIHVwZGF0ZWQsIHdoaWNoIG1lYW5zIHRoZSByZXN0IG9mIHRoZVxuICAgICAgICAgICAgICAgIC8vIGFuY2VzdG9yIHBhdGggYWxyZWFkeSBoYXMgc3VmZmljaWVudCBwcmlvcml0eS5cbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBub2RlID0gbm9kZS5yZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBEb24ndCBzY2FuIGRlZXBlciB0aGFuIGEgbWF0Y2hpbmcgY29uc3VtZXIuIFdoZW4gd2UgcmVuZGVyIHRoZVxuICAgICAgICAgICAgLy8gY29uc3VtZXIsIHdlJ2xsIGNvbnRpbnVlIHNjYW5uaW5nIGZyb20gdGhhdCBwb2ludC4gVGhpcyB3YXkgdGhlXG4gICAgICAgICAgICAvLyBzY2FubmluZyB3b3JrIGlzIHRpbWUtc2xpY2VkLlxuICAgICAgICAgICAgbmV4dEZpYmVyID0gbnVsbDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVHJhdmVyc2UgZG93bi5cbiAgICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBDb250ZXh0UHJvdmlkZXI6XG4gICAgICAgICAgLy8gRG9uJ3Qgc2NhbiBkZWVwZXIgaWYgdGhpcyBpcyBhIG1hdGNoaW5nIHByb3ZpZGVyXG4gICAgICAgICAgbmV4dEZpYmVyID0gZmliZXIudHlwZSA9PT0gd29ya0luUHJvZ3Jlc3MudHlwZSA/IG51bGwgOiBmaWJlci5jaGlsZDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAvLyBUcmF2ZXJzZSBkb3duLlxuICAgICAgICAgIG5leHRGaWJlciA9IGZpYmVyLmNoaWxkO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgaWYgKG5leHRGaWJlciAhPT0gbnVsbCkge1xuICAgICAgICAvLyBTZXQgdGhlIHJldHVybiBwb2ludGVyIG9mIHRoZSBjaGlsZCB0byB0aGUgd29yay1pbi1wcm9ncmVzcyBmaWJlci5cbiAgICAgICAgbmV4dEZpYmVyLnJldHVybiA9IGZpYmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm8gY2hpbGQuIFRyYXZlcnNlIHRvIG5leHQgc2libGluZy5cbiAgICAgICAgbmV4dEZpYmVyID0gZmliZXI7XG4gICAgICAgIHdoaWxlIChuZXh0RmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgICBpZiAobmV4dEZpYmVyID09PSB3b3JrSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgLy8gV2UncmUgYmFjayB0byB0aGUgcm9vdCBvZiB0aGlzIHN1YnRyZWUuIEV4aXQuXG4gICAgICAgICAgICBuZXh0RmliZXIgPSBudWxsO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGxldCBzaWJsaW5nID0gbmV4dEZpYmVyLnNpYmxpbmc7XG4gICAgICAgICAgaWYgKHNpYmxpbmcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIG5leHRGaWJlciA9IHNpYmxpbmc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gTm8gbW9yZSBzaWJsaW5ncy4gVHJhdmVyc2UgdXAuXG4gICAgICAgICAgbmV4dEZpYmVyID0gbmV4dEZpYmVyLnJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmliZXIgPSBuZXh0RmliZXI7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29udGV4dFByb3ZpZGVyKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICkge1xuICAgIGNvbnN0IHByb3ZpZGVyVHlwZTogUmVhY3RQcm92aWRlclR5cGU8YW55PiA9IHdvcmtJblByb2dyZXNzLnR5cGU7XG4gICAgY29uc3QgY29udGV4dDogUmVhY3RDb250ZXh0PGFueT4gPSBwcm92aWRlclR5cGUuX2NvbnRleHQ7XG5cbiAgICBjb25zdCBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICBjb25zdCBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG5cbiAgICBpZiAoaGFzTGVnYWN5Q29udGV4dENoYW5nZWQoKSkge1xuICAgICAgLy8gTm9ybWFsbHkgd2UgY2FuIGJhaWwgb3V0IG9uIHByb3BzIGVxdWFsaXR5IGJ1dCBpZiBjb250ZXh0IGhhcyBjaGFuZ2VkXG4gICAgICAvLyB3ZSBkb24ndCBkbyB0aGUgYmFpbG91dCBhbmQgd2UgaGF2ZSB0byByZXVzZSBleGlzdGluZyBwcm9wcyBpbnN0ZWFkLlxuICAgIH0gZWxzZSBpZiAob2xkUHJvcHMgPT09IG5ld1Byb3BzKSB7XG4gICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBjb25zdCBuZXdWYWx1ZSA9IG5ld1Byb3BzLnZhbHVlO1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBuZXdQcm9wcztcblxuICAgIGxldCBjaGFuZ2VkQml0czogbnVtYmVyO1xuICAgIGlmIChvbGRQcm9wcyA9PT0gbnVsbCkge1xuICAgICAgLy8gSW5pdGlhbCByZW5kZXJcbiAgICAgIGNoYW5nZWRCaXRzID0gTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAob2xkUHJvcHMudmFsdWUgPT09IG5ld1Byb3BzLnZhbHVlKSB7XG4gICAgICAgIC8vIE5vIGNoYW5nZS4gQmFpbG91dCBlYXJseSBpZiBjaGlsZHJlbiBhcmUgdGhlIHNhbWUuXG4gICAgICAgIGlmIChvbGRQcm9wcy5jaGlsZHJlbiA9PT0gbmV3UHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICB9XG4gICAgICAgIGNoYW5nZWRCaXRzID0gMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG9sZFZhbHVlID0gb2xkUHJvcHMudmFsdWU7XG4gICAgICAgIC8vIFVzZSBPYmplY3QuaXMgdG8gY29tcGFyZSB0aGUgbmV3IGNvbnRleHQgdmFsdWUgdG8gdGhlIG9sZCB2YWx1ZS5cbiAgICAgICAgLy8gSW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwuXG4gICAgICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSAmJlxuICAgICAgICAgICAgKG9sZFZhbHVlICE9PSAwIHx8IDEgLyBvbGRWYWx1ZSA9PT0gMSAvIG5ld1ZhbHVlKSkgfHxcbiAgICAgICAgICAob2xkVmFsdWUgIT09IG9sZFZhbHVlICYmIG5ld1ZhbHVlICE9PSBuZXdWYWx1ZSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gTm8gY2hhbmdlLiBCYWlsb3V0IGVhcmx5IGlmIGNoaWxkcmVuIGFyZSB0aGUgc2FtZS5cbiAgICAgICAgICBpZiAob2xkUHJvcHMuY2hpbGRyZW4gPT09IG5ld1Byb3BzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICAgIHJldHVybiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID1cbiAgICAgICAgICAgIHR5cGVvZiBjb250ZXh0Ll9jYWxjdWxhdGVDaGFuZ2VkQml0cyA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICA/IGNvbnRleHQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKG9sZFZhbHVlLCBuZXdWYWx1ZSlcbiAgICAgICAgICAgICAgOiBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgICAgIChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLFxuICAgICAgICAgICAgICAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICtcbiAgICAgICAgICAgICAgICAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICVzJyxcbiAgICAgICAgICAgICAgY2hhbmdlZEJpdHMsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjaGFuZ2VkQml0cyB8PSAwO1xuXG4gICAgICAgICAgaWYgKGNoYW5nZWRCaXRzID09PSAwKSB7XG4gICAgICAgICAgICAvLyBObyBjaGFuZ2UuIEJhaWxvdXQgZWFybHkgaWYgY2hpbGRyZW4gYXJlIHRoZSBzYW1lLlxuICAgICAgICAgICAgaWYgKG9sZFByb3BzLmNoaWxkcmVuID09PSBuZXdQcm9wcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUgPSAwO1xuICAgICAgICAgICAgICBwdXNoUHJvdmlkZXIod29ya0luUHJvZ3Jlc3MpO1xuICAgICAgICAgICAgICByZXR1cm4gYmFpbG91dE9uQWxyZWFkeUZpbmlzaGVkV29yayhjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2UoXG4gICAgICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgICBjaGFuZ2VkQml0cyxcbiAgICAgICAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHdvcmtJblByb2dyZXNzLnN0YXRlTm9kZSA9IGNoYW5nZWRCaXRzO1xuICAgIHB1c2hQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICBjb25zdCBuZXdDaGlsZHJlbiA9IG5ld1Byb3BzLmNoaWxkcmVuO1xuICAgIHJlY29uY2lsZUNoaWxkcmVuKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzLCBuZXdDaGlsZHJlbik7XG4gICAgcmV0dXJuIHdvcmtJblByb2dyZXNzLmNoaWxkO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29udGV4dENvbnN1bWVyKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICkge1xuICAgIGNvbnN0IGNvbnRleHQ6IFJlYWN0Q29udGV4dDxhbnk+ID0gd29ya0luUHJvZ3Jlc3MudHlwZTtcbiAgICBjb25zdCBuZXdQcm9wcyA9IHdvcmtJblByb2dyZXNzLnBlbmRpbmdQcm9wcztcbiAgICBjb25zdCBvbGRQcm9wcyA9IHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHM7XG5cbiAgICBjb25zdCBuZXdWYWx1ZSA9IGNvbnRleHQuX2N1cnJlbnRWYWx1ZTtcbiAgICBjb25zdCBjaGFuZ2VkQml0cyA9IGNvbnRleHQuX2NoYW5nZWRCaXRzO1xuXG4gICAgaWYgKGhhc0xlZ2FjeUNvbnRleHRDaGFuZ2VkKCkpIHtcbiAgICAgIC8vIE5vcm1hbGx5IHdlIGNhbiBiYWlsIG91dCBvbiBwcm9wcyBlcXVhbGl0eSBidXQgaWYgY29udGV4dCBoYXMgY2hhbmdlZFxuICAgICAgLy8gd2UgZG9uJ3QgZG8gdGhlIGJhaWxvdXQgYW5kIHdlIGhhdmUgdG8gcmV1c2UgZXhpc3RpbmcgcHJvcHMgaW5zdGVhZC5cbiAgICB9IGVsc2UgaWYgKGNoYW5nZWRCaXRzID09PSAwICYmIG9sZFByb3BzID09PSBuZXdQcm9wcykge1xuICAgICAgcmV0dXJuIGJhaWxvdXRPbkFscmVhZHlGaW5pc2hlZFdvcmsoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIH1cbiAgICB3b3JrSW5Qcm9ncmVzcy5tZW1vaXplZFByb3BzID0gbmV3UHJvcHM7XG5cbiAgICBsZXQgb2JzZXJ2ZWRCaXRzID0gbmV3UHJvcHMudW5zdGFibGVfb2JzZXJ2ZWRCaXRzO1xuICAgIGlmIChvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwpIHtcbiAgICAgIC8vIFN1YnNjcmliZSB0byBhbGwgY2hhbmdlcyBieSBkZWZhdWx0XG4gICAgICBvYnNlcnZlZEJpdHMgPSBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG4gICAgfVxuICAgIC8vIFN0b3JlIHRoZSBvYnNlcnZlZEJpdHMgb24gdGhlIGZpYmVyJ3Mgc3RhdGVOb2RlIGZvciBxdWljayBhY2Nlc3MuXG4gICAgd29ya0luUHJvZ3Jlc3Muc3RhdGVOb2RlID0gb2JzZXJ2ZWRCaXRzO1xuXG4gICAgaWYgKChjaGFuZ2VkQml0cyAmIG9ic2VydmVkQml0cykgIT09IDApIHtcbiAgICAgIC8vIENvbnRleHQgY2hhbmdlIHByb3BhZ2F0aW9uIHN0b3BzIGF0IG1hdGNoaW5nIGNvbnN1bWVycywgZm9yIHRpbWUtXG4gICAgICAvLyBzbGljaW5nLiBDb250aW51ZSB0aGUgcHJvcGFnYXRpb24gaGVyZS5cbiAgICAgIHByb3BhZ2F0ZUNvbnRleHRDaGFuZ2UoXG4gICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGFuZ2VkQml0cyxcbiAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBUaGVyZSBpcyBubyBiYWlsb3V0IG9uIGBjaGlsZHJlbmAgZXF1YWxpdHkgYmVjYXVzZSB3ZSBleHBlY3QgcGVvcGxlXG4gICAgLy8gdG8gb2Z0ZW4gcGFzcyBhIGJvdW5kIG1ldGhvZCBhcyBhIGNoaWxkLCBidXQgaXQgbWF5IHJlZmVyZW5jZVxuICAgIC8vIGB0aGlzLnN0YXRlYCBvciBgdGhpcy5wcm9wc2AgKGFuZCB0aHVzIG5lZWRzIHRvIHJlLXJlbmRlciBvbiBgc2V0U3RhdGVgKS5cblxuICAgIGNvbnN0IHJlbmRlciA9IG5ld1Byb3BzLmNoaWxkcmVuO1xuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIHR5cGVvZiByZW5kZXIgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICdBIGNvbnRleHQgY29uc3VtZXIgd2FzIHJlbmRlcmVkIHdpdGggbXVsdGlwbGUgY2hpbGRyZW4sIG9yIGEgY2hpbGQgJyArXG4gICAgICAgICAgXCJ0aGF0IGlzbid0IGEgZnVuY3Rpb24uIEEgY29udGV4dCBjb25zdW1lciBleHBlY3RzIGEgc2luZ2xlIGNoaWxkIFwiICtcbiAgICAgICAgICAndGhhdCBpcyBhIGZ1bmN0aW9uLiBJZiB5b3UgZGlkIHBhc3MgYSBmdW5jdGlvbiwgbWFrZSBzdXJlIHRoZXJlICcgK1xuICAgICAgICAgICdpcyBubyB0cmFpbGluZyBvciBsZWFkaW5nIHdoaXRlc3BhY2UgYXJvdW5kIGl0LicsXG4gICAgICApO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0NoaWxkcmVuID0gcmVuZGVyKG5ld1ZhbHVlKTtcbiAgICByZWNvbmNpbGVDaGlsZHJlbihjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgbmV3Q2hpbGRyZW4pO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIC8qXG4gIGZ1bmN0aW9uIHJldXNlQ2hpbGRyZW5FZmZlY3RzKHJldHVybkZpYmVyIDogRmliZXIsIGZpcnN0Q2hpbGQgOiBGaWJlcikge1xuICAgIGxldCBjaGlsZCA9IGZpcnN0Q2hpbGQ7XG4gICAgZG8ge1xuICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGZpcnN0IGFuZCBsYXN0IGVmZmVjdCBvZiB0aGUgcGFyZW50IGNvcnJlc3BvbmRzXG4gICAgICAvLyB0byB0aGUgY2hpbGRyZW4ncyBmaXJzdCBhbmQgbGFzdCBlZmZlY3QuXG4gICAgICBpZiAoIXJldHVybkZpYmVyLmZpcnN0RWZmZWN0KSB7XG4gICAgICAgIHJldHVybkZpYmVyLmZpcnN0RWZmZWN0ID0gY2hpbGQuZmlyc3RFZmZlY3Q7XG4gICAgICB9XG4gICAgICBpZiAoY2hpbGQubGFzdEVmZmVjdCkge1xuICAgICAgICBpZiAocmV0dXJuRmliZXIubGFzdEVmZmVjdCkge1xuICAgICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QubmV4dEVmZmVjdCA9IGNoaWxkLmZpcnN0RWZmZWN0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybkZpYmVyLmxhc3RFZmZlY3QgPSBjaGlsZC5sYXN0RWZmZWN0O1xuICAgICAgfVxuICAgIH0gd2hpbGUgKGNoaWxkID0gY2hpbGQuc2libGluZyk7XG4gIH1cbiAgKi9cblxuICBmdW5jdGlvbiBiYWlsb3V0T25BbHJlYWR5RmluaXNoZWRXb3JrKFxuICAgIGN1cnJlbnQsXG4gICAgd29ya0luUHJvZ3Jlc3M6IEZpYmVyLFxuICApOiBGaWJlciB8IG51bGwge1xuICAgIGNhbmNlbFdvcmtUaW1lcih3b3JrSW5Qcm9ncmVzcyk7XG5cbiAgICAvLyBUT0RPOiBXZSBzaG91bGQgaWRlYWxseSBiZSBhYmxlIHRvIGJhaWwgb3V0IGVhcmx5IGlmIHRoZSBjaGlsZHJlbiBoYXZlIG5vXG4gICAgLy8gbW9yZSB3b3JrIHRvIGRvLiBIb3dldmVyLCBzaW5jZSB3ZSBkb24ndCBoYXZlIGEgc2VwYXJhdGlvbiBvZiB0aGlzXG4gICAgLy8gRmliZXIncyBwcmlvcml0eSBhbmQgaXRzIGNoaWxkcmVuIHlldCAtIHdlIGRvbid0IGtub3cgd2l0aG91dCBkb2luZyBsb3RzXG4gICAgLy8gb2YgdGhlIHNhbWUgd29yayB3ZSBkbyBhbnl3YXkuIE9uY2Ugd2UgaGF2ZSB0aGF0IHNlcGFyYXRpb24gd2UgY2FuIGp1c3RcbiAgICAvLyBiYWlsIG91dCBoZXJlIGlmIHRoZSBjaGlsZHJlbiBoYXMgbm8gbW9yZSB3b3JrIGF0IHRoaXMgcHJpb3JpdHkgbGV2ZWwuXG4gICAgLy8gaWYgKHdvcmtJblByb2dyZXNzLnByaW9yaXR5T2ZDaGlsZHJlbiA8PSBwcmlvcml0eUxldmVsKSB7XG4gICAgLy8gICAvLyBJZiB0aGVyZSBhcmUgc2lkZS1lZmZlY3RzIGluIHRoZXNlIGNoaWxkcmVuIHRoYXQgaGF2ZSBub3QgeWV0IGJlZW5cbiAgICAvLyAgIC8vIGNvbW1pdHRlZCB3ZSBuZWVkIHRvIGVuc3VyZSB0aGF0IHRoZXkgZ2V0IHByb3Blcmx5IHRyYW5zZmVycmVkIHVwLlxuICAgIC8vICAgaWYgKGN1cnJlbnQgJiYgY3VycmVudC5jaGlsZCAhPT0gd29ya0luUHJvZ3Jlc3MuY2hpbGQpIHtcbiAgICAvLyAgICAgcmV1c2VDaGlsZHJlbkVmZmVjdHMod29ya0luUHJvZ3Jlc3MsIGNoaWxkKTtcbiAgICAvLyAgIH1cbiAgICAvLyAgIHJldHVybiBudWxsO1xuICAgIC8vIH1cblxuICAgIGNsb25lQ2hpbGRGaWJlcnMoY3VycmVudCwgd29ya0luUHJvZ3Jlc3MpO1xuICAgIHJldHVybiB3b3JrSW5Qcm9ncmVzcy5jaGlsZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJhaWxvdXRPbkxvd1ByaW9yaXR5KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKSB7XG4gICAgY2FuY2VsV29ya1RpbWVyKHdvcmtJblByb2dyZXNzKTtcblxuICAgIC8vIFRPRE86IEhhbmRsZSBIb3N0Q29tcG9uZW50IHRhZ3MgaGVyZSBhcyB3ZWxsIGFuZCBjYWxsIHB1c2hIb3N0Q29udGV4dCgpP1xuICAgIC8vIFNlZSBQUiA4NTkwIGRpc2N1c3Npb24gZm9yIGNvbnRleHRcbiAgICBzd2l0Y2ggKHdvcmtJblByb2dyZXNzLnRhZykge1xuICAgICAgY2FzZSBIb3N0Um9vdDpcbiAgICAgICAgcHVzaEhvc3RSb290Q29udGV4dCh3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDbGFzc0NvbXBvbmVudDpcbiAgICAgICAgcHVzaExlZ2FjeUNvbnRleHRQcm92aWRlcih3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICBwdXNoSG9zdENvbnRhaW5lcihcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxcbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIENvbnRleHRQcm92aWRlcjpcbiAgICAgICAgcHVzaFByb3ZpZGVyKHdvcmtJblByb2dyZXNzKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFRPRE86IFdoYXQgaWYgdGhpcyBpcyBjdXJyZW50bHkgaW4gcHJvZ3Jlc3M/XG4gICAgLy8gSG93IGNhbiB0aGF0IGhhcHBlbj8gSG93IGlzIHRoaXMgbm90IGJlaW5nIGNsb25lZD9cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIFRPRE86IERlbGV0ZSBtZW1vaXplUHJvcHMvU3RhdGUgYW5kIG1vdmUgdG8gcmVjb25jaWxlL2JhaWxvdXQgaW5zdGVhZFxuICBmdW5jdGlvbiBtZW1vaXplUHJvcHMod29ya0luUHJvZ3Jlc3M6IEZpYmVyLCBuZXh0UHJvcHM6IGFueSkge1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkUHJvcHMgPSBuZXh0UHJvcHM7XG4gIH1cblxuICBmdW5jdGlvbiBtZW1vaXplU3RhdGUod29ya0luUHJvZ3Jlc3M6IEZpYmVyLCBuZXh0U3RhdGU6IGFueSkge1xuICAgIHdvcmtJblByb2dyZXNzLm1lbW9pemVkU3RhdGUgPSBuZXh0U3RhdGU7XG4gICAgLy8gRG9uJ3QgcmVzZXQgdGhlIHVwZGF0ZVF1ZXVlLCBpbiBjYXNlIHRoZXJlIGFyZSBwZW5kaW5nIHVwZGF0ZXMuIFJlc2V0dGluZ1xuICAgIC8vIGlzIGhhbmRsZWQgYnkgcHJvY2Vzc1VwZGF0ZVF1ZXVlLlxuICB9XG5cbiAgZnVuY3Rpb24gYmVnaW5Xb3JrKFxuICAgIGN1cnJlbnQ6IEZpYmVyIHwgbnVsbCxcbiAgICB3b3JrSW5Qcm9ncmVzczogRmliZXIsXG4gICAgcmVuZGVyRXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICApOiBGaWJlciB8IG51bGwge1xuICAgIGlmIChcbiAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID09PSBOb1dvcmsgfHxcbiAgICAgIHdvcmtJblByb2dyZXNzLmV4cGlyYXRpb25UaW1lID4gcmVuZGVyRXhwaXJhdGlvblRpbWVcbiAgICApIHtcbiAgICAgIHJldHVybiBiYWlsb3V0T25Mb3dQcmlvcml0eShjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgc3dpdGNoICh3b3JrSW5Qcm9ncmVzcy50YWcpIHtcbiAgICAgIGNhc2UgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIG1vdW50SW5kZXRlcm1pbmF0ZUNvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgY2FzZSBGdW5jdGlvbmFsQ29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlRnVuY3Rpb25hbENvbXBvbmVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlQ2xhc3NDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgSG9zdFJvb3Q6XG4gICAgICAgIHJldHVybiB1cGRhdGVIb3N0Um9vdChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcywgcmVuZGVyRXhwaXJhdGlvblRpbWUpO1xuICAgICAgY2FzZSBIb3N0Q29tcG9uZW50OlxuICAgICAgICByZXR1cm4gdXBkYXRlSG9zdENvbXBvbmVudChcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgY2FzZSBIb3N0VGV4dDpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUhvc3RUZXh0KGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgQ2FsbEhhbmRsZXJQaGFzZTpcbiAgICAgICAgLy8gVGhpcyBpcyBhIHJlc3RhcnQuIFJlc2V0IHRoZSB0YWcgdG8gdGhlIGluaXRpYWwgcGhhc2UuXG4gICAgICAgIHdvcmtJblByb2dyZXNzLnRhZyA9IENhbGxDb21wb25lbnQ7XG4gICAgICAvLyBJbnRlbnRpb25hbGx5IGZhbGwgdGhyb3VnaCBzaW5jZSB0aGlzIGlzIG5vdyB0aGUgc2FtZS5cbiAgICAgIGNhc2UgQ2FsbENvbXBvbmVudDpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNhbGxDb21wb25lbnQoXG4gICAgICAgICAgY3VycmVudCxcbiAgICAgICAgICB3b3JrSW5Qcm9ncmVzcyxcbiAgICAgICAgICByZW5kZXJFeHBpcmF0aW9uVGltZSxcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgUmV0dXJuQ29tcG9uZW50OlxuICAgICAgICAvLyBBIHJldHVybiBjb21wb25lbnQgaXMganVzdCBhIHBsYWNlaG9sZGVyLCB3ZSBjYW4ganVzdCBydW4gdGhyb3VnaCB0aGVcbiAgICAgICAgLy8gbmV4dCBvbmUgaW1tZWRpYXRlbHkuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgY2FzZSBIb3N0UG9ydGFsOlxuICAgICAgICByZXR1cm4gdXBkYXRlUG9ydGFsQ29tcG9uZW50KFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICAgICk7XG4gICAgICBjYXNlIEZvcndhcmRSZWY6XG4gICAgICAgIHJldHVybiB1cGRhdGVGb3J3YXJkUmVmKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgRnJhZ21lbnQ6XG4gICAgICAgIHJldHVybiB1cGRhdGVGcmFnbWVudChjdXJyZW50LCB3b3JrSW5Qcm9ncmVzcyk7XG4gICAgICBjYXNlIE1vZGU6XG4gICAgICAgIHJldHVybiB1cGRhdGVNb2RlKGN1cnJlbnQsIHdvcmtJblByb2dyZXNzKTtcbiAgICAgIGNhc2UgQ29udGV4dFByb3ZpZGVyOlxuICAgICAgICByZXR1cm4gdXBkYXRlQ29udGV4dFByb3ZpZGVyKFxuICAgICAgICAgIGN1cnJlbnQsXG4gICAgICAgICAgd29ya0luUHJvZ3Jlc3MsXG4gICAgICAgICAgcmVuZGVyRXhwaXJhdGlvblRpbWUsXG4gICAgICAgICk7XG4gICAgICBjYXNlIENvbnRleHRDb25zdW1lcjpcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNvbnRleHRDb25zdW1lcihcbiAgICAgICAgICBjdXJyZW50LFxuICAgICAgICAgIHdvcmtJblByb2dyZXNzLFxuICAgICAgICAgIHJlbmRlckV4cGlyYXRpb25UaW1lLFxuICAgICAgICApO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdVbmtub3duIHVuaXQgb2Ygd29yayB0YWcuIFRoaXMgZXJyb3IgaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiAnICtcbiAgICAgICAgICAgICdSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyxcbiAgICAgICAgKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGJlZ2luV29yayxcbiAgfTtcbn1cbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.default = function (legacyContext, scheduleWork, computeExpirationForFiber, memoizeProps, memoizeState) {\n  var cacheContext = legacyContext.cacheContext,\n      getMaskedContext = legacyContext.getMaskedContext,\n      getUnmaskedContext = legacyContext.getUnmaskedContext,\n      isContextConsumer = legacyContext.isContextConsumer,\n      hasContextChanged = legacyContext.hasContextChanged;\n\n  // Class component state updater\n\n  var updater = {\n    isMounted: _reflection.isMounted,\n    enqueueSetState: function enqueueSetState(instance, partialState, callback) {\n      var fiber = ReactInstanceMap.get(instance);\n      callback = callback === undefined ? null : callback;\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'setState');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: partialState,\n        callback: callback,\n        isReplace: false,\n        isForced: false,\n        capturedValue: null,\n        next: null\n      };\n      (0, _ReactFiberUpdateQueue.insertUpdateIntoFiber)(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    },\n    enqueueReplaceState: function enqueueReplaceState(instance, state, callback) {\n      var fiber = ReactInstanceMap.get(instance);\n      callback = callback === undefined ? null : callback;\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'replaceState');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: state,\n        callback: callback,\n        isReplace: true,\n        isForced: false,\n        capturedValue: null,\n        next: null\n      };\n      (0, _ReactFiberUpdateQueue.insertUpdateIntoFiber)(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    },\n    enqueueForceUpdate: function enqueueForceUpdate(instance, callback) {\n      var fiber = ReactInstanceMap.get(instance);\n      callback = callback === undefined ? null : callback;\n      if (__DEV__) {\n        warnOnInvalidCallback(callback, 'forceUpdate');\n      }\n      var expirationTime = computeExpirationForFiber(fiber);\n      var update = {\n        expirationTime: expirationTime,\n        partialState: null,\n        callback: callback,\n        isReplace: false,\n        isForced: true,\n        capturedValue: null,\n        next: null\n      };\n      (0, _ReactFiberUpdateQueue.insertUpdateIntoFiber)(fiber, update);\n      scheduleWork(fiber, expirationTime);\n    }\n  };\n\n  function checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext) {\n    if (oldProps === null || workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate) {\n      // If the workInProgress already has an Update effect, return true\n      return true;\n    }\n\n    var instance = workInProgress.stateNode;\n    var ctor = workInProgress.type;\n    if (typeof instance.shouldComponentUpdate === 'function') {\n      (0, _ReactDebugFiberPerf.startPhaseTimer)(workInProgress, 'shouldComponentUpdate');\n      var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, newContext);\n      (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n\n      if (__DEV__) {\n        (0, _warning2.default)(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', (0, _getComponentName2.default)(workInProgress) || 'Component');\n      }\n\n      return shouldUpdate;\n    }\n\n    if (ctor.prototype && ctor.prototype.isPureReactComponent) {\n      return !(0, _shallowEqual2.default)(oldProps, newProps) || !(0, _shallowEqual2.default)(oldState, newState);\n    }\n\n    return true;\n  }\n\n  function checkClassInstance(workInProgress) {\n    var instance = workInProgress.stateNode;\n    var type = workInProgress.type;\n    if (__DEV__) {\n      var name = (0, _getComponentName2.default)(workInProgress) || 'Component';\n      var renderPresent = instance.render;\n\n      if (!renderPresent) {\n        if (type.prototype && typeof type.prototype.render === 'function') {\n          (0, _warning2.default)(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);\n        } else {\n          (0, _warning2.default)(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);\n        }\n      }\n\n      var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;\n      (0, _warning2.default)(noGetInitialStateOnES6, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);\n      var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;\n      (0, _warning2.default)(noGetDefaultPropsOnES6, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);\n      var noInstancePropTypes = !instance.propTypes;\n      (0, _warning2.default)(noInstancePropTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);\n      var noInstanceContextTypes = !instance.contextTypes;\n      (0, _warning2.default)(noInstanceContextTypes, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);\n      var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';\n      (0, _warning2.default)(noComponentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);\n      if (type.prototype && type.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {\n        (0, _warning2.default)(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', (0, _getComponentName2.default)(workInProgress) || 'A pure component');\n      }\n      var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';\n      (0, _warning2.default)(noComponentDidUnmount, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);\n      var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';\n      (0, _warning2.default)(noComponentDidReceiveProps, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);\n      var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';\n      (0, _warning2.default)(noComponentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);\n      var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';\n      (0, _warning2.default)(noUnsafeComponentWillRecieveProps, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);\n      var hasMutatedProps = instance.props !== workInProgress.pendingProps;\n      (0, _warning2.default)(instance.props === undefined || !hasMutatedProps, '%s(...): When calling super() in `%s`, make sure to pass ' + \"up the same props that your component's constructor was passed.\", name, name);\n      var noInstanceDefaultProps = !instance.defaultProps;\n      (0, _warning2.default)(noInstanceDefaultProps, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);\n\n      if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(type)) {\n        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(type);\n        (0, _warning2.default)(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', (0, _getComponentName2.default)(workInProgress));\n      }\n\n      var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';\n      (0, _warning2.default)(noInstanceGetDerivedStateFromProps, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n      var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromCatch !== 'function';\n      (0, _warning2.default)(noInstanceGetDerivedStateFromCatch, '%s: getDerivedStateFromCatch() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);\n      var noStaticGetSnapshotBeforeUpdate = typeof type.getSnapshotBeforeUpdate !== 'function';\n      (0, _warning2.default)(noStaticGetSnapshotBeforeUpdate, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);\n      var _state = instance.state;\n      if (_state && ((typeof _state === 'undefined' ? 'undefined' : _typeof(_state)) !== 'object' || isArray(_state))) {\n        (0, _warning2.default)(false, '%s.state: must be set to an object or null', name);\n      }\n      if (typeof instance.getChildContext === 'function') {\n        (0, _warning2.default)(_typeof(type.childContextTypes) === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);\n      }\n    }\n  }\n\n  function resetInputPointers(workInProgress, instance) {\n    instance.props = workInProgress.memoizedProps;\n    instance.state = workInProgress.memoizedState;\n  }\n\n  function adoptClassInstance(workInProgress, instance) {\n    instance.updater = updater;\n    workInProgress.stateNode = instance;\n    // The instance needs access to the fiber so that it can schedule updates\n    ReactInstanceMap.set(instance, workInProgress);\n    if (__DEV__) {\n      instance._reactInternalInstance = fakeInternalInstance;\n    }\n  }\n\n  function constructClassInstance(workInProgress, props) {\n    var ctor = workInProgress.type;\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n    var needsContext = isContextConsumer(workInProgress);\n    var context = needsContext ? getMaskedContext(workInProgress, unmaskedContext) : _emptyObject2.default;\n\n    // Instantiate twice to help detect side-effects.\n    if (_ReactFeatureFlags.debugRenderPhaseSideEffects || _ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n      new ctor(props, context); // eslint-disable-line no-new\n    }\n\n    var instance = new ctor(props, context);\n    var state = instance.state !== null && instance.state !== undefined ? instance.state : null;\n    adoptClassInstance(workInProgress, instance);\n\n    if (__DEV__) {\n      if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {\n        var componentName = (0, _getComponentName2.default)(workInProgress) || 'Component';\n        if (!didWarnAboutUninitializedState.has(componentName)) {\n          didWarnAboutUninitializedState.add(componentName);\n          (0, _warning2.default)(false, '%s: Did not properly initialize state during construction. ' + 'Expected state to be an object, but it was %s.', componentName, instance.state === null ? 'null' : 'undefined');\n        }\n      }\n\n      // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n      // Warn about these lifecycles if they are present.\n      // Don't warn about react-lifecycles-compat polyfilled methods though.\n      if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {\n        var foundWillMountName = null;\n        var foundWillReceivePropsName = null;\n        var foundWillUpdateName = null;\n        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n          foundWillMountName = 'componentWillMount';\n        } else if (typeof instance.UNSAFE_componentWillMount === 'function') {\n          foundWillMountName = 'UNSAFE_componentWillMount';\n        }\n        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n          foundWillReceivePropsName = 'componentWillReceiveProps';\n        } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n          foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n        }\n        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n          foundWillUpdateName = 'componentWillUpdate';\n        } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n          foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n        }\n        if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n          var _componentName = (0, _getComponentName2.default)(workInProgress) || 'Component';\n          var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n          if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {\n            didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);\n            (0, _warning2.default)(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\\n\\n' + 'The above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '');\n          }\n        }\n      }\n    }\n\n    workInProgress.memoizedState = state;\n\n    var partialState = callGetDerivedStateFromProps(workInProgress, instance, props, state);\n\n    if (partialState !== null && partialState !== undefined) {\n      // Render-phase updates (like this) should not be added to the update queue,\n      // So that multiple render passes do not enqueue multiple updates.\n      // Instead, just synchronously merge the returned state into the instance.\n      workInProgress.memoizedState = Object.assign({}, workInProgress.memoizedState, partialState);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // ReactFiberContext usually updates this cache but can't for newly-created instances.\n    if (needsContext) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return instance;\n  }\n\n  function callComponentWillMount(workInProgress, instance) {\n    (0, _ReactDebugFiberPerf.startPhaseTimer)(workInProgress, 'componentWillMount');\n    var oldState = instance.state;\n\n    if (typeof instance.componentWillMount === 'function') {\n      instance.componentWillMount();\n    }\n    if (typeof instance.UNSAFE_componentWillMount === 'function') {\n      instance.UNSAFE_componentWillMount();\n    }\n\n    (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n\n    if (oldState !== instance.state) {\n      if (__DEV__) {\n        (0, _warning2.default)(false, '%s.componentWillMount(): Assigning directly to this.state is ' + \"deprecated (except inside a component's \" + 'constructor). Use setState instead.', (0, _getComponentName2.default)(workInProgress) || 'Component');\n      }\n      updater.enqueueReplaceState(instance, instance.state, null);\n    }\n  }\n\n  function callComponentWillReceiveProps(workInProgress, instance, newProps, newContext) {\n    var oldState = instance.state;\n    (0, _ReactDebugFiberPerf.startPhaseTimer)(workInProgress, 'componentWillReceiveProps');\n    if (typeof instance.componentWillReceiveProps === 'function') {\n      instance.componentWillReceiveProps(newProps, newContext);\n    }\n    if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      instance.UNSAFE_componentWillReceiveProps(newProps, newContext);\n    }\n    (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n\n    if (instance.state !== oldState) {\n      if (__DEV__) {\n        var componentName = (0, _getComponentName2.default)(workInProgress) || 'Component';\n        if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {\n          didWarnAboutStateAssignmentForComponent.add(componentName);\n          (0, _warning2.default)(false, '%s.componentWillReceiveProps(): Assigning directly to ' + \"this.state is deprecated (except inside a component's \" + 'constructor). Use setState instead.', componentName);\n        }\n      }\n      updater.enqueueReplaceState(instance, instance.state, null);\n    }\n  }\n\n  function callGetDerivedStateFromProps(workInProgress, instance, nextProps, prevState) {\n    var type = workInProgress.type;\n\n\n    if (typeof type.getDerivedStateFromProps === 'function') {\n      if (_ReactFeatureFlags.debugRenderPhaseSideEffects || _ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n        // Invoke method an extra time to help detect side-effects.\n        type.getDerivedStateFromProps.call(null, nextProps, prevState);\n      }\n\n      var partialState = type.getDerivedStateFromProps.call(null, nextProps, prevState);\n\n      if (__DEV__) {\n        if (partialState === undefined) {\n          var componentName = (0, _getComponentName2.default)(workInProgress) || 'Component';\n          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {\n            didWarnAboutUndefinedDerivedState.add(componentName);\n            (0, _warning2.default)(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);\n          }\n        }\n      }\n\n      return partialState;\n    }\n  }\n\n  // Invokes the mount life-cycles on a previously never rendered instance.\n  function mountClassInstance(workInProgress, renderExpirationTime) {\n    var ctor = workInProgress.type;\n    var current = workInProgress.alternate;\n\n    if (__DEV__) {\n      checkClassInstance(workInProgress);\n    }\n\n    var instance = workInProgress.stateNode;\n    var props = workInProgress.pendingProps;\n    var unmaskedContext = getUnmaskedContext(workInProgress);\n\n    instance.props = props;\n    instance.state = workInProgress.memoizedState;\n    instance.refs = _emptyObject2.default;\n    instance.context = getMaskedContext(workInProgress, unmaskedContext);\n\n    if (__DEV__) {\n      if (workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n        _ReactStrictModeWarnings2.default.recordUnsafeLifecycleWarnings(workInProgress, instance);\n      }\n\n      if (_ReactFeatureFlags.warnAboutDeprecatedLifecycles) {\n        _ReactStrictModeWarnings2.default.recordDeprecationWarnings(workInProgress, instance);\n      }\n    }\n\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n      callComponentWillMount(workInProgress, instance);\n      // If we had additional state updates during this life-cycle, let's\n      // process them now.\n      var updateQueue = workInProgress.updateQueue;\n      if (updateQueue !== null) {\n        instance.state = (0, _ReactFiberUpdateQueue.processUpdateQueue)(current, workInProgress, updateQueue, instance, props, renderExpirationTime);\n      }\n    }\n    if (typeof instance.componentDidMount === 'function') {\n      workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n    }\n  }\n\n  function resumeMountClassInstance(workInProgress, renderExpirationTime) {\n    var ctor = workInProgress.type;\n    var instance = workInProgress.stateNode;\n    resetInputPointers(workInProgress, instance);\n\n    var oldProps = workInProgress.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n    var oldContext = instance.context;\n    var newUnmaskedContext = getUnmaskedContext(workInProgress);\n    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);\n\n    var hasNewLifecycles = typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';\n\n    // Note: During these life-cycles, instance.props/instance.state are what\n    // ever the previously attempted to render - not the \"current\". However,\n    // during componentDidUpdate we pass the \"current\" props.\n\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n      if (oldProps !== newProps || oldContext !== newContext) {\n        callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);\n      }\n    }\n\n    // Compute the next state using the memoized state and the update queue.\n    var oldState = workInProgress.memoizedState;\n    // TODO: Previous state can be null.\n    var newState = void 0;\n    var derivedStateFromCatch = void 0;\n    if (workInProgress.updateQueue !== null) {\n      newState = (0, _ReactFiberUpdateQueue.processUpdateQueue)(null, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);\n\n      var updateQueue = workInProgress.updateQueue;\n      if (updateQueue !== null && updateQueue.capturedValues !== null && _ReactFeatureFlags.enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === 'function') {\n        var capturedValues = updateQueue.capturedValues;\n        // Don't remove these from the update queue yet. We need them in\n        // finishClassComponent. Do the reset there.\n        // TODO: This is awkward. Refactor class components.\n        // updateQueue.capturedValues = null;\n        derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);\n      }\n    } else {\n      newState = oldState;\n    }\n\n    var derivedStateFromProps = void 0;\n    if (oldProps !== newProps) {\n      // The prevState parameter should be the partially updated state.\n      // Otherwise, spreading state in return values could override updates.\n      derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps, newState);\n    }\n\n    if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {\n      // Render-phase updates (like this) should not be added to the update queue,\n      // So that multiple render passes do not enqueue multiple updates.\n      // Instead, just synchronously merge the returned state into the instance.\n      newState = newState === null || newState === undefined ? derivedStateFromProps : Object.assign({}, newState, derivedStateFromProps);\n\n      // Update the base state of the update queue.\n      // FIXME: This is getting ridiculous. Refactor plz!\n      var _updateQueue = workInProgress.updateQueue;\n      if (_updateQueue !== null) {\n        _updateQueue.baseState = Object.assign({}, _updateQueue.baseState, derivedStateFromProps);\n      }\n    }\n    if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {\n      // Render-phase updates (like this) should not be added to the update queue,\n      // So that multiple render passes do not enqueue multiple updates.\n      // Instead, just synchronously merge the returned state into the instance.\n      newState = newState === null || newState === undefined ? derivedStateFromCatch : Object.assign({}, newState, derivedStateFromCatch);\n\n      // Update the base state of the update queue.\n      // FIXME: This is getting ridiculous. Refactor plz!\n      var _updateQueue2 = workInProgress.updateQueue;\n      if (_updateQueue2 !== null) {\n        _updateQueue2.baseState = Object.assign({}, _updateQueue2.baseState, derivedStateFromCatch);\n      }\n    }\n\n    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidMount === 'function') {\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n      }\n      return false;\n    }\n\n    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);\n\n    if (shouldUpdate) {\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {\n        (0, _ReactDebugFiberPerf.startPhaseTimer)(workInProgress, 'componentWillMount');\n        if (typeof instance.componentWillMount === 'function') {\n          instance.componentWillMount();\n        }\n        if (typeof instance.UNSAFE_componentWillMount === 'function') {\n          instance.UNSAFE_componentWillMount();\n        }\n        (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n      }\n      if (typeof instance.componentDidMount === 'function') {\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n      }\n    } else {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidMount === 'function') {\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n      }\n\n      // If shouldComponentUpdate returned false, we should still update the\n      // memoized props/state to indicate that this work can be reused.\n      memoizeProps(workInProgress, newProps);\n      memoizeState(workInProgress, newState);\n    }\n\n    // Update the existing instance's state, props, and context pointers even\n    // if shouldComponentUpdate returns false.\n    instance.props = newProps;\n    instance.state = newState;\n    instance.context = newContext;\n\n    return shouldUpdate;\n  }\n\n  // Invokes the update life-cycles and returns false if it shouldn't rerender.\n  function updateClassInstance(current, workInProgress, renderExpirationTime) {\n    var ctor = workInProgress.type;\n    var instance = workInProgress.stateNode;\n    resetInputPointers(workInProgress, instance);\n\n    var oldProps = workInProgress.memoizedProps;\n    var newProps = workInProgress.pendingProps;\n    var oldContext = instance.context;\n    var newUnmaskedContext = getUnmaskedContext(workInProgress);\n    var newContext = getMaskedContext(workInProgress, newUnmaskedContext);\n\n    var hasNewLifecycles = typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function';\n\n    // Note: During these life-cycles, instance.props/instance.state are what\n    // ever the previously attempted to render - not the \"current\". However,\n    // during componentDidUpdate we pass the \"current\" props.\n\n    // In order to support react-lifecycles-compat polyfilled components,\n    // Unsafe lifecycles should not be invoked for components using the new APIs.\n    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {\n      if (oldProps !== newProps || oldContext !== newContext) {\n        callComponentWillReceiveProps(workInProgress, instance, newProps, newContext);\n      }\n    }\n\n    // Compute the next state using the memoized state and the update queue.\n    var oldState = workInProgress.memoizedState;\n    // TODO: Previous state can be null.\n    var newState = void 0;\n    var derivedStateFromCatch = void 0;\n\n    if (workInProgress.updateQueue !== null) {\n      newState = (0, _ReactFiberUpdateQueue.processUpdateQueue)(current, workInProgress, workInProgress.updateQueue, instance, newProps, renderExpirationTime);\n\n      var updateQueue = workInProgress.updateQueue;\n      if (updateQueue !== null && updateQueue.capturedValues !== null && _ReactFeatureFlags.enableGetDerivedStateFromCatch && typeof ctor.getDerivedStateFromCatch === 'function') {\n        var capturedValues = updateQueue.capturedValues;\n        // Don't remove these from the update queue yet. We need them in\n        // finishClassComponent. Do the reset there.\n        // TODO: This is awkward. Refactor class components.\n        // updateQueue.capturedValues = null;\n        derivedStateFromCatch = callGetDerivedStateFromCatch(ctor, capturedValues);\n      }\n    } else {\n      newState = oldState;\n    }\n\n    var derivedStateFromProps = void 0;\n    if (oldProps !== newProps) {\n      // The prevState parameter should be the partially updated state.\n      // Otherwise, spreading state in return values could override updates.\n      derivedStateFromProps = callGetDerivedStateFromProps(workInProgress, instance, newProps, newState);\n    }\n\n    if (derivedStateFromProps !== null && derivedStateFromProps !== undefined) {\n      // Render-phase updates (like this) should not be added to the update queue,\n      // So that multiple render passes do not enqueue multiple updates.\n      // Instead, just synchronously merge the returned state into the instance.\n      newState = newState === null || newState === undefined ? derivedStateFromProps : Object.assign({}, newState, derivedStateFromProps);\n\n      // Update the base state of the update queue.\n      // FIXME: This is getting ridiculous. Refactor plz!\n      var _updateQueue3 = workInProgress.updateQueue;\n      if (_updateQueue3 !== null) {\n        _updateQueue3.baseState = Object.assign({}, _updateQueue3.baseState, derivedStateFromProps);\n      }\n    }\n    if (derivedStateFromCatch !== null && derivedStateFromCatch !== undefined) {\n      // Render-phase updates (like this) should not be added to the update queue,\n      // So that multiple render passes do not enqueue multiple updates.\n      // Instead, just synchronously merge the returned state into the instance.\n      newState = newState === null || newState === undefined ? derivedStateFromCatch : Object.assign({}, newState, derivedStateFromCatch);\n\n      // Update the base state of the update queue.\n      // FIXME: This is getting ridiculous. Refactor plz!\n      var _updateQueue4 = workInProgress.updateQueue;\n      if (_updateQueue4 !== null) {\n        _updateQueue4.baseState = Object.assign({}, _updateQueue4.baseState, derivedStateFromCatch);\n      }\n    }\n\n    if (oldProps === newProps && oldState === newState && !hasContextChanged() && !(workInProgress.updateQueue !== null && workInProgress.updateQueue.hasForceUpdate)) {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n        }\n      }\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= _ReactTypeOfSideEffect.Snapshot;\n        }\n      }\n      return false;\n    }\n\n    var shouldUpdate = checkShouldComponentUpdate(workInProgress, oldProps, newProps, oldState, newState, newContext);\n\n    if (shouldUpdate) {\n      // In order to support react-lifecycles-compat polyfilled components,\n      // Unsafe lifecycles should not be invoked for components using the new APIs.\n      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {\n        (0, _ReactDebugFiberPerf.startPhaseTimer)(workInProgress, 'componentWillUpdate');\n        if (typeof instance.componentWillUpdate === 'function') {\n          instance.componentWillUpdate(newProps, newState, newContext);\n        }\n        if (typeof instance.UNSAFE_componentWillUpdate === 'function') {\n          instance.UNSAFE_componentWillUpdate(newProps, newState, newContext);\n        }\n        (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n      }\n      if (typeof instance.componentDidUpdate === 'function') {\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n      }\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n        workInProgress.effectTag |= _ReactTypeOfSideEffect.Snapshot;\n      }\n    } else {\n      // If an update was already in progress, we should schedule an Update\n      // effect even though we're bailing out, so that cWU/cDU are called.\n      if (typeof instance.componentDidUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n        }\n      }\n      if (typeof instance.getSnapshotBeforeUpdate === 'function') {\n        if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {\n          workInProgress.effectTag |= _ReactTypeOfSideEffect.Snapshot;\n        }\n      }\n\n      // If shouldComponentUpdate returned false, we should still update the\n      // memoized props/state to indicate that this work can be reused.\n      memoizeProps(workInProgress, newProps);\n      memoizeState(workInProgress, newState);\n    }\n\n    // Update the existing instance's state, props, and context pointers even\n    // if shouldComponentUpdate returns false.\n    instance.props = newProps;\n    instance.state = newState;\n    instance.context = newContext;\n\n    return shouldUpdate;\n  }\n\n  return {\n    adoptClassInstance: adoptClassInstance,\n    callGetDerivedStateFromProps: callGetDerivedStateFromProps,\n    constructClassInstance: constructClassInstance,\n    mountClassInstance: mountClassInstance,\n    resumeMountClassInstance: resumeMountClassInstance,\n    updateClassInstance: updateClassInstance\n  };\n};\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _ReactStrictModeWarnings = require('./ReactStrictModeWarnings');\n\nvar _ReactStrictModeWarnings2 = _interopRequireDefault(_ReactStrictModeWarnings);\n\nvar _reflection = require('react-reconciler/reflection');\n\nvar _ReactInstanceMap = require('shared/ReactInstanceMap');\n\nvar ReactInstanceMap = _interopRequireWildcard(_ReactInstanceMap);\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactDebugFiberPerf = require('./ReactDebugFiberPerf');\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar fakeInternalInstance = {};\nvar isArray = Array.isArray;\n\nvar didWarnAboutStateAssignmentForComponent = void 0;\nvar didWarnAboutUndefinedDerivedState = void 0;\nvar didWarnAboutUninitializedState = void 0;\nvar didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;\nvar didWarnAboutLegacyLifecyclesAndDerivedState = void 0;\nvar warnOnInvalidCallback = void 0;\n\nfunction callGetDerivedStateFromCatch(ctor, capturedValues) {\n  var resultState = {};\n  for (var i = 0; i < capturedValues.length; i++) {\n    var capturedValue = capturedValues[i];\n    var error = capturedValue.value;\n    var partialState = ctor.getDerivedStateFromCatch.call(null, error);\n    if (partialState !== null && partialState !== undefined) {\n      Object.assign(resultState, partialState);\n    }\n  }\n  return resultState;\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config, captureError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime) {\n  var getPublicInstance = config.getPublicInstance,\n      mutation = config.mutation,\n      persistence = config.persistence;\n\n\n  var callComponentWillUnmountWithTimer = function callComponentWillUnmountWithTimer(current, instance) {\n    (0, _ReactDebugFiberPerf.startPhaseTimer)(current, 'componentWillUnmount');\n    instance.props = current.memoizedProps;\n    instance.state = current.memoizedState;\n    instance.componentWillUnmount();\n    (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n  };\n\n  // Capture errors so they don't interrupt unmounting.\n  function safelyCallComponentWillUnmount(current, instance) {\n    if (__DEV__) {\n      invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);\n      if (hasCaughtError()) {\n        var unmountError = clearCaughtError();\n        captureError(current, unmountError);\n      }\n    } else {\n      try {\n        callComponentWillUnmountWithTimer(current, instance);\n      } catch (unmountError) {\n        captureError(current, unmountError);\n      }\n    }\n  }\n\n  function safelyDetachRef(current) {\n    var ref = current.ref;\n    if (ref !== null) {\n      if (typeof ref === 'function') {\n        if (__DEV__) {\n          invokeGuardedCallback(null, ref, null, null);\n          if (hasCaughtError()) {\n            var refError = clearCaughtError();\n            captureError(current, refError);\n          }\n        } else {\n          try {\n            ref(null);\n          } catch (refError) {\n            captureError(current, refError);\n          }\n        }\n      } else {\n        ref.current = null;\n      }\n    }\n  }\n\n  function commitBeforeMutationLifeCycles(current, finishedWork) {\n    switch (finishedWork.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          if (finishedWork.effectTag & _ReactTypeOfSideEffect.Snapshot) {\n            if (current !== null) {\n              var prevProps = current.memoizedProps;\n              var prevState = current.memoizedState;\n              (0, _ReactDebugFiberPerf.startPhaseTimer)(finishedWork, 'getSnapshotBeforeUpdate');\n              var _instance = finishedWork.stateNode;\n              _instance.props = finishedWork.memoizedProps;\n              _instance.state = finishedWork.memoizedState;\n              var snapshot = _instance.getSnapshotBeforeUpdate(prevProps, prevState);\n              if (__DEV__) {\n                var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;\n                if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {\n                  didWarnSet.add(finishedWork.type);\n                  (0, _warning2.default)(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', (0, _getComponentName2.default)(finishedWork));\n                }\n              }\n              _instance.__reactInternalSnapshotBeforeUpdate = snapshot;\n              (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n            }\n          }\n          return;\n        }\n      case _ReactTypeOfWork.HostRoot:\n      case _ReactTypeOfWork.HostComponent:\n      case _ReactTypeOfWork.HostText:\n      case _ReactTypeOfWork.HostPortal:\n        // Nothing to do for these component types\n        return;\n      default:\n        {\n          (0, _invariant2.default)(false, 'This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n  }\n\n  function commitLifeCycles(finishedRoot, current, finishedWork, currentTime, committedExpirationTime) {\n    switch (finishedWork.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          var _instance2 = finishedWork.stateNode;\n          if (finishedWork.effectTag & _ReactTypeOfSideEffect.Update) {\n            if (current === null) {\n              (0, _ReactDebugFiberPerf.startPhaseTimer)(finishedWork, 'componentDidMount');\n              _instance2.props = finishedWork.memoizedProps;\n              _instance2.state = finishedWork.memoizedState;\n              _instance2.componentDidMount();\n              (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n            } else {\n              var prevProps = current.memoizedProps;\n              var prevState = current.memoizedState;\n              (0, _ReactDebugFiberPerf.startPhaseTimer)(finishedWork, 'componentDidUpdate');\n              _instance2.props = finishedWork.memoizedProps;\n              _instance2.state = finishedWork.memoizedState;\n              _instance2.componentDidUpdate(prevProps, prevState, _instance2.__reactInternalSnapshotBeforeUpdate);\n              (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n            }\n          }\n          var updateQueue = finishedWork.updateQueue;\n          if (updateQueue !== null) {\n            (0, _ReactFiberUpdateQueue.commitCallbacks)(updateQueue, _instance2);\n          }\n          return;\n        }\n      case _ReactTypeOfWork.HostRoot:\n        {\n          var _updateQueue = finishedWork.updateQueue;\n          if (_updateQueue !== null) {\n            var _instance3 = null;\n            if (finishedWork.child !== null) {\n              switch (finishedWork.child.tag) {\n                case _ReactTypeOfWork.HostComponent:\n                  _instance3 = getPublicInstance(finishedWork.child.stateNode);\n                  break;\n                case _ReactTypeOfWork.ClassComponent:\n                  _instance3 = finishedWork.child.stateNode;\n                  break;\n              }\n            }\n            (0, _ReactFiberUpdateQueue.commitCallbacks)(_updateQueue, _instance3);\n          }\n          return;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          var _instance4 = finishedWork.stateNode;\n\n          // Renderers may schedule work to be done after host components are mounted\n          // (eg DOM renderer may schedule auto-focus for inputs and form controls).\n          // These effects should only be committed when components are first mounted,\n          // aka when there is no current/alternate.\n          if (current === null && finishedWork.effectTag & _ReactTypeOfSideEffect.Update) {\n            var type = finishedWork.type;\n            var props = finishedWork.memoizedProps;\n            commitMount(_instance4, type, props, finishedWork);\n          }\n\n          return;\n        }\n      case _ReactTypeOfWork.HostText:\n        {\n          // We have no life-cycles associated with text.\n          return;\n        }\n      case _ReactTypeOfWork.HostPortal:\n        {\n          // We have no life-cycles associated with portals.\n          return;\n        }\n      default:\n        {\n          (0, _invariant2.default)(false, 'This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n  }\n\n  function commitErrorLogging(finishedWork, onUncaughtError) {\n    switch (finishedWork.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          var ctor = finishedWork.type;\n          var _instance5 = finishedWork.stateNode;\n          var updateQueue = finishedWork.updateQueue;\n          (0, _invariant2.default)(updateQueue !== null && updateQueue.capturedValues !== null, 'An error logging effect should not have been scheduled if no errors ' + 'were captured. This error is likely caused by a bug in React. ' + 'Please file an issue.');\n          var capturedErrors = updateQueue.capturedValues;\n          updateQueue.capturedValues = null;\n\n          if (typeof ctor.getDerivedStateFromCatch !== 'function') {\n            // To preserve the preexisting retry behavior of error boundaries,\n            // we keep track of which ones already failed during this batch.\n            // This gets reset before we yield back to the browser.\n            // TODO: Warn in strict mode if getDerivedStateFromCatch is\n            // not defined.\n            markLegacyErrorBoundaryAsFailed(_instance5);\n          }\n\n          _instance5.props = finishedWork.memoizedProps;\n          _instance5.state = finishedWork.memoizedState;\n          for (var i = 0; i < capturedErrors.length; i++) {\n            var errorInfo = capturedErrors[i];\n            var _error = errorInfo.value;\n            var stack = errorInfo.stack;\n            logError(finishedWork, errorInfo);\n            _instance5.componentDidCatch(_error, {\n              componentStack: stack !== null ? stack : ''\n            });\n          }\n        }\n        break;\n      case _ReactTypeOfWork.HostRoot:\n        {\n          var _updateQueue2 = finishedWork.updateQueue;\n          (0, _invariant2.default)(_updateQueue2 !== null && _updateQueue2.capturedValues !== null, 'An error logging effect should not have been scheduled if no errors ' + 'were captured. This error is likely caused by a bug in React. ' + 'Please file an issue.');\n          var _capturedErrors = _updateQueue2.capturedValues;\n          _updateQueue2.capturedValues = null;\n          for (var _i = 0; _i < _capturedErrors.length; _i++) {\n            var _errorInfo = _capturedErrors[_i];\n            logError(finishedWork, _errorInfo);\n            onUncaughtError(_errorInfo.value);\n          }\n          break;\n        }\n      default:\n        (0, _invariant2.default)(false, 'This unit of work tag cannot capture errors.  This error is ' + 'likely caused by a bug in React. Please file an issue.');\n    }\n  }\n\n  function commitAttachRef(finishedWork) {\n    var ref = finishedWork.ref;\n    if (ref !== null) {\n      var _instance6 = finishedWork.stateNode;\n      var instanceToUse = void 0;\n      switch (finishedWork.tag) {\n        case _ReactTypeOfWork.HostComponent:\n          instanceToUse = getPublicInstance(_instance6);\n          break;\n        default:\n          instanceToUse = _instance6;\n      }\n      if (typeof ref === 'function') {\n        ref(instanceToUse);\n      } else {\n        if (__DEV__) {\n          if (!ref.hasOwnProperty('current')) {\n            (0, _warning2.default)(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', (0, _getComponentName2.default)(finishedWork), (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(finishedWork));\n          }\n        }\n\n        ref.current = instanceToUse;\n      }\n    }\n  }\n\n  function commitDetachRef(current) {\n    var currentRef = current.ref;\n    if (currentRef !== null) {\n      if (typeof currentRef === 'function') {\n        currentRef(null);\n      } else {\n        currentRef.current = null;\n      }\n    }\n  }\n\n  // User-originating errors (lifecycles and refs) should not interrupt\n  // deletion, so don't let them throw. Host-originating errors should\n  // interrupt deletion, so it's okay\n  function commitUnmount(current) {\n    if (typeof _ReactFiberDevToolsHook.onCommitUnmount === 'function') {\n      (0, _ReactFiberDevToolsHook.onCommitUnmount)(current);\n    }\n\n    switch (current.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          safelyDetachRef(current);\n          var _instance7 = current.stateNode;\n          if (typeof _instance7.componentWillUnmount === 'function') {\n            safelyCallComponentWillUnmount(current, _instance7);\n          }\n          return;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          safelyDetachRef(current);\n          return;\n        }\n      case _ReactTypeOfWork.CallComponent:\n        {\n          commitNestedUnmounts(current.stateNode);\n          return;\n        }\n      case _ReactTypeOfWork.HostPortal:\n        {\n          // TODO: this is recursive.\n          // We are also not using this parent because\n          // the portal will get pushed immediately.\n          if (_ReactFeatureFlags.enableMutatingReconciler && mutation) {\n            unmountHostComponents(current);\n          } else if (_ReactFeatureFlags.enablePersistentReconciler && persistence) {\n            emptyPortalContainer(current);\n          }\n          return;\n        }\n    }\n  }\n\n  function commitNestedUnmounts(root) {\n    // While we're inside a removed host node we don't want to call\n    // removeChild on the inner nodes because they're removed by the top\n    // call anyway. We also want to call componentWillUnmount on all\n    // composites before this host node is removed from the tree. Therefore\n    var node = root;\n    while (true) {\n      commitUnmount(node);\n      // Visit children because they may contain more composite or host nodes.\n      // Skip portals because commitUnmount() currently visits them recursively.\n      if (node.child !== null && (\n      // If we use mutation we drill down into portals using commitUnmount above.\n      // If we don't use mutation we drill down into portals here instead.\n      !mutation || node.tag !== _ReactTypeOfWork.HostPortal)) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === root) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === root) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  function detachFiber(current) {\n    // Cut off the return pointers to disconnect it from the tree. Ideally, we\n    // should clear the child pointer of the parent alternate to let this\n    // get GC:ed but we don't know which for sure which parent is the current\n    // one so we'll settle for GC:ing the subtree of this child. This child\n    // itself will be GC:ed when the parent updates the next time.\n    current.return = null;\n    current.child = null;\n    if (current.alternate) {\n      current.alternate.child = null;\n      current.alternate.return = null;\n    }\n  }\n\n  var emptyPortalContainer = void 0;\n\n  if (!mutation) {\n    var commitContainer = void 0;\n    if (persistence) {\n      var replaceContainerChildren = persistence.replaceContainerChildren,\n          createContainerChildSet = persistence.createContainerChildSet;\n\n      emptyPortalContainer = function emptyPortalContainer(current) {\n        var portal = current.stateNode;\n        var containerInfo = portal.containerInfo;\n\n        var emptyChildSet = createContainerChildSet(containerInfo);\n        replaceContainerChildren(containerInfo, emptyChildSet);\n      };\n      commitContainer = function commitContainer(finishedWork) {\n        switch (finishedWork.tag) {\n          case _ReactTypeOfWork.ClassComponent:\n            {\n              return;\n            }\n          case _ReactTypeOfWork.HostComponent:\n            {\n              return;\n            }\n          case _ReactTypeOfWork.HostText:\n            {\n              return;\n            }\n          case _ReactTypeOfWork.HostRoot:\n          case _ReactTypeOfWork.HostPortal:\n            {\n              var portalOrRoot = finishedWork.stateNode;\n              var containerInfo = portalOrRoot.containerInfo,\n                  _pendingChildren = portalOrRoot.pendingChildren;\n\n              replaceContainerChildren(containerInfo, _pendingChildren);\n              return;\n            }\n          default:\n            {\n              (0, _invariant2.default)(false, 'This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n            }\n        }\n      };\n    } else {\n      commitContainer = function commitContainer(finishedWork) {\n        // Noop\n      };\n    }\n    if (_ReactFeatureFlags.enablePersistentReconciler || _ReactFeatureFlags.enableNoopReconciler) {\n      return {\n        commitResetTextContent: function commitResetTextContent(finishedWork) {},\n        commitPlacement: function commitPlacement(finishedWork) {},\n        commitDeletion: function commitDeletion(current) {\n          // Detach refs and call componentWillUnmount() on the whole subtree.\n          commitNestedUnmounts(current);\n          detachFiber(current);\n        },\n        commitWork: function commitWork(current, finishedWork) {\n          commitContainer(finishedWork);\n        },\n\n        commitLifeCycles: commitLifeCycles,\n        commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,\n        commitErrorLogging: commitErrorLogging,\n        commitAttachRef: commitAttachRef,\n        commitDetachRef: commitDetachRef\n      };\n    } else if (persistence) {\n      (0, _invariant2.default)(false, 'Persistent reconciler is disabled.');\n    } else {\n      (0, _invariant2.default)(false, 'Noop reconciler is disabled.');\n    }\n  }\n  var commitMount = mutation.commitMount,\n      commitUpdate = mutation.commitUpdate,\n      resetTextContent = mutation.resetTextContent,\n      commitTextUpdate = mutation.commitTextUpdate,\n      appendChild = mutation.appendChild,\n      appendChildToContainer = mutation.appendChildToContainer,\n      insertBefore = mutation.insertBefore,\n      insertInContainerBefore = mutation.insertInContainerBefore,\n      removeChild = mutation.removeChild,\n      removeChildFromContainer = mutation.removeChildFromContainer;\n\n\n  function getHostParentFiber(fiber) {\n    var parent = fiber.return;\n    while (parent !== null) {\n      if (isHostParent(parent)) {\n        return parent;\n      }\n      parent = parent.return;\n    }\n    (0, _invariant2.default)(false, 'Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n  }\n\n  function isHostParent(fiber) {\n    return fiber.tag === _ReactTypeOfWork.HostComponent || fiber.tag === _ReactTypeOfWork.HostRoot || fiber.tag === _ReactTypeOfWork.HostPortal;\n  }\n\n  function getHostSibling(fiber) {\n    // We're going to search forward into the tree until we find a sibling host\n    // node. Unfortunately, if multiple insertions are done in a row we have to\n    // search past them. This leads to exponential search for the next sibling.\n    var node = fiber;\n    siblings: while (true) {\n      // If we didn't find anything, let's try the next sibling.\n      while (node.sibling === null) {\n        if (node.return === null || isHostParent(node.return)) {\n          // If we pop out of the root or hit the parent the fiber we are the\n          // last sibling.\n          return null;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n      while (node.tag !== _ReactTypeOfWork.HostComponent && node.tag !== _ReactTypeOfWork.HostText) {\n        // If it is not host node and, we might have a host node inside it.\n        // Try to search down until we find one.\n        if (node.effectTag & _ReactTypeOfSideEffect.Placement) {\n          // If we don't have a child, try the siblings instead.\n          continue siblings;\n        }\n        // If we don't have a child, try the siblings instead.\n        // We also skip portals because they are not part of this host tree.\n        if (node.child === null || node.tag === _ReactTypeOfWork.HostPortal) {\n          continue siblings;\n        } else {\n          node.child.return = node;\n          node = node.child;\n        }\n      }\n      // Check if this host node is stable or about to be placed.\n      if (!(node.effectTag & _ReactTypeOfSideEffect.Placement)) {\n        // Found it!\n        return node.stateNode;\n      }\n    }\n  }\n\n  function commitPlacement(finishedWork) {\n    // Recursively insert all host nodes into the parent.\n    var parentFiber = getHostParentFiber(finishedWork);\n    var parent = void 0;\n    var isContainer = void 0;\n    switch (parentFiber.tag) {\n      case _ReactTypeOfWork.HostComponent:\n        parent = parentFiber.stateNode;\n        isContainer = false;\n        break;\n      case _ReactTypeOfWork.HostRoot:\n        parent = parentFiber.stateNode.containerInfo;\n        isContainer = true;\n        break;\n      case _ReactTypeOfWork.HostPortal:\n        parent = parentFiber.stateNode.containerInfo;\n        isContainer = true;\n        break;\n      default:\n        (0, _invariant2.default)(false, 'Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    }\n    if (parentFiber.effectTag & _ReactTypeOfSideEffect.ContentReset) {\n      // Reset the text content of the parent before doing any insertions\n      resetTextContent(parent);\n      // Clear ContentReset from the effect tag\n      parentFiber.effectTag &= ~_ReactTypeOfSideEffect.ContentReset;\n    }\n\n    var before = getHostSibling(finishedWork);\n    // We only have the top Fiber that was inserted but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = finishedWork;\n    while (true) {\n      if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n        if (before) {\n          if (isContainer) {\n            insertInContainerBefore(parent, node.stateNode, before);\n          } else {\n            insertBefore(parent, node.stateNode, before);\n          }\n        } else {\n          if (isContainer) {\n            appendChildToContainer(parent, node.stateNode);\n          } else {\n            appendChild(parent, node.stateNode);\n          }\n        }\n      } else if (node.tag === _ReactTypeOfWork.HostPortal) {\n        // If the insertion itself is a portal, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === finishedWork) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === finishedWork) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  function unmountHostComponents(current) {\n    // We only have the top Fiber that was inserted but we need recurse down its\n    var node = current;\n\n    // Each iteration, currentParent is populated with node's host parent if not\n    // currentParentIsValid.\n    var currentParentIsValid = false;\n    var currentParent = void 0;\n    var currentParentIsContainer = void 0;\n\n    while (true) {\n      if (!currentParentIsValid) {\n        var parent = node.return;\n        findParent: while (true) {\n          (0, _invariant2.default)(parent !== null, 'Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');\n          switch (parent.tag) {\n            case _ReactTypeOfWork.HostComponent:\n              currentParent = parent.stateNode;\n              currentParentIsContainer = false;\n              break findParent;\n            case _ReactTypeOfWork.HostRoot:\n              currentParent = parent.stateNode.containerInfo;\n              currentParentIsContainer = true;\n              break findParent;\n            case _ReactTypeOfWork.HostPortal:\n              currentParent = parent.stateNode.containerInfo;\n              currentParentIsContainer = true;\n              break findParent;\n          }\n          parent = parent.return;\n        }\n        currentParentIsValid = true;\n      }\n\n      if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n        commitNestedUnmounts(node);\n        // After all the children have unmounted, it is now safe to remove the\n        // node from the tree.\n        if (currentParentIsContainer) {\n          removeChildFromContainer(currentParent, node.stateNode);\n        } else {\n          removeChild(currentParent, node.stateNode);\n        }\n        // Don't visit children because we already visited them.\n      } else if (node.tag === _ReactTypeOfWork.HostPortal) {\n        // When we go into a portal, it becomes the parent to remove from.\n        // We will reassign it back when we pop the portal on the way up.\n        currentParent = node.stateNode.containerInfo;\n        // Visit children because portals might contain host components.\n        if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      } else {\n        commitUnmount(node);\n        // Visit children because we may find more host components below.\n        if (node.child !== null) {\n          node.child.return = node;\n          node = node.child;\n          continue;\n        }\n      }\n      if (node === current) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === current) {\n          return;\n        }\n        node = node.return;\n        if (node.tag === _ReactTypeOfWork.HostPortal) {\n          // When we go out of the portal, we need to restore the parent.\n          // Since we don't keep a stack of them, we will search for it.\n          currentParentIsValid = false;\n        }\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  function commitDeletion(current) {\n    // Recursively delete all host nodes from the parent.\n    // Detach refs and call componentWillUnmount() on the whole subtree.\n    unmountHostComponents(current);\n    detachFiber(current);\n  }\n\n  function commitWork(current, finishedWork) {\n    switch (finishedWork.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          return;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          var _instance8 = finishedWork.stateNode;\n          if (_instance8 != null) {\n            // Commit the work prepared earlier.\n            var newProps = finishedWork.memoizedProps;\n            // For hydration we reuse the update path but we treat the oldProps\n            // as the newProps. The updatePayload will contain the real change in\n            // this case.\n            var oldProps = current !== null ? current.memoizedProps : newProps;\n            var type = finishedWork.type;\n            // TODO: Type the updateQueue to be specific to host components.\n            var updatePayload = finishedWork.updateQueue;\n            finishedWork.updateQueue = null;\n            if (updatePayload !== null) {\n              commitUpdate(_instance8, updatePayload, type, oldProps, newProps, finishedWork);\n            }\n          }\n          return;\n        }\n      case _ReactTypeOfWork.HostText:\n        {\n          (0, _invariant2.default)(finishedWork.stateNode !== null, 'This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n          var textInstance = finishedWork.stateNode;\n          var newText = finishedWork.memoizedProps;\n          // For hydration we reuse the update path but we treat the oldProps\n          // as the newProps. The updatePayload will contain the real change in\n          // this case.\n          var oldText = current !== null ? current.memoizedProps : newText;\n          commitTextUpdate(textInstance, oldText, newText);\n          return;\n        }\n      case _ReactTypeOfWork.HostRoot:\n        {\n          return;\n        }\n      default:\n        {\n          (0, _invariant2.default)(false, 'This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');\n        }\n    }\n  }\n\n  function commitResetTextContent(current) {\n    resetTextContent(current.stateNode);\n  }\n\n  if (_ReactFeatureFlags.enableMutatingReconciler) {\n    return {\n      commitBeforeMutationLifeCycles: commitBeforeMutationLifeCycles,\n      commitResetTextContent: commitResetTextContent,\n      commitPlacement: commitPlacement,\n      commitDeletion: commitDeletion,\n      commitWork: commitWork,\n      commitLifeCycles: commitLifeCycles,\n      commitErrorLogging: commitErrorLogging,\n      commitAttachRef: commitAttachRef,\n      commitDetachRef: commitDetachRef\n    };\n  } else {\n    (0, _invariant2.default)(false, 'Mutating reconciler is disabled.');\n  }\n};\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactErrorUtils = require('shared/ReactErrorUtils');\n\nvar _ReactErrorUtils2 = _interopRequireDefault(_ReactErrorUtils);\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nvar _ReactFiberDevToolsHook = require('./ReactFiberDevToolsHook');\n\nvar _ReactDebugFiberPerf = require('./ReactDebugFiberPerf');\n\nvar _ReactFiberErrorLogger = require('./ReactFiberErrorLogger');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar invokeGuardedCallback = _ReactErrorUtils2.default.invokeGuardedCallback,\n    hasCaughtError = _ReactErrorUtils2.default.hasCaughtError,\n    clearCaughtError = _ReactErrorUtils2.default.clearCaughtError; /**\n                                                                    * Copyright (c) 2013-present, Facebook, Inc.\n                                                                    *\n                                                                    * This source code is licensed under the MIT license found in the\n                                                                    * LICENSE file in the root directory of this source tree.\n                                                                    *\n                                                                    * \n                                                                    */\n\nvar didWarnAboutUndefinedSnapshotBeforeUpdate = null;\nif (__DEV__) {\n  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();\n}\n\nfunction logError(boundary, errorInfo) {\n  var source = errorInfo.source;\n  var stack = errorInfo.stack;\n  if (stack === null) {\n    stack = (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(source);\n  }\n\n  var capturedError = {\n    componentName: source !== null ? (0, _getComponentName2.default)(source) : null,\n    componentStack: stack !== null ? stack : '',\n    error: errorInfo.value,\n    errorBoundary: null,\n    errorBoundaryName: null,\n    errorBoundaryFound: false,\n    willRetry: false\n  };\n\n  if (boundary !== null && boundary.tag === _ReactTypeOfWork.ClassComponent) {\n    capturedError.errorBoundary = boundary.stateNode;\n    capturedError.errorBoundaryName = (0, _getComponentName2.default)(boundary);\n    capturedError.errorBoundaryFound = true;\n    capturedError.willRetry = true;\n  }\n\n  try {\n    (0, _ReactFiberErrorLogger.logCapturedError)(capturedError);\n  } catch (e) {\n    // Prevent cycle if logCapturedError() throws.\n    // A cycle may still occur if logCapturedError renders a component that throws.\n    var suppressLogging = e && e.suppressReactErrorLogging;\n    if (!suppressLogging) {\n      console.error(e);\n    }\n  }\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config, hostContext, legacyContext, newContext, hydrationContext) {\n  var createInstance = config.createInstance,\n      createTextInstance = config.createTextInstance,\n      appendInitialChild = config.appendInitialChild,\n      finalizeInitialChildren = config.finalizeInitialChildren,\n      prepareUpdate = config.prepareUpdate,\n      mutation = config.mutation,\n      persistence = config.persistence;\n  var getRootHostContainer = hostContext.getRootHostContainer,\n      popHostContext = hostContext.popHostContext,\n      getHostContext = hostContext.getHostContext,\n      popHostContainer = hostContext.popHostContainer;\n  var popLegacyContextProvider = legacyContext.popContextProvider,\n      popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject;\n  var popProvider = newContext.popProvider;\n  var prepareToHydrateHostInstance = hydrationContext.prepareToHydrateHostInstance,\n      prepareToHydrateHostTextInstance = hydrationContext.prepareToHydrateHostTextInstance,\n      popHydrationState = hydrationContext.popHydrationState;\n\n\n  function markUpdate(workInProgress) {\n    // Tag the fiber with an update effect. This turns a Placement into\n    // an UpdateAndPlacement.\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.Update;\n  }\n\n  function markRef(workInProgress) {\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.Ref;\n  }\n\n  function appendAllReturns(returns, workInProgress) {\n    var node = workInProgress.stateNode;\n    if (node) {\n      node.return = workInProgress;\n    }\n    while (node !== null) {\n      if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText || node.tag === _ReactTypeOfWork.HostPortal) {\n        (0, _invariant2.default)(false, 'A call cannot have host component children.');\n      } else if (node.tag === _ReactTypeOfWork.ReturnComponent) {\n        returns.push(node.pendingProps.value);\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  function moveCallToHandlerPhase(current, workInProgress, renderExpirationTime) {\n    var props = workInProgress.memoizedProps;\n    (0, _invariant2.default)(props, 'Should be resolved by now. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n\n    // First step of the call has completed. Now we need to do the second.\n    // TODO: It would be nice to have a multi stage call represented by a\n    // single component, or at least tail call optimize nested ones. Currently\n    // that requires additional fields that we don't want to add to the fiber.\n    // So this requires nested handlers.\n    // Note: This doesn't mutate the alternate node. I don't think it needs to\n    // since this stage is reset for every pass.\n    workInProgress.tag = _ReactTypeOfWork.CallHandlerPhase;\n\n    // Build up the returns.\n    // TODO: Compare this to a generator or opaque helpers like Children.\n    var returns = [];\n    appendAllReturns(returns, workInProgress);\n    var fn = props.handler;\n    var childProps = props.props;\n    var nextChildren = fn(childProps, returns);\n\n    var currentFirstChild = current !== null ? current.child : null;\n    workInProgress.child = (0, _ReactChildFiber.reconcileChildFibers)(workInProgress, currentFirstChild, nextChildren, renderExpirationTime);\n    return workInProgress.child;\n  }\n\n  function appendAllChildren(parent, workInProgress) {\n    // We only have the top Fiber that was created but we need recurse down its\n    // children to find all the terminal nodes.\n    var node = workInProgress.child;\n    while (node !== null) {\n      if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n        appendInitialChild(parent, node.stateNode);\n      } else if (node.tag === _ReactTypeOfWork.HostPortal) {\n        // If we have a portal child, then we don't want to traverse\n        // down its children. Instead, we'll get insertions from each child in\n        // the portal directly.\n      } else if (node.child !== null) {\n        node.child.return = node;\n        node = node.child;\n        continue;\n      }\n      if (node === workInProgress) {\n        return;\n      }\n      while (node.sibling === null) {\n        if (node.return === null || node.return === workInProgress) {\n          return;\n        }\n        node = node.return;\n      }\n      node.sibling.return = node.return;\n      node = node.sibling;\n    }\n  }\n\n  var updateHostContainer = void 0;\n  var updateHostComponent = void 0;\n  var updateHostText = void 0;\n  if (mutation) {\n    if (_ReactFeatureFlags.enableMutatingReconciler) {\n      // Mutation mode\n      updateHostContainer = function updateHostContainer(workInProgress) {\n        // Noop\n      };\n      updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {\n        // TODO: Type this specific to this type of component.\n        workInProgress.updateQueue = updatePayload;\n        // If the update payload indicates that there is a change or if there\n        // is a new ref we mark this as an update. All the work is done in commitWork.\n        if (updatePayload) {\n          markUpdate(workInProgress);\n        }\n      };\n      updateHostText = function updateHostText(current, workInProgress, oldText, newText) {\n        // If the text differs, mark it as an update. All the work in done in commitWork.\n        if (oldText !== newText) {\n          markUpdate(workInProgress);\n        }\n      };\n    } else {\n      (0, _invariant2.default)(false, 'Mutating reconciler is disabled.');\n    }\n  } else if (persistence) {\n    if (_ReactFeatureFlags.enablePersistentReconciler) {\n      // Persistent host tree mode\n      var cloneInstance = persistence.cloneInstance,\n          createContainerChildSet = persistence.createContainerChildSet,\n          appendChildToContainerChildSet = persistence.appendChildToContainerChildSet,\n          finalizeContainerChildren = persistence.finalizeContainerChildren;\n\n      // An unfortunate fork of appendAllChildren because we have two different parent types.\n\n      var appendAllChildrenToContainer = function appendAllChildrenToContainer(containerChildSet, workInProgress) {\n        // We only have the top Fiber that was created but we need recurse down its\n        // children to find all the terminal nodes.\n        var node = workInProgress.child;\n        while (node !== null) {\n          if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n            appendChildToContainerChildSet(containerChildSet, node.stateNode);\n          } else if (node.tag === _ReactTypeOfWork.HostPortal) {\n            // If we have a portal child, then we don't want to traverse\n            // down its children. Instead, we'll get insertions from each child in\n            // the portal directly.\n          } else if (node.child !== null) {\n            node.child.return = node;\n            node = node.child;\n            continue;\n          }\n          if (node === workInProgress) {\n            return;\n          }\n          while (node.sibling === null) {\n            if (node.return === null || node.return === workInProgress) {\n              return;\n            }\n            node = node.return;\n          }\n          node.sibling.return = node.return;\n          node = node.sibling;\n        }\n      };\n      updateHostContainer = function updateHostContainer(workInProgress) {\n        var portalOrRoot = workInProgress.stateNode;\n        var childrenUnchanged = workInProgress.firstEffect === null;\n        if (childrenUnchanged) {\n          // No changes, just reuse the existing instance.\n        } else {\n          var container = portalOrRoot.containerInfo;\n          var newChildSet = createContainerChildSet(container);\n          // If children might have changed, we have to add them all to the set.\n          appendAllChildrenToContainer(newChildSet, workInProgress);\n          portalOrRoot.pendingChildren = newChildSet;\n          // Schedule an update on the container to swap out the container.\n          markUpdate(workInProgress);\n          finalizeContainerChildren(container, newChildSet);\n        }\n      };\n      updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {\n        // If there are no effects associated with this node, then none of our children had any updates.\n        // This guarantees that we can reuse all of them.\n        var childrenUnchanged = workInProgress.firstEffect === null;\n        var currentInstance = current.stateNode;\n        if (childrenUnchanged && updatePayload === null) {\n          // No changes, just reuse the existing instance.\n          // Note that this might release a previous clone.\n          workInProgress.stateNode = currentInstance;\n        } else {\n          var recyclableInstance = workInProgress.stateNode;\n          var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);\n          if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {\n            markUpdate(workInProgress);\n          }\n          workInProgress.stateNode = newInstance;\n          if (childrenUnchanged) {\n            // If there are no other effects in this tree, we need to flag this node as having one.\n            // Even though we're not going to use it for anything.\n            // Otherwise parents won't know that there are new children to propagate upwards.\n            markUpdate(workInProgress);\n          } else {\n            // If children might have changed, we have to add them all to the set.\n            appendAllChildren(newInstance, workInProgress);\n          }\n        }\n      };\n      updateHostText = function updateHostText(current, workInProgress, oldText, newText) {\n        if (oldText !== newText) {\n          // If the text content differs, we'll create a new text instance for it.\n          var rootContainerInstance = getRootHostContainer();\n          var currentHostContext = getHostContext();\n          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress);\n          // We'll have to mark it as having an effect, even though we won't use the effect for anything.\n          // This lets the parents know that at least one of their children has changed.\n          markUpdate(workInProgress);\n        }\n      };\n    } else {\n      (0, _invariant2.default)(false, 'Persistent reconciler is disabled.');\n    }\n  } else {\n    if (_ReactFeatureFlags.enableNoopReconciler) {\n      // No host operations\n      updateHostContainer = function updateHostContainer(workInProgress) {\n        // Noop\n      };\n      updateHostComponent = function updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext) {\n        // Noop\n      };\n      updateHostText = function updateHostText(current, workInProgress, oldText, newText) {\n        // Noop\n      };\n    } else {\n      (0, _invariant2.default)(false, 'Noop reconciler is disabled.');\n    }\n  }\n\n  function completeWork(current, workInProgress, renderExpirationTime) {\n    var newProps = workInProgress.pendingProps;\n    switch (workInProgress.tag) {\n      case _ReactTypeOfWork.FunctionalComponent:\n        return null;\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          // We are leaving this subtree, so pop context if any.\n          popLegacyContextProvider(workInProgress);\n\n          // If this component caught an error, schedule an error log effect.\n          var instance = workInProgress.stateNode;\n          var updateQueue = workInProgress.updateQueue;\n          if (updateQueue !== null && updateQueue.capturedValues !== null) {\n            workInProgress.effectTag &= ~_ReactTypeOfSideEffect.DidCapture;\n            if (typeof instance.componentDidCatch === 'function') {\n              workInProgress.effectTag |= _ReactTypeOfSideEffect.ErrLog;\n            } else {\n              // Normally we clear this in the commit phase, but since we did not\n              // schedule an effect, we need to reset it here.\n              updateQueue.capturedValues = null;\n            }\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.HostRoot:\n        {\n          popHostContainer(workInProgress);\n          popTopLevelLegacyContextObject(workInProgress);\n          var fiberRoot = workInProgress.stateNode;\n          if (fiberRoot.pendingContext) {\n            fiberRoot.context = fiberRoot.pendingContext;\n            fiberRoot.pendingContext = null;\n          }\n          if (current === null || current.child === null) {\n            // If we hydrated, pop so that we can delete any remaining children\n            // that weren't hydrated.\n            popHydrationState(workInProgress);\n            // This resets the hacky state to fix isMounted before committing.\n            // TODO: Delete this when we delete isMounted and findDOMNode.\n            workInProgress.effectTag &= ~_ReactTypeOfSideEffect.Placement;\n          }\n          updateHostContainer(workInProgress);\n\n          var _updateQueue = workInProgress.updateQueue;\n          if (_updateQueue !== null && _updateQueue.capturedValues !== null) {\n            workInProgress.effectTag |= _ReactTypeOfSideEffect.ErrLog;\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          popHostContext(workInProgress);\n          var rootContainerInstance = getRootHostContainer();\n          var type = workInProgress.type;\n          if (current !== null && workInProgress.stateNode != null) {\n            // If we have an alternate, that means this is an update and we need to\n            // schedule a side-effect to do the updates.\n            var oldProps = current.memoizedProps;\n            // If we get updated because one of our children updated, we don't\n            // have newProps so we'll have to reuse them.\n            // TODO: Split the update API as separate for the props vs. children.\n            // Even better would be if children weren't special cased at all tho.\n            var _instance = workInProgress.stateNode;\n            var currentHostContext = getHostContext();\n            // TODO: Experiencing an error where oldProps is null. Suggests a host\n            // component is hitting the resume path. Figure out why. Possibly\n            // related to `hidden`.\n            var updatePayload = prepareUpdate(_instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n\n            updateHostComponent(current, workInProgress, updatePayload, type, oldProps, newProps, rootContainerInstance, currentHostContext);\n\n            if (current.ref !== workInProgress.ref) {\n              markRef(workInProgress);\n            }\n          } else {\n            if (!newProps) {\n              (0, _invariant2.default)(workInProgress.stateNode !== null, 'We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n              // This can happen when we abort work.\n              return null;\n            }\n\n            var _currentHostContext = getHostContext();\n            // TODO: Move createInstance to beginWork and keep it on a context\n            // \"stack\" as the parent. Then append children as we go in beginWork\n            // or completeWork depending on we want to add then top->down or\n            // bottom->up. Top->down is faster in IE11.\n            var wasHydrated = popHydrationState(workInProgress);\n            if (wasHydrated) {\n              // TODO: Move this and createInstance step into the beginPhase\n              // to consolidate.\n              if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, _currentHostContext)) {\n                // If changes to the hydrated node needs to be applied at the\n                // commit-phase we mark this as such.\n                markUpdate(workInProgress);\n              }\n            } else {\n              var _instance2 = createInstance(type, newProps, rootContainerInstance, _currentHostContext, workInProgress);\n\n              appendAllChildren(_instance2, workInProgress);\n\n              // Certain renderers require commit-time effects for initial mount.\n              // (eg DOM renderer supports auto-focus for certain elements).\n              // Make sure such renderers get scheduled for later work.\n              if (finalizeInitialChildren(_instance2, type, newProps, rootContainerInstance, _currentHostContext)) {\n                markUpdate(workInProgress);\n              }\n              workInProgress.stateNode = _instance2;\n            }\n\n            if (workInProgress.ref !== null) {\n              // If there is a ref on a host node we need to schedule a callback\n              markRef(workInProgress);\n            }\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.HostText:\n        {\n          var newText = newProps;\n          if (current && workInProgress.stateNode != null) {\n            var oldText = current.memoizedProps;\n            // If we have an alternate, that means this is an update and we need\n            // to schedule a side-effect to do the updates.\n            updateHostText(current, workInProgress, oldText, newText);\n          } else {\n            if (typeof newText !== 'string') {\n              (0, _invariant2.default)(workInProgress.stateNode !== null, 'We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n              // This can happen when we abort work.\n              return null;\n            }\n            var _rootContainerInstance = getRootHostContainer();\n            var _currentHostContext2 = getHostContext();\n            var _wasHydrated = popHydrationState(workInProgress);\n            if (_wasHydrated) {\n              if (prepareToHydrateHostTextInstance(workInProgress)) {\n                markUpdate(workInProgress);\n              }\n            } else {\n              workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext2, workInProgress);\n            }\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.CallComponent:\n        return moveCallToHandlerPhase(current, workInProgress, renderExpirationTime);\n      case _ReactTypeOfWork.CallHandlerPhase:\n        // Reset the tag to now be a first phase call.\n        workInProgress.tag = _ReactTypeOfWork.CallComponent;\n        return null;\n      case _ReactTypeOfWork.ReturnComponent:\n        // Does nothing.\n        return null;\n      case _ReactTypeOfWork.ForwardRef:\n        return null;\n      case _ReactTypeOfWork.Fragment:\n        return null;\n      case _ReactTypeOfWork.Mode:\n        return null;\n      case _ReactTypeOfWork.HostPortal:\n        popHostContainer(workInProgress);\n        updateHostContainer(workInProgress);\n        return null;\n      case _ReactTypeOfWork.ContextProvider:\n        // Pop provider fiber\n        popProvider(workInProgress);\n        return null;\n      case _ReactTypeOfWork.ContextConsumer:\n        return null;\n      // Error cases\n      case _ReactTypeOfWork.IndeterminateComponent:\n        (0, _invariant2.default)(false, 'An indeterminate component should have become determinate before ' + 'completing. This error is likely caused by a bug in React. Please ' + 'file an issue.');\n      // eslint-disable-next-line no-fallthrough\n      default:\n        (0, _invariant2.default)(false, 'Unknown unit of work tag. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    }\n  }\n\n  return {\n    completeWork: completeWork\n  };\n};\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ReactChildFiber = require('./ReactChildFiber');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * \n                                                                                                                                                                                                                                                                   */\n\nexports.default = function (stack) {\n  var createCursor = stack.createCursor,\n      push = stack.push,\n      pop = stack.pop;\n\n  // A cursor to the current merged context object on the stack.\n\n  var contextStackCursor = createCursor(_emptyObject2.default);\n  // A cursor to a boolean indicating whether the context has changed.\n  var didPerformWorkStackCursor = createCursor(false);\n  // Keep track of the previous context object that was on the stack.\n  // We use this to get access to the parent context after we have already\n  // pushed the next context provider, and now need to merge their contexts.\n  var previousContext = _emptyObject2.default;\n\n  function getUnmaskedContext(workInProgress) {\n    var hasOwnContext = isContextProvider(workInProgress);\n    if (hasOwnContext) {\n      // If the fiber is a context provider itself, when we read its context\n      // we have already pushed its own child context on the stack. A context\n      // provider should not \"see\" its own child context. Therefore we read the\n      // previous (parent) context instead for a context provider.\n      return previousContext;\n    }\n    return contextStackCursor.current;\n  }\n\n  function cacheContext(workInProgress, unmaskedContext, maskedContext) {\n    var instance = workInProgress.stateNode;\n    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;\n    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;\n  }\n\n  function getMaskedContext(workInProgress, unmaskedContext) {\n    var type = workInProgress.type;\n    var contextTypes = type.contextTypes;\n    if (!contextTypes) {\n      return _emptyObject2.default;\n    }\n\n    // Avoid recreating masked context unless unmasked context has changed.\n    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.\n    // This may trigger infinite loops if componentWillReceiveProps calls setState.\n    var instance = workInProgress.stateNode;\n    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {\n      return instance.__reactInternalMemoizedMaskedChildContext;\n    }\n\n    var context = {};\n    for (var key in contextTypes) {\n      context[key] = unmaskedContext[key];\n    }\n\n    if (__DEV__) {\n      var name = (0, _getComponentName2.default)(workInProgress) || 'Unknown';\n      (0, _checkPropTypes2.default)(contextTypes, context, 'context', name, _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum);\n    }\n\n    // Cache unmasked context so we can avoid recreating masked context unless necessary.\n    // Context is created before the class component is instantiated so check for instance.\n    if (instance) {\n      cacheContext(workInProgress, unmaskedContext, context);\n    }\n\n    return context;\n  }\n\n  function hasContextChanged() {\n    return didPerformWorkStackCursor.current;\n  }\n\n  function isContextConsumer(fiber) {\n    return fiber.tag === _ReactTypeOfWork.ClassComponent && fiber.type.contextTypes != null;\n  }\n\n  function isContextProvider(fiber) {\n    return fiber.tag === _ReactTypeOfWork.ClassComponent && fiber.type.childContextTypes != null;\n  }\n\n  function popContextProvider(fiber) {\n    if (!isContextProvider(fiber)) {\n      return;\n    }\n\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n\n  function popTopLevelContextObject(fiber) {\n    pop(didPerformWorkStackCursor, fiber);\n    pop(contextStackCursor, fiber);\n  }\n\n  function pushTopLevelContextObject(fiber, context, didChange) {\n    (0, _invariant2.default)(contextStackCursor.cursor == null, 'Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n    push(contextStackCursor, context, fiber);\n    push(didPerformWorkStackCursor, didChange, fiber);\n  }\n\n  function processChildContext(fiber, parentContext) {\n    var instance = fiber.stateNode;\n    var childContextTypes = fiber.type.childContextTypes;\n\n    // TODO (bvaughn) Replace this behavior with an invariant() in the future.\n    // It has only been added in Fiber to match the (unintentional) behavior in Stack.\n    if (typeof instance.getChildContext !== 'function') {\n      if (__DEV__) {\n        var componentName = (0, _getComponentName2.default)(fiber) || 'Unknown';\n\n        if (!warnedAboutMissingGetChildContext[componentName]) {\n          warnedAboutMissingGetChildContext[componentName] = true;\n          (0, _warning2.default)(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);\n        }\n      }\n      return parentContext;\n    }\n\n    var childContext = void 0;\n    if (__DEV__) {\n      _ReactDebugCurrentFiber2.default.setCurrentPhase('getChildContext');\n    }\n    (0, _ReactDebugFiberPerf.startPhaseTimer)(fiber, 'getChildContext');\n    childContext = instance.getChildContext();\n    (0, _ReactDebugFiberPerf.stopPhaseTimer)();\n    if (__DEV__) {\n      _ReactDebugCurrentFiber2.default.setCurrentPhase(null);\n    }\n    for (var contextKey in childContext) {\n      (0, _invariant2.default)(contextKey in childContextTypes, '%s.getChildContext(): key \"%s\" is not defined in childContextTypes.', (0, _getComponentName2.default)(fiber) || 'Unknown', contextKey);\n    }\n    if (__DEV__) {\n      var name = (0, _getComponentName2.default)(fiber) || 'Unknown';\n      (0, _checkPropTypes2.default)(childContextTypes, childContext, 'child context', name,\n      // In practice, there is one case in which we won't get a stack. It's when\n      // somebody calls unstable_renderSubtreeIntoContainer() and we process\n      // context from the parent component instance. The stack will be missing\n      // because it's outside of the reconciliation, and so the pointer has not\n      // been set. This is rare and doesn't matter. We'll also remove that API.\n      _ReactDebugCurrentFiber2.default.getCurrentFiberStackAddendum);\n    }\n\n    return _extends({}, parentContext, childContext);\n  }\n\n  function pushContextProvider(workInProgress) {\n    if (!isContextProvider(workInProgress)) {\n      return false;\n    }\n\n    var instance = workInProgress.stateNode;\n    // We push the context as early as possible to ensure stack integrity.\n    // If the instance does not exist yet, we will push null at first,\n    // and replace it on the stack later when invalidating the context.\n    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || _emptyObject2.default;\n\n    // Remember the parent context so we can merge with it later.\n    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.\n    previousContext = contextStackCursor.current;\n    push(contextStackCursor, memoizedMergedChildContext, workInProgress);\n    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);\n\n    return true;\n  }\n\n  function invalidateContextProvider(workInProgress, didChange) {\n    var instance = workInProgress.stateNode;\n    (0, _invariant2.default)(instance, 'Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n    if (didChange) {\n      // Merge parent and own context.\n      // Skip this if we're not updating due to sCU.\n      // This avoids unnecessarily recomputing memoized values.\n      var mergedContext = processChildContext(workInProgress, previousContext);\n      instance.__reactInternalMemoizedMergedChildContext = mergedContext;\n\n      // Replace the old (or empty) context with the new one.\n      // It is important to unwind the context in the reverse order.\n      pop(didPerformWorkStackCursor, workInProgress);\n      pop(contextStackCursor, workInProgress);\n      // Now push the new context and mark that it has changed.\n      push(contextStackCursor, mergedContext, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    } else {\n      pop(didPerformWorkStackCursor, workInProgress);\n      push(didPerformWorkStackCursor, didChange, workInProgress);\n    }\n  }\n\n  function findCurrentUnmaskedContext(fiber) {\n    // Currently this is only used with renderSubtreeIntoContainer; not sure if it\n    // makes sense elsewhere\n    (0, _invariant2.default)((0, _reflection.isFiberMounted)(fiber) && fiber.tag === _ReactTypeOfWork.ClassComponent, 'Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n\n    var node = fiber;\n    while (node.tag !== _ReactTypeOfWork.HostRoot) {\n      if (isContextProvider(node)) {\n        return node.stateNode.__reactInternalMemoizedMergedChildContext;\n      }\n      var parent = node.return;\n      (0, _invariant2.default)(parent, 'Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      node = parent;\n    }\n    return node.stateNode.context;\n  }\n\n  return {\n    getUnmaskedContext: getUnmaskedContext,\n    cacheContext: cacheContext,\n    getMaskedContext: getMaskedContext,\n    hasContextChanged: hasContextChanged,\n    isContextConsumer: isContextConsumer,\n    isContextProvider: isContextProvider,\n    popContextProvider: popContextProvider,\n    popTopLevelContextObject: popTopLevelContextObject,\n    pushTopLevelContextObject: pushTopLevelContextObject,\n    processChildContext: processChildContext,\n    pushContextProvider: pushContextProvider,\n    invalidateContextProvider: invalidateContextProvider,\n    findCurrentUnmaskedContext: findCurrentUnmaskedContext\n  };\n};\n\nvar _reflection = require('react-reconciler/reflection');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _checkPropTypes = require('prop-types/checkPropTypes');\n\nvar _checkPropTypes2 = _interopRequireDefault(_checkPropTypes);\n\nvar _ReactDebugCurrentFiber = require('./ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _ReactDebugFiberPerf = require('./ReactDebugFiberPerf');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar warnedAboutMissingGetChildContext = void 0;\n\nif (__DEV__) {\n  warnedAboutMissingGetChildContext = {};\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.injectInternals = injectInternals;\nexports.onCommitRoot = onCommitRoot;\nexports.onCommitUnmount = onCommitUnmount;\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar onCommitFiberRoot = null; /**\n                               * Copyright (c) 2013-present, Facebook, Inc.\n                               *\n                               * This source code is licensed under the MIT license found in the\n                               * LICENSE file in the root directory of this source tree.\n                               *\n                               * \n                               */\n\nvar onCommitFiberUnmount = null;\nvar hasLoggedError = false;\n\nfunction catchErrors(fn) {\n  return function (arg) {\n    try {\n      return fn(arg);\n    } catch (err) {\n      if (__DEV__ && !hasLoggedError) {\n        hasLoggedError = true;\n        (0, _warning2.default)(false, 'React DevTools encountered an error: %s', err);\n      }\n    }\n  };\n}\n\nfunction injectInternals(internals) {\n  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n    // No DevTools\n    return false;\n  }\n  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;\n  if (hook.isDisabled) {\n    // This isn't a real property on the hook, but it can be set to opt out\n    // of DevTools integration and associated warnings and logs.\n    // https://github.com/facebook/react/issues/3877\n    return true;\n  }\n  if (!hook.supportsFiber) {\n    if (__DEV__) {\n      (0, _warning2.default)(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');\n    }\n    // DevTools exists, even though it doesn't support Fiber.\n    return true;\n  }\n  try {\n    var rendererID = hook.inject(internals);\n    // We have successfully injected, so now it is safe to set up hooks.\n    onCommitFiberRoot = catchErrors(function (root) {\n      return hook.onCommitFiberRoot(rendererID, root);\n    });\n    onCommitFiberUnmount = catchErrors(function (fiber) {\n      return hook.onCommitFiberUnmount(rendererID, fiber);\n    });\n  } catch (err) {\n    // Catch all errors because it is unsafe to throw during initialization.\n    if (__DEV__) {\n      (0, _warning2.default)(false, 'React DevTools encountered an error: %s.', err);\n    }\n  }\n  // DevTools exists\n  return true;\n}\n\nfunction onCommitRoot(root) {\n  if (typeof onCommitFiberRoot === 'function') {\n    onCommitFiberRoot(root);\n  }\n}\n\nfunction onCommitUnmount(fiber) {\n  if (typeof onCommitFiberUnmount === 'function') {\n    onCommitFiberUnmount(fiber);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyRGV2VG9vbHNIb29rLmpzIl0sIm5hbWVzIjpbImluamVjdEludGVybmFscyIsIm9uQ29tbWl0Um9vdCIsIm9uQ29tbWl0VW5tb3VudCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJoYXNMb2dnZWRFcnJvciIsImNhdGNoRXJyb3JzIiwiZm4iLCJhcmciLCJlcnIiLCJfX0RFVl9fIiwiaW50ZXJuYWxzIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaG9vayIsImlzRGlzYWJsZWQiLCJzdXBwb3J0c0ZpYmVyIiwicmVuZGVyZXJJRCIsImluamVjdCIsInJvb3QiLCJmaWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFpQ2dCQSxlLEdBQUFBLGU7UUEyQ0FDLFksR0FBQUEsWTtRQU1BQyxlLEdBQUFBLGU7O0FBdEVoQjs7Ozs7O0FBSUEsSUFBSUMsb0JBQW9CLElBQXhCLEMsQ0FoQkE7Ozs7Ozs7OztBQWlCQSxJQUFJQyx1QkFBdUIsSUFBM0I7QUFDQSxJQUFJQyxpQkFBaUIsS0FBckI7O0FBRUEsU0FBU0MsV0FBVCxDQUFxQkMsRUFBckIsRUFBeUI7QUFDdkIsU0FBTyxVQUFTQyxHQUFULEVBQWM7QUFDbkIsUUFBSTtBQUNGLGFBQU9ELEdBQUdDLEdBQUgsQ0FBUDtBQUNELEtBRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWixVQUFJQyxXQUFXLENBQUNMLGNBQWhCLEVBQWdDO0FBQzlCQSx5QkFBaUIsSUFBakI7QUFDQSwrQkFBUSxLQUFSLEVBQWUseUNBQWYsRUFBMERJLEdBQTFEO0FBQ0Q7QUFDRjtBQUNGLEdBVEQ7QUFVRDs7QUFFTSxTQUFTVCxlQUFULENBQXlCVyxTQUF6QixFQUFxRDtBQUMxRCxNQUFJLE9BQU9DLDhCQUFQLEtBQTBDLFdBQTlDLEVBQTJEO0FBQ3pEO0FBQ0EsV0FBTyxLQUFQO0FBQ0Q7QUFDRCxNQUFNQyxPQUFPRCw4QkFBYjtBQUNBLE1BQUlDLEtBQUtDLFVBQVQsRUFBcUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFJLENBQUNELEtBQUtFLGFBQVYsRUFBeUI7QUFDdkIsUUFBSUwsT0FBSixFQUFhO0FBQ1gsNkJBQ0UsS0FERixFQUVFLDBFQUNFLG1FQURGLEdBRUUsOEJBSko7QUFNRDtBQUNEO0FBQ0EsV0FBTyxJQUFQO0FBQ0Q7QUFDRCxNQUFJO0FBQ0YsUUFBTU0sYUFBYUgsS0FBS0ksTUFBTCxDQUFZTixTQUFaLENBQW5CO0FBQ0E7QUFDQVIsd0JBQW9CRyxZQUFZO0FBQUEsYUFDOUJPLEtBQUtWLGlCQUFMLENBQXVCYSxVQUF2QixFQUFtQ0UsSUFBbkMsQ0FEOEI7QUFBQSxLQUFaLENBQXBCO0FBR0FkLDJCQUF1QkUsWUFBWTtBQUFBLGFBQ2pDTyxLQUFLVCxvQkFBTCxDQUEwQlksVUFBMUIsRUFBc0NHLEtBQXRDLENBRGlDO0FBQUEsS0FBWixDQUF2QjtBQUdELEdBVEQsQ0FTRSxPQUFPVixHQUFQLEVBQVk7QUFDWjtBQUNBLFFBQUlDLE9BQUosRUFBYTtBQUNYLDZCQUFRLEtBQVIsRUFBZSwwQ0FBZixFQUEyREQsR0FBM0Q7QUFDRDtBQUNGO0FBQ0Q7QUFDQSxTQUFPLElBQVA7QUFDRDs7QUFFTSxTQUFTUixZQUFULENBQXNCaUIsSUFBdEIsRUFBdUM7QUFDNUMsTUFBSSxPQUFPZixpQkFBUCxLQUE2QixVQUFqQyxFQUE2QztBQUMzQ0Esc0JBQWtCZSxJQUFsQjtBQUNEO0FBQ0Y7O0FBRU0sU0FBU2hCLGVBQVQsQ0FBeUJpQixLQUF6QixFQUF1QztBQUM1QyxNQUFJLE9BQU9mLG9CQUFQLEtBQWdDLFVBQXBDLEVBQWdEO0FBQzlDQSx5QkFBcUJlLEtBQXJCO0FBQ0Q7QUFDRiIsImZpbGUiOiJSZWFjdEZpYmVyRGV2VG9vbHNIb29rLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJy4vUmVhY3RGaWJlcic7XG5pbXBvcnQgdHlwZSB7RmliZXJSb290fSBmcm9tICcuL1JlYWN0RmliZXJSb290JztcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnZmJqcy9saWIvd2FybmluZyc7XG5cbmRlY2xhcmUgdmFyIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXzogT2JqZWN0IHwgdm9pZDtcblxubGV0IG9uQ29tbWl0RmliZXJSb290ID0gbnVsbDtcbmxldCBvbkNvbW1pdEZpYmVyVW5tb3VudCA9IG51bGw7XG5sZXQgaGFzTG9nZ2VkRXJyb3IgPSBmYWxzZTtcblxuZnVuY3Rpb24gY2F0Y2hFcnJvcnMoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZm4oYXJnKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChfX0RFVl9fICYmICFoYXNMb2dnZWRFcnJvcikge1xuICAgICAgICBoYXNMb2dnZWRFcnJvciA9IHRydWU7XG4gICAgICAgIHdhcm5pbmcoZmFsc2UsICdSZWFjdCBEZXZUb29scyBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJXMnLCBlcnIpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluamVjdEludGVybmFscyhpbnRlcm5hbHM6IE9iamVjdCk6IGJvb2xlYW4ge1xuICBpZiAodHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAvLyBObyBEZXZUb29sc1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBjb25zdCBob29rID0gX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuICBpZiAoaG9vay5pc0Rpc2FibGVkKSB7XG4gICAgLy8gVGhpcyBpc24ndCBhIHJlYWwgcHJvcGVydHkgb24gdGhlIGhvb2ssIGJ1dCBpdCBjYW4gYmUgc2V0IHRvIG9wdCBvdXRcbiAgICAvLyBvZiBEZXZUb29scyBpbnRlZ3JhdGlvbiBhbmQgYXNzb2NpYXRlZCB3YXJuaW5ncyBhbmQgbG9ncy5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzM4NzdcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICBpZiAoIWhvb2suc3VwcG9ydHNGaWJlcikge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICB3YXJuaW5nKFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgJ1RoZSBpbnN0YWxsZWQgdmVyc2lvbiBvZiBSZWFjdCBEZXZUb29scyBpcyB0b28gb2xkIGFuZCB3aWxsIG5vdCB3b3JrICcgK1xuICAgICAgICAgICd3aXRoIHRoZSBjdXJyZW50IHZlcnNpb24gb2YgUmVhY3QuIFBsZWFzZSB1cGRhdGUgUmVhY3QgRGV2VG9vbHMuICcgK1xuICAgICAgICAgICdodHRwczovL2ZiLm1lL3JlYWN0LWRldnRvb2xzJyxcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIERldlRvb2xzIGV4aXN0cywgZXZlbiB0aG91Z2ggaXQgZG9lc24ndCBzdXBwb3J0IEZpYmVyLlxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHRyeSB7XG4gICAgY29uc3QgcmVuZGVyZXJJRCA9IGhvb2suaW5qZWN0KGludGVybmFscyk7XG4gICAgLy8gV2UgaGF2ZSBzdWNjZXNzZnVsbHkgaW5qZWN0ZWQsIHNvIG5vdyBpdCBpcyBzYWZlIHRvIHNldCB1cCBob29rcy5cbiAgICBvbkNvbW1pdEZpYmVyUm9vdCA9IGNhdGNoRXJyb3JzKHJvb3QgPT5cbiAgICAgIGhvb2sub25Db21taXRGaWJlclJvb3QocmVuZGVyZXJJRCwgcm9vdCksXG4gICAgKTtcbiAgICBvbkNvbW1pdEZpYmVyVW5tb3VudCA9IGNhdGNoRXJyb3JzKGZpYmVyID0+XG4gICAgICBob29rLm9uQ29tbWl0RmliZXJVbm1vdW50KHJlbmRlcmVySUQsIGZpYmVyKSxcbiAgICApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBDYXRjaCBhbGwgZXJyb3JzIGJlY2F1c2UgaXQgaXMgdW5zYWZlIHRvIHRocm93IGR1cmluZyBpbml0aWFsaXphdGlvbi5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1JlYWN0IERldlRvb2xzIGVuY291bnRlcmVkIGFuIGVycm9yOiAlcy4nLCBlcnIpO1xuICAgIH1cbiAgfVxuICAvLyBEZXZUb29scyBleGlzdHNcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkNvbW1pdFJvb3Qocm9vdDogRmliZXJSb290KSB7XG4gIGlmICh0eXBlb2Ygb25Db21taXRGaWJlclJvb3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICBvbkNvbW1pdEZpYmVyUm9vdChyb290KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gb25Db21taXRVbm1vdW50KGZpYmVyOiBGaWJlcikge1xuICBpZiAodHlwZW9mIG9uQ29tbWl0RmliZXJVbm1vdW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgb25Db21taXRGaWJlclVubW91bnQoZmliZXIpO1xuICB9XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.showErrorDialog = showErrorDialog;\n\n\n// This module is forked in different environments.\n// By default, return `true` to log errors to the console.\n// Forks can return `false` if this isn't desirable.\nfunction showErrorDialog(capturedError) {\n  return true;\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyRXJyb3JEaWFsb2cuanMiXSwibmFtZXMiOlsic2hvd0Vycm9yRGlhbG9nIiwiY2FwdHVyZWRFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFjZ0JBLGUsR0FBQUEsZTs7O0FBSGhCO0FBQ0E7QUFDQTtBQUNPLFNBQVNBLGVBQVQsQ0FBeUJDLGFBQXpCLEVBQWdFO0FBQ3JFLFNBQU8sSUFBUDtBQUNELEMsQ0FoQkQiLCJmaWxlIjoiUmVhY3RGaWJlckVycm9yRGlhbG9nLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7Q2FwdHVyZWRFcnJvcn0gZnJvbSAnLi9SZWFjdENhcHR1cmVkVmFsdWUnO1xuXG4vLyBUaGlzIG1vZHVsZSBpcyBmb3JrZWQgaW4gZGlmZmVyZW50IGVudmlyb25tZW50cy5cbi8vIEJ5IGRlZmF1bHQsIHJldHVybiBgdHJ1ZWAgdG8gbG9nIGVycm9ycyB0byB0aGUgY29uc29sZS5cbi8vIEZvcmtzIGNhbiByZXR1cm4gYGZhbHNlYCBpZiB0aGlzIGlzbid0IGRlc2lyYWJsZS5cbmV4cG9ydCBmdW5jdGlvbiBzaG93RXJyb3JEaWFsb2coY2FwdHVyZWRFcnJvcjogQ2FwdHVyZWRFcnJvcik6IGJvb2xlYW4ge1xuICByZXR1cm4gdHJ1ZTtcbn1cbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logCapturedError = logCapturedError;\n\nvar _ReactFiberErrorDialog = require('./ReactFiberErrorDialog');\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction logCapturedError(capturedError) {\n  var logError = (0, _ReactFiberErrorDialog.showErrorDialog)(capturedError);\n\n  // Allow injected showErrorDialog() to prevent default console.error logging.\n  // This enables renderers like ReactNative to better manage redbox behavior.\n  if (logError === false) {\n    return;\n  }\n\n  var error = capturedError.error;\n  var suppressLogging = error && error.suppressReactErrorLogging;\n  if (suppressLogging) {\n    return;\n  }\n\n  if (__DEV__) {\n    var componentName = capturedError.componentName,\n        componentStack = capturedError.componentStack,\n        errorBoundaryName = capturedError.errorBoundaryName,\n        errorBoundaryFound = capturedError.errorBoundaryFound,\n        willRetry = capturedError.willRetry;\n\n\n    var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';\n\n    var errorBoundaryMessage = void 0;\n    // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.\n    if (errorBoundaryFound && errorBoundaryName) {\n      if (willRetry) {\n        errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');\n      } else {\n        errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';\n      }\n    } else {\n      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';\n    }\n    var combinedMessage = '' + componentNameMessage + componentStack + '\\n\\n' + ('' + errorBoundaryMessage);\n\n    // In development, we provide our own message with just the component stack.\n    // We don't include the original error message and JS stack because the browser\n    // has already printed it. Even if the application swallows the error, it is still\n    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.\n    console.error(combinedMessage);\n  } else {\n    // In production, we print the error directly.\n    // This will include the message, the JS stack, and anything the browser wants to show.\n    // We pass the error object instead of custom message so that the browser displays the error natively.\n    console.error(error);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyRXJyb3JMb2dnZXIuanMiXSwibmFtZXMiOlsibG9nQ2FwdHVyZWRFcnJvciIsImNhcHR1cmVkRXJyb3IiLCJsb2dFcnJvciIsImVycm9yIiwic3VwcHJlc3NMb2dnaW5nIiwic3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZyIsIl9fREVWX18iLCJjb21wb25lbnROYW1lIiwiY29tcG9uZW50U3RhY2siLCJlcnJvckJvdW5kYXJ5TmFtZSIsImVycm9yQm91bmRhcnlGb3VuZCIsIndpbGxSZXRyeSIsImNvbXBvbmVudE5hbWVNZXNzYWdlIiwiZXJyb3JCb3VuZGFyeU1lc3NhZ2UiLCJjb21iaW5lZE1lc3NhZ2UiLCJjb25zb2xlIl0sIm1hcHBpbmdzIjoiOzs7OztRQWFnQkEsZ0IsR0FBQUEsZ0I7O0FBRmhCOztBQVhBOzs7Ozs7Ozs7QUFhTyxTQUFTQSxnQkFBVCxDQUEwQkMsYUFBMUIsRUFBOEQ7QUFDbkUsTUFBTUMsV0FBVyw0Q0FBZ0JELGFBQWhCLENBQWpCOztBQUVBO0FBQ0E7QUFDQSxNQUFJQyxhQUFhLEtBQWpCLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBRUQsTUFBTUMsUUFBU0YsY0FBY0UsS0FBN0I7QUFDQSxNQUFNQyxrQkFBa0JELFNBQVNBLE1BQU1FLHlCQUF2QztBQUNBLE1BQUlELGVBQUosRUFBcUI7QUFDbkI7QUFDRDs7QUFFRCxNQUFJRSxPQUFKLEVBQWE7QUFBQSxRQUVUQyxhQUZTLEdBT1BOLGFBUE8sQ0FFVE0sYUFGUztBQUFBLFFBR1RDLGNBSFMsR0FPUFAsYUFQTyxDQUdUTyxjQUhTO0FBQUEsUUFJVEMsaUJBSlMsR0FPUFIsYUFQTyxDQUlUUSxpQkFKUztBQUFBLFFBS1RDLGtCQUxTLEdBT1BULGFBUE8sQ0FLVFMsa0JBTFM7QUFBQSxRQU1UQyxTQU5TLEdBT1BWLGFBUE8sQ0FNVFUsU0FOUzs7O0FBU1gsUUFBTUMsdUJBQXVCTCxzREFDV0EsYUFEWCxvQkFFekIsMkRBRko7O0FBSUEsUUFBSU0sNkJBQUo7QUFDQTtBQUNBLFFBQUlILHNCQUFzQkQsaUJBQTFCLEVBQTZDO0FBQzNDLFVBQUlFLFNBQUosRUFBZTtBQUNiRSwrQkFDRSw4R0FDMENKLGlCQUQxQyxPQURGO0FBR0QsT0FKRCxNQUlPO0FBQ0xJLCtCQUNFLDREQUNFSixpQkFERixvRkFERjtBQUtEO0FBQ0YsS0FaRCxNQVlPO0FBQ0xJLDZCQUNFLDJGQUNBLGtGQUZGO0FBR0Q7QUFDRCxRQUFNQyxrQkFDSixLQUFHRixvQkFBSCxHQUEwQkosY0FBMUIsa0JBQ0dLLG9CQURILENBREY7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQUUsWUFBUVosS0FBUixDQUFjVyxlQUFkO0FBQ0QsR0F6Q0QsTUF5Q087QUFDTDtBQUNBO0FBQ0E7QUFDQUMsWUFBUVosS0FBUixDQUFjQSxLQUFkO0FBQ0Q7QUFDRiIsImZpbGUiOiJSZWFjdEZpYmVyRXJyb3JMb2dnZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtDYXB0dXJlZEVycm9yfSBmcm9tICcuL1JlYWN0Q2FwdHVyZWRWYWx1ZSc7XG5cbmltcG9ydCB7c2hvd0Vycm9yRGlhbG9nfSBmcm9tICcuL1JlYWN0RmliZXJFcnJvckRpYWxvZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2dDYXB0dXJlZEVycm9yKGNhcHR1cmVkRXJyb3I6IENhcHR1cmVkRXJyb3IpOiB2b2lkIHtcbiAgY29uc3QgbG9nRXJyb3IgPSBzaG93RXJyb3JEaWFsb2coY2FwdHVyZWRFcnJvcik7XG5cbiAgLy8gQWxsb3cgaW5qZWN0ZWQgc2hvd0Vycm9yRGlhbG9nKCkgdG8gcHJldmVudCBkZWZhdWx0IGNvbnNvbGUuZXJyb3IgbG9nZ2luZy5cbiAgLy8gVGhpcyBlbmFibGVzIHJlbmRlcmVycyBsaWtlIFJlYWN0TmF0aXZlIHRvIGJldHRlciBtYW5hZ2UgcmVkYm94IGJlaGF2aW9yLlxuICBpZiAobG9nRXJyb3IgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgZXJyb3IgPSAoY2FwdHVyZWRFcnJvci5lcnJvcjogYW55KTtcbiAgY29uc3Qgc3VwcHJlc3NMb2dnaW5nID0gZXJyb3IgJiYgZXJyb3Iuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZztcbiAgaWYgKHN1cHByZXNzTG9nZ2luZykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3Qge1xuICAgICAgY29tcG9uZW50TmFtZSxcbiAgICAgIGNvbXBvbmVudFN0YWNrLFxuICAgICAgZXJyb3JCb3VuZGFyeU5hbWUsXG4gICAgICBlcnJvckJvdW5kYXJ5Rm91bmQsXG4gICAgICB3aWxsUmV0cnksXG4gICAgfSA9IGNhcHR1cmVkRXJyb3I7XG5cbiAgICBjb25zdCBjb21wb25lbnROYW1lTWVzc2FnZSA9IGNvbXBvbmVudE5hbWVcbiAgICAgID8gYFRoZSBhYm92ZSBlcnJvciBvY2N1cnJlZCBpbiB0aGUgPCR7Y29tcG9uZW50TmFtZX0+IGNvbXBvbmVudDpgXG4gICAgICA6ICdUaGUgYWJvdmUgZXJyb3Igb2NjdXJyZWQgaW4gb25lIG9mIHlvdXIgUmVhY3QgY29tcG9uZW50czonO1xuXG4gICAgbGV0IGVycm9yQm91bmRhcnlNZXNzYWdlO1xuICAgIC8vIGVycm9yQm91bmRhcnlGb3VuZCBjaGVjayBpcyBzdWZmaWNpZW50OyBlcnJvckJvdW5kYXJ5TmFtZSBjaGVjayBpcyB0byBzYXRpc2Z5IEZsb3cuXG4gICAgaWYgKGVycm9yQm91bmRhcnlGb3VuZCAmJiBlcnJvckJvdW5kYXJ5TmFtZSkge1xuICAgICAgaWYgKHdpbGxSZXRyeSkge1xuICAgICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9XG4gICAgICAgICAgYFJlYWN0IHdpbGwgdHJ5IHRvIHJlY3JlYXRlIHRoaXMgY29tcG9uZW50IHRyZWUgZnJvbSBzY3JhdGNoIGAgK1xuICAgICAgICAgIGB1c2luZyB0aGUgZXJyb3IgYm91bmRhcnkgeW91IHByb3ZpZGVkLCAke2Vycm9yQm91bmRhcnlOYW1lfS5gO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3JCb3VuZGFyeU1lc3NhZ2UgPVxuICAgICAgICAgIGBUaGlzIGVycm9yIHdhcyBpbml0aWFsbHkgaGFuZGxlZCBieSB0aGUgZXJyb3IgYm91bmRhcnkgJHtcbiAgICAgICAgICAgIGVycm9yQm91bmRhcnlOYW1lXG4gICAgICAgICAgfS5cXG5gICtcbiAgICAgICAgICBgUmVjcmVhdGluZyB0aGUgdHJlZSBmcm9tIHNjcmF0Y2ggZmFpbGVkIHNvIFJlYWN0IHdpbGwgdW5tb3VudCB0aGUgdHJlZS5gO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvckJvdW5kYXJ5TWVzc2FnZSA9XG4gICAgICAgICdDb25zaWRlciBhZGRpbmcgYW4gZXJyb3IgYm91bmRhcnkgdG8geW91ciB0cmVlIHRvIGN1c3RvbWl6ZSBlcnJvciBoYW5kbGluZyBiZWhhdmlvci5cXG4nICtcbiAgICAgICAgJ1Zpc2l0IGh0dHBzOi8vZmIubWUvcmVhY3QtZXJyb3ItYm91bmRhcmllcyB0byBsZWFybiBtb3JlIGFib3V0IGVycm9yIGJvdW5kYXJpZXMuJztcbiAgICB9XG4gICAgY29uc3QgY29tYmluZWRNZXNzYWdlID1cbiAgICAgIGAke2NvbXBvbmVudE5hbWVNZXNzYWdlfSR7Y29tcG9uZW50U3RhY2t9XFxuXFxuYCArXG4gICAgICBgJHtlcnJvckJvdW5kYXJ5TWVzc2FnZX1gO1xuXG4gICAgLy8gSW4gZGV2ZWxvcG1lbnQsIHdlIHByb3ZpZGUgb3VyIG93biBtZXNzYWdlIHdpdGgganVzdCB0aGUgY29tcG9uZW50IHN0YWNrLlxuICAgIC8vIFdlIGRvbid0IGluY2x1ZGUgdGhlIG9yaWdpbmFsIGVycm9yIG1lc3NhZ2UgYW5kIEpTIHN0YWNrIGJlY2F1c2UgdGhlIGJyb3dzZXJcbiAgICAvLyBoYXMgYWxyZWFkeSBwcmludGVkIGl0LiBFdmVuIGlmIHRoZSBhcHBsaWNhdGlvbiBzd2FsbG93cyB0aGUgZXJyb3IsIGl0IGlzIHN0aWxsXG4gICAgLy8gZGlzcGxheWVkIGJ5IHRoZSBicm93c2VyIHRoYW5rcyB0byB0aGUgREVWLW9ubHkgZmFrZSBldmVudCB0cmljayBpbiBSZWFjdEVycm9yVXRpbHMuXG4gICAgY29uc29sZS5lcnJvcihjb21iaW5lZE1lc3NhZ2UpO1xuICB9IGVsc2Uge1xuICAgIC8vIEluIHByb2R1Y3Rpb24sIHdlIHByaW50IHRoZSBlcnJvciBkaXJlY3RseS5cbiAgICAvLyBUaGlzIHdpbGwgaW5jbHVkZSB0aGUgbWVzc2FnZSwgdGhlIEpTIHN0YWNrLCBhbmQgYW55dGhpbmcgdGhlIGJyb3dzZXIgd2FudHMgdG8gc2hvdy5cbiAgICAvLyBXZSBwYXNzIHRoZSBlcnJvciBvYmplY3QgaW5zdGVhZCBvZiBjdXN0b20gbWVzc2FnZSBzbyB0aGF0IHRoZSBicm93c2VyIGRpc3BsYXlzIHRoZSBlcnJvciBuYXRpdmVseS5cbiAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgfVxufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Never = exports.Sync = exports.NoWork = undefined;\nexports.msToExpirationTime = msToExpirationTime;\nexports.expirationTimeToMs = expirationTimeToMs;\nexports.computeExpirationBucket = computeExpirationBucket;\n\nvar _maxSigned31BitInt = require('./maxSigned31BitInt');\n\nvar _maxSigned31BitInt2 = _interopRequireDefault(_maxSigned31BitInt);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// TODO: Use an opaque type once ESLint et al support the syntax\nvar NoWork = exports.NoWork = 0; /**\n                                  * Copyright (c) 2013-present, Facebook, Inc.\n                                  *\n                                  * This source code is licensed under the MIT license found in the\n                                  * LICENSE file in the root directory of this source tree.\n                                  *\n                                  * \n                                  */\n\nvar Sync = exports.Sync = 1;\nvar Never = exports.Never = _maxSigned31BitInt2.default;\n\nvar UNIT_SIZE = 10;\nvar MAGIC_NUMBER_OFFSET = 2;\n\n// 1 unit of expiration time represents 10ms.\nfunction msToExpirationTime(ms) {\n  // Always add an offset so that we don't clash with the magic number for NoWork.\n  return (ms / UNIT_SIZE | 0) + MAGIC_NUMBER_OFFSET;\n}\n\nfunction expirationTimeToMs(expirationTime) {\n  return (expirationTime - MAGIC_NUMBER_OFFSET) * UNIT_SIZE;\n}\n\nfunction ceiling(num, precision) {\n  return ((num / precision | 0) + 1) * precision;\n}\n\nfunction computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {\n  return ceiling(currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyRXhwaXJhdGlvblRpbWUuanMiXSwibmFtZXMiOlsibXNUb0V4cGlyYXRpb25UaW1lIiwiZXhwaXJhdGlvblRpbWVUb01zIiwiY29tcHV0ZUV4cGlyYXRpb25CdWNrZXQiLCJOb1dvcmsiLCJTeW5jIiwiTmV2ZXIiLCJNQVhfU0lHTkVEXzMxX0JJVF9JTlQiLCJVTklUX1NJWkUiLCJNQUdJQ19OVU1CRVJfT0ZGU0VUIiwibXMiLCJleHBpcmF0aW9uVGltZSIsImNlaWxpbmciLCJudW0iLCJwcmVjaXNpb24iLCJjdXJyZW50VGltZSIsImV4cGlyYXRpb25Jbk1zIiwiYnVja2V0U2l6ZU1zIl0sIm1hcHBpbmdzIjoiOzs7Ozs7UUFzQmdCQSxrQixHQUFBQSxrQjtRQUtBQyxrQixHQUFBQSxrQjtRQVFBQyx1QixHQUFBQSx1Qjs7QUExQmhCOzs7Ozs7QUFFQTtBQUdPLElBQU1DLDBCQUFTLENBQWYsQyxDQWRQOzs7Ozs7Ozs7QUFlTyxJQUFNQyxzQkFBTyxDQUFiO0FBQ0EsSUFBTUMsd0JBQVFDLDJCQUFkOztBQUVQLElBQU1DLFlBQVksRUFBbEI7QUFDQSxJQUFNQyxzQkFBc0IsQ0FBNUI7O0FBRUE7QUFDTyxTQUFTUixrQkFBVCxDQUE0QlMsRUFBNUIsRUFBd0Q7QUFDN0Q7QUFDQSxTQUFPLENBQUVBLEtBQUtGLFNBQU4sR0FBbUIsQ0FBcEIsSUFBeUJDLG1CQUFoQztBQUNEOztBQUVNLFNBQVNQLGtCQUFULENBQTRCUyxjQUE1QixFQUFvRTtBQUN6RSxTQUFPLENBQUNBLGlCQUFpQkYsbUJBQWxCLElBQXlDRCxTQUFoRDtBQUNEOztBQUVELFNBQVNJLE9BQVQsQ0FBaUJDLEdBQWpCLEVBQThCQyxTQUE5QixFQUF5RDtBQUN2RCxTQUFPLENBQUMsQ0FBRUQsTUFBTUMsU0FBUCxHQUFvQixDQUFyQixJQUEwQixDQUEzQixJQUFnQ0EsU0FBdkM7QUFDRDs7QUFFTSxTQUFTWCx1QkFBVCxDQUNMWSxXQURLLEVBRUxDLGNBRkssRUFHTEMsWUFISyxFQUlXO0FBQ2hCLFNBQU9MLFFBQ0xHLGNBQWNDLGlCQUFpQlIsU0FEMUIsRUFFTFMsZUFBZVQsU0FGVixDQUFQO0FBSUQiLCJmaWxlIjoiUmVhY3RGaWJlckV4cGlyYXRpb25UaW1lLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgTUFYX1NJR05FRF8zMV9CSVRfSU5UIGZyb20gJy4vbWF4U2lnbmVkMzFCaXRJbnQnO1xuXG4vLyBUT0RPOiBVc2UgYW4gb3BhcXVlIHR5cGUgb25jZSBFU0xpbnQgZXQgYWwgc3VwcG9ydCB0aGUgc3ludGF4XG5leHBvcnQgdHlwZSBFeHBpcmF0aW9uVGltZSA9IG51bWJlcjtcblxuZXhwb3J0IGNvbnN0IE5vV29yayA9IDA7XG5leHBvcnQgY29uc3QgU3luYyA9IDE7XG5leHBvcnQgY29uc3QgTmV2ZXIgPSBNQVhfU0lHTkVEXzMxX0JJVF9JTlQ7XG5cbmNvbnN0IFVOSVRfU0laRSA9IDEwO1xuY29uc3QgTUFHSUNfTlVNQkVSX09GRlNFVCA9IDI7XG5cbi8vIDEgdW5pdCBvZiBleHBpcmF0aW9uIHRpbWUgcmVwcmVzZW50cyAxMG1zLlxuZXhwb3J0IGZ1bmN0aW9uIG1zVG9FeHBpcmF0aW9uVGltZShtczogbnVtYmVyKTogRXhwaXJhdGlvblRpbWUge1xuICAvLyBBbHdheXMgYWRkIGFuIG9mZnNldCBzbyB0aGF0IHdlIGRvbid0IGNsYXNoIHdpdGggdGhlIG1hZ2ljIG51bWJlciBmb3IgTm9Xb3JrLlxuICByZXR1cm4gKChtcyAvIFVOSVRfU0laRSkgfCAwKSArIE1BR0lDX05VTUJFUl9PRkZTRVQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHBpcmF0aW9uVGltZVRvTXMoZXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lKTogbnVtYmVyIHtcbiAgcmV0dXJuIChleHBpcmF0aW9uVGltZSAtIE1BR0lDX05VTUJFUl9PRkZTRVQpICogVU5JVF9TSVpFO1xufVxuXG5mdW5jdGlvbiBjZWlsaW5nKG51bTogbnVtYmVyLCBwcmVjaXNpb246IG51bWJlcik6IG51bWJlciB7XG4gIHJldHVybiAoKChudW0gLyBwcmVjaXNpb24pIHwgMCkgKyAxKSAqIHByZWNpc2lvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVFeHBpcmF0aW9uQnVja2V0KFxuICBjdXJyZW50VGltZTogRXhwaXJhdGlvblRpbWUsXG4gIGV4cGlyYXRpb25Jbk1zOiBudW1iZXIsXG4gIGJ1Y2tldFNpemVNczogbnVtYmVyLFxuKTogRXhwaXJhdGlvblRpbWUge1xuICByZXR1cm4gY2VpbGluZyhcbiAgICBjdXJyZW50VGltZSArIGV4cGlyYXRpb25Jbk1zIC8gVU5JVF9TSVpFLFxuICAgIGJ1Y2tldFNpemVNcyAvIFVOSVRfU0laRSxcbiAgKTtcbn1cbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config, stack) {\n  var getChildHostContext = config.getChildHostContext,\n      getRootHostContext = config.getRootHostContext;\n  var createCursor = stack.createCursor,\n      push = stack.push,\n      pop = stack.pop;\n\n\n  var contextStackCursor = createCursor(NO_CONTEXT);\n  var contextFiberStackCursor = createCursor(NO_CONTEXT);\n  var rootInstanceStackCursor = createCursor(NO_CONTEXT);\n\n  function requiredContext(c) {\n    (0, _invariant2.default)(c !== NO_CONTEXT, 'Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    return c;\n  }\n\n  function getRootHostContainer() {\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\n    return rootInstance;\n  }\n\n  function pushHostContainer(fiber, nextRootInstance) {\n    // Push current root instance onto the stack;\n    // This allows us to reset root when portals are popped.\n    push(rootInstanceStackCursor, nextRootInstance, fiber);\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n\n    // Finally, we need to push the host context to the stack.\n    // However, we can't just call getRootHostContext() and push it because\n    // we'd have a different number of entries on the stack depending on\n    // whether getRootHostContext() throws somewhere in renderer code or not.\n    // So we push an empty value first. This lets us safely unwind on errors.\n    push(contextStackCursor, NO_CONTEXT, fiber);\n    var nextRootContext = getRootHostContext(nextRootInstance);\n    // Now that we know this function doesn't throw, replace it.\n    pop(contextStackCursor, fiber);\n    push(contextStackCursor, nextRootContext, fiber);\n  }\n\n  function popHostContainer(fiber) {\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n    pop(rootInstanceStackCursor, fiber);\n  }\n\n  function getHostContext() {\n    var context = requiredContext(contextStackCursor.current);\n    return context;\n  }\n\n  function pushHostContext(fiber) {\n    var rootInstance = requiredContext(rootInstanceStackCursor.current);\n    var context = requiredContext(contextStackCursor.current);\n    var nextContext = getChildHostContext(context, fiber.type, rootInstance);\n\n    // Don't push this Fiber's context unless it's unique.\n    if (context === nextContext) {\n      return;\n    }\n\n    // Track the context and the Fiber that provided it.\n    // This enables us to pop only Fibers that provide unique contexts.\n    push(contextFiberStackCursor, fiber, fiber);\n    push(contextStackCursor, nextContext, fiber);\n  }\n\n  function popHostContext(fiber) {\n    // Do not pop unless this Fiber provided the current context.\n    // pushHostContext() only pushes Fibers that provide unique contexts.\n    if (contextFiberStackCursor.current !== fiber) {\n      return;\n    }\n\n    pop(contextStackCursor, fiber);\n    pop(contextFiberStackCursor, fiber);\n  }\n\n  return {\n    getHostContext: getHostContext,\n    getRootHostContainer: getRootHostContainer,\n    popHostContainer: popHostContainer,\n    popHostContext: popHostContext,\n    pushHostContainer: pushHostContainer,\n    pushHostContext: pushHostContext\n  };\n};\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar NO_CONTEXT = {};\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config) {\n  var shouldSetTextContent = config.shouldSetTextContent,\n      hydration = config.hydration;\n\n  // If this doesn't have hydration mode.\n\n  if (!hydration) {\n    return {\n      enterHydrationState: function enterHydrationState() {\n        return false;\n      },\n      resetHydrationState: function resetHydrationState() {},\n      tryToClaimNextHydratableInstance: function tryToClaimNextHydratableInstance() {},\n      prepareToHydrateHostInstance: function prepareToHydrateHostInstance() {\n        (0, _invariant2.default)(false, 'Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      },\n      prepareToHydrateHostTextInstance: function prepareToHydrateHostTextInstance() {\n        (0, _invariant2.default)(false, 'Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');\n      },\n      popHydrationState: function popHydrationState(fiber) {\n        return false;\n      }\n    };\n  }\n\n  var canHydrateInstance = hydration.canHydrateInstance,\n      canHydrateTextInstance = hydration.canHydrateTextInstance,\n      getNextHydratableSibling = hydration.getNextHydratableSibling,\n      getFirstHydratableChild = hydration.getFirstHydratableChild,\n      hydrateInstance = hydration.hydrateInstance,\n      hydrateTextInstance = hydration.hydrateTextInstance,\n      didNotMatchHydratedContainerTextInstance = hydration.didNotMatchHydratedContainerTextInstance,\n      didNotMatchHydratedTextInstance = hydration.didNotMatchHydratedTextInstance,\n      didNotHydrateContainerInstance = hydration.didNotHydrateContainerInstance,\n      didNotHydrateInstance = hydration.didNotHydrateInstance,\n      didNotFindHydratableContainerInstance = hydration.didNotFindHydratableContainerInstance,\n      didNotFindHydratableContainerTextInstance = hydration.didNotFindHydratableContainerTextInstance,\n      didNotFindHydratableInstance = hydration.didNotFindHydratableInstance,\n      didNotFindHydratableTextInstance = hydration.didNotFindHydratableTextInstance;\n\n  // The deepest Fiber on the stack involved in a hydration context.\n  // This may have been an insertion or a hydration.\n\n  var hydrationParentFiber = null;\n  var nextHydratableInstance = null;\n  var isHydrating = false;\n\n  function enterHydrationState(fiber) {\n    var parentInstance = fiber.stateNode.containerInfo;\n    nextHydratableInstance = getFirstHydratableChild(parentInstance);\n    hydrationParentFiber = fiber;\n    isHydrating = true;\n    return true;\n  }\n\n  function deleteHydratableInstance(returnFiber, instance) {\n    if (__DEV__) {\n      switch (returnFiber.tag) {\n        case _ReactTypeOfWork.HostRoot:\n          didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);\n          break;\n        case _ReactTypeOfWork.HostComponent:\n          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);\n          break;\n      }\n    }\n\n    var childToDelete = (0, _ReactFiber.createFiberFromHostInstanceForDeletion)();\n    childToDelete.stateNode = instance;\n    childToDelete.return = returnFiber;\n    childToDelete.effectTag = _ReactTypeOfSideEffect.Deletion;\n\n    // This might seem like it belongs on progressedFirstDeletion. However,\n    // these children are not part of the reconciliation list of children.\n    // Even if we abort and rereconcile the children, that will try to hydrate\n    // again and the nodes are still in the host tree so these will be\n    // recreated.\n    if (returnFiber.lastEffect !== null) {\n      returnFiber.lastEffect.nextEffect = childToDelete;\n      returnFiber.lastEffect = childToDelete;\n    } else {\n      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;\n    }\n  }\n\n  function insertNonHydratedInstance(returnFiber, fiber) {\n    fiber.effectTag |= _ReactTypeOfSideEffect.Placement;\n    if (__DEV__) {\n      switch (returnFiber.tag) {\n        case _ReactTypeOfWork.HostRoot:\n          {\n            var parentContainer = returnFiber.stateNode.containerInfo;\n            switch (fiber.tag) {\n              case _ReactTypeOfWork.HostComponent:\n                var type = fiber.type;\n                var props = fiber.pendingProps;\n                didNotFindHydratableContainerInstance(parentContainer, type, props);\n                break;\n              case _ReactTypeOfWork.HostText:\n                var text = fiber.pendingProps;\n                didNotFindHydratableContainerTextInstance(parentContainer, text);\n                break;\n            }\n            break;\n          }\n        case _ReactTypeOfWork.HostComponent:\n          {\n            var parentType = returnFiber.type;\n            var parentProps = returnFiber.memoizedProps;\n            var parentInstance = returnFiber.stateNode;\n            switch (fiber.tag) {\n              case _ReactTypeOfWork.HostComponent:\n                var _type = fiber.type;\n                var _props = fiber.pendingProps;\n                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);\n                break;\n              case _ReactTypeOfWork.HostText:\n                var _text = fiber.pendingProps;\n                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);\n                break;\n            }\n            break;\n          }\n        default:\n          return;\n      }\n    }\n  }\n\n  function tryHydrate(fiber, nextInstance) {\n    switch (fiber.tag) {\n      case _ReactTypeOfWork.HostComponent:\n        {\n          var type = fiber.type;\n          var props = fiber.pendingProps;\n          var instance = canHydrateInstance(nextInstance, type, props);\n          if (instance !== null) {\n            fiber.stateNode = instance;\n            return true;\n          }\n          return false;\n        }\n      case _ReactTypeOfWork.HostText:\n        {\n          var text = fiber.pendingProps;\n          var textInstance = canHydrateTextInstance(nextInstance, text);\n          if (textInstance !== null) {\n            fiber.stateNode = textInstance;\n            return true;\n          }\n          return false;\n        }\n      default:\n        return false;\n    }\n  }\n\n  function tryToClaimNextHydratableInstance(fiber) {\n    if (!isHydrating) {\n      return;\n    }\n    var nextInstance = nextHydratableInstance;\n    if (!nextInstance) {\n      // Nothing to hydrate. Make it an insertion.\n      insertNonHydratedInstance(hydrationParentFiber, fiber);\n      isHydrating = false;\n      hydrationParentFiber = fiber;\n      return;\n    }\n    if (!tryHydrate(fiber, nextInstance)) {\n      // If we can't hydrate this instance let's try the next one.\n      // We use this as a heuristic. It's based on intuition and not data so it\n      // might be flawed or unnecessary.\n      nextInstance = getNextHydratableSibling(nextInstance);\n      if (!nextInstance || !tryHydrate(fiber, nextInstance)) {\n        // Nothing to hydrate. Make it an insertion.\n        insertNonHydratedInstance(hydrationParentFiber, fiber);\n        isHydrating = false;\n        hydrationParentFiber = fiber;\n        return;\n      }\n      // We matched the next one, we'll now assume that the first one was\n      // superfluous and we'll delete it. Since we can't eagerly delete it\n      // we'll have to schedule a deletion. To do that, this node needs a dummy\n      // fiber associated with it.\n      deleteHydratableInstance(hydrationParentFiber, nextHydratableInstance);\n    }\n    hydrationParentFiber = fiber;\n    nextHydratableInstance = getFirstHydratableChild(nextInstance);\n  }\n\n  function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {\n    var instance = fiber.stateNode;\n    var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber);\n    // TODO: Type this specific to this type of component.\n    fiber.updateQueue = updatePayload;\n    // If the update payload indicates that there is a change or if there\n    // is a new ref we mark this as an update.\n    if (updatePayload !== null) {\n      return true;\n    }\n    return false;\n  }\n\n  function prepareToHydrateHostTextInstance(fiber) {\n    var textInstance = fiber.stateNode;\n    var textContent = fiber.memoizedProps;\n    var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);\n    if (__DEV__) {\n      if (shouldUpdate) {\n        // We assume that prepareToHydrateHostTextInstance is called in a context where the\n        // hydration parent is the parent host component of this host text.\n        var returnFiber = hydrationParentFiber;\n        if (returnFiber !== null) {\n          switch (returnFiber.tag) {\n            case _ReactTypeOfWork.HostRoot:\n              {\n                var parentContainer = returnFiber.stateNode.containerInfo;\n                didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);\n                break;\n              }\n            case _ReactTypeOfWork.HostComponent:\n              {\n                var parentType = returnFiber.type;\n                var parentProps = returnFiber.memoizedProps;\n                var parentInstance = returnFiber.stateNode;\n                didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);\n                break;\n              }\n          }\n        }\n      }\n    }\n    return shouldUpdate;\n  }\n\n  function popToNextHostParent(fiber) {\n    var parent = fiber.return;\n    while (parent !== null && parent.tag !== _ReactTypeOfWork.HostComponent && parent.tag !== _ReactTypeOfWork.HostRoot) {\n      parent = parent.return;\n    }\n    hydrationParentFiber = parent;\n  }\n\n  function popHydrationState(fiber) {\n    if (fiber !== hydrationParentFiber) {\n      // We're deeper than the current hydration context, inside an inserted\n      // tree.\n      return false;\n    }\n    if (!isHydrating) {\n      // If we're not currently hydrating but we're in a hydration context, then\n      // we were an insertion and now need to pop up reenter hydration of our\n      // siblings.\n      popToNextHostParent(fiber);\n      isHydrating = true;\n      return false;\n    }\n\n    var type = fiber.type;\n\n    // If we have any remaining hydratable nodes, we need to delete them now.\n    // We only do this deeper than head and body since they tend to have random\n    // other nodes in them. We also ignore components with pure text content in\n    // side of them.\n    // TODO: Better heuristic.\n    if (fiber.tag !== _ReactTypeOfWork.HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {\n      var nextInstance = nextHydratableInstance;\n      while (nextInstance) {\n        deleteHydratableInstance(fiber, nextInstance);\n        nextInstance = getNextHydratableSibling(nextInstance);\n      }\n    }\n\n    popToNextHostParent(fiber);\n    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;\n    return true;\n  }\n\n  function resetHydrationState() {\n    hydrationParentFiber = null;\n    nextHydratableInstance = null;\n    isHydrating = false;\n  }\n\n  return {\n    enterHydrationState: enterHydrationState,\n    resetHydrationState: resetHydrationState,\n    tryToClaimNextHydratableInstance: tryToClaimNextHydratableInstance,\n    prepareToHydrateHostInstance: prepareToHydrateHostInstance,\n    prepareToHydrateHostTextInstance: prepareToHydrateHostTextInstance,\n    popHydrationState: popHydrationState\n  };\n};\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _ReactFiber = require('./ReactFiber');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default']; /**\n                                      * Copyright (c) 2013-present, Facebook, Inc.\n                                      *\n                                      * This source code is licensed under the MIT license found in the\n                                      * LICENSE file in the root directory of this source tree.\n                                      *\n                                      * \n                                      */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// This lets us hook into Fiber to debug what it's doing.\n// See https://github.com/facebook/react/pull/8033.\n// This is not part of the public API, not even for React DevTools.\n// You may only inject a debugTool if you work on React Fiber itself.\nvar ReactFiberInstrumentation = {\n  debugTool: null\n};\n\nmodule.exports = ReactFiberInstrumentation;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmpzIl0sIm5hbWVzIjpbIlJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24iLCJkZWJ1Z1Rvb2wiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQU1BLDRCQUE0QjtBQUNoQ0MsYUFBVztBQURxQixDQUFsQzs7QUFJQUMsT0FBT0MsT0FBUCxHQUFpQkgseUJBQWpCIiwiZmlsZSI6IlJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24uanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbi8vIFRoaXMgbGV0cyB1cyBob29rIGludG8gRmliZXIgdG8gZGVidWcgd2hhdCBpdCdzIGRvaW5nLlxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9wdWxsLzgwMzMuXG4vLyBUaGlzIGlzIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJLCBub3QgZXZlbiBmb3IgUmVhY3QgRGV2VG9vbHMuXG4vLyBZb3UgbWF5IG9ubHkgaW5qZWN0IGEgZGVidWdUb29sIGlmIHlvdSB3b3JrIG9uIFJlYWN0IEZpYmVyIGl0c2VsZi5cbmNvbnN0IFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24gPSB7XG4gIGRlYnVnVG9vbDogbnVsbCxcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbjtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (stack) {\n  var createCursor = stack.createCursor,\n      push = stack.push,\n      pop = stack.pop;\n\n\n  var providerCursor = createCursor(null);\n  var valueCursor = createCursor(null);\n  var changedBitsCursor = createCursor(0);\n\n  var rendererSigil = void 0;\n  if (__DEV__) {\n    // Use this to detect multiple renderers using the same context\n    rendererSigil = {};\n  }\n\n  function pushProvider(providerFiber) {\n    var context = providerFiber.type._context;\n\n    push(changedBitsCursor, context._changedBits, providerFiber);\n    push(valueCursor, context._currentValue, providerFiber);\n    push(providerCursor, providerFiber, providerFiber);\n\n    context._currentValue = providerFiber.pendingProps.value;\n    context._changedBits = providerFiber.stateNode;\n\n    if (__DEV__) {\n      (0, _warning2.default)(context._currentRenderer === null || context._currentRenderer === rendererSigil, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');\n      context._currentRenderer = rendererSigil;\n    }\n  }\n\n  function popProvider(providerFiber) {\n    var changedBits = changedBitsCursor.current;\n    var currentValue = valueCursor.current;\n\n    pop(providerCursor, providerFiber);\n    pop(valueCursor, providerFiber);\n    pop(changedBitsCursor, providerFiber);\n\n    var context = providerFiber.type._context;\n    context._currentValue = currentValue;\n    context._changedBits = changedBits;\n  }\n\n  return {\n    pushProvider: pushProvider,\n    popProvider: popProvider\n  };\n};\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default']; /**\n                                      * Copyright (c) 2013-present, Facebook, Inc.\n                                      *\n                                      * This source code is licensed under the MIT license found in the\n                                      * LICENSE file in the root directory of this source tree.\n                                      *\n                                      * \n                                      */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyTmV3Q29udGV4dC5qcyJdLCJuYW1lcyI6WyJzdGFjayIsImNyZWF0ZUN1cnNvciIsInB1c2giLCJwb3AiLCJwcm92aWRlckN1cnNvciIsInZhbHVlQ3Vyc29yIiwiY2hhbmdlZEJpdHNDdXJzb3IiLCJyZW5kZXJlclNpZ2lsIiwiX19ERVZfXyIsInB1c2hQcm92aWRlciIsInByb3ZpZGVyRmliZXIiLCJjb250ZXh0IiwidHlwZSIsIl9jb250ZXh0IiwiX2NoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsInBlbmRpbmdQcm9wcyIsInZhbHVlIiwic3RhdGVOb2RlIiwiX2N1cnJlbnRSZW5kZXJlciIsInBvcFByb3ZpZGVyIiwiY2hhbmdlZEJpdHMiLCJjdXJyZW50IiwiY3VycmVudFZhbHVlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a0JBb0JlLFVBQVNBLEtBQVQsRUFBdUI7QUFBQSxNQUM3QkMsWUFENkIsR0FDRkQsS0FERSxDQUM3QkMsWUFENkI7QUFBQSxNQUNmQyxJQURlLEdBQ0ZGLEtBREUsQ0FDZkUsSUFEZTtBQUFBLE1BQ1RDLEdBRFMsR0FDRkgsS0FERSxDQUNURyxHQURTOzs7QUFHcEMsTUFBTUMsaUJBQTRDSCxhQUFhLElBQWIsQ0FBbEQ7QUFDQSxNQUFNSSxjQUFrQ0osYUFBYSxJQUFiLENBQXhDO0FBQ0EsTUFBTUssb0JBQXlDTCxhQUFhLENBQWIsQ0FBL0M7O0FBRUEsTUFBSU0sc0JBQUo7QUFDQSxNQUFJQyxPQUFKLEVBQWE7QUFDWDtBQUNBRCxvQkFBZ0IsRUFBaEI7QUFDRDs7QUFFRCxXQUFTRSxZQUFULENBQXNCQyxhQUF0QixFQUFrRDtBQUNoRCxRQUFNQyxVQUE2QkQsY0FBY0UsSUFBZCxDQUFtQkMsUUFBdEQ7O0FBRUFYLFNBQUtJLGlCQUFMLEVBQXdCSyxRQUFRRyxZQUFoQyxFQUE4Q0osYUFBOUM7QUFDQVIsU0FBS0csV0FBTCxFQUFrQk0sUUFBUUksYUFBMUIsRUFBeUNMLGFBQXpDO0FBQ0FSLFNBQUtFLGNBQUwsRUFBcUJNLGFBQXJCLEVBQW9DQSxhQUFwQzs7QUFFQUMsWUFBUUksYUFBUixHQUF3QkwsY0FBY00sWUFBZCxDQUEyQkMsS0FBbkQ7QUFDQU4sWUFBUUcsWUFBUixHQUF1QkosY0FBY1EsU0FBckM7O0FBRUEsUUFBSVYsT0FBSixFQUFhO0FBQ1gsNkJBQ0VHLFFBQVFRLGdCQUFSLEtBQTZCLElBQTdCLElBQ0VSLFFBQVFRLGdCQUFSLEtBQTZCWixhQUZqQyxFQUdFLDREQUNFLHVEQUpKO0FBTUFJLGNBQVFRLGdCQUFSLEdBQTJCWixhQUEzQjtBQUNEO0FBQ0Y7O0FBRUQsV0FBU2EsV0FBVCxDQUFxQlYsYUFBckIsRUFBaUQ7QUFDL0MsUUFBTVcsY0FBY2Ysa0JBQWtCZ0IsT0FBdEM7QUFDQSxRQUFNQyxlQUFlbEIsWUFBWWlCLE9BQWpDOztBQUVBbkIsUUFBSUMsY0FBSixFQUFvQk0sYUFBcEI7QUFDQVAsUUFBSUUsV0FBSixFQUFpQkssYUFBakI7QUFDQVAsUUFBSUcsaUJBQUosRUFBdUJJLGFBQXZCOztBQUVBLFFBQU1DLFVBQTZCRCxjQUFjRSxJQUFkLENBQW1CQyxRQUF0RDtBQUNBRixZQUFRSSxhQUFSLEdBQXdCUSxZQUF4QjtBQUNBWixZQUFRRyxZQUFSLEdBQXVCTyxXQUF2QjtBQUNEOztBQUVELFNBQU87QUFDTFosOEJBREs7QUFFTFc7QUFGSyxHQUFQO0FBSUQsQzs7QUExREQ7Ozs7OztxQ0FiQSIsImZpbGUiOiJSZWFjdEZpYmVyTmV3Q29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0ZpYmVyfSBmcm9tICcuL1JlYWN0RmliZXInO1xuaW1wb3J0IHR5cGUge1JlYWN0Q29udGV4dH0gZnJvbSAnc2hhcmVkL1JlYWN0VHlwZXMnO1xuaW1wb3J0IHR5cGUge1N0YWNrQ3Vyc29yLCBTdGFja30gZnJvbSAnLi9SZWFjdEZpYmVyU3RhY2snO1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICdmYmpzL2xpYi93YXJuaW5nJztcblxuZXhwb3J0IHR5cGUgTmV3Q29udGV4dCA9IHtcbiAgcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXI6IEZpYmVyKTogdm9pZCxcbiAgcG9wUHJvdmlkZXIocHJvdmlkZXJGaWJlcjogRmliZXIpOiB2b2lkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oc3RhY2s6IFN0YWNrKSB7XG4gIGNvbnN0IHtjcmVhdGVDdXJzb3IsIHB1c2gsIHBvcH0gPSBzdGFjaztcblxuICBjb25zdCBwcm92aWRlckN1cnNvcjogU3RhY2tDdXJzb3I8RmliZXIgfCBudWxsPiA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbiAgY29uc3QgdmFsdWVDdXJzb3I6IFN0YWNrQ3Vyc29yPG1peGVkPiA9IGNyZWF0ZUN1cnNvcihudWxsKTtcbiAgY29uc3QgY2hhbmdlZEJpdHNDdXJzb3I6IFN0YWNrQ3Vyc29yPG51bWJlcj4gPSBjcmVhdGVDdXJzb3IoMCk7XG5cbiAgbGV0IHJlbmRlcmVyU2lnaWw7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgLy8gVXNlIHRoaXMgdG8gZGV0ZWN0IG11bHRpcGxlIHJlbmRlcmVycyB1c2luZyB0aGUgc2FtZSBjb250ZXh0XG4gICAgcmVuZGVyZXJTaWdpbCA9IHt9O1xuICB9XG5cbiAgZnVuY3Rpb24gcHVzaFByb3ZpZGVyKHByb3ZpZGVyRmliZXI6IEZpYmVyKTogdm9pZCB7XG4gICAgY29uc3QgY29udGV4dDogUmVhY3RDb250ZXh0PGFueT4gPSBwcm92aWRlckZpYmVyLnR5cGUuX2NvbnRleHQ7XG5cbiAgICBwdXNoKGNoYW5nZWRCaXRzQ3Vyc29yLCBjb250ZXh0Ll9jaGFuZ2VkQml0cywgcHJvdmlkZXJGaWJlcik7XG4gICAgcHVzaCh2YWx1ZUN1cnNvciwgY29udGV4dC5fY3VycmVudFZhbHVlLCBwcm92aWRlckZpYmVyKTtcbiAgICBwdXNoKHByb3ZpZGVyQ3Vyc29yLCBwcm92aWRlckZpYmVyLCBwcm92aWRlckZpYmVyKTtcblxuICAgIGNvbnRleHQuX2N1cnJlbnRWYWx1ZSA9IHByb3ZpZGVyRmliZXIucGVuZGluZ1Byb3BzLnZhbHVlO1xuICAgIGNvbnRleHQuX2NoYW5nZWRCaXRzID0gcHJvdmlkZXJGaWJlci5zdGF0ZU5vZGU7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID09PSBudWxsIHx8XG4gICAgICAgICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID09PSByZW5kZXJlclNpZ2lsLFxuICAgICAgICAnRGV0ZWN0ZWQgbXVsdGlwbGUgcmVuZGVyZXJzIGNvbmN1cnJlbnRseSByZW5kZXJpbmcgdGhlICcgK1xuICAgICAgICAgICdzYW1lIGNvbnRleHQgcHJvdmlkZXIuIFRoaXMgaXMgY3VycmVudGx5IHVuc3VwcG9ydGVkLicsXG4gICAgICApO1xuICAgICAgY29udGV4dC5fY3VycmVudFJlbmRlcmVyID0gcmVuZGVyZXJTaWdpbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwb3BQcm92aWRlcihwcm92aWRlckZpYmVyOiBGaWJlcik6IHZvaWQge1xuICAgIGNvbnN0IGNoYW5nZWRCaXRzID0gY2hhbmdlZEJpdHNDdXJzb3IuY3VycmVudDtcbiAgICBjb25zdCBjdXJyZW50VmFsdWUgPSB2YWx1ZUN1cnNvci5jdXJyZW50O1xuXG4gICAgcG9wKHByb3ZpZGVyQ3Vyc29yLCBwcm92aWRlckZpYmVyKTtcbiAgICBwb3AodmFsdWVDdXJzb3IsIHByb3ZpZGVyRmliZXIpO1xuICAgIHBvcChjaGFuZ2VkQml0c0N1cnNvciwgcHJvdmlkZXJGaWJlcik7XG5cbiAgICBjb25zdCBjb250ZXh0OiBSZWFjdENvbnRleHQ8YW55PiA9IHByb3ZpZGVyRmliZXIudHlwZS5fY29udGV4dDtcbiAgICBjb250ZXh0Ll9jdXJyZW50VmFsdWUgPSBjdXJyZW50VmFsdWU7XG4gICAgY29udGV4dC5fY2hhbmdlZEJpdHMgPSBjaGFuZ2VkQml0cztcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcHVzaFByb3ZpZGVyLFxuICAgIHBvcFByb3ZpZGVyLFxuICB9O1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; /**\n                                                                                                                                                                                                                                                                   * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                   * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                   *\n                                                                                                                                                                                                                                                                   * \n                                                                                                                                                                                                                                                                   */\n\nexports.default = function (config) {\n  var getPublicInstance = config.getPublicInstance;\n\n  var _ReactFiberScheduler = (0, _ReactFiberScheduler3.default)(config),\n      computeUniqueAsyncExpiration = _ReactFiberScheduler.computeUniqueAsyncExpiration,\n      recalculateCurrentTime = _ReactFiberScheduler.recalculateCurrentTime,\n      computeExpirationForFiber = _ReactFiberScheduler.computeExpirationForFiber,\n      scheduleWork = _ReactFiberScheduler.scheduleWork,\n      requestWork = _ReactFiberScheduler.requestWork,\n      flushRoot = _ReactFiberScheduler.flushRoot,\n      batchedUpdates = _ReactFiberScheduler.batchedUpdates,\n      unbatchedUpdates = _ReactFiberScheduler.unbatchedUpdates,\n      flushSync = _ReactFiberScheduler.flushSync,\n      flushControlled = _ReactFiberScheduler.flushControlled,\n      deferredUpdates = _ReactFiberScheduler.deferredUpdates,\n      syncUpdates = _ReactFiberScheduler.syncUpdates,\n      interactiveUpdates = _ReactFiberScheduler.interactiveUpdates,\n      flushInteractiveUpdates = _ReactFiberScheduler.flushInteractiveUpdates,\n      legacyContext = _ReactFiberScheduler.legacyContext;\n\n  var findCurrentUnmaskedContext = legacyContext.findCurrentUnmaskedContext,\n      isContextProvider = legacyContext.isContextProvider,\n      processChildContext = legacyContext.processChildContext;\n\n\n  function getContextForSubtree(parentComponent) {\n    if (!parentComponent) {\n      return _emptyObject2.default;\n    }\n\n    var fiber = ReactInstanceMap.get(parentComponent);\n    var parentContext = findCurrentUnmaskedContext(fiber);\n    return isContextProvider(fiber) ? processChildContext(fiber, parentContext) : parentContext;\n  }\n\n  function scheduleRootUpdate(current, element, currentTime, expirationTime, callback) {\n    if (__DEV__) {\n      if (_ReactDebugCurrentFiber2.default.phase === 'render' && _ReactDebugCurrentFiber2.default.current !== null && !didWarnAboutNestedUpdates) {\n        didWarnAboutNestedUpdates = true;\n        (0, _warning2.default)(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\\n\\n' + 'Check the render method of %s.', (0, _getComponentName2.default)(_ReactDebugCurrentFiber2.default.current) || 'Unknown');\n      }\n    }\n\n    callback = callback === undefined ? null : callback;\n    if (__DEV__) {\n      (0, _warning2.default)(callback === null || typeof callback === 'function', 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);\n    }\n\n    var update = {\n      expirationTime: expirationTime,\n      partialState: { element: element },\n      callback: callback,\n      isReplace: false,\n      isForced: false,\n      capturedValue: null,\n      next: null\n    };\n    (0, _ReactFiberUpdateQueue.insertUpdateIntoFiber)(current, update);\n    scheduleWork(current, expirationTime);\n\n    return expirationTime;\n  }\n\n  function updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback) {\n    // TODO: If this is a nested container, this won't be the root.\n    var current = container.current;\n\n    if (__DEV__) {\n      if (_ReactFiberInstrumentation2.default.debugTool) {\n        if (current.alternate === null) {\n          _ReactFiberInstrumentation2.default.debugTool.onMountContainer(container);\n        } else if (element === null) {\n          _ReactFiberInstrumentation2.default.debugTool.onUnmountContainer(container);\n        } else {\n          _ReactFiberInstrumentation2.default.debugTool.onUpdateContainer(container);\n        }\n      }\n    }\n\n    var context = getContextForSubtree(parentComponent);\n    if (container.context === null) {\n      container.context = context;\n    } else {\n      container.pendingContext = context;\n    }\n\n    return scheduleRootUpdate(current, element, currentTime, expirationTime, callback);\n  }\n\n  function findHostInstance(fiber) {\n    var hostFiber = (0, _reflection.findCurrentHostFiber)(fiber);\n    if (hostFiber === null) {\n      return null;\n    }\n    return hostFiber.stateNode;\n  }\n\n  return {\n    createContainer: function createContainer(containerInfo, isAsync, hydrate) {\n      return (0, _ReactFiberRoot.createFiberRoot)(containerInfo, isAsync, hydrate);\n    },\n    updateContainer: function updateContainer(element, container, parentComponent, callback) {\n      var current = container.current;\n      var currentTime = recalculateCurrentTime();\n      var expirationTime = computeExpirationForFiber(current);\n      return updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);\n    },\n    updateContainerAtExpirationTime: function (_updateContainerAtExpirationTime) {\n      function updateContainerAtExpirationTime(_x, _x2, _x3, _x4, _x5) {\n        return _updateContainerAtExpirationTime.apply(this, arguments);\n      }\n\n      updateContainerAtExpirationTime.toString = function () {\n        return _updateContainerAtExpirationTime.toString();\n      };\n\n      return updateContainerAtExpirationTime;\n    }(function (element, container, parentComponent, expirationTime, callback) {\n      var currentTime = recalculateCurrentTime();\n      return updateContainerAtExpirationTime(element, container, parentComponent, currentTime, expirationTime, callback);\n    }),\n\n\n    flushRoot: flushRoot,\n\n    requestWork: requestWork,\n\n    computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,\n\n    batchedUpdates: batchedUpdates,\n\n    unbatchedUpdates: unbatchedUpdates,\n\n    deferredUpdates: deferredUpdates,\n\n    syncUpdates: syncUpdates,\n\n    interactiveUpdates: interactiveUpdates,\n\n    flushInteractiveUpdates: flushInteractiveUpdates,\n\n    flushControlled: flushControlled,\n\n    flushSync: flushSync,\n\n    getPublicRootInstance: function getPublicRootInstance(container) {\n      var containerFiber = container.current;\n      if (!containerFiber.child) {\n        return null;\n      }\n      switch (containerFiber.child.tag) {\n        case _ReactTypeOfWork.HostComponent:\n          return getPublicInstance(containerFiber.child.stateNode);\n        default:\n          return containerFiber.child.stateNode;\n      }\n    },\n\n\n    findHostInstance: findHostInstance,\n\n    findHostInstanceWithNoPortals: function findHostInstanceWithNoPortals(fiber) {\n      var hostFiber = (0, _reflection.findCurrentHostFiberWithNoPortals)(fiber);\n      if (hostFiber === null) {\n        return null;\n      }\n      return hostFiber.stateNode;\n    },\n    injectIntoDevTools: function injectIntoDevTools(devToolsConfig) {\n      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;\n\n      return ReactFiberDevToolsHook.injectInternals(_extends({}, devToolsConfig, {\n        findHostInstanceByFiber: function findHostInstanceByFiber(fiber) {\n          return findHostInstance(fiber);\n        },\n        findFiberByHostInstance: function (_findFiberByHostInstance) {\n          function findFiberByHostInstance(_x6) {\n            return _findFiberByHostInstance.apply(this, arguments);\n          }\n\n          findFiberByHostInstance.toString = function () {\n            return _findFiberByHostInstance.toString();\n          };\n\n          return findFiberByHostInstance;\n        }(function (instance) {\n          if (!findFiberByHostInstance) {\n            // Might not be implemented by the renderer.\n            return null;\n          }\n          return findFiberByHostInstance(instance);\n        })\n      }));\n    }\n  };\n};\n\nvar _reflection = require('react-reconciler/reflection');\n\nvar _ReactInstanceMap = require('shared/ReactInstanceMap');\n\nvar ReactInstanceMap = _interopRequireWildcard(_ReactInstanceMap);\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactFiberRoot = require('./ReactFiberRoot');\n\nvar _ReactFiberDevToolsHook = require('./ReactFiberDevToolsHook');\n\nvar ReactFiberDevToolsHook = _interopRequireWildcard(_ReactFiberDevToolsHook);\n\nvar _ReactFiberScheduler2 = require('./ReactFiberScheduler');\n\nvar _ReactFiberScheduler3 = _interopRequireDefault(_ReactFiberScheduler2);\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nvar _ReactFiberInstrumentation = require('./ReactFiberInstrumentation');\n\nvar _ReactFiberInstrumentation2 = _interopRequireDefault(_ReactFiberInstrumentation);\n\nvar _ReactDebugCurrentFiber = require('./ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nvar didWarnAboutNestedUpdates = void 0;\n\nif (__DEV__) {\n  didWarnAboutNestedUpdates = false;\n}\n\n// 0 is PROD, 1 is DEV.\n// Might add PROFILE later.\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyUmVjb25jaWxlci5qcyJdLCJuYW1lcyI6WyJjb25maWciLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24iLCJyZWNhbGN1bGF0ZUN1cnJlbnRUaW1lIiwiY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlciIsInNjaGVkdWxlV29yayIsInJlcXVlc3RXb3JrIiwiZmx1c2hSb290IiwiYmF0Y2hlZFVwZGF0ZXMiLCJ1bmJhdGNoZWRVcGRhdGVzIiwiZmx1c2hTeW5jIiwiZmx1c2hDb250cm9sbGVkIiwiZGVmZXJyZWRVcGRhdGVzIiwic3luY1VwZGF0ZXMiLCJpbnRlcmFjdGl2ZVVwZGF0ZXMiLCJmbHVzaEludGVyYWN0aXZlVXBkYXRlcyIsImxlZ2FjeUNvbnRleHQiLCJmaW5kQ3VycmVudFVubWFza2VkQ29udGV4dCIsImlzQ29udGV4dFByb3ZpZGVyIiwicHJvY2Vzc0NoaWxkQ29udGV4dCIsImdldENvbnRleHRGb3JTdWJ0cmVlIiwicGFyZW50Q29tcG9uZW50IiwiZW1wdHlPYmplY3QiLCJmaWJlciIsIlJlYWN0SW5zdGFuY2VNYXAiLCJnZXQiLCJwYXJlbnRDb250ZXh0Iiwic2NoZWR1bGVSb290VXBkYXRlIiwiY3VycmVudCIsImVsZW1lbnQiLCJjdXJyZW50VGltZSIsImV4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2siLCJfX0RFVl9fIiwiUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciIsInBoYXNlIiwiZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyIsInVuZGVmaW5lZCIsInVwZGF0ZSIsInBhcnRpYWxTdGF0ZSIsImlzUmVwbGFjZSIsImlzRm9yY2VkIiwiY2FwdHVyZWRWYWx1ZSIsIm5leHQiLCJ1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lIiwiY29udGFpbmVyIiwiUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbiIsImRlYnVnVG9vbCIsImFsdGVybmF0ZSIsIm9uTW91bnRDb250YWluZXIiLCJvblVubW91bnRDb250YWluZXIiLCJvblVwZGF0ZUNvbnRhaW5lciIsImNvbnRleHQiLCJwZW5kaW5nQ29udGV4dCIsImZpbmRIb3N0SW5zdGFuY2UiLCJob3N0RmliZXIiLCJzdGF0ZU5vZGUiLCJjcmVhdGVDb250YWluZXIiLCJjb250YWluZXJJbmZvIiwiaXNBc3luYyIsImh5ZHJhdGUiLCJ1cGRhdGVDb250YWluZXIiLCJnZXRQdWJsaWNSb290SW5zdGFuY2UiLCJjb250YWluZXJGaWJlciIsImNoaWxkIiwidGFnIiwiSG9zdENvbXBvbmVudCIsImZpbmRIb3N0SW5zdGFuY2VXaXRoTm9Qb3J0YWxzIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZGV2VG9vbHNDb25maWciLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsIlJlYWN0RmliZXJEZXZUb29sc0hvb2siLCJpbmplY3RJbnRlcm5hbHMiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImluc3RhbmNlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a1FBQUE7Ozs7Ozs7OztrQkFnUmUsVUFDYkEsTUFEYSxFQUVTO0FBQUEsTUFDZkMsaUJBRGUsR0FDTUQsTUFETixDQUNmQyxpQkFEZTs7QUFBQSw2QkFtQmxCLG1DQUFvQkQsTUFBcEIsQ0FuQmtCO0FBQUEsTUFJcEJFLDRCQUpvQix3QkFJcEJBLDRCQUpvQjtBQUFBLE1BS3BCQyxzQkFMb0Isd0JBS3BCQSxzQkFMb0I7QUFBQSxNQU1wQkMseUJBTm9CLHdCQU1wQkEseUJBTm9CO0FBQUEsTUFPcEJDLFlBUG9CLHdCQU9wQkEsWUFQb0I7QUFBQSxNQVFwQkMsV0FSb0Isd0JBUXBCQSxXQVJvQjtBQUFBLE1BU3BCQyxTQVRvQix3QkFTcEJBLFNBVG9CO0FBQUEsTUFVcEJDLGNBVm9CLHdCQVVwQkEsY0FWb0I7QUFBQSxNQVdwQkMsZ0JBWG9CLHdCQVdwQkEsZ0JBWG9CO0FBQUEsTUFZcEJDLFNBWm9CLHdCQVlwQkEsU0Fab0I7QUFBQSxNQWFwQkMsZUFib0Isd0JBYXBCQSxlQWJvQjtBQUFBLE1BY3BCQyxlQWRvQix3QkFjcEJBLGVBZG9CO0FBQUEsTUFlcEJDLFdBZm9CLHdCQWVwQkEsV0Fmb0I7QUFBQSxNQWdCcEJDLGtCQWhCb0Isd0JBZ0JwQkEsa0JBaEJvQjtBQUFBLE1BaUJwQkMsdUJBakJvQix3QkFpQnBCQSx1QkFqQm9CO0FBQUEsTUFrQnBCQyxhQWxCb0Isd0JBa0JwQkEsYUFsQm9COztBQUFBLE1Bc0JwQkMsMEJBdEJvQixHQXlCbEJELGFBekJrQixDQXNCcEJDLDBCQXRCb0I7QUFBQSxNQXVCcEJDLGlCQXZCb0IsR0F5QmxCRixhQXpCa0IsQ0F1QnBCRSxpQkF2Qm9CO0FBQUEsTUF3QnBCQyxtQkF4Qm9CLEdBeUJsQkgsYUF6QmtCLENBd0JwQkcsbUJBeEJvQjs7O0FBMkJ0QixXQUFTQyxvQkFBVCxDQUNFQyxlQURGLEVBRVU7QUFDUixRQUFJLENBQUNBLGVBQUwsRUFBc0I7QUFDcEIsYUFBT0MscUJBQVA7QUFDRDs7QUFFRCxRQUFNQyxRQUFRQyxpQkFBaUJDLEdBQWpCLENBQXFCSixlQUFyQixDQUFkO0FBQ0EsUUFBTUssZ0JBQWdCVCwyQkFBMkJNLEtBQTNCLENBQXRCO0FBQ0EsV0FBT0wsa0JBQWtCSyxLQUFsQixJQUNISixvQkFBb0JJLEtBQXBCLEVBQTJCRyxhQUEzQixDQURHLEdBRUhBLGFBRko7QUFHRDs7QUFFRCxXQUFTQyxrQkFBVCxDQUNFQyxPQURGLEVBRUVDLE9BRkYsRUFHRUMsV0FIRixFQUlFQyxjQUpGLEVBS0VDLFFBTEYsRUFNRTtBQUNBLFFBQUlDLE9BQUosRUFBYTtBQUNYLFVBQ0VDLGlDQUF1QkMsS0FBdkIsS0FBaUMsUUFBakMsSUFDQUQsaUNBQXVCTixPQUF2QixLQUFtQyxJQURuQyxJQUVBLENBQUNRLHlCQUhILEVBSUU7QUFDQUEsb0NBQTRCLElBQTVCO0FBQ0EsK0JBQ0UsS0FERixFQUVFLGtFQUNFLGtFQURGLEdBRUUsaUVBRkYsR0FHRSxnQ0FMSixFQU1FLGdDQUFpQkYsaUNBQXVCTixPQUF4QyxLQUFvRCxTQU50RDtBQVFEO0FBQ0Y7O0FBRURJLGVBQVdBLGFBQWFLLFNBQWIsR0FBeUIsSUFBekIsR0FBZ0NMLFFBQTNDO0FBQ0EsUUFBSUMsT0FBSixFQUFhO0FBQ1gsNkJBQ0VELGFBQWEsSUFBYixJQUFxQixPQUFPQSxRQUFQLEtBQW9CLFVBRDNDLEVBRUUseUVBQ0UsaUNBSEosRUFJRUEsUUFKRjtBQU1EOztBQUVELFFBQU1NLFNBQVM7QUFDYlAsb0NBRGE7QUFFYlEsb0JBQWMsRUFBQ1YsZ0JBQUQsRUFGRDtBQUdiRyx3QkFIYTtBQUliUSxpQkFBVyxLQUpFO0FBS2JDLGdCQUFVLEtBTEc7QUFNYkMscUJBQWUsSUFORjtBQU9iQyxZQUFNO0FBUE8sS0FBZjtBQVNBLHNEQUFzQmYsT0FBdEIsRUFBK0JVLE1BQS9CO0FBQ0FqQyxpQkFBYXVCLE9BQWIsRUFBc0JHLGNBQXRCOztBQUVBLFdBQU9BLGNBQVA7QUFDRDs7QUFFRCxXQUFTYSwrQkFBVCxDQUNFZixPQURGLEVBRUVnQixTQUZGLEVBR0V4QixlQUhGLEVBSUVTLFdBSkYsRUFLRUMsY0FMRixFQU1FQyxRQU5GLEVBT0U7QUFDQTtBQUNBLFFBQU1KLFVBQVVpQixVQUFVakIsT0FBMUI7O0FBRUEsUUFBSUssT0FBSixFQUFhO0FBQ1gsVUFBSWEsb0NBQTBCQyxTQUE5QixFQUF5QztBQUN2QyxZQUFJbkIsUUFBUW9CLFNBQVIsS0FBc0IsSUFBMUIsRUFBZ0M7QUFDOUJGLDhDQUEwQkMsU0FBMUIsQ0FBb0NFLGdCQUFwQyxDQUFxREosU0FBckQ7QUFDRCxTQUZELE1BRU8sSUFBSWhCLFlBQVksSUFBaEIsRUFBc0I7QUFDM0JpQiw4Q0FBMEJDLFNBQTFCLENBQW9DRyxrQkFBcEMsQ0FBdURMLFNBQXZEO0FBQ0QsU0FGTSxNQUVBO0FBQ0xDLDhDQUEwQkMsU0FBMUIsQ0FBb0NJLGlCQUFwQyxDQUFzRE4sU0FBdEQ7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsUUFBTU8sVUFBVWhDLHFCQUFxQkMsZUFBckIsQ0FBaEI7QUFDQSxRQUFJd0IsVUFBVU8sT0FBVixLQUFzQixJQUExQixFQUFnQztBQUM5QlAsZ0JBQVVPLE9BQVYsR0FBb0JBLE9BQXBCO0FBQ0QsS0FGRCxNQUVPO0FBQ0xQLGdCQUFVUSxjQUFWLEdBQTJCRCxPQUEzQjtBQUNEOztBQUVELFdBQU96QixtQkFDTEMsT0FESyxFQUVMQyxPQUZLLEVBR0xDLFdBSEssRUFJTEMsY0FKSyxFQUtMQyxRQUxLLENBQVA7QUFPRDs7QUFFRCxXQUFTc0IsZ0JBQVQsQ0FBMEIvQixLQUExQixFQUFtRDtBQUNqRCxRQUFNZ0MsWUFBWSxzQ0FBcUJoQyxLQUFyQixDQUFsQjtBQUNBLFFBQUlnQyxjQUFjLElBQWxCLEVBQXdCO0FBQ3RCLGFBQU8sSUFBUDtBQUNEO0FBQ0QsV0FBT0EsVUFBVUMsU0FBakI7QUFDRDs7QUFFRCxTQUFPO0FBQ0xDLG1CQURLLDJCQUVIQyxhQUZHLEVBR0hDLE9BSEcsRUFJSEMsT0FKRyxFQUtTO0FBQ1osYUFBTyxxQ0FBZ0JGLGFBQWhCLEVBQStCQyxPQUEvQixFQUF3Q0MsT0FBeEMsQ0FBUDtBQUNELEtBUEk7QUFTTEMsbUJBVEssMkJBVUhoQyxPQVZHLEVBV0hnQixTQVhHLEVBWUh4QixlQVpHLEVBYUhXLFFBYkcsRUFjYTtBQUNoQixVQUFNSixVQUFVaUIsVUFBVWpCLE9BQTFCO0FBQ0EsVUFBTUUsY0FBYzNCLHdCQUFwQjtBQUNBLFVBQU00QixpQkFBaUIzQiwwQkFBMEJ3QixPQUExQixDQUF2QjtBQUNBLGFBQU9nQixnQ0FDTGYsT0FESyxFQUVMZ0IsU0FGSyxFQUdMeEIsZUFISyxFQUlMUyxXQUpLLEVBS0xDLGNBTEssRUFNTEMsUUFOSyxDQUFQO0FBUUQsS0ExQkk7QUE0QkxZLG1DQTVCSztBQUFBO0FBQUE7QUFBQTs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQSxnQkE2QkhmLE9BN0JHLEVBOEJIZ0IsU0E5QkcsRUErQkh4QixlQS9CRyxFQWdDSFUsY0FoQ0csRUFpQ0hDLFFBakNHLEVBa0NIO0FBQ0EsVUFBTUYsY0FBYzNCLHdCQUFwQjtBQUNBLGFBQU95QyxnQ0FDTGYsT0FESyxFQUVMZ0IsU0FGSyxFQUdMeEIsZUFISyxFQUlMUyxXQUpLLEVBS0xDLGNBTEssRUFNTEMsUUFOSyxDQUFQO0FBUUQsS0E1Q0k7OztBQThDTHpCLHdCQTlDSzs7QUFnRExELDRCQWhESzs7QUFrRExKLDhEQWxESzs7QUFvRExNLGtDQXBESzs7QUFzRExDLHNDQXRESzs7QUF3RExHLG9DQXhESzs7QUEwRExDLDRCQTFESzs7QUE0RExDLDBDQTVESzs7QUE4RExDLG9EQTlESzs7QUFnRUxKLG9DQWhFSzs7QUFrRUxELHdCQWxFSzs7QUFvRUxvRCx5QkFwRUssaUNBcUVIakIsU0FyRUcsRUFzRW9DO0FBQ3ZDLFVBQU1rQixpQkFBaUJsQixVQUFVakIsT0FBakM7QUFDQSxVQUFJLENBQUNtQyxlQUFlQyxLQUFwQixFQUEyQjtBQUN6QixlQUFPLElBQVA7QUFDRDtBQUNELGNBQVFELGVBQWVDLEtBQWYsQ0FBcUJDLEdBQTdCO0FBQ0UsYUFBS0MsOEJBQUw7QUFDRSxpQkFBT2pFLGtCQUFrQjhELGVBQWVDLEtBQWYsQ0FBcUJSLFNBQXZDLENBQVA7QUFDRjtBQUNFLGlCQUFPTyxlQUFlQyxLQUFmLENBQXFCUixTQUE1QjtBQUpKO0FBTUQsS0FqRkk7OztBQW1GTEYsc0NBbkZLOztBQXFGTGEsaUNBckZLLHlDQXFGeUI1QyxLQXJGekIsRUFxRmtEO0FBQ3JELFVBQU1nQyxZQUFZLG1EQUFrQ2hDLEtBQWxDLENBQWxCO0FBQ0EsVUFBSWdDLGNBQWMsSUFBbEIsRUFBd0I7QUFDdEIsZUFBTyxJQUFQO0FBQ0Q7QUFDRCxhQUFPQSxVQUFVQyxTQUFqQjtBQUNELEtBM0ZJO0FBNkZMWSxzQkE3RkssOEJBNkZjQyxjQTdGZCxFQTZGOEQ7QUFBQSxVQUMxREMsdUJBRDBELEdBQy9CRCxjQUQrQixDQUMxREMsdUJBRDBEOztBQUVqRSxhQUFPQyx1QkFBdUJDLGVBQXZCLGNBQ0ZILGNBREU7QUFFTEksK0JBRkssbUNBRW1CbEQsS0FGbkIsRUFFZ0Q7QUFDbkQsaUJBQU8rQixpQkFBaUIvQixLQUFqQixDQUFQO0FBQ0QsU0FKSTtBQUtMK0MsK0JBTEs7QUFBQTtBQUFBO0FBQUE7O0FBQUE7QUFBQTtBQUFBOztBQUFBO0FBQUEsb0JBS21CSSxRQUxuQixFQUttRDtBQUN0RCxjQUFJLENBQUNKLHVCQUFMLEVBQThCO0FBQzVCO0FBQ0EsbUJBQU8sSUFBUDtBQUNEO0FBQ0QsaUJBQU9BLHdCQUF3QkksUUFBeEIsQ0FBUDtBQUNELFNBWEk7QUFBQSxTQUFQO0FBYUQ7QUE1R0ksR0FBUDtBQThHRCxDOztBQTVmRDs7QUFJQTs7SUFBWWxELGdCOztBQUNaOztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUVBOztBQUNBOztJQUFZK0Msc0I7O0FBQ1o7Ozs7QUFDQTs7QUFDQTs7OztBQUNBOzs7Ozs7OztBQUVBLElBQUluQyxrQ0FBSjs7QUFFQSxJQUFJSCxPQUFKLEVBQWE7QUFDWEcsOEJBQTRCLEtBQTVCO0FBQ0Q7O0FBa0xEO0FBQ0EiLCJmaWxlIjoiUmVhY3RGaWJlclJlY29uY2lsZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAnLi9SZWFjdEZpYmVyJztcbmltcG9ydCB0eXBlIHtGaWJlclJvb3R9IGZyb20gJy4vUmVhY3RGaWJlclJvb3QnO1xuaW1wb3J0IHR5cGUge1JlYWN0Tm9kZUxpc3R9IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVzJztcbmltcG9ydCB0eXBlIHtFeHBpcmF0aW9uVGltZX0gZnJvbSAnLi9SZWFjdEZpYmVyRXhwaXJhdGlvblRpbWUnO1xuXG5pbXBvcnQge1xuICBmaW5kQ3VycmVudEhvc3RGaWJlcixcbiAgZmluZEN1cnJlbnRIb3N0RmliZXJXaXRoTm9Qb3J0YWxzLFxufSBmcm9tICdyZWFjdC1yZWNvbmNpbGVyL3JlZmxlY3Rpb24nO1xuaW1wb3J0ICogYXMgUmVhY3RJbnN0YW5jZU1hcCBmcm9tICdzaGFyZWQvUmVhY3RJbnN0YW5jZU1hcCc7XG5pbXBvcnQge0hvc3RDb21wb25lbnR9IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVPZldvcmsnO1xuaW1wb3J0IGVtcHR5T2JqZWN0IGZyb20gJ2ZianMvbGliL2VtcHR5T2JqZWN0JztcbmltcG9ydCBnZXRDb21wb25lbnROYW1lIGZyb20gJ3NoYXJlZC9nZXRDb21wb25lbnROYW1lJztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ2ZianMvbGliL3dhcm5pbmcnO1xuXG5pbXBvcnQge2NyZWF0ZUZpYmVyUm9vdH0gZnJvbSAnLi9SZWFjdEZpYmVyUm9vdCc7XG5pbXBvcnQgKiBhcyBSZWFjdEZpYmVyRGV2VG9vbHNIb29rIGZyb20gJy4vUmVhY3RGaWJlckRldlRvb2xzSG9vayc7XG5pbXBvcnQgUmVhY3RGaWJlclNjaGVkdWxlciBmcm9tICcuL1JlYWN0RmliZXJTY2hlZHVsZXInO1xuaW1wb3J0IHtpbnNlcnRVcGRhdGVJbnRvRmliZXJ9IGZyb20gJy4vUmVhY3RGaWJlclVwZGF0ZVF1ZXVlJztcbmltcG9ydCBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uIGZyb20gJy4vUmVhY3RGaWJlckluc3RydW1lbnRhdGlvbic7XG5pbXBvcnQgUmVhY3REZWJ1Z0N1cnJlbnRGaWJlciBmcm9tICcuL1JlYWN0RGVidWdDdXJyZW50RmliZXInO1xuXG5sZXQgZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcztcblxuaWYgKF9fREVWX18pIHtcbiAgZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlcyA9IGZhbHNlO1xufVxuXG5leHBvcnQgdHlwZSBEZWFkbGluZSA9IHtcbiAgdGltZVJlbWFpbmluZzogKCkgPT4gbnVtYmVyLFxuICBkaWRUaW1lb3V0OiBib29sZWFuLFxufTtcblxudHlwZSBPcGFxdWVIYW5kbGUgPSBGaWJlcjtcbnR5cGUgT3BhcXVlUm9vdCA9IEZpYmVyUm9vdDtcblxuZXhwb3J0IHR5cGUgSG9zdENvbmZpZzxULCBQLCBJLCBUSSwgSEksIFBJLCBDLCBDQywgQ1gsIFBMPiA9IHtcbiAgZ2V0Um9vdEhvc3RDb250ZXh0KHJvb3RDb250YWluZXJJbnN0YW5jZTogQyk6IENYLFxuICBnZXRDaGlsZEhvc3RDb250ZXh0KHBhcmVudEhvc3RDb250ZXh0OiBDWCwgdHlwZTogVCwgaW5zdGFuY2U6IEMpOiBDWCxcbiAgZ2V0UHVibGljSW5zdGFuY2UoaW5zdGFuY2U6IEkgfCBUSSk6IFBJLFxuXG4gIGNyZWF0ZUluc3RhbmNlKFxuICAgIHR5cGU6IFQsXG4gICAgcHJvcHM6IFAsXG4gICAgcm9vdENvbnRhaW5lckluc3RhbmNlOiBDLFxuICAgIGhvc3RDb250ZXh0OiBDWCxcbiAgICBpbnRlcm5hbEluc3RhbmNlSGFuZGxlOiBPcGFxdWVIYW5kbGUsXG4gICk6IEksXG4gIGFwcGVuZEluaXRpYWxDaGlsZChwYXJlbnRJbnN0YW5jZTogSSwgY2hpbGQ6IEkgfCBUSSk6IHZvaWQsXG4gIGZpbmFsaXplSW5pdGlhbENoaWxkcmVuKFxuICAgIHBhcmVudEluc3RhbmNlOiBJLFxuICAgIHR5cGU6IFQsXG4gICAgcHJvcHM6IFAsXG4gICAgcm9vdENvbnRhaW5lckluc3RhbmNlOiBDLFxuICAgIGhvc3RDb250ZXh0OiBDWCxcbiAgKTogYm9vbGVhbixcblxuICBwcmVwYXJlVXBkYXRlKFxuICAgIGluc3RhbmNlOiBJLFxuICAgIHR5cGU6IFQsXG4gICAgb2xkUHJvcHM6IFAsXG4gICAgbmV3UHJvcHM6IFAsXG4gICAgcm9vdENvbnRhaW5lckluc3RhbmNlOiBDLFxuICAgIGhvc3RDb250ZXh0OiBDWCxcbiAgKTogbnVsbCB8IFBMLFxuXG4gIHNob3VsZFNldFRleHRDb250ZW50KHR5cGU6IFQsIHByb3BzOiBQKTogYm9vbGVhbixcbiAgc2hvdWxkRGVwcmlvcml0aXplU3VidHJlZSh0eXBlOiBULCBwcm9wczogUCk6IGJvb2xlYW4sXG5cbiAgY3JlYXRlVGV4dEluc3RhbmNlKFxuICAgIHRleHQ6IHN0cmluZyxcbiAgICByb290Q29udGFpbmVySW5zdGFuY2U6IEMsXG4gICAgaG9zdENvbnRleHQ6IENYLFxuICAgIGludGVybmFsSW5zdGFuY2VIYW5kbGU6IE9wYXF1ZUhhbmRsZSxcbiAgKTogVEksXG5cbiAgc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrKFxuICAgIGNhbGxiYWNrOiAoZGVhZGxpbmU6IERlYWRsaW5lKSA9PiB2b2lkLFxuICAgIG9wdGlvbnM/OiB7dGltZW91dDogbnVtYmVyfSxcbiAgKTogbnVtYmVyLFxuICBjYW5jZWxEZWZlcnJlZENhbGxiYWNrKGNhbGxiYWNrSUQ6IG51bWJlcik6IHZvaWQsXG5cbiAgcHJlcGFyZUZvckNvbW1pdChjb250YWluZXJJbmZvOiBDKTogdm9pZCxcbiAgcmVzZXRBZnRlckNvbW1pdChjb250YWluZXJJbmZvOiBDKTogdm9pZCxcblxuICBub3coKTogbnVtYmVyLFxuXG4gICtoeWRyYXRpb24/OiBIeWRyYXRpb25Ib3N0Q29uZmlnPFQsIFAsIEksIFRJLCBISSwgQywgQ1gsIFBMPixcblxuICArbXV0YXRpb24/OiBNdXRhYmxlVXBkYXRlc0hvc3RDb25maWc8VCwgUCwgSSwgVEksIEMsIFBMPixcbiAgK3BlcnNpc3RlbmNlPzogUGVyc2lzdGVudFVwZGF0ZXNIb3N0Q29uZmlnPFQsIFAsIEksIFRJLCBDLCBDQywgUEw+LFxufTtcblxudHlwZSBNdXRhYmxlVXBkYXRlc0hvc3RDb25maWc8VCwgUCwgSSwgVEksIEMsIFBMPiA9IHtcbiAgY29tbWl0VXBkYXRlKFxuICAgIGluc3RhbmNlOiBJLFxuICAgIHVwZGF0ZVBheWxvYWQ6IFBMLFxuICAgIHR5cGU6IFQsXG4gICAgb2xkUHJvcHM6IFAsXG4gICAgbmV3UHJvcHM6IFAsXG4gICAgaW50ZXJuYWxJbnN0YW5jZUhhbmRsZTogT3BhcXVlSGFuZGxlLFxuICApOiB2b2lkLFxuICBjb21taXRNb3VudChcbiAgICBpbnN0YW5jZTogSSxcbiAgICB0eXBlOiBULFxuICAgIG5ld1Byb3BzOiBQLFxuICAgIGludGVybmFsSW5zdGFuY2VIYW5kbGU6IE9wYXF1ZUhhbmRsZSxcbiAgKTogdm9pZCxcbiAgY29tbWl0VGV4dFVwZGF0ZSh0ZXh0SW5zdGFuY2U6IFRJLCBvbGRUZXh0OiBzdHJpbmcsIG5ld1RleHQ6IHN0cmluZyk6IHZvaWQsXG4gIHJlc2V0VGV4dENvbnRlbnQoaW5zdGFuY2U6IEkpOiB2b2lkLFxuICBhcHBlbmRDaGlsZChwYXJlbnRJbnN0YW5jZTogSSwgY2hpbGQ6IEkgfCBUSSk6IHZvaWQsXG4gIGFwcGVuZENoaWxkVG9Db250YWluZXIoY29udGFpbmVyOiBDLCBjaGlsZDogSSB8IFRJKTogdm9pZCxcbiAgaW5zZXJ0QmVmb3JlKHBhcmVudEluc3RhbmNlOiBJLCBjaGlsZDogSSB8IFRJLCBiZWZvcmVDaGlsZDogSSB8IFRJKTogdm9pZCxcbiAgaW5zZXJ0SW5Db250YWluZXJCZWZvcmUoXG4gICAgY29udGFpbmVyOiBDLFxuICAgIGNoaWxkOiBJIHwgVEksXG4gICAgYmVmb3JlQ2hpbGQ6IEkgfCBUSSxcbiAgKTogdm9pZCxcbiAgcmVtb3ZlQ2hpbGQocGFyZW50SW5zdGFuY2U6IEksIGNoaWxkOiBJIHwgVEkpOiB2b2lkLFxuICByZW1vdmVDaGlsZEZyb21Db250YWluZXIoY29udGFpbmVyOiBDLCBjaGlsZDogSSB8IFRJKTogdm9pZCxcbn07XG5cbnR5cGUgUGVyc2lzdGVudFVwZGF0ZXNIb3N0Q29uZmlnPFQsIFAsIEksIFRJLCBDLCBDQywgUEw+ID0ge1xuICBjbG9uZUluc3RhbmNlKFxuICAgIGluc3RhbmNlOiBJLFxuICAgIHVwZGF0ZVBheWxvYWQ6IG51bGwgfCBQTCxcbiAgICB0eXBlOiBULFxuICAgIG9sZFByb3BzOiBQLFxuICAgIG5ld1Byb3BzOiBQLFxuICAgIGludGVybmFsSW5zdGFuY2VIYW5kbGU6IE9wYXF1ZUhhbmRsZSxcbiAgICBrZWVwQ2hpbGRyZW46IGJvb2xlYW4sXG4gICAgcmVjeWNsYWJsZUluc3RhbmNlOiBJLFxuICApOiBJLFxuXG4gIGNyZWF0ZUNvbnRhaW5lckNoaWxkU2V0KGNvbnRhaW5lcjogQyk6IENDLFxuXG4gIGFwcGVuZENoaWxkVG9Db250YWluZXJDaGlsZFNldChjaGlsZFNldDogQ0MsIGNoaWxkOiBJIHwgVEkpOiB2b2lkLFxuICBmaW5hbGl6ZUNvbnRhaW5lckNoaWxkcmVuKGNvbnRhaW5lcjogQywgbmV3Q2hpbGRyZW46IENDKTogdm9pZCxcblxuICByZXBsYWNlQ29udGFpbmVyQ2hpbGRyZW4oY29udGFpbmVyOiBDLCBuZXdDaGlsZHJlbjogQ0MpOiB2b2lkLFxufTtcblxudHlwZSBIeWRyYXRpb25Ib3N0Q29uZmlnPFQsIFAsIEksIFRJLCBISSwgQywgQ1gsIFBMPiA9IHtcbiAgLy8gT3B0aW9uYWwgaHlkcmF0aW9uXG4gIGNhbkh5ZHJhdGVJbnN0YW5jZShpbnN0YW5jZTogSEksIHR5cGU6IFQsIHByb3BzOiBQKTogbnVsbCB8IEksXG4gIGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2UoaW5zdGFuY2U6IEhJLCB0ZXh0OiBzdHJpbmcpOiBudWxsIHwgVEksXG4gIGdldE5leHRIeWRyYXRhYmxlU2libGluZyhpbnN0YW5jZTogSSB8IFRJIHwgSEkpOiBudWxsIHwgSEksXG4gIGdldEZpcnN0SHlkcmF0YWJsZUNoaWxkKHBhcmVudEluc3RhbmNlOiBJIHwgQyk6IG51bGwgfCBISSxcbiAgaHlkcmF0ZUluc3RhbmNlKFxuICAgIGluc3RhbmNlOiBJLFxuICAgIHR5cGU6IFQsXG4gICAgcHJvcHM6IFAsXG4gICAgcm9vdENvbnRhaW5lckluc3RhbmNlOiBDLFxuICAgIGhvc3RDb250ZXh0OiBDWCxcbiAgICBpbnRlcm5hbEluc3RhbmNlSGFuZGxlOiBPcGFxdWVIYW5kbGUsXG4gICk6IG51bGwgfCBQTCxcbiAgaHlkcmF0ZVRleHRJbnN0YW5jZShcbiAgICB0ZXh0SW5zdGFuY2U6IFRJLFxuICAgIHRleHQ6IHN0cmluZyxcbiAgICBpbnRlcm5hbEluc3RhbmNlSGFuZGxlOiBPcGFxdWVIYW5kbGUsXG4gICk6IGJvb2xlYW4sXG4gIGRpZE5vdE1hdGNoSHlkcmF0ZWRDb250YWluZXJUZXh0SW5zdGFuY2UoXG4gICAgcGFyZW50Q29udGFpbmVyOiBDLFxuICAgIHRleHRJbnN0YW5jZTogVEksXG4gICAgdGV4dDogc3RyaW5nLFxuICApOiB2b2lkLFxuICBkaWROb3RNYXRjaEh5ZHJhdGVkVGV4dEluc3RhbmNlKFxuICAgIHBhcmVudFR5cGU6IFQsXG4gICAgcGFyZW50UHJvcHM6IFAsXG4gICAgcGFyZW50SW5zdGFuY2U6IEksXG4gICAgdGV4dEluc3RhbmNlOiBUSSxcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICk6IHZvaWQsXG4gIGRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZShwYXJlbnRDb250YWluZXI6IEMsIGluc3RhbmNlOiBJIHwgVEkpOiB2b2lkLFxuICBkaWROb3RIeWRyYXRlSW5zdGFuY2UoXG4gICAgcGFyZW50VHlwZTogVCxcbiAgICBwYXJlbnRQcm9wczogUCxcbiAgICBwYXJlbnRJbnN0YW5jZTogSSxcbiAgICBpbnN0YW5jZTogSSB8IFRJLFxuICApOiB2b2lkLFxuICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lckluc3RhbmNlKFxuICAgIHBhcmVudENvbnRhaW5lcjogQyxcbiAgICB0eXBlOiBULFxuICAgIHByb3BzOiBQLFxuICApOiB2b2lkLFxuICBkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZShcbiAgICBwYXJlbnRDb250YWluZXI6IEMsXG4gICAgdGV4dDogc3RyaW5nLFxuICApOiB2b2lkLFxuICBkaWROb3RGaW5kSHlkcmF0YWJsZUluc3RhbmNlKFxuICAgIHBhcmVudFR5cGU6IFQsXG4gICAgcGFyZW50UHJvcHM6IFAsXG4gICAgcGFyZW50SW5zdGFuY2U6IEksXG4gICAgdHlwZTogVCxcbiAgICBwcm9wczogUCxcbiAgKTogdm9pZCxcbiAgZGlkTm90RmluZEh5ZHJhdGFibGVUZXh0SW5zdGFuY2UoXG4gICAgcGFyZW50VHlwZTogVCxcbiAgICBwYXJlbnRQcm9wczogUCxcbiAgICBwYXJlbnRJbnN0YW5jZTogSSxcbiAgICB0ZXh0OiBzdHJpbmcsXG4gICk6IHZvaWQsXG59O1xuXG4vLyAwIGlzIFBST0QsIDEgaXMgREVWLlxuLy8gTWlnaHQgYWRkIFBST0ZJTEUgbGF0ZXIuXG50eXBlIEJ1bmRsZVR5cGUgPSAwIHwgMTtcblxudHlwZSBEZXZUb29sc0NvbmZpZzxJLCBUST4gPSB7fFxuICBidW5kbGVUeXBlOiBCdW5kbGVUeXBlLFxuICB2ZXJzaW9uOiBzdHJpbmcsXG4gIHJlbmRlcmVyUGFja2FnZU5hbWU6IHN0cmluZyxcbiAgLy8gTm90ZTogdGhpcyBhY3R1YWxseSAqZG9lcyogZGVwZW5kIG9uIEZpYmVyIGludGVybmFsIGZpZWxkcy5cbiAgLy8gVXNlZCBieSBcImluc3BlY3QgY2xpY2tlZCBET00gZWxlbWVudFwiIGluIFJlYWN0IERldlRvb2xzLlxuICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZT86IChpbnN0YW5jZTogSSB8IFRJKSA9PiBGaWJlcixcbiAgLy8gVXNlZCBieSBSTiBpbi1hcHAgaW5zcGVjdG9yLlxuICAvLyBUaGlzIEFQSSBpcyB1bmZvcnR1bmF0ZWx5IFJOLXNwZWNpZmljLlxuICAvLyBUT0RPOiBDaGFuZ2UgaXQgdG8gYWNjZXB0IEZpYmVyIGluc3RlYWQgYW5kIHR5cGUgaXQgcHJvcGVybHkuXG4gIGdldEluc3BlY3RvckRhdGFGb3JWaWV3VGFnPzogKHRhZzogbnVtYmVyKSA9PiBPYmplY3QsXG58fTtcblxuZXhwb3J0IHR5cGUgUmVjb25jaWxlcjxDLCBJLCBUST4gPSB7XG4gIGNyZWF0ZUNvbnRhaW5lcihcbiAgICBjb250YWluZXJJbmZvOiBDLFxuICAgIGlzQXN5bmM6IGJvb2xlYW4sXG4gICAgaHlkcmF0ZTogYm9vbGVhbixcbiAgKTogT3BhcXVlUm9vdCxcbiAgdXBkYXRlQ29udGFpbmVyKFxuICAgIGVsZW1lbnQ6IFJlYWN0Tm9kZUxpc3QsXG4gICAgY29udGFpbmVyOiBPcGFxdWVSb290LFxuICAgIHBhcmVudENvbXBvbmVudDogP1JlYWN0JENvbXBvbmVudDxhbnksIGFueT4sXG4gICAgY2FsbGJhY2s6ID9GdW5jdGlvbixcbiAgKTogRXhwaXJhdGlvblRpbWUsXG4gIHVwZGF0ZUNvbnRhaW5lckF0RXhwaXJhdGlvblRpbWUoXG4gICAgZWxlbWVudDogUmVhY3ROb2RlTGlzdCxcbiAgICBjb250YWluZXI6IE9wYXF1ZVJvb3QsXG4gICAgcGFyZW50Q29tcG9uZW50OiA/UmVhY3QkQ29tcG9uZW50PGFueSwgYW55PixcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICAgY2FsbGJhY2s6ID9GdW5jdGlvbixcbiAgKTogRXhwaXJhdGlvblRpbWUsXG4gIGZsdXNoUm9vdChyb290OiBPcGFxdWVSb290LCBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUpOiB2b2lkLFxuICByZXF1ZXN0V29yayhyb290OiBPcGFxdWVSb290LCBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUpOiB2b2lkLFxuICBiYXRjaGVkVXBkYXRlczxBPihmbjogKCkgPT4gQSk6IEEsXG4gIHVuYmF0Y2hlZFVwZGF0ZXM8QT4oZm46ICgpID0+IEEpOiBBLFxuICBmbHVzaFN5bmM8QT4oZm46ICgpID0+IEEpOiBBLFxuICBmbHVzaENvbnRyb2xsZWQoZm46ICgpID0+IG1peGVkKTogdm9pZCxcbiAgZGVmZXJyZWRVcGRhdGVzPEE+KGZuOiAoKSA9PiBBKTogQSxcbiAgaW50ZXJhY3RpdmVVcGRhdGVzPEE+KGZuOiAoKSA9PiBBKTogQSxcbiAgaW5qZWN0SW50b0RldlRvb2xzKGRldlRvb2xzQ29uZmlnOiBEZXZUb29sc0NvbmZpZzxJLCBUST4pOiBib29sZWFuLFxuICBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk6IEV4cGlyYXRpb25UaW1lLFxuXG4gIC8vIFVzZWQgdG8gZXh0cmFjdCB0aGUgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGluaXRpYWwgcmVuZGVyLiBMZWdhY3kgQVBJLlxuICBnZXRQdWJsaWNSb290SW5zdGFuY2UoXG4gICAgY29udGFpbmVyOiBPcGFxdWVSb290LFxuICApOiBSZWFjdCRDb21wb25lbnQ8YW55LCBhbnk+IHwgVEkgfCBJIHwgbnVsbCxcblxuICAvLyBVc2UgZm9yIGZpbmRET01Ob2RlL2ZpbmRIb3N0Tm9kZS4gTGVnYWN5IEFQSS5cbiAgZmluZEhvc3RJbnN0YW5jZShjb21wb25lbnQ6IEZpYmVyKTogSSB8IFRJIHwgbnVsbCxcblxuICAvLyBVc2VkIGludGVybmFsbHkgZm9yIGZpbHRlcmluZyBvdXQgcG9ydGFscy4gTGVnYWN5IEFQSS5cbiAgZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMoY29tcG9uZW50OiBGaWJlcik6IEkgfCBUSSB8IG51bGwsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbjxULCBQLCBJLCBUSSwgSEksIFBJLCBDLCBDQywgQ1gsIFBMPihcbiAgY29uZmlnOiBIb3N0Q29uZmlnPFQsIFAsIEksIFRJLCBISSwgUEksIEMsIENDLCBDWCwgUEw+LFxuKTogUmVjb25jaWxlcjxDLCBJLCBUST4ge1xuICBjb25zdCB7Z2V0UHVibGljSW5zdGFuY2V9ID0gY29uZmlnO1xuXG4gIGNvbnN0IHtcbiAgICBjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uLFxuICAgIHJlY2FsY3VsYXRlQ3VycmVudFRpbWUsXG4gICAgY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixcbiAgICBzY2hlZHVsZVdvcmssXG4gICAgcmVxdWVzdFdvcmssXG4gICAgZmx1c2hSb290LFxuICAgIGJhdGNoZWRVcGRhdGVzLFxuICAgIHVuYmF0Y2hlZFVwZGF0ZXMsXG4gICAgZmx1c2hTeW5jLFxuICAgIGZsdXNoQ29udHJvbGxlZCxcbiAgICBkZWZlcnJlZFVwZGF0ZXMsXG4gICAgc3luY1VwZGF0ZXMsXG4gICAgaW50ZXJhY3RpdmVVcGRhdGVzLFxuICAgIGZsdXNoSW50ZXJhY3RpdmVVcGRhdGVzLFxuICAgIGxlZ2FjeUNvbnRleHQsXG4gIH0gPSBSZWFjdEZpYmVyU2NoZWR1bGVyKGNvbmZpZyk7XG5cbiAgY29uc3Qge1xuICAgIGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0LFxuICAgIGlzQ29udGV4dFByb3ZpZGVyLFxuICAgIHByb2Nlc3NDaGlsZENvbnRleHQsXG4gIH0gPSBsZWdhY3lDb250ZXh0O1xuXG4gIGZ1bmN0aW9uIGdldENvbnRleHRGb3JTdWJ0cmVlKFxuICAgIHBhcmVudENvbXBvbmVudDogP1JlYWN0JENvbXBvbmVudDxhbnksIGFueT4sXG4gICk6IE9iamVjdCB7XG4gICAgaWYgKCFwYXJlbnRDb21wb25lbnQpIHtcbiAgICAgIHJldHVybiBlbXB0eU9iamVjdDtcbiAgICB9XG5cbiAgICBjb25zdCBmaWJlciA9IFJlYWN0SW5zdGFuY2VNYXAuZ2V0KHBhcmVudENvbXBvbmVudCk7XG4gICAgY29uc3QgcGFyZW50Q29udGV4dCA9IGZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0KGZpYmVyKTtcbiAgICByZXR1cm4gaXNDb250ZXh0UHJvdmlkZXIoZmliZXIpXG4gICAgICA/IHByb2Nlc3NDaGlsZENvbnRleHQoZmliZXIsIHBhcmVudENvbnRleHQpXG4gICAgICA6IHBhcmVudENvbnRleHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzY2hlZHVsZVJvb3RVcGRhdGUoXG4gICAgY3VycmVudDogRmliZXIsXG4gICAgZWxlbWVudDogUmVhY3ROb2RlTGlzdCxcbiAgICBjdXJyZW50VGltZTogRXhwaXJhdGlvblRpbWUsXG4gICAgZXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICAgIGNhbGxiYWNrOiA/RnVuY3Rpb24sXG4gICkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpZiAoXG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIucGhhc2UgPT09ICdyZW5kZXInICYmXG4gICAgICAgIFJlYWN0RGVidWdDdXJyZW50RmliZXIuY3VycmVudCAhPT0gbnVsbCAmJlxuICAgICAgICAhZGlkV2FybkFib3V0TmVzdGVkVXBkYXRlc1xuICAgICAgKSB7XG4gICAgICAgIGRpZFdhcm5BYm91dE5lc3RlZFVwZGF0ZXMgPSB0cnVlO1xuICAgICAgICB3YXJuaW5nKFxuICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICdSZW5kZXIgbWV0aG9kcyBzaG91bGQgYmUgYSBwdXJlIGZ1bmN0aW9uIG9mIHByb3BzIGFuZCBzdGF0ZTsgJyArXG4gICAgICAgICAgICAndHJpZ2dlcmluZyBuZXN0ZWQgY29tcG9uZW50IHVwZGF0ZXMgZnJvbSByZW5kZXIgaXMgbm90IGFsbG93ZWQuICcgK1xuICAgICAgICAgICAgJ0lmIG5lY2Vzc2FyeSwgdHJpZ2dlciBuZXN0ZWQgdXBkYXRlcyBpbiBjb21wb25lbnREaWRVcGRhdGUuXFxuXFxuJyArXG4gICAgICAgICAgICAnQ2hlY2sgdGhlIHJlbmRlciBtZXRob2Qgb2YgJXMuJyxcbiAgICAgICAgICBnZXRDb21wb25lbnROYW1lKFJlYWN0RGVidWdDdXJyZW50RmliZXIuY3VycmVudCkgfHwgJ1Vua25vd24nLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNhbGxiYWNrID0gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IG51bGwgOiBjYWxsYmFjaztcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgY2FsbGJhY2sgPT09IG51bGwgfHwgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nLFxuICAgICAgICAncmVuZGVyKC4uLik6IEV4cGVjdGVkIHRoZSBsYXN0IG9wdGlvbmFsIGBjYWxsYmFja2AgYXJndW1lbnQgdG8gYmUgYSAnICtcbiAgICAgICAgICAnZnVuY3Rpb24uIEluc3RlYWQgcmVjZWl2ZWQ6ICVzLicsXG4gICAgICAgIGNhbGxiYWNrLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCB1cGRhdGUgPSB7XG4gICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgIHBhcnRpYWxTdGF0ZToge2VsZW1lbnR9LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBpc1JlcGxhY2U6IGZhbHNlLFxuICAgICAgaXNGb3JjZWQ6IGZhbHNlLFxuICAgICAgY2FwdHVyZWRWYWx1ZTogbnVsbCxcbiAgICAgIG5leHQ6IG51bGwsXG4gICAgfTtcbiAgICBpbnNlcnRVcGRhdGVJbnRvRmliZXIoY3VycmVudCwgdXBkYXRlKTtcbiAgICBzY2hlZHVsZVdvcmsoY3VycmVudCwgZXhwaXJhdGlvblRpbWUpO1xuXG4gICAgcmV0dXJuIGV4cGlyYXRpb25UaW1lO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShcbiAgICBlbGVtZW50OiBSZWFjdE5vZGVMaXN0LFxuICAgIGNvbnRhaW5lcjogT3BhcXVlUm9vdCxcbiAgICBwYXJlbnRDb21wb25lbnQ6ID9SZWFjdCRDb21wb25lbnQ8YW55LCBhbnk+LFxuICAgIGN1cnJlbnRUaW1lOiBFeHBpcmF0aW9uVGltZSxcbiAgICBleHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gICAgY2FsbGJhY2s6ID9GdW5jdGlvbixcbiAgKSB7XG4gICAgLy8gVE9ETzogSWYgdGhpcyBpcyBhIG5lc3RlZCBjb250YWluZXIsIHRoaXMgd29uJ3QgYmUgdGhlIHJvb3QuXG4gICAgY29uc3QgY3VycmVudCA9IGNvbnRhaW5lci5jdXJyZW50O1xuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbCkge1xuICAgICAgICBpZiAoY3VycmVudC5hbHRlcm5hdGUgPT09IG51bGwpIHtcbiAgICAgICAgICBSZWFjdEZpYmVySW5zdHJ1bWVudGF0aW9uLmRlYnVnVG9vbC5vbk1vdW50Q29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudCA9PT0gbnVsbCkge1xuICAgICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVW5tb3VudENvbnRhaW5lcihjb250YWluZXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIFJlYWN0RmliZXJJbnN0cnVtZW50YXRpb24uZGVidWdUb29sLm9uVXBkYXRlQ29udGFpbmVyKGNvbnRhaW5lcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0Q29udGV4dEZvclN1YnRyZWUocGFyZW50Q29tcG9uZW50KTtcbiAgICBpZiAoY29udGFpbmVyLmNvbnRleHQgPT09IG51bGwpIHtcbiAgICAgIGNvbnRhaW5lci5jb250ZXh0ID0gY29udGV4dDtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGFpbmVyLnBlbmRpbmdDb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NoZWR1bGVSb290VXBkYXRlKFxuICAgICAgY3VycmVudCxcbiAgICAgIGVsZW1lbnQsXG4gICAgICBjdXJyZW50VGltZSxcbiAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgY2FsbGJhY2ssXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRIb3N0SW5zdGFuY2UoZmliZXI6IEZpYmVyKTogUEkgfCBudWxsIHtcbiAgICBjb25zdCBob3N0RmliZXIgPSBmaW5kQ3VycmVudEhvc3RGaWJlcihmaWJlcik7XG4gICAgaWYgKGhvc3RGaWJlciA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBob3N0RmliZXIuc3RhdGVOb2RlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVDb250YWluZXIoXG4gICAgICBjb250YWluZXJJbmZvOiBDLFxuICAgICAgaXNBc3luYzogYm9vbGVhbixcbiAgICAgIGh5ZHJhdGU6IGJvb2xlYW4sXG4gICAgKTogT3BhcXVlUm9vdCB7XG4gICAgICByZXR1cm4gY3JlYXRlRmliZXJSb290KGNvbnRhaW5lckluZm8sIGlzQXN5bmMsIGh5ZHJhdGUpO1xuICAgIH0sXG5cbiAgICB1cGRhdGVDb250YWluZXIoXG4gICAgICBlbGVtZW50OiBSZWFjdE5vZGVMaXN0LFxuICAgICAgY29udGFpbmVyOiBPcGFxdWVSb290LFxuICAgICAgcGFyZW50Q29tcG9uZW50OiA/UmVhY3QkQ29tcG9uZW50PGFueSwgYW55PixcbiAgICAgIGNhbGxiYWNrOiA/RnVuY3Rpb24sXG4gICAgKTogRXhwaXJhdGlvblRpbWUge1xuICAgICAgY29uc3QgY3VycmVudCA9IGNvbnRhaW5lci5jdXJyZW50O1xuICAgICAgY29uc3QgY3VycmVudFRpbWUgPSByZWNhbGN1bGF0ZUN1cnJlbnRUaW1lKCk7XG4gICAgICBjb25zdCBleHBpcmF0aW9uVGltZSA9IGNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIoY3VycmVudCk7XG4gICAgICByZXR1cm4gdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZShcbiAgICAgICAgZWxlbWVudCxcbiAgICAgICAgY29udGFpbmVyLFxuICAgICAgICBwYXJlbnRDb21wb25lbnQsXG4gICAgICAgIGN1cnJlbnRUaW1lLFxuICAgICAgICBleHBpcmF0aW9uVGltZSxcbiAgICAgICAgY2FsbGJhY2ssXG4gICAgICApO1xuICAgIH0sXG5cbiAgICB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgY2FsbGJhY2ssXG4gICAgKSB7XG4gICAgICBjb25zdCBjdXJyZW50VGltZSA9IHJlY2FsY3VsYXRlQ3VycmVudFRpbWUoKTtcbiAgICAgIHJldHVybiB1cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKFxuICAgICAgICBlbGVtZW50LFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIHBhcmVudENvbXBvbmVudCxcbiAgICAgICAgY3VycmVudFRpbWUsXG4gICAgICAgIGV4cGlyYXRpb25UaW1lLFxuICAgICAgICBjYWxsYmFjayxcbiAgICAgICk7XG4gICAgfSxcblxuICAgIGZsdXNoUm9vdCxcblxuICAgIHJlcXVlc3RXb3JrLFxuXG4gICAgY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbixcblxuICAgIGJhdGNoZWRVcGRhdGVzLFxuXG4gICAgdW5iYXRjaGVkVXBkYXRlcyxcblxuICAgIGRlZmVycmVkVXBkYXRlcyxcblxuICAgIHN5bmNVcGRhdGVzLFxuXG4gICAgaW50ZXJhY3RpdmVVcGRhdGVzLFxuXG4gICAgZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMsXG5cbiAgICBmbHVzaENvbnRyb2xsZWQsXG5cbiAgICBmbHVzaFN5bmMsXG5cbiAgICBnZXRQdWJsaWNSb290SW5zdGFuY2UoXG4gICAgICBjb250YWluZXI6IE9wYXF1ZVJvb3QsXG4gICAgKTogUmVhY3QkQ29tcG9uZW50PGFueSwgYW55PiB8IFBJIHwgbnVsbCB7XG4gICAgICBjb25zdCBjb250YWluZXJGaWJlciA9IGNvbnRhaW5lci5jdXJyZW50O1xuICAgICAgaWYgKCFjb250YWluZXJGaWJlci5jaGlsZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY29udGFpbmVyRmliZXIuY2hpbGQudGFnKSB7XG4gICAgICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgICAgICByZXR1cm4gZ2V0UHVibGljSW5zdGFuY2UoY29udGFpbmVyRmliZXIuY2hpbGQuc3RhdGVOb2RlKTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gY29udGFpbmVyRmliZXIuY2hpbGQuc3RhdGVOb2RlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBmaW5kSG9zdEluc3RhbmNlLFxuXG4gICAgZmluZEhvc3RJbnN0YW5jZVdpdGhOb1BvcnRhbHMoZmliZXI6IEZpYmVyKTogUEkgfCBudWxsIHtcbiAgICAgIGNvbnN0IGhvc3RGaWJlciA9IGZpbmRDdXJyZW50SG9zdEZpYmVyV2l0aE5vUG9ydGFscyhmaWJlcik7XG4gICAgICBpZiAoaG9zdEZpYmVyID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhvc3RGaWJlci5zdGF0ZU5vZGU7XG4gICAgfSxcblxuICAgIGluamVjdEludG9EZXZUb29scyhkZXZUb29sc0NvbmZpZzogRGV2VG9vbHNDb25maWc8SSwgVEk+KTogYm9vbGVhbiB7XG4gICAgICBjb25zdCB7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2V9ID0gZGV2VG9vbHNDb25maWc7XG4gICAgICByZXR1cm4gUmVhY3RGaWJlckRldlRvb2xzSG9vay5pbmplY3RJbnRlcm5hbHMoe1xuICAgICAgICAuLi5kZXZUb29sc0NvbmZpZyxcbiAgICAgICAgZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIoZmliZXI6IEZpYmVyKTogSSB8IFRJIHwgbnVsbCB7XG4gICAgICAgICAgcmV0dXJuIGZpbmRIb3N0SW5zdGFuY2UoZmliZXIpO1xuICAgICAgICB9LFxuICAgICAgICBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZShpbnN0YW5jZTogSSB8IFRJKTogRmliZXIgfCBudWxsIHtcbiAgICAgICAgICBpZiAoIWZpbmRGaWJlckJ5SG9zdEluc3RhbmNlKSB7XG4gICAgICAgICAgICAvLyBNaWdodCBub3QgYmUgaW1wbGVtZW50ZWQgYnkgdGhlIHJlbmRlcmVyLlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmaW5kRmliZXJCeUhvc3RJbnN0YW5jZShpbnN0YW5jZSk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9LFxuICB9O1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFiberRoot = createFiberRoot;\n\nvar _ReactFiber = require('./ReactFiber');\n\nvar _ReactFiberExpirationTime = require('./ReactFiberExpirationTime');\n\n// TODO: This should be lifted into the renderer.\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction createFiberRoot(containerInfo, isAsync, hydrate) {\n  // Cyclic construction. This cheats the type system right now because\n  // stateNode is any.\n  var uninitializedFiber = (0, _ReactFiber.createHostRootFiber)(isAsync);\n  var root = {\n    current: uninitializedFiber,\n    containerInfo: containerInfo,\n    pendingChildren: null,\n    pendingCommitExpirationTime: _ReactFiberExpirationTime.NoWork,\n    finishedWork: null,\n    context: null,\n    pendingContext: null,\n    hydrate: hydrate,\n    remainingExpirationTime: _ReactFiberExpirationTime.NoWork,\n    firstBatch: null,\n    nextScheduledRoot: null\n  };\n  uninitializedFiber.stateNode = root;\n  return root;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyUm9vdC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVGaWJlclJvb3QiLCJjb250YWluZXJJbmZvIiwiaXNBc3luYyIsImh5ZHJhdGUiLCJ1bmluaXRpYWxpemVkRmliZXIiLCJyb290IiwiY3VycmVudCIsInBlbmRpbmdDaGlsZHJlbiIsInBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZSIsIk5vV29yayIsImZpbmlzaGVkV29yayIsImNvbnRleHQiLCJwZW5kaW5nQ29udGV4dCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiZmlyc3RCYXRjaCIsIm5leHRTY2hlZHVsZWRSb290Iiwic3RhdGVOb2RlIl0sIm1hcHBpbmdzIjoiOzs7OztRQW9EZ0JBLGUsR0FBQUEsZTs7QUF4Q2hCOztBQUNBOztBQUVBO0FBZkE7Ozs7Ozs7OztBQW9ETyxTQUFTQSxlQUFULENBQ0xDLGFBREssRUFFTEMsT0FGSyxFQUdMQyxPQUhLLEVBSU07QUFDWDtBQUNBO0FBQ0EsTUFBTUMscUJBQXFCLHFDQUFvQkYsT0FBcEIsQ0FBM0I7QUFDQSxNQUFNRyxPQUFPO0FBQ1hDLGFBQVNGLGtCQURFO0FBRVhILG1CQUFlQSxhQUZKO0FBR1hNLHFCQUFpQixJQUhOO0FBSVhDLGlDQUE2QkMsZ0NBSmxCO0FBS1hDLGtCQUFjLElBTEg7QUFNWEMsYUFBUyxJQU5FO0FBT1hDLG9CQUFnQixJQVBMO0FBUVhULG9CQVJXO0FBU1hVLDZCQUF5QkosZ0NBVGQ7QUFVWEssZ0JBQVksSUFWRDtBQVdYQyx1QkFBbUI7QUFYUixHQUFiO0FBYUFYLHFCQUFtQlksU0FBbkIsR0FBK0JYLElBQS9CO0FBQ0EsU0FBT0EsSUFBUDtBQUNEIiwiZmlsZSI6IlJlYWN0RmliZXJSb290LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJy4vUmVhY3RGaWJlcic7XG5pbXBvcnQgdHlwZSB7RXhwaXJhdGlvblRpbWV9IGZyb20gJy4vUmVhY3RGaWJlckV4cGlyYXRpb25UaW1lJztcblxuaW1wb3J0IHtjcmVhdGVIb3N0Um9vdEZpYmVyfSBmcm9tICcuL1JlYWN0RmliZXInO1xuaW1wb3J0IHtOb1dvcmt9IGZyb20gJy4vUmVhY3RGaWJlckV4cGlyYXRpb25UaW1lJztcblxuLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgbGlmdGVkIGludG8gdGhlIHJlbmRlcmVyLlxuZXhwb3J0IHR5cGUgQmF0Y2ggPSB7XG4gIF9kZWZlcjogYm9vbGVhbixcbiAgX2V4cGlyYXRpb25UaW1lOiBFeHBpcmF0aW9uVGltZSxcbiAgX29uQ29tcGxldGU6ICgpID0+IG1peGVkLFxuICBfbmV4dDogQmF0Y2ggfCBudWxsLFxufTtcblxuZXhwb3J0IHR5cGUgRmliZXJSb290ID0ge1xuICAvLyBBbnkgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmcm9tIHRoZSBob3N0IGFzc29jaWF0ZWQgd2l0aCB0aGlzIHJvb3QuXG4gIGNvbnRhaW5lckluZm86IGFueSxcbiAgLy8gVXNlZCBvbmx5IGJ5IHBlcnNpc3RlbnQgdXBkYXRlcy5cbiAgcGVuZGluZ0NoaWxkcmVuOiBhbnksXG4gIC8vIFRoZSBjdXJyZW50bHkgYWN0aXZlIHJvb3QgZmliZXIuIFRoaXMgaXMgdGhlIG11dGFibGUgcm9vdCBvZiB0aGUgdHJlZS5cbiAgY3VycmVudDogRmliZXIsXG4gIHBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZTogRXhwaXJhdGlvblRpbWUsXG4gIC8vIEEgZmluaXNoZWQgd29yay1pbi1wcm9ncmVzcyBIb3N0Um9vdCB0aGF0J3MgcmVhZHkgdG8gYmUgY29tbWl0dGVkLlxuICAvLyBUT0RPOiBUaGUgcmVhc29uIHRoaXMgaXMgc2VwYXJhdGUgZnJvbSBpc1JlYWR5Rm9yQ29tbWl0IGlzIGJlY2F1c2UgdGhlXG4gIC8vIEZpYmVyUm9vdCBjb25jZXB0IHdpbGwgbGlrZWx5IGJlIGxpZnRlZCBvdXQgb2YgdGhlIHJlY29uY2lsZXIgYW5kIGludG9cbiAgLy8gdGhlIHJlbmRlcmVyLlxuICBmaW5pc2hlZFdvcms6IEZpYmVyIHwgbnVsbCxcbiAgLy8gVG9wIGNvbnRleHQgb2JqZWN0LCB1c2VkIGJ5IHJlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyXG4gIGNvbnRleHQ6IE9iamVjdCB8IG51bGwsXG4gIHBlbmRpbmdDb250ZXh0OiBPYmplY3QgfCBudWxsLFxuICAvLyBEZXRlcm1pbmVzIGlmIHdlIHNob3VsZCBhdHRlbXB0IHRvIGh5ZHJhdGUgb24gdGhlIGluaXRpYWwgbW91bnRcbiAgK2h5ZHJhdGU6IGJvb2xlYW4sXG4gIC8vIFJlbWFpbmluZyBleHBpcmF0aW9uIHRpbWUgb24gdGhpcyByb290LlxuICAvLyBUT0RPOiBMaWZ0IHRoaXMgaW50byB0aGUgcmVuZGVyZXJcbiAgcmVtYWluaW5nRXhwaXJhdGlvblRpbWU6IEV4cGlyYXRpb25UaW1lLFxuICAvLyBMaXN0IG9mIHRvcC1sZXZlbCBiYXRjaGVzLiBUaGlzIGxpc3QgaW5kaWNhdGVzIHdoZXRoZXIgYSBjb21taXQgc2hvdWxkIGJlXG4gIC8vIGRlZmVycmVkLiBBbHNvIGNvbnRhaW5zIGNvbXBsZXRpb24gY2FsbGJhY2tzLlxuICAvLyBUT0RPOiBMaWZ0IHRoaXMgaW50byB0aGUgcmVuZGVyZXJcbiAgZmlyc3RCYXRjaDogQmF0Y2ggfCBudWxsLFxuICAvLyBMaW5rZWQtbGlzdCBvZiByb290c1xuICBuZXh0U2NoZWR1bGVkUm9vdDogRmliZXJSb290IHwgbnVsbCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGaWJlclJvb3QoXG4gIGNvbnRhaW5lckluZm86IGFueSxcbiAgaXNBc3luYzogYm9vbGVhbixcbiAgaHlkcmF0ZTogYm9vbGVhbixcbik6IEZpYmVyUm9vdCB7XG4gIC8vIEN5Y2xpYyBjb25zdHJ1Y3Rpb24uIFRoaXMgY2hlYXRzIHRoZSB0eXBlIHN5c3RlbSByaWdodCBub3cgYmVjYXVzZVxuICAvLyBzdGF0ZU5vZGUgaXMgYW55LlxuICBjb25zdCB1bmluaXRpYWxpemVkRmliZXIgPSBjcmVhdGVIb3N0Um9vdEZpYmVyKGlzQXN5bmMpO1xuICBjb25zdCByb290ID0ge1xuICAgIGN1cnJlbnQ6IHVuaW5pdGlhbGl6ZWRGaWJlcixcbiAgICBjb250YWluZXJJbmZvOiBjb250YWluZXJJbmZvLFxuICAgIHBlbmRpbmdDaGlsZHJlbjogbnVsbCxcbiAgICBwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6IE5vV29yayxcbiAgICBmaW5pc2hlZFdvcms6IG51bGwsXG4gICAgY29udGV4dDogbnVsbCxcbiAgICBwZW5kaW5nQ29udGV4dDogbnVsbCxcbiAgICBoeWRyYXRlLFxuICAgIHJlbWFpbmluZ0V4cGlyYXRpb25UaW1lOiBOb1dvcmssXG4gICAgZmlyc3RCYXRjaDogbnVsbCxcbiAgICBuZXh0U2NoZWR1bGVkUm9vdDogbnVsbCxcbiAgfTtcbiAgdW5pbml0aWFsaXplZEZpYmVyLnN0YXRlTm9kZSA9IHJvb3Q7XG4gIHJldHVybiByb290O1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (config) {\n  var stack = (0, _ReactFiberStack2.default)();\n  var hostContext = (0, _ReactFiberHostContext2.default)(config, stack);\n  var legacyContext = (0, _ReactFiberContext2.default)(stack);\n  var newContext = (0, _ReactFiberNewContext2.default)(stack);\n  var popHostContext = hostContext.popHostContext,\n      popHostContainer = hostContext.popHostContainer;\n  var popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject,\n      popLegacyContextProvider = legacyContext.popContextProvider;\n  var popProvider = newContext.popProvider;\n\n  var hydrationContext = (0, _ReactFiberHydrationContext2.default)(config);\n\n  var _ReactFiberBeginWork = (0, _ReactFiberBeginWork3.default)(config, hostContext, legacyContext, newContext, hydrationContext, scheduleWork, computeExpirationForFiber),\n      beginWork = _ReactFiberBeginWork.beginWork;\n\n  var _ReactFiberCompleteWo = (0, _ReactFiberCompleteWork2.default)(config, hostContext, legacyContext, newContext, hydrationContext),\n      completeWork = _ReactFiberCompleteWo.completeWork;\n\n  var _ReactFiberUnwindWork = (0, _ReactFiberUnwindWork3.default)(hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary),\n      throwException = _ReactFiberUnwindWork.throwException,\n      unwindWork = _ReactFiberUnwindWork.unwindWork,\n      unwindInterruptedWork = _ReactFiberUnwindWork.unwindInterruptedWork;\n\n  var _ReactFiberCommitWork = (0, _ReactFiberCommitWork3.default)(config, onCommitPhaseError, scheduleWork, computeExpirationForFiber, markLegacyErrorBoundaryAsFailed, recalculateCurrentTime),\n      commitBeforeMutationLifeCycles = _ReactFiberCommitWork.commitBeforeMutationLifeCycles,\n      commitResetTextContent = _ReactFiberCommitWork.commitResetTextContent,\n      commitPlacement = _ReactFiberCommitWork.commitPlacement,\n      commitDeletion = _ReactFiberCommitWork.commitDeletion,\n      commitWork = _ReactFiberCommitWork.commitWork,\n      commitLifeCycles = _ReactFiberCommitWork.commitLifeCycles,\n      commitErrorLogging = _ReactFiberCommitWork.commitErrorLogging,\n      commitAttachRef = _ReactFiberCommitWork.commitAttachRef,\n      commitDetachRef = _ReactFiberCommitWork.commitDetachRef;\n\n  var now = config.now,\n      scheduleDeferredCallback = config.scheduleDeferredCallback,\n      cancelDeferredCallback = config.cancelDeferredCallback,\n      prepareForCommit = config.prepareForCommit,\n      resetAfterCommit = config.resetAfterCommit;\n\n  // Represents the current time in ms.\n\n  var originalStartTimeMs = now();\n  var mostRecentCurrentTime = (0, _ReactFiberExpirationTime.msToExpirationTime)(0);\n  var mostRecentCurrentTimeMs = originalStartTimeMs;\n\n  // Used to ensure computeUniqueAsyncExpiration is monotonically increases.\n  var lastUniqueAsyncExpiration = 0;\n\n  // Represents the expiration time that incoming updates should use. (If this\n  // is NoWork, use the default strategy: async updates in async mode, sync\n  // updates in sync mode.)\n  var expirationContext = _ReactFiberExpirationTime.NoWork;\n\n  var isWorking = false;\n\n  // The next work in progress fiber that we're currently working on.\n  var nextUnitOfWork = null;\n  var nextRoot = null;\n  // The time at which we're currently rendering work.\n  var nextRenderExpirationTime = _ReactFiberExpirationTime.NoWork;\n\n  // The next fiber with an effect that we're currently committing.\n  var nextEffect = null;\n\n  var isCommitting = false;\n\n  var isRootReadyForCommit = false;\n\n  var legacyErrorBoundariesThatAlreadyFailed = null;\n\n  // Used for performance tracking.\n  var interruptedBy = null;\n\n  var stashedWorkInProgressProperties = void 0;\n  var replayUnitOfWork = void 0;\n  var isReplayingFailedUnitOfWork = void 0;\n  var originalReplayError = void 0;\n  var rethrowOriginalError = void 0;\n  if (__DEV__ && _ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n    stashedWorkInProgressProperties = null;\n    isReplayingFailedUnitOfWork = false;\n    originalReplayError = null;\n    replayUnitOfWork = function replayUnitOfWork(failedUnitOfWork, error, isAsync) {\n      // Restore the original state of the work-in-progress\n      (0, _ReactFiber.assignFiberPropertiesInDEV)(failedUnitOfWork, stashedWorkInProgressProperties);\n      switch (failedUnitOfWork.tag) {\n        case _ReactTypeOfWork.HostRoot:\n          popHostContainer(failedUnitOfWork);\n          popTopLevelLegacyContextObject(failedUnitOfWork);\n          break;\n        case _ReactTypeOfWork.HostComponent:\n          popHostContext(failedUnitOfWork);\n          break;\n        case _ReactTypeOfWork.ClassComponent:\n          popLegacyContextProvider(failedUnitOfWork);\n          break;\n        case _ReactTypeOfWork.HostPortal:\n          popHostContainer(failedUnitOfWork);\n          break;\n        case _ReactTypeOfWork.ContextProvider:\n          popProvider(failedUnitOfWork);\n          break;\n      }\n      // Replay the begin phase.\n      isReplayingFailedUnitOfWork = true;\n      originalReplayError = error;\n      invokeGuardedCallback(null, workLoop, null, isAsync);\n      isReplayingFailedUnitOfWork = false;\n      originalReplayError = null;\n      if (hasCaughtError()) {\n        clearCaughtError();\n      } else {\n        // If the begin phase did not fail the second time, set this pointer\n        // back to the original value.\n        nextUnitOfWork = failedUnitOfWork;\n      }\n    };\n    rethrowOriginalError = function rethrowOriginalError() {\n      throw originalReplayError;\n    };\n  }\n\n  function resetStack() {\n    if (nextUnitOfWork !== null) {\n      var interruptedWork = nextUnitOfWork.return;\n      while (interruptedWork !== null) {\n        unwindInterruptedWork(interruptedWork);\n        interruptedWork = interruptedWork.return;\n      }\n    }\n\n    if (__DEV__) {\n      _ReactStrictModeWarnings2.default.discardPendingWarnings();\n      stack.checkThatStackIsEmpty();\n    }\n\n    nextRoot = null;\n    nextRenderExpirationTime = _ReactFiberExpirationTime.NoWork;\n    nextUnitOfWork = null;\n\n    isRootReadyForCommit = false;\n  }\n\n  function commitAllHostEffects() {\n    while (nextEffect !== null) {\n      if (__DEV__) {\n        _ReactDebugCurrentFiber2.default.setCurrentFiber(nextEffect);\n      }\n      (0, _ReactDebugFiberPerf.recordEffect)();\n\n      var effectTag = nextEffect.effectTag;\n\n      if (effectTag & _ReactTypeOfSideEffect.ContentReset) {\n        commitResetTextContent(nextEffect);\n      }\n\n      if (effectTag & _ReactTypeOfSideEffect.Ref) {\n        var current = nextEffect.alternate;\n        if (current !== null) {\n          commitDetachRef(current);\n        }\n      }\n\n      // The following switch statement is only concerned about placement,\n      // updates, and deletions. To avoid needing to add a case for every\n      // possible bitmap value, we remove the secondary effects from the\n      // effect tag and switch on that value.\n      var primaryEffectTag = effectTag & (_ReactTypeOfSideEffect.Placement | _ReactTypeOfSideEffect.Update | _ReactTypeOfSideEffect.Deletion);\n      switch (primaryEffectTag) {\n        case _ReactTypeOfSideEffect.Placement:\n          {\n            commitPlacement(nextEffect);\n            // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n            // any life-cycles like componentDidMount gets called.\n            // TODO: findDOMNode doesn't rely on this any more but isMounted\n            // does and isMounted is deprecated anyway so we should be able\n            // to kill this.\n            nextEffect.effectTag &= ~_ReactTypeOfSideEffect.Placement;\n            break;\n          }\n        case _ReactTypeOfSideEffect.PlacementAndUpdate:\n          {\n            // Placement\n            commitPlacement(nextEffect);\n            // Clear the \"placement\" from effect tag so that we know that this is inserted, before\n            // any life-cycles like componentDidMount gets called.\n            nextEffect.effectTag &= ~_ReactTypeOfSideEffect.Placement;\n\n            // Update\n            var _current = nextEffect.alternate;\n            commitWork(_current, nextEffect);\n            break;\n          }\n        case _ReactTypeOfSideEffect.Update:\n          {\n            var _current2 = nextEffect.alternate;\n            commitWork(_current2, nextEffect);\n            break;\n          }\n        case _ReactTypeOfSideEffect.Deletion:\n          {\n            commitDeletion(nextEffect);\n            break;\n          }\n      }\n      nextEffect = nextEffect.nextEffect;\n    }\n\n    if (__DEV__) {\n      _ReactDebugCurrentFiber2.default.resetCurrentFiber();\n    }\n  }\n\n  function commitBeforeMutationLifecycles() {\n    while (nextEffect !== null) {\n      var effectTag = nextEffect.effectTag;\n\n      if (effectTag & _ReactTypeOfSideEffect.Snapshot) {\n        (0, _ReactDebugFiberPerf.recordEffect)();\n        var current = nextEffect.alternate;\n        commitBeforeMutationLifeCycles(current, nextEffect);\n      }\n\n      // Don't cleanup effects yet;\n      // This will be done by commitAllLifeCycles()\n      nextEffect = nextEffect.nextEffect;\n    }\n  }\n\n  function commitAllLifeCycles(finishedRoot, currentTime, committedExpirationTime) {\n    if (__DEV__) {\n      _ReactStrictModeWarnings2.default.flushPendingUnsafeLifecycleWarnings();\n\n      if (_ReactFeatureFlags.warnAboutDeprecatedLifecycles) {\n        _ReactStrictModeWarnings2.default.flushPendingDeprecationWarnings();\n      }\n    }\n    while (nextEffect !== null) {\n      var effectTag = nextEffect.effectTag;\n\n      if (effectTag & (_ReactTypeOfSideEffect.Update | _ReactTypeOfSideEffect.Callback)) {\n        (0, _ReactDebugFiberPerf.recordEffect)();\n        var current = nextEffect.alternate;\n        commitLifeCycles(finishedRoot, current, nextEffect, currentTime, committedExpirationTime);\n      }\n\n      if (effectTag & _ReactTypeOfSideEffect.ErrLog) {\n        commitErrorLogging(nextEffect, onUncaughtError);\n      }\n\n      if (effectTag & _ReactTypeOfSideEffect.Ref) {\n        (0, _ReactDebugFiberPerf.recordEffect)();\n        commitAttachRef(nextEffect);\n      }\n\n      var next = nextEffect.nextEffect;\n      // Ensure that we clean these up so that we don't accidentally keep them.\n      // I'm not actually sure this matters because we can't reset firstEffect\n      // and lastEffect since they're on every node, not just the effectful\n      // ones. So we have to clean everything as we reuse nodes anyway.\n      nextEffect.nextEffect = null;\n      // Ensure that we reset the effectTag here so that we can rely on effect\n      // tags to reason about the current life-cycle.\n      nextEffect = next;\n    }\n  }\n\n  function isAlreadyFailedLegacyErrorBoundary(instance) {\n    return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);\n  }\n\n  function markLegacyErrorBoundaryAsFailed(instance) {\n    if (legacyErrorBoundariesThatAlreadyFailed === null) {\n      legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);\n    } else {\n      legacyErrorBoundariesThatAlreadyFailed.add(instance);\n    }\n  }\n\n  function commitRoot(finishedWork) {\n    isWorking = true;\n    isCommitting = true;\n    (0, _ReactDebugFiberPerf.startCommitTimer)();\n\n    var root = finishedWork.stateNode;\n    (0, _invariant2.default)(root.current !== finishedWork, 'Cannot commit the same tree as before. This is probably a bug ' + 'related to the return field. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n    var committedExpirationTime = root.pendingCommitExpirationTime;\n    (0, _invariant2.default)(committedExpirationTime !== _ReactFiberExpirationTime.NoWork, 'Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');\n    root.pendingCommitExpirationTime = _ReactFiberExpirationTime.NoWork;\n\n    var currentTime = recalculateCurrentTime();\n\n    // Reset this to null before calling lifecycles\n    _ReactGlobalSharedState.ReactCurrentOwner.current = null;\n\n    var firstEffect = void 0;\n    if (finishedWork.effectTag > _ReactTypeOfSideEffect.PerformedWork) {\n      // A fiber's effect list consists only of its children, not itself. So if\n      // the root has an effect, we need to add it to the end of the list. The\n      // resulting list is the set that would belong to the root's parent, if\n      // it had one; that is, all the effects in the tree including the root.\n      if (finishedWork.lastEffect !== null) {\n        finishedWork.lastEffect.nextEffect = finishedWork;\n        firstEffect = finishedWork.firstEffect;\n      } else {\n        firstEffect = finishedWork;\n      }\n    } else {\n      // There is no effect on the root.\n      firstEffect = finishedWork.firstEffect;\n    }\n\n    prepareForCommit(root.containerInfo);\n\n    // Invoke instances of getSnapshotBeforeUpdate before mutation.\n    nextEffect = firstEffect;\n    (0, _ReactDebugFiberPerf.startCommitSnapshotEffectsTimer)();\n    while (nextEffect !== null) {\n      var didError = false;\n      var error = void 0;\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);\n        if (hasCaughtError()) {\n          didError = true;\n          error = clearCaughtError();\n        }\n      } else {\n        try {\n          commitBeforeMutationLifecycles();\n        } catch (e) {\n          didError = true;\n          error = e;\n        }\n      }\n      if (didError) {\n        (0, _invariant2.default)(nextEffect !== null, 'Should have next effect. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        onCommitPhaseError(nextEffect, error);\n        // Clean-up\n        if (nextEffect !== null) {\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    }\n    (0, _ReactDebugFiberPerf.stopCommitSnapshotEffectsTimer)();\n\n    // Commit all the side-effects within a tree. We'll do this in two passes.\n    // The first pass performs all the host insertions, updates, deletions and\n    // ref unmounts.\n    nextEffect = firstEffect;\n    (0, _ReactDebugFiberPerf.startCommitHostEffectsTimer)();\n    while (nextEffect !== null) {\n      var _didError = false;\n      var _error = void 0;\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitAllHostEffects, null);\n        if (hasCaughtError()) {\n          _didError = true;\n          _error = clearCaughtError();\n        }\n      } else {\n        try {\n          commitAllHostEffects();\n        } catch (e) {\n          _didError = true;\n          _error = e;\n        }\n      }\n      if (_didError) {\n        (0, _invariant2.default)(nextEffect !== null, 'Should have next effect. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        onCommitPhaseError(nextEffect, _error);\n        // Clean-up\n        if (nextEffect !== null) {\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    }\n    (0, _ReactDebugFiberPerf.stopCommitHostEffectsTimer)();\n\n    resetAfterCommit(root.containerInfo);\n\n    // The work-in-progress tree is now the current tree. This must come after\n    // the first pass of the commit phase, so that the previous tree is still\n    // current during componentWillUnmount, but before the second pass, so that\n    // the finished work is current during componentDidMount/Update.\n    root.current = finishedWork;\n\n    // In the second pass we'll perform all life-cycles and ref callbacks.\n    // Life-cycles happen as a separate pass so that all placements, updates,\n    // and deletions in the entire tree have already been invoked.\n    // This pass also triggers any renderer-specific initial effects.\n    nextEffect = firstEffect;\n    (0, _ReactDebugFiberPerf.startCommitLifeCyclesTimer)();\n    while (nextEffect !== null) {\n      var _didError2 = false;\n      var _error2 = void 0;\n      if (__DEV__) {\n        invokeGuardedCallback(null, commitAllLifeCycles, null, root, currentTime, committedExpirationTime);\n        if (hasCaughtError()) {\n          _didError2 = true;\n          _error2 = clearCaughtError();\n        }\n      } else {\n        try {\n          commitAllLifeCycles(root, currentTime, committedExpirationTime);\n        } catch (e) {\n          _didError2 = true;\n          _error2 = e;\n        }\n      }\n      if (_didError2) {\n        (0, _invariant2.default)(nextEffect !== null, 'Should have next effect. This error is likely caused by a bug ' + 'in React. Please file an issue.');\n        onCommitPhaseError(nextEffect, _error2);\n        if (nextEffect !== null) {\n          nextEffect = nextEffect.nextEffect;\n        }\n      }\n    }\n\n    isCommitting = false;\n    isWorking = false;\n    (0, _ReactDebugFiberPerf.stopCommitLifeCyclesTimer)();\n    (0, _ReactDebugFiberPerf.stopCommitTimer)();\n    if (typeof _ReactFiberDevToolsHook.onCommitRoot === 'function') {\n      (0, _ReactFiberDevToolsHook.onCommitRoot)(finishedWork.stateNode);\n    }\n    if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n      _ReactFiberInstrumentation2.default.debugTool.onCommitWork(finishedWork);\n    }\n\n    var remainingTime = root.current.expirationTime;\n    if (remainingTime === _ReactFiberExpirationTime.NoWork) {\n      // If there's no remaining work, we can clear the set of already failed\n      // error boundaries.\n      legacyErrorBoundariesThatAlreadyFailed = null;\n    }\n    return remainingTime;\n  }\n\n  function resetExpirationTime(workInProgress, renderTime) {\n    if (renderTime !== _ReactFiberExpirationTime.Never && workInProgress.expirationTime === _ReactFiberExpirationTime.Never) {\n      // The children of this component are hidden. Don't bubble their\n      // expiration times.\n      return;\n    }\n\n    // Check for pending updates.\n    var newExpirationTime = (0, _ReactFiberUpdateQueue.getUpdateExpirationTime)(workInProgress);\n\n    // TODO: Calls need to visit stateNode\n\n    // Bubble up the earliest expiration time.\n    var child = workInProgress.child;\n    while (child !== null) {\n      if (child.expirationTime !== _ReactFiberExpirationTime.NoWork && (newExpirationTime === _ReactFiberExpirationTime.NoWork || newExpirationTime > child.expirationTime)) {\n        newExpirationTime = child.expirationTime;\n      }\n      child = child.sibling;\n    }\n    workInProgress.expirationTime = newExpirationTime;\n  }\n\n  function completeUnitOfWork(workInProgress) {\n    // Attempt to complete the current unit of work, then move to the\n    // next sibling. If there are no more siblings, return to the\n    // parent fiber.\n    while (true) {\n      // The current, flushed, state of this fiber is the alternate.\n      // Ideally nothing should rely on this, but relying on it here\n      // means that we don't need an additional field on the work in\n      // progress.\n      var current = workInProgress.alternate;\n      if (__DEV__) {\n        _ReactDebugCurrentFiber2.default.setCurrentFiber(workInProgress);\n      }\n\n      var returnFiber = workInProgress.return;\n      var siblingFiber = workInProgress.sibling;\n\n      if ((workInProgress.effectTag & _ReactTypeOfSideEffect.Incomplete) === _ReactTypeOfSideEffect.NoEffect) {\n        // This fiber completed.\n        var next = completeWork(current, workInProgress, nextRenderExpirationTime);\n        (0, _ReactDebugFiberPerf.stopWorkTimer)(workInProgress);\n        resetExpirationTime(workInProgress, nextRenderExpirationTime);\n        if (__DEV__) {\n          _ReactDebugCurrentFiber2.default.resetCurrentFiber();\n        }\n\n        if (next !== null) {\n          (0, _ReactDebugFiberPerf.stopWorkTimer)(workInProgress);\n          if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n            _ReactFiberInstrumentation2.default.debugTool.onCompleteWork(workInProgress);\n          }\n          // If completing this work spawned new work, do that next. We'll come\n          // back here again.\n          return next;\n        }\n\n        if (returnFiber !== null &&\n        // Do not append effects to parents if a sibling failed to complete\n        (returnFiber.effectTag & _ReactTypeOfSideEffect.Incomplete) === _ReactTypeOfSideEffect.NoEffect) {\n          // Append all the effects of the subtree and this fiber onto the effect\n          // list of the parent. The completion order of the children affects the\n          // side-effect order.\n          if (returnFiber.firstEffect === null) {\n            returnFiber.firstEffect = workInProgress.firstEffect;\n          }\n          if (workInProgress.lastEffect !== null) {\n            if (returnFiber.lastEffect !== null) {\n              returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;\n            }\n            returnFiber.lastEffect = workInProgress.lastEffect;\n          }\n\n          // If this fiber had side-effects, we append it AFTER the children's\n          // side-effects. We can perform certain side-effects earlier if\n          // needed, by doing multiple passes over the effect list. We don't want\n          // to schedule our own side-effect on our own list because if end up\n          // reusing children we'll schedule this effect onto itself since we're\n          // at the end.\n          var effectTag = workInProgress.effectTag;\n          // Skip both NoWork and PerformedWork tags when creating the effect list.\n          // PerformedWork effect is read by React DevTools but shouldn't be committed.\n          if (effectTag > _ReactTypeOfSideEffect.PerformedWork) {\n            if (returnFiber.lastEffect !== null) {\n              returnFiber.lastEffect.nextEffect = workInProgress;\n            } else {\n              returnFiber.firstEffect = workInProgress;\n            }\n            returnFiber.lastEffect = workInProgress;\n          }\n        }\n\n        if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n          _ReactFiberInstrumentation2.default.debugTool.onCompleteWork(workInProgress);\n        }\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          return siblingFiber;\n        } else if (returnFiber !== null) {\n          // If there's no more work in this returnFiber. Complete the returnFiber.\n          workInProgress = returnFiber;\n          continue;\n        } else {\n          // We've reached the root.\n          isRootReadyForCommit = true;\n          return null;\n        }\n      } else {\n        // This fiber did not complete because something threw. Pop values off\n        // the stack without entering the complete phase. If this is a boundary,\n        // capture values if possible.\n        var _next = unwindWork(workInProgress);\n        // Because this fiber did not complete, don't reset its expiration time.\n        if (workInProgress.effectTag & _ReactTypeOfSideEffect.DidCapture) {\n          // Restarting an error boundary\n          (0, _ReactDebugFiberPerf.stopFailedWorkTimer)(workInProgress);\n        } else {\n          (0, _ReactDebugFiberPerf.stopWorkTimer)(workInProgress);\n        }\n\n        if (__DEV__) {\n          _ReactDebugCurrentFiber2.default.resetCurrentFiber();\n        }\n\n        if (_next !== null) {\n          (0, _ReactDebugFiberPerf.stopWorkTimer)(workInProgress);\n          if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n            _ReactFiberInstrumentation2.default.debugTool.onCompleteWork(workInProgress);\n          }\n          // If completing this work spawned new work, do that next. We'll come\n          // back here again.\n          // Since we're restarting, remove anything that is not a host effect\n          // from the effect tag.\n          _next.effectTag &= _ReactTypeOfSideEffect.HostEffectMask;\n          return _next;\n        }\n\n        if (returnFiber !== null) {\n          // Mark the parent fiber as incomplete and clear its effect list.\n          returnFiber.firstEffect = returnFiber.lastEffect = null;\n          returnFiber.effectTag |= _ReactTypeOfSideEffect.Incomplete;\n        }\n\n        if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n          _ReactFiberInstrumentation2.default.debugTool.onCompleteWork(workInProgress);\n        }\n\n        if (siblingFiber !== null) {\n          // If there is more work to do in this returnFiber, do that next.\n          return siblingFiber;\n        } else if (returnFiber !== null) {\n          // If there's no more work in this returnFiber. Complete the returnFiber.\n          workInProgress = returnFiber;\n          continue;\n        } else {\n          return null;\n        }\n      }\n    }\n\n    // Without this explicit null return Flow complains of invalid return type\n    // TODO Remove the above while(true) loop\n    // eslint-disable-next-line no-unreachable\n    return null;\n  }\n\n  function performUnitOfWork(workInProgress) {\n    // The current, flushed, state of this fiber is the alternate.\n    // Ideally nothing should rely on this, but relying on it here\n    // means that we don't need an additional field on the work in\n    // progress.\n    var current = workInProgress.alternate;\n\n    // See if beginning this work spawns more work.\n    (0, _ReactDebugFiberPerf.startWorkTimer)(workInProgress);\n    if (__DEV__) {\n      _ReactDebugCurrentFiber2.default.setCurrentFiber(workInProgress);\n    }\n\n    if (__DEV__ && _ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n      stashedWorkInProgressProperties = (0, _ReactFiber.assignFiberPropertiesInDEV)(stashedWorkInProgressProperties, workInProgress);\n    }\n    var next = beginWork(current, workInProgress, nextRenderExpirationTime);\n    if (__DEV__) {\n      _ReactDebugCurrentFiber2.default.resetCurrentFiber();\n      if (isReplayingFailedUnitOfWork) {\n        // Currently replaying a failed unit of work. This should be unreachable,\n        // because the render phase is meant to be idempotent, and it should\n        // have thrown again. Since it didn't, rethrow the original error, so\n        // React's internal stack is not misaligned.\n        rethrowOriginalError();\n      }\n    }\n    if (__DEV__ && _ReactFiberInstrumentation2.default.debugTool) {\n      _ReactFiberInstrumentation2.default.debugTool.onBeginWork(workInProgress);\n    }\n\n    if (next === null) {\n      // If this doesn't spawn new work, complete the current work.\n      next = completeUnitOfWork(workInProgress);\n    }\n\n    _ReactGlobalSharedState.ReactCurrentOwner.current = null;\n\n    return next;\n  }\n\n  function workLoop(isAsync) {\n    if (!isAsync) {\n      // Flush all expired work.\n      while (nextUnitOfWork !== null) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n      }\n    } else {\n      // Flush asynchronous work until the deadline runs out of time.\n      while (nextUnitOfWork !== null && !shouldYield()) {\n        nextUnitOfWork = performUnitOfWork(nextUnitOfWork);\n      }\n    }\n  }\n\n  function renderRoot(root, expirationTime, isAsync) {\n    (0, _invariant2.default)(!isWorking, 'renderRoot was called recursively. This error is likely caused ' + 'by a bug in React. Please file an issue.');\n    isWorking = true;\n\n    // Check if we're starting from a fresh stack, or if we're resuming from\n    // previously yielded work.\n    if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {\n      // Reset the stack and start working from the root.\n      resetStack();\n      nextRoot = root;\n      nextRenderExpirationTime = expirationTime;\n      nextUnitOfWork = (0, _ReactFiber.createWorkInProgress)(nextRoot.current, null, nextRenderExpirationTime);\n      root.pendingCommitExpirationTime = _ReactFiberExpirationTime.NoWork;\n    }\n\n    var didFatal = false;\n\n    (0, _ReactDebugFiberPerf.startWorkLoopTimer)(nextUnitOfWork);\n\n    do {\n      try {\n        workLoop(isAsync);\n      } catch (thrownValue) {\n        if (nextUnitOfWork === null) {\n          // This is a fatal error.\n          didFatal = true;\n          onUncaughtError(thrownValue);\n          break;\n        }\n\n        if (__DEV__ && _ReactFeatureFlags.replayFailedUnitOfWorkWithInvokeGuardedCallback) {\n          var failedUnitOfWork = nextUnitOfWork;\n          replayUnitOfWork(failedUnitOfWork, thrownValue, isAsync);\n        }\n\n        var sourceFiber = nextUnitOfWork;\n        var returnFiber = sourceFiber.return;\n        if (returnFiber === null) {\n          // This is the root. The root could capture its own errors. However,\n          // we don't know if it errors before or after we pushed the host\n          // context. This information is needed to avoid a stack mismatch.\n          // Because we're not sure, treat this as a fatal error. We could track\n          // which phase it fails in, but doesn't seem worth it. At least\n          // for now.\n          didFatal = true;\n          onUncaughtError(thrownValue);\n          break;\n        }\n        throwException(returnFiber, sourceFiber, thrownValue);\n        nextUnitOfWork = completeUnitOfWork(sourceFiber);\n      }\n      break;\n    } while (true);\n\n    // We're done performing work. Time to clean up.\n    var didCompleteRoot = false;\n    isWorking = false;\n\n    // Yield back to main thread.\n    if (didFatal) {\n      (0, _ReactDebugFiberPerf.stopWorkLoopTimer)(interruptedBy, didCompleteRoot);\n      interruptedBy = null;\n      // There was a fatal error.\n      if (__DEV__) {\n        stack.resetStackAfterFatalErrorInDev();\n      }\n      return null;\n    } else if (nextUnitOfWork === null) {\n      // We reached the root.\n      if (isRootReadyForCommit) {\n        didCompleteRoot = true;\n        (0, _ReactDebugFiberPerf.stopWorkLoopTimer)(interruptedBy, didCompleteRoot);\n        interruptedBy = null;\n        // The root successfully completed. It's ready for commit.\n        root.pendingCommitExpirationTime = expirationTime;\n        var finishedWork = root.current.alternate;\n        return finishedWork;\n      } else {\n        // The root did not complete.\n        (0, _ReactDebugFiberPerf.stopWorkLoopTimer)(interruptedBy, didCompleteRoot);\n        interruptedBy = null;\n        (0, _invariant2.default)(false, 'Expired work should have completed. This error is likely caused ' + 'by a bug in React. Please file an issue.');\n      }\n    } else {\n      (0, _ReactDebugFiberPerf.stopWorkLoopTimer)(interruptedBy, didCompleteRoot);\n      interruptedBy = null;\n      // There's more work to do, but we ran out of time. Yield back to\n      // the renderer.\n      return null;\n    }\n  }\n\n  function scheduleCapture(sourceFiber, boundaryFiber, value, expirationTime) {\n    // TODO: We only support dispatching errors.\n    var capturedValue = (0, _ReactCapturedValue.createCapturedValue)(value, sourceFiber);\n    var update = {\n      expirationTime: expirationTime,\n      partialState: null,\n      callback: null,\n      isReplace: false,\n      isForced: false,\n      capturedValue: capturedValue,\n      next: null\n    };\n    (0, _ReactFiberUpdateQueue.insertUpdateIntoFiber)(boundaryFiber, update);\n    scheduleWork(boundaryFiber, expirationTime);\n  }\n\n  function dispatch(sourceFiber, value, expirationTime) {\n    (0, _invariant2.default)(!isWorking || isCommitting, 'dispatch: Cannot dispatch during the render phase.');\n\n    // TODO: Handle arrays\n\n    var fiber = sourceFiber.return;\n    while (fiber !== null) {\n      switch (fiber.tag) {\n        case _ReactTypeOfWork.ClassComponent:\n          var ctor = fiber.type;\n          var instance = fiber.stateNode;\n          if (typeof ctor.getDerivedStateFromCatch === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {\n            scheduleCapture(sourceFiber, fiber, value, expirationTime);\n            return;\n          }\n          break;\n        // TODO: Handle async boundaries\n        case _ReactTypeOfWork.HostRoot:\n          scheduleCapture(sourceFiber, fiber, value, expirationTime);\n          return;\n      }\n      fiber = fiber.return;\n    }\n\n    if (sourceFiber.tag === _ReactTypeOfWork.HostRoot) {\n      // Error was thrown at the root. There is no parent, so the root\n      // itself should capture it.\n      scheduleCapture(sourceFiber, sourceFiber, value, expirationTime);\n    }\n  }\n\n  function onCommitPhaseError(fiber, error) {\n    return dispatch(fiber, error, _ReactFiberExpirationTime.Sync);\n  }\n\n  function computeAsyncExpiration(currentTime) {\n    // Given the current clock time, returns an expiration time. We use rounding\n    // to batch like updates together.\n    // Should complete within ~1000ms. 1200ms max.\n    var expirationMs = 5000;\n    var bucketSizeMs = 250;\n    return (0, _ReactFiberExpirationTime.computeExpirationBucket)(currentTime, expirationMs, bucketSizeMs);\n  }\n\n  function computeInteractiveExpiration(currentTime) {\n    // Should complete within ~500ms. 600ms max.\n    var expirationMs = 500;\n    var bucketSizeMs = 100;\n    return (0, _ReactFiberExpirationTime.computeExpirationBucket)(currentTime, expirationMs, bucketSizeMs);\n  }\n\n  // Creates a unique async expiration time.\n  function computeUniqueAsyncExpiration() {\n    var currentTime = recalculateCurrentTime();\n    var result = computeAsyncExpiration(currentTime);\n    if (result <= lastUniqueAsyncExpiration) {\n      // Since we assume the current time monotonically increases, we only hit\n      // this branch when computeUniqueAsyncExpiration is fired multiple times\n      // within a 200ms window (or whatever the async bucket size is).\n      result = lastUniqueAsyncExpiration + 1;\n    }\n    lastUniqueAsyncExpiration = result;\n    return lastUniqueAsyncExpiration;\n  }\n\n  function computeExpirationForFiber(fiber) {\n    var expirationTime = void 0;\n    if (expirationContext !== _ReactFiberExpirationTime.NoWork) {\n      // An explicit expiration context was set;\n      expirationTime = expirationContext;\n    } else if (isWorking) {\n      if (isCommitting) {\n        // Updates that occur during the commit phase should have sync priority\n        // by default.\n        expirationTime = _ReactFiberExpirationTime.Sync;\n      } else {\n        // Updates during the render phase should expire at the same time as\n        // the work that is being rendered.\n        expirationTime = nextRenderExpirationTime;\n      }\n    } else {\n      // No explicit expiration context was set, and we're not currently\n      // performing work. Calculate a new expiration time.\n      if (fiber.mode & _ReactTypeOfMode.AsyncMode) {\n        if (isBatchingInteractiveUpdates) {\n          // This is an interactive update\n          var currentTime = recalculateCurrentTime();\n          expirationTime = computeInteractiveExpiration(currentTime);\n        } else {\n          // This is an async update\n          var _currentTime = recalculateCurrentTime();\n          expirationTime = computeAsyncExpiration(_currentTime);\n        }\n      } else {\n        // This is a sync update\n        expirationTime = _ReactFiberExpirationTime.Sync;\n      }\n    }\n    if (isBatchingInteractiveUpdates) {\n      // This is an interactive update. Keep track of the lowest pending\n      // interactive expiration time. This allows us to synchronously flush\n      // all interactive updates when needed.\n      if (lowestPendingInteractiveExpirationTime === _ReactFiberExpirationTime.NoWork || expirationTime > lowestPendingInteractiveExpirationTime) {\n        lowestPendingInteractiveExpirationTime = expirationTime;\n      }\n    }\n    return expirationTime;\n  }\n\n  function scheduleWork(fiber, expirationTime) {\n    return scheduleWorkImpl(fiber, expirationTime, false);\n  }\n\n  function scheduleWorkImpl(fiber, expirationTime, isErrorRecovery) {\n    (0, _ReactDebugFiberPerf.recordScheduleUpdate)();\n\n    if (__DEV__) {\n      if (!isErrorRecovery && fiber.tag === _ReactTypeOfWork.ClassComponent) {\n        var instance = fiber.stateNode;\n        warnAboutInvalidUpdates(instance);\n      }\n    }\n\n    var node = fiber;\n    while (node !== null) {\n      // Walk the parent path to the root and update each node's\n      // expiration time.\n      if (node.expirationTime === _ReactFiberExpirationTime.NoWork || node.expirationTime > expirationTime) {\n        node.expirationTime = expirationTime;\n      }\n      if (node.alternate !== null) {\n        if (node.alternate.expirationTime === _ReactFiberExpirationTime.NoWork || node.alternate.expirationTime > expirationTime) {\n          node.alternate.expirationTime = expirationTime;\n        }\n      }\n      if (node.return === null) {\n        if (node.tag === _ReactTypeOfWork.HostRoot) {\n          var root = node.stateNode;\n          if (!isWorking && nextRenderExpirationTime !== _ReactFiberExpirationTime.NoWork && expirationTime < nextRenderExpirationTime) {\n            // This is an interruption. (Used for performance tracking.)\n            interruptedBy = fiber;\n            resetStack();\n          }\n          if (\n          // If we're in the render phase, we don't need to schedule this root\n          // for an update, because we'll do it before we exit...\n          !isWorking || isCommitting ||\n          // ...unless this is a different root than the one we're rendering.\n          nextRoot !== root) {\n            // Add this root to the root schedule.\n            requestWork(root, expirationTime);\n          }\n          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {\n            (0, _invariant2.default)(false, 'Maximum update depth exceeded. This can happen when a ' + 'component repeatedly calls setState inside ' + 'componentWillUpdate or componentDidUpdate. React limits ' + 'the number of nested updates to prevent infinite loops.');\n          }\n        } else {\n          if (__DEV__) {\n            if (!isErrorRecovery && fiber.tag === _ReactTypeOfWork.ClassComponent) {\n              warnAboutUpdateOnUnmounted(fiber);\n            }\n          }\n          return;\n        }\n      }\n      node = node.return;\n    }\n  }\n\n  function recalculateCurrentTime() {\n    // Subtract initial time so it fits inside 32bits\n    mostRecentCurrentTimeMs = now() - originalStartTimeMs;\n    mostRecentCurrentTime = (0, _ReactFiberExpirationTime.msToExpirationTime)(mostRecentCurrentTimeMs);\n    return mostRecentCurrentTime;\n  }\n\n  function deferredUpdates(fn) {\n    var previousExpirationContext = expirationContext;\n    var currentTime = recalculateCurrentTime();\n    expirationContext = computeAsyncExpiration(currentTime);\n    try {\n      return fn();\n    } finally {\n      expirationContext = previousExpirationContext;\n    }\n  }\n  function syncUpdates(fn, a, b, c, d) {\n    var previousExpirationContext = expirationContext;\n    expirationContext = _ReactFiberExpirationTime.Sync;\n    try {\n      return fn(a, b, c, d);\n    } finally {\n      expirationContext = previousExpirationContext;\n    }\n  }\n\n  // TODO: Everything below this is written as if it has been lifted to the\n  // renderers. I'll do this in a follow-up.\n\n  // Linked-list of roots\n  var firstScheduledRoot = null;\n  var lastScheduledRoot = null;\n\n  var callbackExpirationTime = _ReactFiberExpirationTime.NoWork;\n  var callbackID = -1;\n  var isRendering = false;\n  var nextFlushedRoot = null;\n  var nextFlushedExpirationTime = _ReactFiberExpirationTime.NoWork;\n  var lowestPendingInteractiveExpirationTime = _ReactFiberExpirationTime.NoWork;\n  var deadlineDidExpire = false;\n  var hasUnhandledError = false;\n  var unhandledError = null;\n  var deadline = null;\n\n  var isBatchingUpdates = false;\n  var isUnbatchingUpdates = false;\n  var isBatchingInteractiveUpdates = false;\n\n  var completedBatches = null;\n\n  // Use these to prevent an infinite loop of nested updates\n  var NESTED_UPDATE_LIMIT = 1000;\n  var nestedUpdateCount = 0;\n\n  var timeHeuristicForUnitOfWork = 1;\n\n  function scheduleCallbackWithExpiration(expirationTime) {\n    if (callbackExpirationTime !== _ReactFiberExpirationTime.NoWork) {\n      // A callback is already scheduled. Check its expiration time (timeout).\n      if (expirationTime > callbackExpirationTime) {\n        // Existing callback has sufficient timeout. Exit.\n        return;\n      } else {\n        // Existing callback has insufficient timeout. Cancel and schedule a\n        // new one.\n        cancelDeferredCallback(callbackID);\n      }\n      // The request callback timer is already running. Don't start a new one.\n    } else {\n      (0, _ReactDebugFiberPerf.startRequestCallbackTimer)();\n    }\n\n    // Compute a timeout for the given expiration time.\n    var currentMs = now() - originalStartTimeMs;\n    var expirationMs = (0, _ReactFiberExpirationTime.expirationTimeToMs)(expirationTime);\n    var timeout = expirationMs - currentMs;\n\n    callbackExpirationTime = expirationTime;\n    callbackID = scheduleDeferredCallback(performAsyncWork, { timeout: timeout });\n  }\n\n  // requestWork is called by the scheduler whenever a root receives an update.\n  // It's up to the renderer to call renderRoot at some point in the future.\n  function requestWork(root, expirationTime) {\n    addRootToSchedule(root, expirationTime);\n\n    if (isRendering) {\n      // Prevent reentrancy. Remaining work will be scheduled at the end of\n      // the currently rendering batch.\n      return;\n    }\n\n    if (isBatchingUpdates) {\n      // Flush work at the end of the batch.\n      if (isUnbatchingUpdates) {\n        // ...unless we're inside unbatchedUpdates, in which case we should\n        // flush it now.\n        nextFlushedRoot = root;\n        nextFlushedExpirationTime = _ReactFiberExpirationTime.Sync;\n        performWorkOnRoot(root, _ReactFiberExpirationTime.Sync, false);\n      }\n      return;\n    }\n\n    // TODO: Get rid of Sync and use current time?\n    if (expirationTime === _ReactFiberExpirationTime.Sync) {\n      performSyncWork();\n    } else {\n      scheduleCallbackWithExpiration(expirationTime);\n    }\n  }\n\n  function addRootToSchedule(root, expirationTime) {\n    // Add the root to the schedule.\n    // Check if this root is already part of the schedule.\n    if (root.nextScheduledRoot === null) {\n      // This root is not already scheduled. Add it.\n      root.remainingExpirationTime = expirationTime;\n      if (lastScheduledRoot === null) {\n        firstScheduledRoot = lastScheduledRoot = root;\n        root.nextScheduledRoot = root;\n      } else {\n        lastScheduledRoot.nextScheduledRoot = root;\n        lastScheduledRoot = root;\n        lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n      }\n    } else {\n      // This root is already scheduled, but its priority may have increased.\n      var remainingExpirationTime = root.remainingExpirationTime;\n      if (remainingExpirationTime === _ReactFiberExpirationTime.NoWork || expirationTime < remainingExpirationTime) {\n        // Update the priority.\n        root.remainingExpirationTime = expirationTime;\n      }\n    }\n  }\n\n  function findHighestPriorityRoot() {\n    var highestPriorityWork = _ReactFiberExpirationTime.NoWork;\n    var highestPriorityRoot = null;\n    if (lastScheduledRoot !== null) {\n      var previousScheduledRoot = lastScheduledRoot;\n      var root = firstScheduledRoot;\n      while (root !== null) {\n        var remainingExpirationTime = root.remainingExpirationTime;\n        if (remainingExpirationTime === _ReactFiberExpirationTime.NoWork) {\n          // This root no longer has work. Remove it from the scheduler.\n\n          // TODO: This check is redudant, but Flow is confused by the branch\n          // below where we set lastScheduledRoot to null, even though we break\n          // from the loop right after.\n          (0, _invariant2.default)(previousScheduledRoot !== null && lastScheduledRoot !== null, 'Should have a previous and last root. This error is likely ' + 'caused by a bug in React. Please file an issue.');\n          if (root === root.nextScheduledRoot) {\n            // This is the only root in the list.\n            root.nextScheduledRoot = null;\n            firstScheduledRoot = lastScheduledRoot = null;\n            break;\n          } else if (root === firstScheduledRoot) {\n            // This is the first root in the list.\n            var next = root.nextScheduledRoot;\n            firstScheduledRoot = next;\n            lastScheduledRoot.nextScheduledRoot = next;\n            root.nextScheduledRoot = null;\n          } else if (root === lastScheduledRoot) {\n            // This is the last root in the list.\n            lastScheduledRoot = previousScheduledRoot;\n            lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;\n            root.nextScheduledRoot = null;\n            break;\n          } else {\n            previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;\n            root.nextScheduledRoot = null;\n          }\n          root = previousScheduledRoot.nextScheduledRoot;\n        } else {\n          if (highestPriorityWork === _ReactFiberExpirationTime.NoWork || remainingExpirationTime < highestPriorityWork) {\n            // Update the priority, if it's higher\n            highestPriorityWork = remainingExpirationTime;\n            highestPriorityRoot = root;\n          }\n          if (root === lastScheduledRoot) {\n            break;\n          }\n          previousScheduledRoot = root;\n          root = root.nextScheduledRoot;\n        }\n      }\n    }\n\n    // If the next root is the same as the previous root, this is a nested\n    // update. To prevent an infinite loop, increment the nested update count.\n    var previousFlushedRoot = nextFlushedRoot;\n    if (previousFlushedRoot !== null && previousFlushedRoot === highestPriorityRoot && highestPriorityWork === _ReactFiberExpirationTime.Sync) {\n      nestedUpdateCount++;\n    } else {\n      // Reset whenever we switch roots.\n      nestedUpdateCount = 0;\n    }\n    nextFlushedRoot = highestPriorityRoot;\n    nextFlushedExpirationTime = highestPriorityWork;\n  }\n\n  function performAsyncWork(dl) {\n    performWork(_ReactFiberExpirationTime.NoWork, true, dl);\n  }\n\n  function performSyncWork() {\n    performWork(_ReactFiberExpirationTime.Sync, false, null);\n  }\n\n  function performWork(minExpirationTime, isAsync, dl) {\n    deadline = dl;\n\n    // Keep working on roots until there's no more work, or until the we reach\n    // the deadline.\n    findHighestPriorityRoot();\n\n    if (_ReactFeatureFlags.enableUserTimingAPI && deadline !== null) {\n      var didExpire = nextFlushedExpirationTime < recalculateCurrentTime();\n      var timeout = (0, _ReactFiberExpirationTime.expirationTimeToMs)(nextFlushedExpirationTime);\n      (0, _ReactDebugFiberPerf.stopRequestCallbackTimer)(didExpire, timeout);\n    }\n\n    if (isAsync) {\n      while (nextFlushedRoot !== null && nextFlushedExpirationTime !== _ReactFiberExpirationTime.NoWork && (minExpirationTime === _ReactFiberExpirationTime.NoWork || minExpirationTime >= nextFlushedExpirationTime) && (!deadlineDidExpire || recalculateCurrentTime() >= nextFlushedExpirationTime)) {\n        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, !deadlineDidExpire);\n        findHighestPriorityRoot();\n      }\n    } else {\n      while (nextFlushedRoot !== null && nextFlushedExpirationTime !== _ReactFiberExpirationTime.NoWork && (minExpirationTime === _ReactFiberExpirationTime.NoWork || minExpirationTime >= nextFlushedExpirationTime)) {\n        performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);\n        findHighestPriorityRoot();\n      }\n    }\n\n    // We're done flushing work. Either we ran out of time in this callback,\n    // or there's no more work left with sufficient priority.\n\n    // If we're inside a callback, set this to false since we just completed it.\n    if (deadline !== null) {\n      callbackExpirationTime = _ReactFiberExpirationTime.NoWork;\n      callbackID = -1;\n    }\n    // If there's work left over, schedule a new callback.\n    if (nextFlushedExpirationTime !== _ReactFiberExpirationTime.NoWork) {\n      scheduleCallbackWithExpiration(nextFlushedExpirationTime);\n    }\n\n    // Clean-up.\n    deadline = null;\n    deadlineDidExpire = false;\n\n    finishRendering();\n  }\n\n  function flushRoot(root, expirationTime) {\n    (0, _invariant2.default)(!isRendering, 'work.commit(): Cannot commit while already rendering. This likely ' + 'means you attempted to commit from inside a lifecycle method.');\n    // Perform work on root as if the given expiration time is the current time.\n    // This has the effect of synchronously flushing all work up to and\n    // including the given time.\n    nextFlushedRoot = root;\n    nextFlushedExpirationTime = expirationTime;\n    performWorkOnRoot(root, expirationTime, false);\n    // Flush any sync work that was scheduled by lifecycles\n    performSyncWork();\n    finishRendering();\n  }\n\n  function finishRendering() {\n    nestedUpdateCount = 0;\n\n    if (completedBatches !== null) {\n      var batches = completedBatches;\n      completedBatches = null;\n      for (var i = 0; i < batches.length; i++) {\n        var batch = batches[i];\n        try {\n          batch._onComplete();\n        } catch (error) {\n          if (!hasUnhandledError) {\n            hasUnhandledError = true;\n            unhandledError = error;\n          }\n        }\n      }\n    }\n\n    if (hasUnhandledError) {\n      var error = unhandledError;\n      unhandledError = null;\n      hasUnhandledError = false;\n      throw error;\n    }\n  }\n\n  function performWorkOnRoot(root, expirationTime, isAsync) {\n    (0, _invariant2.default)(!isRendering, 'performWorkOnRoot was called recursively. This error is likely caused ' + 'by a bug in React. Please file an issue.');\n\n    isRendering = true;\n\n    // Check if this is async work or sync/expired work.\n    if (!isAsync) {\n      // Flush sync work.\n      var finishedWork = root.finishedWork;\n      if (finishedWork !== null) {\n        // This root is already complete. We can commit it.\n        completeRoot(root, finishedWork, expirationTime);\n      } else {\n        root.finishedWork = null;\n        finishedWork = renderRoot(root, expirationTime, false);\n        if (finishedWork !== null) {\n          // We've completed the root. Commit it.\n          completeRoot(root, finishedWork, expirationTime);\n        }\n      }\n    } else {\n      // Flush async work.\n      var _finishedWork = root.finishedWork;\n      if (_finishedWork !== null) {\n        // This root is already complete. We can commit it.\n        completeRoot(root, _finishedWork, expirationTime);\n      } else {\n        root.finishedWork = null;\n        _finishedWork = renderRoot(root, expirationTime, true);\n        if (_finishedWork !== null) {\n          // We've completed the root. Check the deadline one more time\n          // before committing.\n          if (!shouldYield()) {\n            // Still time left. Commit the root.\n            completeRoot(root, _finishedWork, expirationTime);\n          } else {\n            // There's no time left. Mark this root as complete. We'll come\n            // back and commit it later.\n            root.finishedWork = _finishedWork;\n          }\n        }\n      }\n    }\n\n    isRendering = false;\n  }\n\n  function completeRoot(root, finishedWork, expirationTime) {\n    // Check if there's a batch that matches this expiration time.\n    var firstBatch = root.firstBatch;\n    if (firstBatch !== null && firstBatch._expirationTime <= expirationTime) {\n      if (completedBatches === null) {\n        completedBatches = [firstBatch];\n      } else {\n        completedBatches.push(firstBatch);\n      }\n      if (firstBatch._defer) {\n        // This root is blocked from committing by a batch. Unschedule it until\n        // we receive another update.\n        root.finishedWork = finishedWork;\n        root.remainingExpirationTime = _ReactFiberExpirationTime.NoWork;\n        return;\n      }\n    }\n\n    // Commit the root.\n    root.finishedWork = null;\n    root.remainingExpirationTime = commitRoot(finishedWork);\n  }\n\n  // When working on async work, the reconciler asks the renderer if it should\n  // yield execution. For DOM, we implement this with requestIdleCallback.\n  function shouldYield() {\n    if (deadline === null) {\n      return false;\n    }\n    if (deadline.timeRemaining() > timeHeuristicForUnitOfWork) {\n      // Disregard deadline.didTimeout. Only expired work should be flushed\n      // during a timeout. This path is only hit for non-expired work.\n      return false;\n    }\n    deadlineDidExpire = true;\n    return true;\n  }\n\n  function onUncaughtError(error) {\n    (0, _invariant2.default)(nextFlushedRoot !== null, 'Should be working on a root. This error is likely caused by a bug in ' + 'React. Please file an issue.');\n    // Unschedule this root so we don't work on it again until there's\n    // another update.\n    nextFlushedRoot.remainingExpirationTime = _ReactFiberExpirationTime.NoWork;\n    if (!hasUnhandledError) {\n      hasUnhandledError = true;\n      unhandledError = error;\n    }\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not inside\n  // the reconciler.\n  function batchedUpdates(fn, a) {\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingUpdates = true;\n    try {\n      return fn(a);\n    } finally {\n      isBatchingUpdates = previousIsBatchingUpdates;\n      if (!isBatchingUpdates && !isRendering) {\n        performSyncWork();\n      }\n    }\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not inside\n  // the reconciler.\n  function unbatchedUpdates(fn, a) {\n    if (isBatchingUpdates && !isUnbatchingUpdates) {\n      isUnbatchingUpdates = true;\n      try {\n        return fn(a);\n      } finally {\n        isUnbatchingUpdates = false;\n      }\n    }\n    return fn(a);\n  }\n\n  // TODO: Batching should be implemented at the renderer level, not within\n  // the reconciler.\n  function flushSync(fn, a) {\n    (0, _invariant2.default)(!isRendering, 'flushSync was called from inside a lifecycle method. It cannot be ' + 'called when React is already rendering.');\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingUpdates = true;\n    try {\n      return syncUpdates(fn, a);\n    } finally {\n      isBatchingUpdates = previousIsBatchingUpdates;\n      performSyncWork();\n    }\n  }\n\n  function interactiveUpdates(fn, a, b) {\n    if (isBatchingInteractiveUpdates) {\n      return fn(a, b);\n    }\n    // If there are any pending interactive updates, synchronously flush them.\n    // This needs to happen before we read any handlers, because the effect of\n    // the previous event may influence which handlers are called during\n    // this event.\n    if (!isBatchingUpdates && !isRendering && lowestPendingInteractiveExpirationTime !== _ReactFiberExpirationTime.NoWork) {\n      // Synchronously flush pending interactive updates.\n      performWork(lowestPendingInteractiveExpirationTime, false, null);\n      lowestPendingInteractiveExpirationTime = _ReactFiberExpirationTime.NoWork;\n    }\n    var previousIsBatchingInteractiveUpdates = isBatchingInteractiveUpdates;\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingInteractiveUpdates = true;\n    isBatchingUpdates = true;\n    try {\n      return fn(a, b);\n    } finally {\n      isBatchingInteractiveUpdates = previousIsBatchingInteractiveUpdates;\n      isBatchingUpdates = previousIsBatchingUpdates;\n      if (!isBatchingUpdates && !isRendering) {\n        performSyncWork();\n      }\n    }\n  }\n\n  function flushInteractiveUpdates() {\n    if (!isRendering && lowestPendingInteractiveExpirationTime !== _ReactFiberExpirationTime.NoWork) {\n      // Synchronously flush pending interactive updates.\n      performWork(lowestPendingInteractiveExpirationTime, false, null);\n      lowestPendingInteractiveExpirationTime = _ReactFiberExpirationTime.NoWork;\n    }\n  }\n\n  function flushControlled(fn) {\n    var previousIsBatchingUpdates = isBatchingUpdates;\n    isBatchingUpdates = true;\n    try {\n      syncUpdates(fn);\n    } finally {\n      isBatchingUpdates = previousIsBatchingUpdates;\n      if (!isBatchingUpdates && !isRendering) {\n        performWork(_ReactFiberExpirationTime.Sync, false, null);\n      }\n    }\n  }\n\n  return {\n    recalculateCurrentTime: recalculateCurrentTime,\n    computeExpirationForFiber: computeExpirationForFiber,\n    scheduleWork: scheduleWork,\n    requestWork: requestWork,\n    flushRoot: flushRoot,\n    batchedUpdates: batchedUpdates,\n    unbatchedUpdates: unbatchedUpdates,\n    flushSync: flushSync,\n    flushControlled: flushControlled,\n    deferredUpdates: deferredUpdates,\n    syncUpdates: syncUpdates,\n    interactiveUpdates: interactiveUpdates,\n    flushInteractiveUpdates: flushInteractiveUpdates,\n    computeUniqueAsyncExpiration: computeUniqueAsyncExpiration,\n    legacyContext: legacyContext\n  };\n};\n\nvar _ReactErrorUtils = require('shared/ReactErrorUtils');\n\nvar _ReactErrorUtils2 = _interopRequireDefault(_ReactErrorUtils);\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _ReactStrictModeWarnings = require('./ReactStrictModeWarnings');\n\nvar _ReactStrictModeWarnings2 = _interopRequireDefault(_ReactStrictModeWarnings);\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactFiberBeginWork2 = require('./ReactFiberBeginWork');\n\nvar _ReactFiberBeginWork3 = _interopRequireDefault(_ReactFiberBeginWork2);\n\nvar _ReactFiberCompleteWork = require('./ReactFiberCompleteWork');\n\nvar _ReactFiberCompleteWork2 = _interopRequireDefault(_ReactFiberCompleteWork);\n\nvar _ReactFiberUnwindWork2 = require('./ReactFiberUnwindWork');\n\nvar _ReactFiberUnwindWork3 = _interopRequireDefault(_ReactFiberUnwindWork2);\n\nvar _ReactFiberCommitWork2 = require('./ReactFiberCommitWork');\n\nvar _ReactFiberCommitWork3 = _interopRequireDefault(_ReactFiberCommitWork2);\n\nvar _ReactFiberHostContext = require('./ReactFiberHostContext');\n\nvar _ReactFiberHostContext2 = _interopRequireDefault(_ReactFiberHostContext);\n\nvar _ReactFiberHydrationContext = require('./ReactFiberHydrationContext');\n\nvar _ReactFiberHydrationContext2 = _interopRequireDefault(_ReactFiberHydrationContext);\n\nvar _ReactFiberInstrumentation = require('./ReactFiberInstrumentation');\n\nvar _ReactFiberInstrumentation2 = _interopRequireDefault(_ReactFiberInstrumentation);\n\nvar _ReactDebugCurrentFiber = require('./ReactDebugCurrentFiber');\n\nvar _ReactDebugCurrentFiber2 = _interopRequireDefault(_ReactDebugCurrentFiber);\n\nvar _ReactDebugFiberPerf = require('./ReactDebugFiberPerf');\n\nvar _ReactFiber = require('./ReactFiber');\n\nvar _ReactFiberDevToolsHook = require('./ReactFiberDevToolsHook');\n\nvar _ReactFiberExpirationTime = require('./ReactFiberExpirationTime');\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _ReactFiberContext = require('./ReactFiberContext');\n\nvar _ReactFiberContext2 = _interopRequireDefault(_ReactFiberContext);\n\nvar _ReactFiberNewContext = require('./ReactFiberNewContext');\n\nvar _ReactFiberNewContext2 = _interopRequireDefault(_ReactFiberNewContext);\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nvar _ReactCapturedValue = require('./ReactCapturedValue');\n\nvar _ReactFiberStack = require('./ReactFiberStack');\n\nvar _ReactFiberStack2 = _interopRequireDefault(_ReactFiberStack);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar invokeGuardedCallback = _ReactErrorUtils2.default.invokeGuardedCallback,\n    hasCaughtError = _ReactErrorUtils2.default.hasCaughtError,\n    clearCaughtError = _ReactErrorUtils2.default.clearCaughtError; /**\n                                                                    * Copyright (c) 2013-present, Facebook, Inc.\n                                                                    *\n                                                                    * This source code is licensed under the MIT license found in the\n                                                                    * LICENSE file in the root directory of this source tree.\n                                                                    *\n                                                                    * \n                                                                    */\n\nvar didWarnAboutStateTransition = void 0;\nvar didWarnSetStateChildContext = void 0;\nvar warnAboutUpdateOnUnmounted = void 0;\nvar warnAboutInvalidUpdates = void 0;\n\nif (__DEV__) {\n  didWarnAboutStateTransition = false;\n  didWarnSetStateChildContext = false;\n  var didWarnStateUpdateForUnmountedComponent = {};\n\n  warnAboutUpdateOnUnmounted = function warnAboutUpdateOnUnmounted(fiber) {\n    // We show the whole stack but dedupe on the top component's name because\n    // the problematic code almost always lies inside that component.\n    var componentName = (0, _getComponentName2.default)(fiber) || 'ReactClass';\n    if (didWarnStateUpdateForUnmountedComponent[componentName]) {\n      return;\n    }\n    (0, _warning2.default)(false, \"Can't call setState (or forceUpdate) on an unmounted component. This \" + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in the ' + 'componentWillUnmount method.%s', (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(fiber));\n    didWarnStateUpdateForUnmountedComponent[componentName] = true;\n  };\n\n  warnAboutInvalidUpdates = function warnAboutInvalidUpdates(instance) {\n    switch (_ReactDebugCurrentFiber2.default.phase) {\n      case 'getChildContext':\n        if (didWarnSetStateChildContext) {\n          return;\n        }\n        (0, _warning2.default)(false, 'setState(...): Cannot call setState() inside getChildContext()');\n        didWarnSetStateChildContext = true;\n        break;\n      case 'render':\n        if (didWarnAboutStateTransition) {\n          return;\n        }\n        (0, _warning2.default)(false, 'Cannot update during an existing state transition (such as within ' + \"`render` or another component's constructor). Render methods should \" + 'be a pure function of props and state; constructor side-effects are ' + 'an anti-pattern, but can be moved to `componentWillMount`.');\n        didWarnAboutStateTransition = true;\n        break;\n    }\n  };\n}\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function () {\n  var valueStack = [];\n\n  var fiberStack = void 0;\n\n  if (__DEV__) {\n    fiberStack = [];\n  }\n\n  var index = -1;\n\n  function createCursor(defaultValue) {\n    return {\n      current: defaultValue\n    };\n  }\n\n  function isEmpty() {\n    return index === -1;\n  }\n\n  function pop(cursor, fiber) {\n    if (index < 0) {\n      if (__DEV__) {\n        (0, _warning2.default)(false, 'Unexpected pop.');\n      }\n      return;\n    }\n\n    if (__DEV__) {\n      if (fiber !== fiberStack[index]) {\n        (0, _warning2.default)(false, 'Unexpected Fiber popped.');\n      }\n    }\n\n    cursor.current = valueStack[index];\n\n    valueStack[index] = null;\n\n    if (__DEV__) {\n      fiberStack[index] = null;\n    }\n\n    index--;\n  }\n\n  function push(cursor, value, fiber) {\n    index++;\n\n    valueStack[index] = cursor.current;\n\n    if (__DEV__) {\n      fiberStack[index] = fiber;\n    }\n\n    cursor.current = value;\n  }\n\n  function checkThatStackIsEmpty() {\n    if (__DEV__) {\n      if (index !== -1) {\n        (0, _warning2.default)(false, 'Expected an empty stack. Something was not reset properly.');\n      }\n    }\n  }\n\n  function resetStackAfterFatalErrorInDev() {\n    if (__DEV__) {\n      index = -1;\n      valueStack.length = 0;\n      fiberStack.length = 0;\n    }\n  }\n\n  return {\n    createCursor: createCursor,\n    isEmpty: isEmpty,\n    pop: pop,\n    push: push,\n    checkThatStackIsEmpty: checkThatStackIsEmpty,\n    resetStackAfterFatalErrorInDev: resetStackAfterFatalErrorInDev\n  };\n};\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = exports['default']; /**\n                                      * Copyright (c) 2013-present, Facebook, Inc.\n                                      *\n                                      * This source code is licensed under the MIT license found in the\n                                      * LICENSE file in the root directory of this source tree.\n                                      *\n                                      * \n                                      */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyU3RhY2suanMiXSwibmFtZXMiOlsidmFsdWVTdGFjayIsImZpYmVyU3RhY2siLCJfX0RFVl9fIiwiaW5kZXgiLCJjcmVhdGVDdXJzb3IiLCJkZWZhdWx0VmFsdWUiLCJjdXJyZW50IiwiaXNFbXB0eSIsInBvcCIsImN1cnNvciIsImZpYmVyIiwicHVzaCIsInZhbHVlIiwiY2hlY2tUaGF0U3RhY2tJc0VtcHR5IiwicmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2IiwibGVuZ3RoIl0sIm1hcHBpbmdzIjoiOzs7Ozs7a0JBNEJlLFlBQWtCO0FBQy9CLE1BQU1BLGFBQXlCLEVBQS9COztBQUVBLE1BQUlDLG1CQUFKOztBQUVBLE1BQUlDLE9BQUosRUFBYTtBQUNYRCxpQkFBYSxFQUFiO0FBQ0Q7O0FBRUQsTUFBSUUsUUFBUSxDQUFDLENBQWI7O0FBRUEsV0FBU0MsWUFBVCxDQUF5QkMsWUFBekIsRUFBMEQ7QUFDeEQsV0FBTztBQUNMQyxlQUFTRDtBQURKLEtBQVA7QUFHRDs7QUFFRCxXQUFTRSxPQUFULEdBQTRCO0FBQzFCLFdBQU9KLFVBQVUsQ0FBQyxDQUFsQjtBQUNEOztBQUVELFdBQVNLLEdBQVQsQ0FBZ0JDLE1BQWhCLEVBQXdDQyxLQUF4QyxFQUE0RDtBQUMxRCxRQUFJUCxRQUFRLENBQVosRUFBZTtBQUNiLFVBQUlELE9BQUosRUFBYTtBQUNYLCtCQUFRLEtBQVIsRUFBZSxpQkFBZjtBQUNEO0FBQ0Q7QUFDRDs7QUFFRCxRQUFJQSxPQUFKLEVBQWE7QUFDWCxVQUFJUSxVQUFVVCxXQUFXRSxLQUFYLENBQWQsRUFBaUM7QUFDL0IsK0JBQVEsS0FBUixFQUFlLDBCQUFmO0FBQ0Q7QUFDRjs7QUFFRE0sV0FBT0gsT0FBUCxHQUFpQk4sV0FBV0csS0FBWCxDQUFqQjs7QUFFQUgsZUFBV0csS0FBWCxJQUFvQixJQUFwQjs7QUFFQSxRQUFJRCxPQUFKLEVBQWE7QUFDWEQsaUJBQVdFLEtBQVgsSUFBb0IsSUFBcEI7QUFDRDs7QUFFREE7QUFDRDs7QUFFRCxXQUFTUSxJQUFULENBQWlCRixNQUFqQixFQUF5Q0csS0FBekMsRUFBbURGLEtBQW5ELEVBQXVFO0FBQ3JFUDs7QUFFQUgsZUFBV0csS0FBWCxJQUFvQk0sT0FBT0gsT0FBM0I7O0FBRUEsUUFBSUosT0FBSixFQUFhO0FBQ1hELGlCQUFXRSxLQUFYLElBQW9CTyxLQUFwQjtBQUNEOztBQUVERCxXQUFPSCxPQUFQLEdBQWlCTSxLQUFqQjtBQUNEOztBQUVELFdBQVNDLHFCQUFULEdBQWlDO0FBQy9CLFFBQUlYLE9BQUosRUFBYTtBQUNYLFVBQUlDLFVBQVUsQ0FBQyxDQUFmLEVBQWtCO0FBQ2hCLCtCQUNFLEtBREYsRUFFRSw0REFGRjtBQUlEO0FBQ0Y7QUFDRjs7QUFFRCxXQUFTVyw4QkFBVCxHQUEwQztBQUN4QyxRQUFJWixPQUFKLEVBQWE7QUFDWEMsY0FBUSxDQUFDLENBQVQ7QUFDQUgsaUJBQVdlLE1BQVgsR0FBb0IsQ0FBcEI7QUFDQWQsaUJBQVdjLE1BQVgsR0FBb0IsQ0FBcEI7QUFDRDtBQUNGOztBQUVELFNBQU87QUFDTFgsOEJBREs7QUFFTEcsb0JBRks7QUFHTEMsWUFISztBQUlMRyxjQUpLO0FBS0xFLGdEQUxLO0FBTUxDO0FBTkssR0FBUDtBQVFELEM7O0FBdEdEOzs7Ozs7cUNBWEEiLCJmaWxlIjoiUmVhY3RGaWJlclN0YWNrLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJy4vUmVhY3RGaWJlcic7XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ2ZianMvbGliL3dhcm5pbmcnO1xuXG5leHBvcnQgdHlwZSBTdGFja0N1cnNvcjxUPiA9IHtcbiAgY3VycmVudDogVCxcbn07XG5cbmV4cG9ydCB0eXBlIFN0YWNrID0ge1xuICBjcmVhdGVDdXJzb3I8VD4oZGVmYXVsdFZhbHVlOiBUKTogU3RhY2tDdXJzb3I8VD4sXG4gIGlzRW1wdHkoKTogYm9vbGVhbixcbiAgcHVzaDxUPihjdXJzb3I6IFN0YWNrQ3Vyc29yPFQ+LCB2YWx1ZTogVCwgZmliZXI6IEZpYmVyKTogdm9pZCxcbiAgcG9wPFQ+KGN1cnNvcjogU3RhY2tDdXJzb3I8VD4sIGZpYmVyOiBGaWJlcik6IHZvaWQsXG5cbiAgLy8gREVWIG9ubHlcbiAgY2hlY2tUaGF0U3RhY2tJc0VtcHR5KCk6IHZvaWQsXG4gIHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldigpOiB2b2lkLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24oKTogU3RhY2sge1xuICBjb25zdCB2YWx1ZVN0YWNrOiBBcnJheTxhbnk+ID0gW107XG5cbiAgbGV0IGZpYmVyU3RhY2s6IEFycmF5PEZpYmVyIHwgbnVsbD47XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBmaWJlclN0YWNrID0gW107XG4gIH1cblxuICBsZXQgaW5kZXggPSAtMTtcblxuICBmdW5jdGlvbiBjcmVhdGVDdXJzb3I8VD4oZGVmYXVsdFZhbHVlOiBUKTogU3RhY2tDdXJzb3I8VD4ge1xuICAgIHJldHVybiB7XG4gICAgICBjdXJyZW50OiBkZWZhdWx0VmFsdWUsXG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRW1wdHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGluZGV4ID09PSAtMTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBvcDxUPihjdXJzb3I6IFN0YWNrQ3Vyc29yPFQ+LCBmaWJlcjogRmliZXIpOiB2b2lkIHtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnVW5leHBlY3RlZCBwb3AuJyk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChmaWJlciAhPT0gZmliZXJTdGFja1tpbmRleF0pIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ1VuZXhwZWN0ZWQgRmliZXIgcG9wcGVkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGN1cnNvci5jdXJyZW50ID0gdmFsdWVTdGFja1tpbmRleF07XG5cbiAgICB2YWx1ZVN0YWNrW2luZGV4XSA9IG51bGw7XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgZmliZXJTdGFja1tpbmRleF0gPSBudWxsO1xuICAgIH1cblxuICAgIGluZGV4LS07XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoPFQ+KGN1cnNvcjogU3RhY2tDdXJzb3I8VD4sIHZhbHVlOiBULCBmaWJlcjogRmliZXIpOiB2b2lkIHtcbiAgICBpbmRleCsrO1xuXG4gICAgdmFsdWVTdGFja1tpbmRleF0gPSBjdXJzb3IuY3VycmVudDtcblxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBmaWJlclN0YWNrW2luZGV4XSA9IGZpYmVyO1xuICAgIH1cblxuICAgIGN1cnNvci5jdXJyZW50ID0gdmFsdWU7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja1RoYXRTdGFja0lzRW1wdHkoKSB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgd2FybmluZyhcbiAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAnRXhwZWN0ZWQgYW4gZW1wdHkgc3RhY2suIFNvbWV0aGluZyB3YXMgbm90IHJlc2V0IHByb3Blcmx5LicsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRTdGFja0FmdGVyRmF0YWxFcnJvckluRGV2KCkge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpbmRleCA9IC0xO1xuICAgICAgdmFsdWVTdGFjay5sZW5ndGggPSAwO1xuICAgICAgZmliZXJTdGFjay5sZW5ndGggPSAwO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgY3JlYXRlQ3Vyc29yLFxuICAgIGlzRW1wdHksXG4gICAgcG9wLFxuICAgIHB1c2gsXG4gICAgY2hlY2tUaGF0U3RhY2tJc0VtcHR5LFxuICAgIHJlc2V0U3RhY2tBZnRlckZhdGFsRXJyb3JJbkRldixcbiAgfTtcbn1cbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isFiberMounted = isFiberMounted;\nexports.isMounted = isMounted;\nexports.findCurrentFiberUsingSlowPath = findCurrentFiberUsingSlowPath;\nexports.findCurrentHostFiber = findCurrentHostFiber;\nexports.findCurrentHostFiberWithNoPortals = findCurrentHostFiberWithNoPortals;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactInstanceMap = require('shared/ReactInstanceMap');\n\nvar ReactInstanceMap = _interopRequireWildcard(_ReactInstanceMap);\n\nvar _ReactGlobalSharedState = require('shared/ReactGlobalSharedState');\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar MOUNTING = 1;\nvar MOUNTED = 2;\nvar UNMOUNTED = 3;\n\nfunction isFiberMountedImpl(fiber) {\n  var node = fiber;\n  if (!fiber.alternate) {\n    // If there is no alternate, this might be a new tree that isn't inserted\n    // yet. If it is, then it will have a pending insertion effect on it.\n    if ((node.effectTag & _ReactTypeOfSideEffect.Placement) !== _ReactTypeOfSideEffect.NoEffect) {\n      return MOUNTING;\n    }\n    while (node.return) {\n      node = node.return;\n      if ((node.effectTag & _ReactTypeOfSideEffect.Placement) !== _ReactTypeOfSideEffect.NoEffect) {\n        return MOUNTING;\n      }\n    }\n  } else {\n    while (node.return) {\n      node = node.return;\n    }\n  }\n  if (node.tag === _ReactTypeOfWork.HostRoot) {\n    // TODO: Check if this was a nested HostRoot when used with\n    // renderContainerIntoSubtree.\n    return MOUNTED;\n  }\n  // If we didn't hit the root, that means that we're in an disconnected tree\n  // that has been unmounted.\n  return UNMOUNTED;\n}\n\nfunction isFiberMounted(fiber) {\n  return isFiberMountedImpl(fiber) === MOUNTED;\n}\n\nfunction isMounted(component) {\n  if (__DEV__) {\n    var owner = _ReactGlobalSharedState.ReactCurrentOwner.current;\n    if (owner !== null && owner.tag === _ReactTypeOfWork.ClassComponent) {\n      var ownerFiber = owner;\n      var instance = ownerFiber.stateNode;\n      (0, _warning2.default)(instance._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', (0, _getComponentName2.default)(ownerFiber) || 'A component');\n      instance._warnedAboutRefsInRender = true;\n    }\n  }\n\n  var fiber = ReactInstanceMap.get(component);\n  if (!fiber) {\n    return false;\n  }\n  return isFiberMountedImpl(fiber) === MOUNTED;\n}\n\nfunction assertIsMounted(fiber) {\n  (0, _invariant2.default)(isFiberMountedImpl(fiber) === MOUNTED, 'Unable to find node on an unmounted component.');\n}\n\nfunction findCurrentFiberUsingSlowPath(fiber) {\n  var alternate = fiber.alternate;\n  if (!alternate) {\n    // If there is no alternate, then we only need to check if it is mounted.\n    var state = isFiberMountedImpl(fiber);\n    (0, _invariant2.default)(state !== UNMOUNTED, 'Unable to find node on an unmounted component.');\n    if (state === MOUNTING) {\n      return null;\n    }\n    return fiber;\n  }\n  // If we have two possible branches, we'll walk backwards up to the root\n  // to see what path the root points to. On the way we may hit one of the\n  // special cases and we'll deal with them.\n  var a = fiber;\n  var b = alternate;\n  while (true) {\n    var parentA = a.return;\n    var parentB = parentA ? parentA.alternate : null;\n    if (!parentA || !parentB) {\n      // We're at the root.\n      break;\n    }\n\n    // If both copies of the parent fiber point to the same child, we can\n    // assume that the child is current. This happens when we bailout on low\n    // priority: the bailed out fiber's child reuses the current child.\n    if (parentA.child === parentB.child) {\n      var child = parentA.child;\n      while (child) {\n        if (child === a) {\n          // We've determined that A is the current branch.\n          assertIsMounted(parentA);\n          return fiber;\n        }\n        if (child === b) {\n          // We've determined that B is the current branch.\n          assertIsMounted(parentA);\n          return alternate;\n        }\n        child = child.sibling;\n      }\n      // We should never have an alternate for any mounting node. So the only\n      // way this could possibly happen is if this was unmounted, if at all.\n      (0, _invariant2.default)(false, 'Unable to find node on an unmounted component.');\n    }\n\n    if (a.return !== b.return) {\n      // The return pointer of A and the return pointer of B point to different\n      // fibers. We assume that return pointers never criss-cross, so A must\n      // belong to the child set of A.return, and B must belong to the child\n      // set of B.return.\n      a = parentA;\n      b = parentB;\n    } else {\n      // The return pointers point to the same fiber. We'll have to use the\n      // default, slow path: scan the child sets of each parent alternate to see\n      // which child belongs to which set.\n      //\n      // Search parent A's child set\n      var didFindChild = false;\n      var _child = parentA.child;\n      while (_child) {\n        if (_child === a) {\n          didFindChild = true;\n          a = parentA;\n          b = parentB;\n          break;\n        }\n        if (_child === b) {\n          didFindChild = true;\n          b = parentA;\n          a = parentB;\n          break;\n        }\n        _child = _child.sibling;\n      }\n      if (!didFindChild) {\n        // Search parent B's child set\n        _child = parentB.child;\n        while (_child) {\n          if (_child === a) {\n            didFindChild = true;\n            a = parentB;\n            b = parentA;\n            break;\n          }\n          if (_child === b) {\n            didFindChild = true;\n            b = parentB;\n            a = parentA;\n            break;\n          }\n          _child = _child.sibling;\n        }\n        (0, _invariant2.default)(didFindChild, 'Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');\n      }\n    }\n\n    (0, _invariant2.default)(a.alternate === b, \"Return fibers should always be each others' alternates. \" + 'This error is likely caused by a bug in React. Please file an issue.');\n  }\n  // If the root is not a host container, we're in a disconnected tree. I.e.\n  // unmounted.\n  (0, _invariant2.default)(a.tag === _ReactTypeOfWork.HostRoot, 'Unable to find node on an unmounted component.');\n  if (a.stateNode.current === a) {\n    // We've determined that A is the current branch.\n    return fiber;\n  }\n  // Otherwise B has to be current branch.\n  return alternate;\n}\n\nfunction findCurrentHostFiber(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  var node = currentParent;\n  while (true) {\n    if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n      return node;\n    } else if (node.child) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n\nfunction findCurrentHostFiberWithNoPortals(parent) {\n  var currentParent = findCurrentFiberUsingSlowPath(parent);\n  if (!currentParent) {\n    return null;\n  }\n\n  // Next we'll drill down this component to find the first HostComponent/Text.\n  var node = currentParent;\n  while (true) {\n    if (node.tag === _ReactTypeOfWork.HostComponent || node.tag === _ReactTypeOfWork.HostText) {\n      return node;\n    } else if (node.child && node.tag !== _ReactTypeOfWork.HostPortal) {\n      node.child.return = node;\n      node = node.child;\n      continue;\n    }\n    if (node === currentParent) {\n      return null;\n    }\n    while (!node.sibling) {\n      if (!node.return || node.return === currentParent) {\n        return null;\n      }\n      node = node.return;\n    }\n    node.sibling.return = node.return;\n    node = node.sibling;\n  }\n  // Flow needs the return null here, but ESLint complains about it.\n  // eslint-disable-next-line no-unreachable\n  return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (hostContext, legacyContext, newContext, scheduleWork, isAlreadyFailedLegacyErrorBoundary) {\n  var popHostContainer = hostContext.popHostContainer,\n      popHostContext = hostContext.popHostContext;\n  var popLegacyContextProvider = legacyContext.popContextProvider,\n      popTopLevelLegacyContextObject = legacyContext.popTopLevelContextObject;\n  var popProvider = newContext.popProvider;\n\n\n  function throwException(returnFiber, sourceFiber, rawValue) {\n    // The source fiber did not complete.\n    sourceFiber.effectTag |= _ReactTypeOfSideEffect.Incomplete;\n    // Its effect list is no longer valid.\n    sourceFiber.firstEffect = sourceFiber.lastEffect = null;\n\n    var value = (0, _ReactCapturedValue.createCapturedValue)(rawValue, sourceFiber);\n\n    var workInProgress = returnFiber;\n    do {\n      switch (workInProgress.tag) {\n        case _ReactTypeOfWork.HostRoot:\n          {\n            // Uncaught error\n            var errorInfo = value;\n            (0, _ReactFiberUpdateQueue.ensureUpdateQueues)(workInProgress);\n            var updateQueue = workInProgress.updateQueue;\n            updateQueue.capturedValues = [errorInfo];\n            workInProgress.effectTag |= _ReactTypeOfSideEffect.ShouldCapture;\n            return;\n          }\n        case _ReactTypeOfWork.ClassComponent:\n          // Capture and retry\n          var ctor = workInProgress.type;\n          var _instance = workInProgress.stateNode;\n          if ((workInProgress.effectTag & _ReactTypeOfSideEffect.DidCapture) === _ReactTypeOfSideEffect.NoEffect && (typeof ctor.getDerivedStateFromCatch === 'function' && _ReactFeatureFlags.enableGetDerivedStateFromCatch || _instance !== null && typeof _instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(_instance))) {\n            (0, _ReactFiberUpdateQueue.ensureUpdateQueues)(workInProgress);\n            var _updateQueue = workInProgress.updateQueue;\n            var capturedValues = _updateQueue.capturedValues;\n            if (capturedValues === null) {\n              _updateQueue.capturedValues = [value];\n            } else {\n              capturedValues.push(value);\n            }\n            workInProgress.effectTag |= _ReactTypeOfSideEffect.ShouldCapture;\n            return;\n          }\n          break;\n        default:\n          break;\n      }\n      workInProgress = workInProgress.return;\n    } while (workInProgress !== null);\n  }\n\n  function unwindWork(workInProgress) {\n    switch (workInProgress.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          popLegacyContextProvider(workInProgress);\n          var effectTag = workInProgress.effectTag;\n          if (effectTag & _ReactTypeOfSideEffect.ShouldCapture) {\n            workInProgress.effectTag = effectTag & ~_ReactTypeOfSideEffect.ShouldCapture | _ReactTypeOfSideEffect.DidCapture;\n            return workInProgress;\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.HostRoot:\n        {\n          popHostContainer(workInProgress);\n          popTopLevelLegacyContextObject(workInProgress);\n          var _effectTag = workInProgress.effectTag;\n          if (_effectTag & _ReactTypeOfSideEffect.ShouldCapture) {\n            workInProgress.effectTag = _effectTag & ~_ReactTypeOfSideEffect.ShouldCapture | _ReactTypeOfSideEffect.DidCapture;\n            return workInProgress;\n          }\n          return null;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          popHostContext(workInProgress);\n          return null;\n        }\n      case _ReactTypeOfWork.HostPortal:\n        popHostContainer(workInProgress);\n        return null;\n      case _ReactTypeOfWork.ContextProvider:\n        popProvider(workInProgress);\n        return null;\n      default:\n        return null;\n    }\n  }\n\n  function unwindInterruptedWork(interruptedWork) {\n    switch (interruptedWork.tag) {\n      case _ReactTypeOfWork.ClassComponent:\n        {\n          popLegacyContextProvider(interruptedWork);\n          break;\n        }\n      case _ReactTypeOfWork.HostRoot:\n        {\n          popHostContainer(interruptedWork);\n          popTopLevelLegacyContextObject(interruptedWork);\n          break;\n        }\n      case _ReactTypeOfWork.HostComponent:\n        {\n          popHostContext(interruptedWork);\n          break;\n        }\n      case _ReactTypeOfWork.HostPortal:\n        popHostContainer(interruptedWork);\n        break;\n      case _ReactTypeOfWork.ContextProvider:\n        popProvider(interruptedWork);\n        break;\n      default:\n        break;\n    }\n  }\n\n  return {\n    throwException: throwException,\n    unwindWork: unwindWork,\n    unwindInterruptedWork: unwindInterruptedWork\n  };\n};\n\nvar _ReactCapturedValue = require('./ReactCapturedValue');\n\nvar _ReactFiberUpdateQueue = require('./ReactFiberUpdateQueue');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.insertUpdateIntoQueue = insertUpdateIntoQueue;\nexports.ensureUpdateQueues = ensureUpdateQueues;\nexports.insertUpdateIntoFiber = insertUpdateIntoFiber;\nexports.getUpdateExpirationTime = getUpdateExpirationTime;\nexports.processUpdateQueue = processUpdateQueue;\nexports.commitCallbacks = commitCallbacks;\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _ReactTypeOfSideEffect = require('shared/ReactTypeOfSideEffect');\n\nvar _ReactTypeOfWork = require('shared/ReactTypeOfWork');\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _ReactFiberExpirationTime = require('./ReactFiberExpirationTime');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar didWarnUpdateInsideUpdate = void 0;\n\nif (__DEV__) {\n  didWarnUpdateInsideUpdate = false;\n}\n\n// Callbacks are not validated until invocation\n\n\n// Singly linked-list of updates. When an update is scheduled, it is added to\n// the queue of the current fiber and the work-in-progress fiber. The two queues\n// are separate but they share a persistent structure.\n//\n// During reconciliation, updates are removed from the work-in-progress fiber,\n// but they remain on the current fiber. That ensures that if a work-in-progress\n// is aborted, the aborted updates are recovered by cloning from current.\n//\n// The work-in-progress queue is always a subset of the current queue.\n//\n// When the tree is committed, the work-in-progress becomes the current.\n\n\nfunction createUpdateQueue(baseState) {\n  var queue = {\n    baseState: baseState,\n    expirationTime: _ReactFiberExpirationTime.NoWork,\n    first: null,\n    last: null,\n    callbackList: null,\n    hasForceUpdate: false,\n    isInitialized: false,\n    capturedValues: null\n  };\n  if (__DEV__) {\n    queue.isProcessing = false;\n  }\n  return queue;\n}\n\nfunction insertUpdateIntoQueue(queue, update) {\n  // Append the update to the end of the list.\n  if (queue.last === null) {\n    // Queue is empty\n    queue.first = queue.last = update;\n  } else {\n    queue.last.next = update;\n    queue.last = update;\n  }\n  if (queue.expirationTime === _ReactFiberExpirationTime.NoWork || queue.expirationTime > update.expirationTime) {\n    queue.expirationTime = update.expirationTime;\n  }\n}\n\nvar q1 = void 0;\nvar q2 = void 0;\nfunction ensureUpdateQueues(fiber) {\n  q1 = q2 = null;\n  // We'll have at least one and at most two distinct update queues.\n  var alternateFiber = fiber.alternate;\n  var queue1 = fiber.updateQueue;\n  if (queue1 === null) {\n    // TODO: We don't know what the base state will be until we begin work.\n    // It depends on which fiber is the next current. Initialize with an empty\n    // base state, then set to the memoizedState when rendering. Not super\n    // happy with this approach.\n    queue1 = fiber.updateQueue = createUpdateQueue(null);\n  }\n\n  var queue2 = void 0;\n  if (alternateFiber !== null) {\n    queue2 = alternateFiber.updateQueue;\n    if (queue2 === null) {\n      queue2 = alternateFiber.updateQueue = createUpdateQueue(null);\n    }\n  } else {\n    queue2 = null;\n  }\n  queue2 = queue2 !== queue1 ? queue2 : null;\n\n  // Use module variables instead of returning a tuple\n  q1 = queue1;\n  q2 = queue2;\n}\n\nfunction insertUpdateIntoFiber(fiber, update) {\n  ensureUpdateQueues(fiber);\n  var queue1 = q1;\n  var queue2 = q2;\n\n  // Warn if an update is scheduled from inside an updater function.\n  if (__DEV__) {\n    if ((queue1.isProcessing || queue2 !== null && queue2.isProcessing) && !didWarnUpdateInsideUpdate) {\n      (0, _warning2.default)(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');\n      didWarnUpdateInsideUpdate = true;\n    }\n  }\n\n  // If there's only one queue, add the update to that queue and exit.\n  if (queue2 === null) {\n    insertUpdateIntoQueue(queue1, update);\n    return;\n  }\n\n  // If either queue is empty, we need to add to both queues.\n  if (queue1.last === null || queue2.last === null) {\n    insertUpdateIntoQueue(queue1, update);\n    insertUpdateIntoQueue(queue2, update);\n    return;\n  }\n\n  // If both lists are not empty, the last update is the same for both lists\n  // because of structural sharing. So, we should only append to one of\n  // the lists.\n  insertUpdateIntoQueue(queue1, update);\n  // But we still need to update the `last` pointer of queue2.\n  queue2.last = update;\n}\n\nfunction getUpdateExpirationTime(fiber) {\n  switch (fiber.tag) {\n    case _ReactTypeOfWork.HostRoot:\n    case _ReactTypeOfWork.ClassComponent:\n      var updateQueue = fiber.updateQueue;\n      if (updateQueue === null) {\n        return _ReactFiberExpirationTime.NoWork;\n      }\n      return updateQueue.expirationTime;\n    default:\n      return _ReactFiberExpirationTime.NoWork;\n  }\n}\n\nfunction getStateFromUpdate(update, instance, prevState, props) {\n  var partialState = update.partialState;\n  if (typeof partialState === 'function') {\n    return partialState.call(instance, prevState, props);\n  } else {\n    return partialState;\n  }\n}\n\nfunction processUpdateQueue(current, workInProgress, queue, instance, props, renderExpirationTime) {\n  if (current !== null && current.updateQueue === queue) {\n    // We need to create a work-in-progress queue, by cloning the current queue.\n    var currentQueue = queue;\n    queue = workInProgress.updateQueue = {\n      baseState: currentQueue.baseState,\n      expirationTime: currentQueue.expirationTime,\n      first: currentQueue.first,\n      last: currentQueue.last,\n      isInitialized: currentQueue.isInitialized,\n      capturedValues: currentQueue.capturedValues,\n      // These fields are no longer valid because they were already committed.\n      // Reset them.\n      callbackList: null,\n      hasForceUpdate: false\n    };\n  }\n\n  if (__DEV__) {\n    // Set this flag so we can warn if setState is called inside the update\n    // function of another setState.\n    queue.isProcessing = true;\n  }\n\n  // Reset the remaining expiration time. If we skip over any updates, we'll\n  // increase this accordingly.\n  queue.expirationTime = _ReactFiberExpirationTime.NoWork;\n\n  // TODO: We don't know what the base state will be until we begin work.\n  // It depends on which fiber is the next current. Initialize with an empty\n  // base state, then set to the memoizedState when rendering. Not super\n  // happy with this approach.\n  var state = void 0;\n  if (queue.isInitialized) {\n    state = queue.baseState;\n  } else {\n    state = queue.baseState = workInProgress.memoizedState;\n    queue.isInitialized = true;\n  }\n  var dontMutatePrevState = true;\n  var update = queue.first;\n  var didSkip = false;\n  while (update !== null) {\n    var updateExpirationTime = update.expirationTime;\n    if (updateExpirationTime > renderExpirationTime) {\n      // This update does not have sufficient priority. Skip it.\n      var remainingExpirationTime = queue.expirationTime;\n      if (remainingExpirationTime === _ReactFiberExpirationTime.NoWork || remainingExpirationTime > updateExpirationTime) {\n        // Update the remaining expiration time.\n        queue.expirationTime = updateExpirationTime;\n      }\n      if (!didSkip) {\n        didSkip = true;\n        queue.baseState = state;\n      }\n      // Continue to the next update.\n      update = update.next;\n      continue;\n    }\n\n    // This update does have sufficient priority.\n\n    // If no previous updates were skipped, drop this update from the queue by\n    // advancing the head of the list.\n    if (!didSkip) {\n      queue.first = update.next;\n      if (queue.first === null) {\n        queue.last = null;\n      }\n    }\n\n    // Invoke setState callback an extra time to help detect side-effects.\n    // Ignore the return value in this case.\n    if (_ReactFeatureFlags.debugRenderPhaseSideEffects || _ReactFeatureFlags.debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & _ReactTypeOfMode.StrictMode) {\n      getStateFromUpdate(update, instance, state, props);\n    }\n\n    // Process the update\n    var _partialState = void 0;\n    if (update.isReplace) {\n      state = getStateFromUpdate(update, instance, state, props);\n      dontMutatePrevState = true;\n    } else {\n      _partialState = getStateFromUpdate(update, instance, state, props);\n      if (_partialState) {\n        if (dontMutatePrevState) {\n          // $FlowFixMe: Idk how to type this properly.\n          state = Object.assign({}, state, _partialState);\n        } else {\n          state = Object.assign(state, _partialState);\n        }\n        dontMutatePrevState = false;\n      }\n    }\n    if (update.isForced) {\n      queue.hasForceUpdate = true;\n    }\n    if (update.callback !== null) {\n      // Append to list of callbacks.\n      var _callbackList = queue.callbackList;\n      if (_callbackList === null) {\n        _callbackList = queue.callbackList = [];\n      }\n      _callbackList.push(update);\n    }\n    if (update.capturedValue !== null) {\n      var _capturedValues = queue.capturedValues;\n      if (_capturedValues === null) {\n        queue.capturedValues = [update.capturedValue];\n      } else {\n        _capturedValues.push(update.capturedValue);\n      }\n    }\n    update = update.next;\n  }\n\n  if (queue.callbackList !== null) {\n    workInProgress.effectTag |= _ReactTypeOfSideEffect.Callback;\n  } else if (queue.first === null && !queue.hasForceUpdate && queue.capturedValues === null) {\n    // The queue is empty. We can reset it.\n    workInProgress.updateQueue = null;\n  }\n\n  if (!didSkip) {\n    didSkip = true;\n    queue.baseState = state;\n  }\n\n  if (__DEV__) {\n    // No longer processing.\n    queue.isProcessing = false;\n  }\n\n  return state;\n}\n\nfunction commitCallbacks(queue, context) {\n  var callbackList = queue.callbackList;\n  if (callbackList === null) {\n    return;\n  }\n  // Set the list to null to make sure they don't get called more than once.\n  queue.callbackList = null;\n  for (var i = 0; i < callbackList.length; i++) {\n    var update = callbackList[i];\n    var _callback = update.callback;\n    // This update might be processed again. Clear the callback so it's only\n    // called once.\n    update.callback = null;\n    (0, _invariant2.default)(typeof _callback === 'function', 'Invalid argument passed as callback. Expected a function. Instead ' + 'received: %s', _callback);\n    _callback.call(context);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactFiberComponentTreeHook = require('shared/ReactFiberComponentTreeHook');\n\nvar _ReactTypeOfMode = require('./ReactTypeOfMode');\n\nvar _lowPriorityWarning = require('shared/lowPriorityWarning');\n\nvar _lowPriorityWarning2 = _interopRequireDefault(_lowPriorityWarning);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar ReactStrictModeWarnings = {\n  discardPendingWarnings: function discardPendingWarnings() {},\n  flushPendingDeprecationWarnings: function flushPendingDeprecationWarnings() {},\n  flushPendingUnsafeLifecycleWarnings: function flushPendingUnsafeLifecycleWarnings() {},\n  recordDeprecationWarnings: function recordDeprecationWarnings(fiber, instance) {},\n  recordUnsafeLifecycleWarnings: function recordUnsafeLifecycleWarnings(fiber, instance) {}\n};\n\nif (__DEV__) {\n  var LIFECYCLE_SUGGESTIONS = {\n    UNSAFE_componentWillMount: 'componentDidMount',\n    UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',\n    UNSAFE_componentWillUpdate: 'componentDidUpdate'\n  };\n\n  var pendingComponentWillMountWarnings = [];\n  var pendingComponentWillReceivePropsWarnings = [];\n  var pendingComponentWillUpdateWarnings = [];\n  var pendingUnsafeLifecycleWarnings = new Map();\n\n  // Tracks components we have already warned about.\n  var didWarnAboutDeprecatedLifecycles = new Set();\n  var didWarnAboutUnsafeLifecycles = new Set();\n\n  ReactStrictModeWarnings.discardPendingWarnings = function () {\n    pendingComponentWillMountWarnings = [];\n    pendingComponentWillReceivePropsWarnings = [];\n    pendingComponentWillUpdateWarnings = [];\n    pendingUnsafeLifecycleWarnings = new Map();\n  };\n\n  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {\n    pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {\n      var lifecyclesWarningMesages = [];\n\n      Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {\n        var lifecycleWarnings = lifecycleWarningsMap[lifecycle];\n        if (lifecycleWarnings.length > 0) {\n          var componentNames = new Set();\n          lifecycleWarnings.forEach(function (fiber) {\n            componentNames.add((0, _getComponentName2.default)(fiber) || 'Component');\n            didWarnAboutUnsafeLifecycles.add(fiber.type);\n          });\n\n          var formatted = lifecycle.replace('UNSAFE_', '');\n          var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];\n          var sortedComponentNames = Array.from(componentNames).sort().join(', ');\n\n          lifecyclesWarningMesages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));\n        }\n      });\n\n      if (lifecyclesWarningMesages.length > 0) {\n        var strictRootComponentStack = (0, _ReactFiberComponentTreeHook.getStackAddendumByWorkInProgressFiber)(strictRoot);\n\n        (0, _warning2.default)(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\\n\\n%s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMesages.join('\\n\\n'));\n      }\n    });\n\n    pendingUnsafeLifecycleWarnings = new Map();\n  };\n\n  var getStrictRoot = function getStrictRoot(fiber) {\n    var maybeStrictRoot = null;\n\n    while (fiber !== null) {\n      if (fiber.mode & _ReactTypeOfMode.StrictMode) {\n        maybeStrictRoot = fiber;\n      }\n\n      fiber = fiber.return;\n    }\n\n    return maybeStrictRoot;\n  };\n\n  ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {\n    if (pendingComponentWillMountWarnings.length > 0) {\n      var uniqueNames = new Set();\n      pendingComponentWillMountWarnings.forEach(function (fiber) {\n        uniqueNames.add((0, _getComponentName2.default)(fiber) || 'Component');\n        didWarnAboutDeprecatedLifecycles.add(fiber.type);\n      });\n\n      var sortedNames = Array.from(uniqueNames).sort().join(', ');\n\n      (0, _lowPriorityWarning2.default)(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);\n\n      pendingComponentWillMountWarnings = [];\n    }\n\n    if (pendingComponentWillReceivePropsWarnings.length > 0) {\n      var _uniqueNames = new Set();\n      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {\n        _uniqueNames.add((0, _getComponentName2.default)(fiber) || 'Component');\n        didWarnAboutDeprecatedLifecycles.add(fiber.type);\n      });\n\n      var _sortedNames = Array.from(_uniqueNames).sort().join(', ');\n\n      (0, _lowPriorityWarning2.default)(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);\n\n      pendingComponentWillReceivePropsWarnings = [];\n    }\n\n    if (pendingComponentWillUpdateWarnings.length > 0) {\n      var _uniqueNames2 = new Set();\n      pendingComponentWillUpdateWarnings.forEach(function (fiber) {\n        _uniqueNames2.add((0, _getComponentName2.default)(fiber) || 'Component');\n        didWarnAboutDeprecatedLifecycles.add(fiber.type);\n      });\n\n      var _sortedNames2 = Array.from(_uniqueNames2).sort().join(', ');\n\n      (0, _lowPriorityWarning2.default)(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\\n\\nPlease update the following components: %s' + '\\n\\nLearn more about this warning here:' + '\\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);\n\n      pendingComponentWillUpdateWarnings = [];\n    }\n  };\n\n  ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {\n    // Dedup strategy: Warn once per component.\n    if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    // Don't warn about react-lifecycles-compat polyfilled components.\n    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {\n      pendingComponentWillMountWarnings.push(fiber);\n    }\n    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {\n      pendingComponentWillReceivePropsWarnings.push(fiber);\n    }\n    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {\n      pendingComponentWillUpdateWarnings.push(fiber);\n    }\n  };\n\n  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {\n    var strictRoot = getStrictRoot(fiber);\n\n    // Dedup strategy: Warn once per component.\n    // This is difficult to track any other way since component names\n    // are often vague and are likely to collide between 3rd party libraries.\n    // An expand property is probably okay to use here since it's DEV-only,\n    // and will only be set in the event of serious warnings.\n    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {\n      return;\n    }\n\n    // Don't warn about react-lifecycles-compat polyfilled components.\n    // Note that it is sufficient to check for the presence of a\n    // single lifecycle, componentWillMount, with the polyfill flag.\n    if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning === true) {\n      return;\n    }\n\n    var warningsForRoot = void 0;\n    if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {\n      warningsForRoot = {\n        UNSAFE_componentWillMount: [],\n        UNSAFE_componentWillReceiveProps: [],\n        UNSAFE_componentWillUpdate: []\n      };\n\n      pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);\n    } else {\n      warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);\n    }\n\n    var unsafeLifecycles = [];\n    if (typeof instance.componentWillMount === 'function' || typeof instance.UNSAFE_componentWillMount === 'function') {\n      unsafeLifecycles.push('UNSAFE_componentWillMount');\n    }\n    if (typeof instance.componentWillReceiveProps === 'function' || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {\n      unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');\n    }\n    if (typeof instance.componentWillUpdate === 'function' || typeof instance.UNSAFE_componentWillUpdate === 'function') {\n      unsafeLifecycles.push('UNSAFE_componentWillUpdate');\n    }\n\n    if (unsafeLifecycles.length > 0) {\n      unsafeLifecycles.forEach(function (lifecycle) {\n        warningsForRoot[lifecycle].push(fiber);\n      });\n    }\n  };\n}\n\nexports.default = ReactStrictModeWarnings;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar NoContext = exports.NoContext = 0; /**\n                                        * Copyright (c) 2013-present, Facebook, Inc.\n                                        *\n                                        * This source code is licensed under the MIT license found in the\n                                        * LICENSE file in the root directory of this source tree.\n                                        *\n                                        * \n                                        */\n\nvar AsyncMode = exports.AsyncMode = 1;\nvar StrictMode = exports.StrictMode = 2;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdFR5cGVPZk1vZGUuanMiXSwibmFtZXMiOlsiTm9Db250ZXh0IiwiQXN5bmNNb2RlIiwiU3RyaWN0TW9kZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFXTyxJQUFNQSxnQ0FBWSxDQUFsQixDLENBWFA7Ozs7Ozs7OztBQVlPLElBQU1DLGdDQUFZLENBQWxCO0FBQ0EsSUFBTUMsa0NBQWEsQ0FBbkIiLCJmaWxlIjoiUmVhY3RUeXBlT2ZNb2RlLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5leHBvcnQgdHlwZSBUeXBlT2ZNb2RlID0gbnVtYmVyO1xuXG5leHBvcnQgY29uc3QgTm9Db250ZXh0ID0gMGIwMDtcbmV4cG9ydCBjb25zdCBBc3luY01vZGUgPSAwYjAxO1xuZXhwb3J0IGNvbnN0IFN0cmljdE1vZGUgPSAwYjEwO1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\nexports.default = 1073741823;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC1yZWNvbmNpbGVyL3NyYy9tYXhTaWduZWQzMUJpdEludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0E7a0JBQ2UsVSIsImZpbGUiOiJtYXhTaWduZWQzMUJpdEludC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLy8gTWF4IDMxIGJpdCBpbnRlZ2VyLiBUaGUgbWF4IGludGVnZXIgc2l6ZSBpbiBWOCBmb3IgMzItYml0IHN5c3RlbXMuXG4vLyBNYXRoLnBvdygyLCAzMCkgLSAxXG4vLyAwYjExMTExMTExMTExMTExMTExMTExMTExMTExMTExMVxuZXhwb3J0IGRlZmF1bHQgMTA3Mzc0MTgyMztcbiJdfQ==","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n'use strict';\n\nvar React = require('./src/React');\n\n// TODO: decide on the top-level export form.\n// This is hacky but makes it work with both Rollup and Jest.\nmodule.exports = React.default ? React.default : React;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9pbmRleC5qcyJdLCJuYW1lcyI6WyJSZWFjdCIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7OztBQVNBOztBQUVBLElBQU1BLFFBQVFDLFFBQVEsYUFBUixDQUFkOztBQUVBO0FBQ0E7QUFDQUMsT0FBT0MsT0FBUCxHQUFpQkgsTUFBTUksT0FBTixHQUFnQkosTUFBTUksT0FBdEIsR0FBZ0NKLEtBQWpEIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IFJlYWN0ID0gcmVxdWlyZSgnLi9zcmMvUmVhY3QnKTtcblxuLy8gVE9ETzogZGVjaWRlIG9uIHRoZSB0b3AtbGV2ZWwgZXhwb3J0IGZvcm0uXG4vLyBUaGlzIGlzIGhhY2t5IGJ1dCBtYWtlcyBpdCB3b3JrIHdpdGggYm90aCBSb2xsdXAgYW5kIEplc3QuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0LmRlZmF1bHQgPyBSZWFjdC5kZWZhdWx0IDogUmVhY3Q7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _ReactVersion = require('shared/ReactVersion');\n\nvar _ReactVersion2 = _interopRequireDefault(_ReactVersion);\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _ReactBaseClasses = require('./ReactBaseClasses');\n\nvar _ReactCreateRef = require('./ReactCreateRef');\n\nvar _ReactChildren = require('./ReactChildren');\n\nvar _ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);\n\nvar _ReactElement = require('./ReactElement');\n\nvar _ReactContext = require('./ReactContext');\n\nvar _forwardRef = require('./forwardRef');\n\nvar _forwardRef2 = _interopRequireDefault(_forwardRef);\n\nvar _ReactElementValidator = require('./ReactElementValidator');\n\nvar _ReactDebugCurrentFrame = require('./ReactDebugCurrentFrame');\n\nvar _ReactDebugCurrentFrame2 = _interopRequireDefault(_ReactDebugCurrentFrame);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar React = {\n  Children: {\n    map: _ReactChildren.map,\n    forEach: _ReactChildren.forEach,\n    count: _ReactChildren.count,\n    toArray: _ReactChildren.toArray,\n    only: _ReactChildren.only\n  },\n\n  createRef: _ReactCreateRef.createRef,\n  Component: _ReactBaseClasses.Component,\n  PureComponent: _ReactBaseClasses.PureComponent,\n\n  createContext: _ReactContext.createContext,\n  forwardRef: _forwardRef2.default,\n\n  Fragment: _ReactSymbols.REACT_FRAGMENT_TYPE,\n  StrictMode: _ReactSymbols.REACT_STRICT_MODE_TYPE,\n  unstable_AsyncMode: _ReactSymbols.REACT_ASYNC_MODE_TYPE,\n\n  createElement: __DEV__ ? _ReactElementValidator.createElementWithValidation : _ReactElement.createElement,\n  cloneElement: __DEV__ ? _ReactElementValidator.cloneElementWithValidation : _ReactElement.cloneElement,\n  createFactory: __DEV__ ? _ReactElementValidator.createFactoryWithValidation : _ReactElement.createFactory,\n  isValidElement: _ReactElement.isValidElement,\n\n  version: _ReactVersion2.default,\n\n  __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {\n    ReactCurrentOwner: _ReactCurrentOwner2.default,\n    // Used by renderers to avoid bundling object-assign twice in UMD bundles:\n    assign: _objectAssign2.default\n  }\n};\n\nif (__DEV__) {\n  Object.assign(React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, {\n    // These should not be included in production.\n    ReactDebugCurrentFrame: _ReactDebugCurrentFrame2.default,\n    // Shim for React DOM 16.0.0 which still destructured (but not used) this.\n    // TODO: remove in React 17.0.\n    ReactComponentTreeHook: {}\n  });\n}\n\nexports.default = React;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3QuanMiXSwibmFtZXMiOlsiUmVhY3QiLCJDaGlsZHJlbiIsIm1hcCIsImZvckVhY2giLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiY3JlYXRlUmVmIiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsImNyZWF0ZUNvbnRleHQiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiU3RyaWN0TW9kZSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJ1bnN0YWJsZV9Bc3luY01vZGUiLCJSRUFDVF9BU1lOQ19NT0RFX1RZUEUiLCJjcmVhdGVFbGVtZW50IiwiX19ERVZfXyIsImNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiIsImNsb25lRWxlbWVudCIsImNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZUZhY3RvcnlXaXRoVmFsaWRhdGlvbiIsImlzVmFsaWRFbGVtZW50IiwidmVyc2lvbiIsIlJlYWN0VmVyc2lvbiIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJhc3NpZ24iLCJPYmplY3QiLCJSZWFjdERlYnVnQ3VycmVudEZyYW1lIiwiUmVhY3RDb21wb25lbnRUcmVlSG9vayJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7QUFDQTs7OztBQUNBOztBQU1BOztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBTUE7O0FBQ0E7Ozs7QUFDQTs7QUFLQTs7Ozs7O0FBaENBOzs7Ozs7O0FBa0NBLElBQU1BLFFBQVE7QUFDWkMsWUFBVTtBQUNSQywyQkFEUTtBQUVSQyxtQ0FGUTtBQUdSQywrQkFIUTtBQUlSQyxtQ0FKUTtBQUtSQztBQUxRLEdBREU7O0FBU1pDLHNDQVRZO0FBVVpDLHdDQVZZO0FBV1pDLGdEQVhZOztBQWFaQyw0Q0FiWTtBQWNaQyxrQ0FkWTs7QUFnQlpDLFlBQVVDLGlDQWhCRTtBQWlCWkMsY0FBWUMsb0NBakJBO0FBa0JaQyxzQkFBb0JDLG1DQWxCUjs7QUFvQlpDLGlCQUFlQyxVQUFVQyxrREFBVixHQUF3Q0YsMkJBcEIzQztBQXFCWkcsZ0JBQWNGLFVBQVVHLGlEQUFWLEdBQXVDRCwwQkFyQnpDO0FBc0JaRSxpQkFBZUosVUFBVUssa0RBQVYsR0FBd0NELDJCQXRCM0M7QUF1QlpFLGtCQUFnQkEsNEJBdkJKOztBQXlCWkMsV0FBU0Msc0JBekJHOztBQTJCWkMsc0RBQW9EO0FBQ2xEQyxrREFEa0Q7QUFFbEQ7QUFDQUM7QUFIa0Q7QUEzQnhDLENBQWQ7O0FBa0NBLElBQUlYLE9BQUosRUFBYTtBQUNYWSxTQUFPRCxNQUFQLENBQWM5QixNQUFNNEIsa0RBQXBCLEVBQXdFO0FBQ3RFO0FBQ0FJLDREQUZzRTtBQUd0RTtBQUNBO0FBQ0FDLDRCQUF3QjtBQUw4QyxHQUF4RTtBQU9EOztrQkFFY2pDLEsiLCJmaWxlIjoiUmVhY3QuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgYXNzaWduIGZyb20gJ29iamVjdC1hc3NpZ24nO1xuaW1wb3J0IFJlYWN0VmVyc2lvbiBmcm9tICdzaGFyZWQvUmVhY3RWZXJzaW9uJztcbmltcG9ydCB7XG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUsXG4gIFJFQUNUX1NUUklDVF9NT0RFX1RZUEUsXG4gIFJFQUNUX0FTWU5DX01PREVfVFlQRSxcbn0gZnJvbSAnc2hhcmVkL1JlYWN0U3ltYm9scyc7XG5cbmltcG9ydCB7Q29tcG9uZW50LCBQdXJlQ29tcG9uZW50fSBmcm9tICcuL1JlYWN0QmFzZUNsYXNzZXMnO1xuaW1wb3J0IHtjcmVhdGVSZWZ9IGZyb20gJy4vUmVhY3RDcmVhdGVSZWYnO1xuaW1wb3J0IHtmb3JFYWNoLCBtYXAsIGNvdW50LCB0b0FycmF5LCBvbmx5fSBmcm9tICcuL1JlYWN0Q2hpbGRyZW4nO1xuaW1wb3J0IFJlYWN0Q3VycmVudE93bmVyIGZyb20gJy4vUmVhY3RDdXJyZW50T3duZXInO1xuaW1wb3J0IHtcbiAgY3JlYXRlRWxlbWVudCxcbiAgY3JlYXRlRmFjdG9yeSxcbiAgY2xvbmVFbGVtZW50LFxuICBpc1ZhbGlkRWxlbWVudCxcbn0gZnJvbSAnLi9SZWFjdEVsZW1lbnQnO1xuaW1wb3J0IHtjcmVhdGVDb250ZXh0fSBmcm9tICcuL1JlYWN0Q29udGV4dCc7XG5pbXBvcnQgZm9yd2FyZFJlZiBmcm9tICcuL2ZvcndhcmRSZWYnO1xuaW1wb3J0IHtcbiAgY3JlYXRlRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxuICBjcmVhdGVGYWN0b3J5V2l0aFZhbGlkYXRpb24sXG4gIGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uLFxufSBmcm9tICcuL1JlYWN0RWxlbWVudFZhbGlkYXRvcic7XG5pbXBvcnQgUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZSBmcm9tICcuL1JlYWN0RGVidWdDdXJyZW50RnJhbWUnO1xuXG5jb25zdCBSZWFjdCA9IHtcbiAgQ2hpbGRyZW46IHtcbiAgICBtYXAsXG4gICAgZm9yRWFjaCxcbiAgICBjb3VudCxcbiAgICB0b0FycmF5LFxuICAgIG9ubHksXG4gIH0sXG5cbiAgY3JlYXRlUmVmLFxuICBDb21wb25lbnQsXG4gIFB1cmVDb21wb25lbnQsXG5cbiAgY3JlYXRlQ29udGV4dCxcbiAgZm9yd2FyZFJlZixcblxuICBGcmFnbWVudDogUkVBQ1RfRlJBR01FTlRfVFlQRSxcbiAgU3RyaWN0TW9kZTogUkVBQ1RfU1RSSUNUX01PREVfVFlQRSxcbiAgdW5zdGFibGVfQXN5bmNNb2RlOiBSRUFDVF9BU1lOQ19NT0RFX1RZUEUsXG5cbiAgY3JlYXRlRWxlbWVudDogX19ERVZfXyA/IGNyZWF0ZUVsZW1lbnRXaXRoVmFsaWRhdGlvbiA6IGNyZWF0ZUVsZW1lbnQsXG4gIGNsb25lRWxlbWVudDogX19ERVZfXyA/IGNsb25lRWxlbWVudFdpdGhWYWxpZGF0aW9uIDogY2xvbmVFbGVtZW50LFxuICBjcmVhdGVGYWN0b3J5OiBfX0RFVl9fID8gY3JlYXRlRmFjdG9yeVdpdGhWYWxpZGF0aW9uIDogY3JlYXRlRmFjdG9yeSxcbiAgaXNWYWxpZEVsZW1lbnQ6IGlzVmFsaWRFbGVtZW50LFxuXG4gIHZlcnNpb246IFJlYWN0VmVyc2lvbixcblxuICBfX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDoge1xuICAgIFJlYWN0Q3VycmVudE93bmVyLFxuICAgIC8vIFVzZWQgYnkgcmVuZGVyZXJzIHRvIGF2b2lkIGJ1bmRsaW5nIG9iamVjdC1hc3NpZ24gdHdpY2UgaW4gVU1EIGJ1bmRsZXM6XG4gICAgYXNzaWduLFxuICB9LFxufTtcblxuaWYgKF9fREVWX18pIHtcbiAgT2JqZWN0LmFzc2lnbihSZWFjdC5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCwge1xuICAgIC8vIFRoZXNlIHNob3VsZCBub3QgYmUgaW5jbHVkZWQgaW4gcHJvZHVjdGlvbi5cbiAgICBSZWFjdERlYnVnQ3VycmVudEZyYW1lLFxuICAgIC8vIFNoaW0gZm9yIFJlYWN0IERPTSAxNi4wLjAgd2hpY2ggc3RpbGwgZGVzdHJ1Y3R1cmVkIChidXQgbm90IHVzZWQpIHRoaXMuXG4gICAgLy8gVE9ETzogcmVtb3ZlIGluIFJlYWN0IDE3LjAuXG4gICAgUmVhY3RDb21wb25lbnRUcmVlSG9vazoge30sXG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PureComponent = exports.Component = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nvar _emptyObject = require('fbjs/lib/emptyObject');\n\nvar _emptyObject2 = _interopRequireDefault(_emptyObject);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _lowPriorityWarning = require('shared/lowPriorityWarning');\n\nvar _lowPriorityWarning2 = _interopRequireDefault(_lowPriorityWarning);\n\nvar _ReactNoopUpdateQueue = require('./ReactNoopUpdateQueue');\n\nvar _ReactNoopUpdateQueue2 = _interopRequireDefault(_ReactNoopUpdateQueue);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Base class helpers for the updating state of a component.\n */\nfunction Component(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = _emptyObject2.default;\n  // We initialize the default updater but the real one gets injected by the\n  // renderer.\n  this.updater = updater || _ReactNoopUpdateQueue2.default;\n}\n\nComponent.prototype.isReactComponent = {};\n\n/**\n * Sets a subset of the state. Always use this to mutate\n * state. You should treat `this.state` as immutable.\n *\n * There is no guarantee that `this.state` will be immediately updated, so\n * accessing `this.state` after calling this method may return the old value.\n *\n * There is no guarantee that calls to `setState` will run synchronously,\n * as they may eventually be batched together.  You can provide an optional\n * callback that will be executed when the call to setState is actually\n * completed.\n *\n * When a function is provided to setState, it will be called at some point in\n * the future (not synchronously). It will be called with the up to date\n * component arguments (state, props, context). These values can be different\n * from this.* because your function may be called after receiveProps but before\n * shouldComponentUpdate, and this new state, props, and context will not yet be\n * assigned to this.\n *\n * @param {object|function} partialState Next partial state or function to\n *        produce next partial state to be merged with current state.\n * @param {?function} callback Called after state is updated.\n * @final\n * @protected\n */\nComponent.prototype.setState = function (partialState, callback) {\n  (0, _invariant2.default)((typeof partialState === 'undefined' ? 'undefined' : _typeof(partialState)) === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.');\n  this.updater.enqueueSetState(this, partialState, callback, 'setState');\n};\n\n/**\n * Forces an update. This should only be invoked when it is known with\n * certainty that we are **not** in a DOM transaction.\n *\n * You may want to call this when you know that some deeper aspect of the\n * component's state has changed but `setState` was not called.\n *\n * This will not invoke `shouldComponentUpdate`, but it will invoke\n * `componentWillUpdate` and `componentDidUpdate`.\n *\n * @param {?function} callback Called after update is complete.\n * @final\n * @protected\n */\nComponent.prototype.forceUpdate = function (callback) {\n  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');\n};\n\n/**\n * Deprecated APIs. These APIs used to exist on classic React classes but since\n * we would like to deprecate them, we're not going to move them over to this\n * modern base class. Instead, we define a getter that warns if it's accessed.\n */\nif (__DEV__) {\n  var deprecatedAPIs = {\n    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],\n    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']\n  };\n  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {\n    Object.defineProperty(Component.prototype, methodName, {\n      get: function get() {\n        (0, _lowPriorityWarning2.default)(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);\n        return undefined;\n      }\n    });\n  };\n  for (var fnName in deprecatedAPIs) {\n    if (deprecatedAPIs.hasOwnProperty(fnName)) {\n      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);\n    }\n  }\n}\n\nfunction ComponentDummy() {}\nComponentDummy.prototype = Component.prototype;\n\n/**\n * Convenience component with default shallow equality check for sCU.\n */\nfunction PureComponent(props, context, updater) {\n  this.props = props;\n  this.context = context;\n  this.refs = _emptyObject2.default;\n  this.updater = updater || _ReactNoopUpdateQueue2.default;\n}\n\nvar pureComponentPrototype = PureComponent.prototype = new ComponentDummy();\npureComponentPrototype.constructor = PureComponent;\n// Avoid an extra prototype jump for these methods.\nObject.assign(pureComponentPrototype, Component.prototype);\npureComponentPrototype.isPureReactComponent = true;\n\nexports.Component = Component;\nexports.PureComponent = PureComponent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toArray = exports.only = exports.count = exports.map = exports.forEach = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nvar _emptyFunction = require('fbjs/lib/emptyFunction');\n\nvar _emptyFunction2 = _interopRequireDefault(_emptyFunction);\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _ReactElement = require('./ReactElement');\n\nvar _ReactDebugCurrentFrame = require('./ReactDebugCurrentFrame');\n\nvar _ReactDebugCurrentFrame2 = _interopRequireDefault(_ReactDebugCurrentFrame);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar SEPARATOR = '.';\nvar SUBSEPARATOR = ':';\n\n/**\n * Escape and wrap key so it is safe to use as a reactid\n *\n * @param {string} key to be escaped.\n * @return {string} the escaped key.\n */\nfunction escape(key) {\n  var escapeRegex = /[=:]/g;\n  var escaperLookup = {\n    '=': '=0',\n    ':': '=2'\n  };\n  var escapedString = ('' + key).replace(escapeRegex, function (match) {\n    return escaperLookup[match];\n  });\n\n  return '$' + escapedString;\n}\n\n/**\n * TODO: Test that a single child and an array with one item have the same key\n * pattern.\n */\n\nvar didWarnAboutMaps = false;\n\nvar userProvidedKeyEscapeRegex = /\\/+/g;\nfunction escapeUserProvidedKey(text) {\n  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');\n}\n\nvar POOL_SIZE = 10;\nvar traverseContextPool = [];\nfunction getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {\n  if (traverseContextPool.length) {\n    var traverseContext = traverseContextPool.pop();\n    traverseContext.result = mapResult;\n    traverseContext.keyPrefix = keyPrefix;\n    traverseContext.func = mapFunction;\n    traverseContext.context = mapContext;\n    traverseContext.count = 0;\n    return traverseContext;\n  } else {\n    return {\n      result: mapResult,\n      keyPrefix: keyPrefix,\n      func: mapFunction,\n      context: mapContext,\n      count: 0\n    };\n  }\n}\n\nfunction releaseTraverseContext(traverseContext) {\n  traverseContext.result = null;\n  traverseContext.keyPrefix = null;\n  traverseContext.func = null;\n  traverseContext.context = null;\n  traverseContext.count = 0;\n  if (traverseContextPool.length < POOL_SIZE) {\n    traverseContextPool.push(traverseContext);\n  }\n}\n\n/**\n * @param {?*} children Children tree container.\n * @param {!string} nameSoFar Name of the key path so far.\n * @param {!function} callback Callback to invoke with each child found.\n * @param {?*} traverseContext Used to pass information throughout the traversal\n * process.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {\n  var type = typeof children === 'undefined' ? 'undefined' : _typeof(children);\n\n  if (type === 'undefined' || type === 'boolean') {\n    // All of the above are perceived as null.\n    children = null;\n  }\n\n  var invokeCallback = false;\n\n  if (children === null) {\n    invokeCallback = true;\n  } else {\n    switch (type) {\n      case 'string':\n      case 'number':\n        invokeCallback = true;\n        break;\n      case 'object':\n        switch (children.$$typeof) {\n          case _ReactSymbols.REACT_ELEMENT_TYPE:\n          case _ReactSymbols.REACT_PORTAL_TYPE:\n            invokeCallback = true;\n        }\n    }\n  }\n\n  if (invokeCallback) {\n    callback(traverseContext, children,\n    // If it's the only child, treat the name as if it was wrapped in an array\n    // so that it's consistent if the number of children grows.\n    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);\n    return 1;\n  }\n\n  var child = void 0;\n  var nextName = void 0;\n  var subtreeCount = 0; // Count of children found in the current subtree.\n  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;\n\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      child = children[i];\n      nextName = nextNamePrefix + getComponentKey(child, i);\n      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n    }\n  } else {\n    var iteratorFn = (0, _ReactSymbols.getIteratorFn)(children);\n    if (typeof iteratorFn === 'function') {\n      if (__DEV__) {\n        // Warn about using Maps as children\n        if (iteratorFn === children.entries) {\n          (0, _warning2.default)(didWarnAboutMaps, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.%s', _ReactDebugCurrentFrame2.default.getStackAddendum());\n          didWarnAboutMaps = true;\n        }\n      }\n\n      var iterator = iteratorFn.call(children);\n      var step = void 0;\n      var ii = 0;\n      while (!(step = iterator.next()).done) {\n        child = step.value;\n        nextName = nextNamePrefix + getComponentKey(child, ii++);\n        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);\n      }\n    } else if (type === 'object') {\n      var addendum = '';\n      if (__DEV__) {\n        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + _ReactDebugCurrentFrame2.default.getStackAddendum();\n      }\n      var childrenString = '' + children;\n      (0, _invariant2.default)(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);\n    }\n  }\n\n  return subtreeCount;\n}\n\n/**\n * Traverses children that are typically specified as `props.children`, but\n * might also be specified through attributes:\n *\n * - `traverseAllChildren(this.props.children, ...)`\n * - `traverseAllChildren(this.props.leftPanelChildren, ...)`\n *\n * The `traverseContext` is an optional argument that is passed through the\n * entire traversal. It can be used to store accumulations or anything else that\n * the callback might find relevant.\n *\n * @param {?*} children Children tree object.\n * @param {!function} callback To invoke upon traversing each child.\n * @param {?*} traverseContext Context for traversal.\n * @return {!number} The number of children in this subtree.\n */\nfunction traverseAllChildren(children, callback, traverseContext) {\n  if (children == null) {\n    return 0;\n  }\n\n  return traverseAllChildrenImpl(children, '', callback, traverseContext);\n}\n\n/**\n * Generate a key string that identifies a component within a set.\n *\n * @param {*} component A component that could contain a manual key.\n * @param {number} index Index that is used if a manual key is not provided.\n * @return {string}\n */\nfunction getComponentKey(component, index) {\n  // Do some typechecking here since we call this blindly. We want to ensure\n  // that we don't block potential future ES APIs.\n  if ((typeof component === 'undefined' ? 'undefined' : _typeof(component)) === 'object' && component !== null && component.key != null) {\n    // Explicit key\n    return escape(component.key);\n  }\n  // Implicit key determined by the index in the set\n  return index.toString(36);\n}\n\nfunction forEachSingleChild(bookKeeping, child, name) {\n  var func = bookKeeping.func,\n      context = bookKeeping.context;\n\n  func.call(context, child, bookKeeping.count++);\n}\n\n/**\n * Iterates through children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.foreach\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} forEachFunc\n * @param {*} forEachContext Context for forEachContext.\n */\nfunction forEachChildren(children, forEachFunc, forEachContext) {\n  if (children == null) {\n    return children;\n  }\n  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);\n  traverseAllChildren(children, forEachSingleChild, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\nfunction mapSingleChildIntoContext(bookKeeping, child, childKey) {\n  var result = bookKeeping.result,\n      keyPrefix = bookKeeping.keyPrefix,\n      func = bookKeeping.func,\n      context = bookKeeping.context;\n\n\n  var mappedChild = func.call(context, child, bookKeeping.count++);\n  if (Array.isArray(mappedChild)) {\n    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, _emptyFunction2.default.thatReturnsArgument);\n  } else if (mappedChild != null) {\n    if ((0, _ReactElement.isValidElement)(mappedChild)) {\n      mappedChild = (0, _ReactElement.cloneAndReplaceKey)(mappedChild,\n      // Keep both the (mapped) and old keys if they differ, just as\n      // traverseAllChildren used to do for objects as children\n      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);\n    }\n    result.push(mappedChild);\n  }\n}\n\nfunction mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {\n  var escapedPrefix = '';\n  if (prefix != null) {\n    escapedPrefix = escapeUserProvidedKey(prefix) + '/';\n  }\n  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);\n  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);\n  releaseTraverseContext(traverseContext);\n}\n\n/**\n * Maps children that are typically specified as `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.map\n *\n * The provided mapFunction(child, key, index) will be called for each\n * leaf child.\n *\n * @param {?*} children Children tree container.\n * @param {function(*, int)} func The map function.\n * @param {*} context Context for mapFunction.\n * @return {object} Object containing the ordered map of results.\n */\nfunction mapChildren(children, func, context) {\n  if (children == null) {\n    return children;\n  }\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, func, context);\n  return result;\n}\n\n/**\n * Count the number of children that are typically specified as\n * `props.children`.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.count\n *\n * @param {?*} children Children tree container.\n * @return {number} The number of children.\n */\nfunction countChildren(children, context) {\n  return traverseAllChildren(children, _emptyFunction2.default.thatReturnsNull, null);\n}\n\n/**\n * Flatten a children object (typically specified as `props.children`) and\n * return an array with appropriately re-keyed children.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.toarray\n */\nfunction toArray(children) {\n  var result = [];\n  mapIntoWithKeyPrefixInternal(children, result, null, _emptyFunction2.default.thatReturnsArgument);\n  return result;\n}\n\n/**\n * Returns the first child in a collection of children and verifies that there\n * is only one child in the collection.\n *\n * See https://reactjs.org/docs/react-api.html#react.children.only\n *\n * The current implementation of this function assumes that a single child gets\n * passed without a wrapper, but the purpose of this helper function is to\n * abstract away the particular structure of children.\n *\n * @param {?object} children Child collection structure.\n * @return {ReactElement} The first and only `ReactElement` contained in the\n * structure.\n */\nfunction onlyChild(children) {\n  (0, _invariant2.default)((0, _ReactElement.isValidElement)(children), 'React.Children.only expected to receive a single React element child.');\n  return children;\n}\n\nexports.forEach = forEachChildren;\nexports.map = mapChildren;\nexports.count = countChildren;\nexports.only = onlyChild;\nexports.toArray = toArray;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createContext = createContext;\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction createContext(defaultValue, calculateChangedBits) {\n  if (calculateChangedBits === undefined) {\n    calculateChangedBits = null;\n  } else {\n    if (__DEV__) {\n      (0, _warning2.default)(calculateChangedBits === null || typeof calculateChangedBits === 'function', 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);\n    }\n  }\n\n  var context = {\n    $$typeof: _ReactSymbols.REACT_CONTEXT_TYPE,\n    _calculateChangedBits: calculateChangedBits,\n    _defaultValue: defaultValue,\n    _currentValue: defaultValue,\n    _changedBits: 0,\n    // These are circular\n    Provider: null,\n    Consumer: null\n  };\n\n  context.Provider = {\n    $$typeof: _ReactSymbols.REACT_PROVIDER_TYPE,\n    _context: context\n  };\n  context.Consumer = context;\n\n  if (__DEV__) {\n    context._currentRenderer = null;\n  }\n\n  return context;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RDb250ZXh0LmpzIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsInVuZGVmaW5lZCIsIl9fREVWX18iLCJjb250ZXh0IiwiJCR0eXBlb2YiLCJSRUFDVF9DT05URVhUX1RZUEUiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfZGVmYXVsdFZhbHVlIiwiX2N1cnJlbnRWYWx1ZSIsIl9jaGFuZ2VkQml0cyIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiX2NvbnRleHQiLCJfY3VycmVudFJlbmRlcmVyIl0sIm1hcHBpbmdzIjoiOzs7OztRQWVnQkEsYSxHQUFBQSxhOztBQU5oQjs7QUFJQTs7Ozs7O0FBYkE7Ozs7Ozs7OztBQWVPLFNBQVNBLGFBQVQsQ0FDTEMsWUFESyxFQUVMQyxvQkFGSyxFQUdZO0FBQ2pCLE1BQUlBLHlCQUF5QkMsU0FBN0IsRUFBd0M7QUFDdENELDJCQUF1QixJQUF2QjtBQUNELEdBRkQsTUFFTztBQUNMLFFBQUlFLE9BQUosRUFBYTtBQUNYLDZCQUNFRix5QkFBeUIsSUFBekIsSUFDRSxPQUFPQSxvQkFBUCxLQUFnQyxVQUZwQyxFQUdFLGtFQUNFLGdDQUpKLEVBS0VBLG9CQUxGO0FBT0Q7QUFDRjs7QUFFRCxNQUFNRyxVQUEyQjtBQUMvQkMsY0FBVUMsZ0NBRHFCO0FBRS9CQywyQkFBdUJOLG9CQUZRO0FBRy9CTyxtQkFBZVIsWUFIZ0I7QUFJL0JTLG1CQUFlVCxZQUpnQjtBQUsvQlUsa0JBQWMsQ0FMaUI7QUFNL0I7QUFDQUMsY0FBVyxJQVBvQjtBQVEvQkMsY0FBVztBQVJvQixHQUFqQzs7QUFXQVIsVUFBUU8sUUFBUixHQUFtQjtBQUNqQk4sY0FBVVEsaUNBRE87QUFFakJDLGNBQVVWO0FBRk8sR0FBbkI7QUFJQUEsVUFBUVEsUUFBUixHQUFtQlIsT0FBbkI7O0FBRUEsTUFBSUQsT0FBSixFQUFhO0FBQ1hDLFlBQVFXLGdCQUFSLEdBQTJCLElBQTNCO0FBQ0Q7O0FBRUQsU0FBT1gsT0FBUDtBQUNEIiwiZmlsZSI6IlJlYWN0Q29udGV4dC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtSRUFDVF9QUk9WSURFUl9UWVBFLCBSRUFDVF9DT05URVhUX1RZUEV9IGZyb20gJ3NoYXJlZC9SZWFjdFN5bWJvbHMnO1xuXG5pbXBvcnQgdHlwZSB7UmVhY3RDb250ZXh0fSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlcyc7XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ2ZianMvbGliL3dhcm5pbmcnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29udGV4dDxUPihcbiAgZGVmYXVsdFZhbHVlOiBULFxuICBjYWxjdWxhdGVDaGFuZ2VkQml0czogPyhhOiBULCBiOiBUKSA9PiBudW1iZXIsXG4pOiBSZWFjdENvbnRleHQ8VD4ge1xuICBpZiAoY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgd2FybmluZyhcbiAgICAgICAgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09IG51bGwgfHxcbiAgICAgICAgICB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICdjcmVhdGVDb250ZXh0OiBFeHBlY3RlZCB0aGUgb3B0aW9uYWwgc2Vjb25kIGFyZ3VtZW50IHRvIGJlIGEgJyArXG4gICAgICAgICAgJ2Z1bmN0aW9uLiBJbnN0ZWFkIHJlY2VpdmVkOiAlcycsXG4gICAgICAgIGNhbGN1bGF0ZUNoYW5nZWRCaXRzLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBjb250ZXh0OiBSZWFjdENvbnRleHQ8VD4gPSB7XG4gICAgJCR0eXBlb2Y6IFJFQUNUX0NPTlRFWFRfVFlQRSxcbiAgICBfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IGNhbGN1bGF0ZUNoYW5nZWRCaXRzLFxuICAgIF9kZWZhdWx0VmFsdWU6IGRlZmF1bHRWYWx1ZSxcbiAgICBfY3VycmVudFZhbHVlOiBkZWZhdWx0VmFsdWUsXG4gICAgX2NoYW5nZWRCaXRzOiAwLFxuICAgIC8vIFRoZXNlIGFyZSBjaXJjdWxhclxuICAgIFByb3ZpZGVyOiAobnVsbDogYW55KSxcbiAgICBDb25zdW1lcjogKG51bGw6IGFueSksXG4gIH07XG5cbiAgY29udGV4dC5Qcm92aWRlciA9IHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfUFJPVklERVJfVFlQRSxcbiAgICBfY29udGV4dDogY29udGV4dCxcbiAgfTtcbiAgY29udGV4dC5Db25zdW1lciA9IGNvbnRleHQ7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICBjb250ZXh0Ll9jdXJyZW50UmVuZGVyZXIgPSBudWxsO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRef = createRef;\n\n\n// an immutable object with a single mutable value\nfunction createRef() {\n  var refObject = {\n    current: null\n  };\n  if (__DEV__) {\n    Object.seal(refObject);\n  }\n  return refObject;\n} /**\n   * Copyright (c) 2013-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   * \n   */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RDcmVhdGVSZWYuanMiXSwibmFtZXMiOlsiY3JlYXRlUmVmIiwicmVmT2JqZWN0IiwiY3VycmVudCIsIl9fREVWX18iLCJPYmplY3QiLCJzZWFsIl0sIm1hcHBpbmdzIjoiOzs7OztRQVdnQkEsUyxHQUFBQSxTOzs7QUFEaEI7QUFDTyxTQUFTQSxTQUFULEdBQWdDO0FBQ3JDLE1BQU1DLFlBQVk7QUFDaEJDLGFBQVM7QUFETyxHQUFsQjtBQUdBLE1BQUlDLE9BQUosRUFBYTtBQUNYQyxXQUFPQyxJQUFQLENBQVlKLFNBQVo7QUFDRDtBQUNELFNBQU9BLFNBQVA7QUFDRCxDLENBbkJEIiwiZmlsZSI6IlJlYWN0Q3JlYXRlUmVmLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtSZWZPYmplY3R9IGZyb20gJ3NoYXJlZC9SZWFjdFR5cGVzJztcblxuLy8gYW4gaW1tdXRhYmxlIG9iamVjdCB3aXRoIGEgc2luZ2xlIG11dGFibGUgdmFsdWVcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZWYoKTogUmVmT2JqZWN0IHtcbiAgY29uc3QgcmVmT2JqZWN0ID0ge1xuICAgIGN1cnJlbnQ6IG51bGwsXG4gIH07XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgT2JqZWN0LnNlYWwocmVmT2JqZWN0KTtcbiAgfVxuICByZXR1cm4gcmVmT2JqZWN0O1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\n/**\n * Keeps track of the current owner.\n *\n * The current owner is the component who should own any components that are\n * currently being constructed.\n */\nvar ReactCurrentOwner = {\n  /**\n   * @internal\n   * @type {ReactComponent}\n   */\n  current: null\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    * \n    */\n\nexports.default = ReactCurrentOwner;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3RDdXJyZW50T3duZXIuanMiXSwibmFtZXMiOlsiUmVhY3RDdXJyZW50T3duZXIiLCJjdXJyZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7Ozs7OztBQU1BLElBQU1BLG9CQUFvQjtBQUN4Qjs7OztBQUlBQyxXQUFVO0FBTGMsQ0FBMUIsQyxDQWpCQTs7Ozs7Ozs7O2tCQXlCZUQsaUIiLCJmaWxlIjoiUmVhY3RDdXJyZW50T3duZXIuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCB0eXBlIHtGaWJlcn0gZnJvbSAncmVhY3QtcmVjb25jaWxlci9zcmMvUmVhY3RGaWJlcic7XG5cbi8qKlxuICogS2VlcHMgdHJhY2sgb2YgdGhlIGN1cnJlbnQgb3duZXIuXG4gKlxuICogVGhlIGN1cnJlbnQgb3duZXIgaXMgdGhlIGNvbXBvbmVudCB3aG8gc2hvdWxkIG93biBhbnkgY29tcG9uZW50cyB0aGF0IGFyZVxuICogY3VycmVudGx5IGJlaW5nIGNvbnN0cnVjdGVkLlxuICovXG5jb25zdCBSZWFjdEN1cnJlbnRPd25lciA9IHtcbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAdHlwZSB7UmVhY3RDb21wb25lbnR9XG4gICAqL1xuICBjdXJyZW50OiAobnVsbDogbnVsbCB8IEZpYmVyKSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0Q3VycmVudE93bmVyO1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar ReactDebugCurrentFrame = {};\n\nif (__DEV__) {\n  // Component that is being worked on\n  ReactDebugCurrentFrame.getCurrentStack = null;\n\n  ReactDebugCurrentFrame.getStackAddendum = function () {\n    var impl = ReactDebugCurrentFrame.getCurrentStack;\n    if (impl) {\n      return impl();\n    }\n    return null;\n  };\n}\n\nexports.default = ReactDebugCurrentFrame;\nmodule.exports = exports[\"default\"];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3REZWJ1Z0N1cnJlbnRGcmFtZS5qcyJdLCJuYW1lcyI6WyJSZWFjdERlYnVnQ3VycmVudEZyYW1lIiwiX19ERVZfXyIsImdldEN1cnJlbnRTdGFjayIsImdldFN0YWNrQWRkZW5kdW0iLCJpbXBsIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7QUFTQSxJQUFNQSx5QkFBeUIsRUFBL0I7O0FBRUEsSUFBSUMsT0FBSixFQUFhO0FBQ1g7QUFDQUQseUJBQXVCRSxlQUF2QixHQUEwQyxJQUExQzs7QUFFQUYseUJBQXVCRyxnQkFBdkIsR0FBMEMsWUFBMEI7QUFDbEUsUUFBTUMsT0FBT0osdUJBQXVCRSxlQUFwQztBQUNBLFFBQUlFLElBQUosRUFBVTtBQUNSLGFBQU9BLE1BQVA7QUFDRDtBQUNELFdBQU8sSUFBUDtBQUNELEdBTkQ7QUFPRDs7a0JBRWNKLHNCIiwiZmlsZSI6IlJlYWN0RGVidWdDdXJyZW50RnJhbWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmNvbnN0IFJlYWN0RGVidWdDdXJyZW50RnJhbWUgPSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgLy8gQ29tcG9uZW50IHRoYXQgaXMgYmVpbmcgd29ya2VkIG9uXG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0Q3VycmVudFN0YWNrID0gKG51bGw6IG51bGwgfCAoKCkgPT4gc3RyaW5nIHwgbnVsbCkpO1xuXG4gIFJlYWN0RGVidWdDdXJyZW50RnJhbWUuZ2V0U3RhY2tBZGRlbmR1bSA9IGZ1bmN0aW9uKCk6IHN0cmluZyB8IG51bGwge1xuICAgIGNvbnN0IGltcGwgPSBSZWFjdERlYnVnQ3VycmVudEZyYW1lLmdldEN1cnJlbnRTdGFjaztcbiAgICBpZiAoaW1wbCkge1xuICAgICAgcmV0dXJuIGltcGwoKTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlYWN0RGVidWdDdXJyZW50RnJhbWU7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2014-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nexports.createElement = createElement;\nexports.createFactory = createFactory;\nexports.cloneAndReplaceKey = cloneAndReplaceKey;\nexports.cloneElement = cloneElement;\nexports.isValidElement = isValidElement;\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar RESERVED_PROPS = {\n  key: true,\n  ref: true,\n  __self: true,\n  __source: true\n};\n\nvar specialPropKeyWarningShown = void 0,\n    specialPropRefWarningShown = void 0;\n\nfunction hasValidRef(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'ref')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.ref !== undefined;\n}\n\nfunction hasValidKey(config) {\n  if (__DEV__) {\n    if (hasOwnProperty.call(config, 'key')) {\n      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;\n      if (getter && getter.isReactWarning) {\n        return false;\n      }\n    }\n  }\n  return config.key !== undefined;\n}\n\nfunction defineKeyPropWarningGetter(props, displayName) {\n  var warnAboutAccessingKey = function warnAboutAccessingKey() {\n    if (!specialPropKeyWarningShown) {\n      specialPropKeyWarningShown = true;\n      (0, _warning2.default)(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingKey.isReactWarning = true;\n  Object.defineProperty(props, 'key', {\n    get: warnAboutAccessingKey,\n    configurable: true\n  });\n}\n\nfunction defineRefPropWarningGetter(props, displayName) {\n  var warnAboutAccessingRef = function warnAboutAccessingRef() {\n    if (!specialPropRefWarningShown) {\n      specialPropRefWarningShown = true;\n      (0, _warning2.default)(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);\n    }\n  };\n  warnAboutAccessingRef.isReactWarning = true;\n  Object.defineProperty(props, 'ref', {\n    get: warnAboutAccessingRef,\n    configurable: true\n  });\n}\n\n/**\n * Factory method to create a new React element. This no longer adheres to\n * the class pattern, so do not use new to call it. Also, no instanceof check\n * will work. Instead test $$typeof field against Symbol.for('react.element') to check\n * if something is a React Element.\n *\n * @param {*} type\n * @param {*} key\n * @param {string|object} ref\n * @param {*} self A *temporary* helper to detect places where `this` is\n * different from the `owner` when React.createElement is called, so that we\n * can warn. We want to get rid of owner and replace string `ref`s with arrow\n * functions, and as long as `this` and owner are the same, there will be no\n * change in behavior.\n * @param {*} source An annotation object (added by a transpiler or otherwise)\n * indicating filename, line number, and/or other information.\n * @param {*} owner\n * @param {*} props\n * @internal\n */\nvar ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {\n  var element = {\n    // This tag allows us to uniquely identify this as a React Element\n    $$typeof: _ReactSymbols.REACT_ELEMENT_TYPE,\n\n    // Built-in properties that belong on the element\n    type: type,\n    key: key,\n    ref: ref,\n    props: props,\n\n    // Record the component responsible for creating this element.\n    _owner: owner\n  };\n\n  if (__DEV__) {\n    // The validation flag is currently mutative. We put it on\n    // an external backing store so that we can freeze the whole object.\n    // This can be replaced with a WeakMap once they are implemented in\n    // commonly used development environments.\n    element._store = {};\n\n    // To make comparing ReactElements easier for testing purposes, we make\n    // the validation flag non-enumerable (where possible, which should\n    // include every environment we run tests in), so the test framework\n    // ignores it.\n    Object.defineProperty(element._store, 'validated', {\n      configurable: false,\n      enumerable: false,\n      writable: true,\n      value: false\n    });\n    // self and source are DEV only properties.\n    Object.defineProperty(element, '_self', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: self\n    });\n    // Two elements created in two different places should be considered\n    // equal for testing purposes and therefore we hide it from enumeration.\n    Object.defineProperty(element, '_source', {\n      configurable: false,\n      enumerable: false,\n      writable: false,\n      value: source\n    });\n    if (Object.freeze) {\n      Object.freeze(element.props);\n      Object.freeze(element);\n    }\n  }\n\n  return element;\n};\n\n/**\n * Create and return a new ReactElement of the given type.\n * See https://reactjs.org/docs/react-api.html#createelement\n */\nfunction createElement(type, config, children) {\n  var propName = void 0;\n\n  // Reserved names are extracted\n  var props = {};\n\n  var key = null;\n  var ref = null;\n  var self = null;\n  var source = null;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      ref = config.ref;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    self = config.__self === undefined ? null : config.__self;\n    source = config.__source === undefined ? null : config.__source;\n    // Remaining properties are added to a new props object\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        props[propName] = config[propName];\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    if (__DEV__) {\n      if (Object.freeze) {\n        Object.freeze(childArray);\n      }\n    }\n    props.children = childArray;\n  }\n\n  // Resolve default props\n  if (type && type.defaultProps) {\n    var defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n  if (__DEV__) {\n    if (key || ref) {\n      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== _ReactSymbols.REACT_ELEMENT_TYPE) {\n        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;\n        if (key) {\n          defineKeyPropWarningGetter(props, displayName);\n        }\n        if (ref) {\n          defineRefPropWarningGetter(props, displayName);\n        }\n      }\n    }\n  }\n  return ReactElement(type, key, ref, self, source, _ReactCurrentOwner2.default.current, props);\n}\n\n/**\n * Return a function that produces ReactElements of a given type.\n * See https://reactjs.org/docs/react-api.html#createfactory\n */\nfunction createFactory(type) {\n  var factory = createElement.bind(null, type);\n  // Expose the type on the factory and the prototype so that it can be\n  // easily accessed on elements. E.g. `<Foo />.type === Foo`.\n  // This should not be named `constructor` since this may not be the function\n  // that created the element, and it may not even be a constructor.\n  // Legacy hook: remove it\n  factory.type = type;\n  return factory;\n}\n\nfunction cloneAndReplaceKey(oldElement, newKey) {\n  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);\n\n  return newElement;\n}\n\n/**\n * Clone and return a new ReactElement using element as the starting point.\n * See https://reactjs.org/docs/react-api.html#cloneelement\n */\nfunction cloneElement(element, config, children) {\n  var propName = void 0;\n\n  // Original props are copied\n  var props = Object.assign({}, element.props);\n\n  // Reserved names are extracted\n  var key = element.key;\n  var ref = element.ref;\n  // Self is preserved since the owner is preserved.\n  var self = element._self;\n  // Source is preserved since cloneElement is unlikely to be targeted by a\n  // transpiler, and the original source is probably a better indicator of the\n  // true owner.\n  var source = element._source;\n\n  // Owner will be preserved, unless ref is overridden\n  var owner = element._owner;\n\n  if (config != null) {\n    if (hasValidRef(config)) {\n      // Silently steal the ref from the parent.\n      ref = config.ref;\n      owner = _ReactCurrentOwner2.default.current;\n    }\n    if (hasValidKey(config)) {\n      key = '' + config.key;\n    }\n\n    // Remaining properties override existing props\n    var defaultProps = void 0;\n    if (element.type && element.type.defaultProps) {\n      defaultProps = element.type.defaultProps;\n    }\n    for (propName in config) {\n      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {\n        if (config[propName] === undefined && defaultProps !== undefined) {\n          // Resolve default props\n          props[propName] = defaultProps[propName];\n        } else {\n          props[propName] = config[propName];\n        }\n      }\n    }\n  }\n\n  // Children can be more than one argument, and those are transferred onto\n  // the newly allocated props object.\n  var childrenLength = arguments.length - 2;\n  if (childrenLength === 1) {\n    props.children = children;\n  } else if (childrenLength > 1) {\n    var childArray = Array(childrenLength);\n    for (var i = 0; i < childrenLength; i++) {\n      childArray[i] = arguments[i + 2];\n    }\n    props.children = childArray;\n  }\n\n  return ReactElement(element.type, key, ref, self, source, owner, props);\n}\n\n/**\n * Verifies the object is a ReactElement.\n * See https://reactjs.org/docs/react-api.html#isvalidelement\n * @param {?object} object\n * @return {boolean} True if `object` is a valid component.\n * @final\n */\nfunction isValidElement(object) {\n  return (typeof object === 'undefined' ? 'undefined' : _typeof(object)) === 'object' && object !== null && object.$$typeof === _ReactSymbols.REACT_ELEMENT_TYPE;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2014-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\n/**\n * ReactElementValidator provides a wrapper around a element factory\n * which validates the props passed to the element. This is intended to be\n * used only in DEV and could be replaced by a static type checker for languages\n * that support it.\n */\n\nexports.createElementWithValidation = createElementWithValidation;\nexports.createFactoryWithValidation = createFactoryWithValidation;\nexports.cloneElementWithValidation = cloneElementWithValidation;\n\nvar _lowPriorityWarning = require('shared/lowPriorityWarning');\n\nvar _lowPriorityWarning2 = _interopRequireDefault(_lowPriorityWarning);\n\nvar _describeComponentFrame = require('shared/describeComponentFrame');\n\nvar _describeComponentFrame2 = _interopRequireDefault(_describeComponentFrame);\n\nvar _isValidElementType = require('shared/isValidElementType');\n\nvar _isValidElementType2 = _interopRequireDefault(_isValidElementType);\n\nvar _getComponentName = require('shared/getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _checkPropTypes = require('prop-types/checkPropTypes');\n\nvar _checkPropTypes2 = _interopRequireDefault(_checkPropTypes);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nvar _ReactCurrentOwner = require('./ReactCurrentOwner');\n\nvar _ReactCurrentOwner2 = _interopRequireDefault(_ReactCurrentOwner);\n\nvar _ReactElement = require('./ReactElement');\n\nvar _ReactDebugCurrentFrame = require('./ReactDebugCurrentFrame');\n\nvar _ReactDebugCurrentFrame2 = _interopRequireDefault(_ReactDebugCurrentFrame);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar currentlyValidatingElement = void 0;\nvar propTypesMisspellWarningShown = void 0;\n\nvar getDisplayName = function getDisplayName() {};\nvar getStackAddendum = function getStackAddendum() {};\n\nif (__DEV__) {\n  currentlyValidatingElement = null;\n\n  propTypesMisspellWarningShown = false;\n\n  getDisplayName = function getDisplayName(element) {\n    if (element == null) {\n      return '#empty';\n    } else if (typeof element === 'string' || typeof element === 'number') {\n      return '#text';\n    } else if (typeof element.type === 'string') {\n      return element.type;\n    } else if (element.type === _ReactSymbols.REACT_FRAGMENT_TYPE) {\n      return 'React.Fragment';\n    } else {\n      return element.type.displayName || element.type.name || 'Unknown';\n    }\n  };\n\n  getStackAddendum = function getStackAddendum() {\n    var stack = '';\n    if (currentlyValidatingElement) {\n      var name = getDisplayName(currentlyValidatingElement);\n      var owner = currentlyValidatingElement._owner;\n      stack += (0, _describeComponentFrame2.default)(name, currentlyValidatingElement._source, owner && (0, _getComponentName2.default)(owner));\n    }\n    stack += _ReactDebugCurrentFrame2.default.getStackAddendum() || '';\n    return stack;\n  };\n}\n\nfunction getDeclarationErrorAddendum() {\n  if (_ReactCurrentOwner2.default.current) {\n    var name = (0, _getComponentName2.default)(_ReactCurrentOwner2.default.current);\n    if (name) {\n      return '\\n\\nCheck the render method of `' + name + '`.';\n    }\n  }\n  return '';\n}\n\nfunction getSourceInfoErrorAddendum(elementProps) {\n  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {\n    var source = elementProps.__source;\n    var fileName = source.fileName.replace(/^.*[\\\\\\/]/, '');\n    var lineNumber = source.lineNumber;\n    return '\\n\\nCheck your code at ' + fileName + ':' + lineNumber + '.';\n  }\n  return '';\n}\n\n/**\n * Warn if there's no key explicitly set on dynamic arrays of children or\n * object keys are not valid. This allows us to keep track of children between\n * updates.\n */\nvar ownerHasKeyUseWarning = {};\n\nfunction getCurrentComponentErrorInfo(parentType) {\n  var info = getDeclarationErrorAddendum();\n\n  if (!info) {\n    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;\n    if (parentName) {\n      info = '\\n\\nCheck the top-level render call using <' + parentName + '>.';\n    }\n  }\n  return info;\n}\n\n/**\n * Warn if the element doesn't have an explicit key assigned to it.\n * This element is in an array. The array could grow and shrink or be\n * reordered. All children that haven't already been validated are required to\n * have a \"key\" property assigned to it. Error statuses are cached so a warning\n * will only be shown once.\n *\n * @internal\n * @param {ReactElement} element Element that requires a key.\n * @param {*} parentType element's parent's type.\n */\nfunction validateExplicitKey(element, parentType) {\n  if (!element._store || element._store.validated || element.key != null) {\n    return;\n  }\n  element._store.validated = true;\n\n  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);\n  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {\n    return;\n  }\n  ownerHasKeyUseWarning[currentComponentErrorInfo] = true;\n\n  // Usually the current owner is the offender, but if it accepts children as a\n  // property, it may be the creator of the child that's responsible for\n  // assigning it a key.\n  var childOwner = '';\n  if (element && element._owner && element._owner !== _ReactCurrentOwner2.default.current) {\n    // Give the component that originally created this child.\n    childOwner = ' It was passed a child from ' + (0, _getComponentName2.default)(element._owner) + '.';\n  }\n\n  currentlyValidatingElement = element;\n  if (__DEV__) {\n    (0, _warning2.default)(false, 'Each child in an array or iterator should have a unique \"key\" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, getStackAddendum());\n  }\n  currentlyValidatingElement = null;\n}\n\n/**\n * Ensure that every element either is passed in a static location, in an\n * array with an explicit keys property defined, or in an object literal\n * with valid key property.\n *\n * @internal\n * @param {ReactNode} node Statically passed child of any type.\n * @param {*} parentType node's parent's type.\n */\nfunction validateChildKeys(node, parentType) {\n  if ((typeof node === 'undefined' ? 'undefined' : _typeof(node)) !== 'object') {\n    return;\n  }\n  if (Array.isArray(node)) {\n    for (var i = 0; i < node.length; i++) {\n      var child = node[i];\n      if ((0, _ReactElement.isValidElement)(child)) {\n        validateExplicitKey(child, parentType);\n      }\n    }\n  } else if ((0, _ReactElement.isValidElement)(node)) {\n    // This element was passed in a valid location.\n    if (node._store) {\n      node._store.validated = true;\n    }\n  } else if (node) {\n    var iteratorFn = (0, _ReactSymbols.getIteratorFn)(node);\n    if (typeof iteratorFn === 'function') {\n      // Entry iterators used to provide implicit keys,\n      // but now we print a separate warning for them later.\n      if (iteratorFn !== node.entries) {\n        var iterator = iteratorFn.call(node);\n        var step = void 0;\n        while (!(step = iterator.next()).done) {\n          if ((0, _ReactElement.isValidElement)(step.value)) {\n            validateExplicitKey(step.value, parentType);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Given an element, validate that its props follow the propTypes definition,\n * provided by the type.\n *\n * @param {ReactElement} element\n */\nfunction validatePropTypes(element) {\n  var componentClass = element.type;\n  if (typeof componentClass !== 'function') {\n    return;\n  }\n  var name = componentClass.displayName || componentClass.name;\n  var propTypes = componentClass.propTypes;\n  if (propTypes) {\n    currentlyValidatingElement = element;\n    (0, _checkPropTypes2.default)(propTypes, element.props, 'prop', name, getStackAddendum);\n    currentlyValidatingElement = null;\n  } else if (componentClass.PropTypes !== undefined && !propTypesMisspellWarningShown) {\n    propTypesMisspellWarningShown = true;\n    (0, _warning2.default)(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');\n  }\n  if (typeof componentClass.getDefaultProps === 'function') {\n    (0, _warning2.default)(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');\n  }\n}\n\n/**\n * Given a fragment, validate that it can only be provided with fragment props\n * @param {ReactElement} fragment\n */\nfunction validateFragmentProps(fragment) {\n  currentlyValidatingElement = fragment;\n\n  var keys = Object.keys(fragment.props);\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    if (key !== 'children' && key !== 'key') {\n      (0, _warning2.default)(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.%s', key, getStackAddendum());\n      break;\n    }\n  }\n\n  if (fragment.ref !== null) {\n    (0, _warning2.default)(false, 'Invalid attribute `ref` supplied to `React.Fragment`.%s', getStackAddendum());\n  }\n\n  currentlyValidatingElement = null;\n}\n\nfunction createElementWithValidation(type, props, children) {\n  var validType = (0, _isValidElementType2.default)(type);\n\n  // We warn in this case but don't throw. We expect the element creation to\n  // succeed and there will likely be errors in render.\n  if (!validType) {\n    var info = '';\n    if (type === undefined || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && Object.keys(type).length === 0) {\n      info += ' You likely forgot to export your component from the file ' + \"it's defined in, or you might have mixed up default and named imports.\";\n    }\n\n    var sourceInfo = getSourceInfoErrorAddendum(props);\n    if (sourceInfo) {\n      info += sourceInfo;\n    } else {\n      info += getDeclarationErrorAddendum();\n    }\n\n    info += getStackAddendum() || '';\n\n    var typeString = void 0;\n    if (type === null) {\n      typeString = 'null';\n    } else if (Array.isArray(type)) {\n      typeString = 'array';\n    } else {\n      typeString = typeof type === 'undefined' ? 'undefined' : _typeof(type);\n    }\n\n    (0, _warning2.default)(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);\n  }\n\n  var element = _ReactElement.createElement.apply(this, arguments);\n\n  // The result can be nullish if a mock or a custom function is used.\n  // TODO: Drop this when these are no longer allowed as the type argument.\n  if (element == null) {\n    return element;\n  }\n\n  // Skip key warning if the type isn't valid since our key validation logic\n  // doesn't expect a non-string/function type and can throw confusing errors.\n  // We don't want exception behavior to differ between dev and prod.\n  // (Rendering will throw with a helpful message and as soon as the type is\n  // fixed, the key warnings will appear.)\n  if (validType) {\n    for (var i = 2; i < arguments.length; i++) {\n      validateChildKeys(arguments[i], type);\n    }\n  }\n\n  if (type === _ReactSymbols.REACT_FRAGMENT_TYPE) {\n    validateFragmentProps(element);\n  } else {\n    validatePropTypes(element);\n  }\n\n  return element;\n}\n\nfunction createFactoryWithValidation(type) {\n  var validatedFactory = createElementWithValidation.bind(null, type);\n  validatedFactory.type = type;\n  // Legacy hook: remove it\n  if (__DEV__) {\n    Object.defineProperty(validatedFactory, 'type', {\n      enumerable: false,\n      get: function get() {\n        (0, _lowPriorityWarning2.default)(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');\n        Object.defineProperty(this, 'type', {\n          value: type\n        });\n        return type;\n      }\n    });\n  }\n\n  return validatedFactory;\n}\n\nfunction cloneElementWithValidation(element, props, children) {\n  var newElement = _ReactElement.cloneElement.apply(this, arguments);\n  for (var i = 2; i < arguments.length; i++) {\n    validateChildKeys(arguments[i], newElement.type);\n  }\n  validatePropTypes(newElement);\n  return newElement;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar didWarnStateUpdateForUnmountedComponent = {}; /**\n                                                   * Copyright (c) 2015-present, Facebook, Inc.\n                                                   *\n                                                   * This source code is licensed under the MIT license found in the\n                                                   * LICENSE file in the root directory of this source tree.\n                                                   */\n\nfunction warnNoop(publicInstance, callerName) {\n  if (__DEV__) {\n    var _constructor = publicInstance.constructor;\n    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';\n    var warningKey = componentName + '.' + callerName;\n    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {\n      return;\n    }\n    (0, _warning2.default)(false, \"Can't call %s on a component that is not yet mounted. \" + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);\n    didWarnStateUpdateForUnmountedComponent[warningKey] = true;\n  }\n}\n\n/**\n * This is the abstract API for an update queue.\n */\nvar ReactNoopUpdateQueue = {\n  /**\n   * Checks whether or not this composite component is mounted.\n   * @param {ReactClass} publicInstance The instance we want to test.\n   * @return {boolean} True if mounted, false otherwise.\n   * @protected\n   * @final\n   */\n  isMounted: function isMounted(publicInstance) {\n    return false;\n  },\n\n  /**\n   * Forces an update. This should only be invoked when it is known with\n   * certainty that we are **not** in a DOM transaction.\n   *\n   * You may want to call this when you know that some deeper aspect of the\n   * component's state has changed but `setState` was not called.\n   *\n   * This will not invoke `shouldComponentUpdate`, but it will invoke\n   * `componentWillUpdate` and `componentDidUpdate`.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueForceUpdate: function enqueueForceUpdate(publicInstance, callback, callerName) {\n    warnNoop(publicInstance, 'forceUpdate');\n  },\n\n  /**\n   * Replaces all of the state. Always use this or `setState` to mutate state.\n   * You should treat `this.state` as immutable.\n   *\n   * There is no guarantee that `this.state` will be immediately updated, so\n   * accessing `this.state` after calling this method may return the old value.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} completeState Next state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} callerName name of the calling function in the public API.\n   * @internal\n   */\n  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState, callback, callerName) {\n    warnNoop(publicInstance, 'replaceState');\n  },\n\n  /**\n   * Sets a subset of the state. This only exists because _pendingState is\n   * internal. This provides a merging strategy that is not available to deep\n   * properties which is confusing. TODO: Expose pendingState or don't use it\n   * during the merge.\n   *\n   * @param {ReactClass} publicInstance The instance that should rerender.\n   * @param {object} partialState Next partial state to be merged with state.\n   * @param {?function} callback Called after component is updated.\n   * @param {?string} Name of the calling function in the public API.\n   * @internal\n   */\n  enqueueSetState: function enqueueSetState(publicInstance, partialState, callback, callerName) {\n    warnNoop(publicInstance, 'setState');\n  }\n};\n\nexports.default = ReactNoopUpdateQueue;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvUmVhY3ROb29wVXBkYXRlUXVldWUuanMiXSwibmFtZXMiOlsiZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50Iiwid2Fybk5vb3AiLCJwdWJsaWNJbnN0YW5jZSIsImNhbGxlck5hbWUiLCJfX0RFVl9fIiwiY29uc3RydWN0b3IiLCJjb21wb25lbnROYW1lIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwid2FybmluZ0tleSIsIlJlYWN0Tm9vcFVwZGF0ZVF1ZXVlIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiY2FsbGJhY2siLCJlbnF1ZXVlUmVwbGFjZVN0YXRlIiwiY29tcGxldGVTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInBhcnRpYWxTdGF0ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7Ozs7OztBQUVBLElBQU1BLDBDQUEwQyxFQUFoRCxDLENBVEE7Ozs7Ozs7QUFXQSxTQUFTQyxRQUFULENBQWtCQyxjQUFsQixFQUFrQ0MsVUFBbEMsRUFBOEM7QUFDNUMsTUFBSUMsT0FBSixFQUFhO0FBQ1gsUUFBTUMsZUFBY0gsZUFBZUcsV0FBbkM7QUFDQSxRQUFNQyxnQkFDSEQsaUJBQWdCQSxhQUFZRSxXQUFaLElBQTJCRixhQUFZRyxJQUF2RCxDQUFELElBQ0EsWUFGRjtBQUdBLFFBQU1DLGFBQWdCSCxhQUFoQixTQUFpQ0gsVUFBdkM7QUFDQSxRQUFJSCx3Q0FBd0NTLFVBQXhDLENBQUosRUFBeUQ7QUFDdkQ7QUFDRDtBQUNELDJCQUNFLEtBREYsRUFFRSwyREFDRSxvRUFERixHQUVFLHFFQUZGLEdBR0UsNERBTEosRUFNRU4sVUFORixFQU9FRyxhQVBGO0FBU0FOLDRDQUF3Q1MsVUFBeEMsSUFBc0QsSUFBdEQ7QUFDRDtBQUNGOztBQUVEOzs7QUFHQSxJQUFNQyx1QkFBdUI7QUFDM0I7Ozs7Ozs7QUFPQUMsYUFBVyxtQkFBU1QsY0FBVCxFQUF5QjtBQUNsQyxXQUFPLEtBQVA7QUFDRCxHQVYwQjs7QUFZM0I7Ozs7Ozs7Ozs7Ozs7OztBQWVBVSxzQkFBb0IsNEJBQVNWLGNBQVQsRUFBeUJXLFFBQXpCLEVBQW1DVixVQUFuQyxFQUErQztBQUNqRUYsYUFBU0MsY0FBVCxFQUF5QixhQUF6QjtBQUNELEdBN0IwQjs7QUErQjNCOzs7Ozs7Ozs7Ozs7O0FBYUFZLHVCQUFxQiw2QkFDbkJaLGNBRG1CLEVBRW5CYSxhQUZtQixFQUduQkYsUUFIbUIsRUFJbkJWLFVBSm1CLEVBS25CO0FBQ0FGLGFBQVNDLGNBQVQsRUFBeUIsY0FBekI7QUFDRCxHQW5EMEI7O0FBcUQzQjs7Ozs7Ozs7Ozs7O0FBWUFjLG1CQUFpQix5QkFDZmQsY0FEZSxFQUVmZSxZQUZlLEVBR2ZKLFFBSGUsRUFJZlYsVUFKZSxFQUtmO0FBQ0FGLGFBQVNDLGNBQVQsRUFBeUIsVUFBekI7QUFDRDtBQXhFMEIsQ0FBN0I7O2tCQTJFZVEsb0IiLCJmaWxlIjoiUmVhY3ROb29wVXBkYXRlUXVldWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICdmYmpzL2xpYi93YXJuaW5nJztcblxuY29uc3QgZGlkV2FyblN0YXRlVXBkYXRlRm9yVW5tb3VudGVkQ29tcG9uZW50ID0ge307XG5cbmZ1bmN0aW9uIHdhcm5Ob29wKHB1YmxpY0luc3RhbmNlLCBjYWxsZXJOYW1lKSB7XG4gIGlmIChfX0RFVl9fKSB7XG4gICAgY29uc3QgY29uc3RydWN0b3IgPSBwdWJsaWNJbnN0YW5jZS5jb25zdHJ1Y3RvcjtcbiAgICBjb25zdCBjb21wb25lbnROYW1lID1cbiAgICAgIChjb25zdHJ1Y3RvciAmJiAoY29uc3RydWN0b3IuZGlzcGxheU5hbWUgfHwgY29uc3RydWN0b3IubmFtZSkpIHx8XG4gICAgICAnUmVhY3RDbGFzcyc7XG4gICAgY29uc3Qgd2FybmluZ0tleSA9IGAke2NvbXBvbmVudE5hbWV9LiR7Y2FsbGVyTmFtZX1gO1xuICAgIGlmIChkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgXCJDYW4ndCBjYWxsICVzIG9uIGEgY29tcG9uZW50IHRoYXQgaXMgbm90IHlldCBtb3VudGVkLiBcIiArXG4gICAgICAgICdUaGlzIGlzIGEgbm8tb3AsIGJ1dCBpdCBtaWdodCBpbmRpY2F0ZSBhIGJ1ZyBpbiB5b3VyIGFwcGxpY2F0aW9uLiAnICtcbiAgICAgICAgJ0luc3RlYWQsIGFzc2lnbiB0byBgdGhpcy5zdGF0ZWAgZGlyZWN0bHkgb3IgZGVmaW5lIGEgYHN0YXRlID0ge307YCAnICtcbiAgICAgICAgJ2NsYXNzIHByb3BlcnR5IHdpdGggdGhlIGRlc2lyZWQgc3RhdGUgaW4gdGhlICVzIGNvbXBvbmVudC4nLFxuICAgICAgY2FsbGVyTmFtZSxcbiAgICAgIGNvbXBvbmVudE5hbWUsXG4gICAgKTtcbiAgICBkaWRXYXJuU3RhdGVVcGRhdGVGb3JVbm1vdW50ZWRDb21wb25lbnRbd2FybmluZ0tleV0gPSB0cnVlO1xuICB9XG59XG5cbi8qKlxuICogVGhpcyBpcyB0aGUgYWJzdHJhY3QgQVBJIGZvciBhbiB1cGRhdGUgcXVldWUuXG4gKi9cbmNvbnN0IFJlYWN0Tm9vcFVwZGF0ZVF1ZXVlID0ge1xuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgb3Igbm90IHRoaXMgY29tcG9zaXRlIGNvbXBvbmVudCBpcyBtb3VudGVkLlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB3ZSB3YW50IHRvIHRlc3QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IFRydWUgaWYgbW91bnRlZCwgZmFsc2Ugb3RoZXJ3aXNlLlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBmaW5hbFxuICAgKi9cbiAgaXNNb3VudGVkOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfSxcblxuICAvKipcbiAgICogRm9yY2VzIGFuIHVwZGF0ZS4gVGhpcyBzaG91bGQgb25seSBiZSBpbnZva2VkIHdoZW4gaXQgaXMga25vd24gd2l0aFxuICAgKiBjZXJ0YWludHkgdGhhdCB3ZSBhcmUgKipub3QqKiBpbiBhIERPTSB0cmFuc2FjdGlvbi5cbiAgICpcbiAgICogWW91IG1heSB3YW50IHRvIGNhbGwgdGhpcyB3aGVuIHlvdSBrbm93IHRoYXQgc29tZSBkZWVwZXIgYXNwZWN0IG9mIHRoZVxuICAgKiBjb21wb25lbnQncyBzdGF0ZSBoYXMgY2hhbmdlZCBidXQgYHNldFN0YXRlYCB3YXMgbm90IGNhbGxlZC5cbiAgICpcbiAgICogVGhpcyB3aWxsIG5vdCBpbnZva2UgYHNob3VsZENvbXBvbmVudFVwZGF0ZWAsIGJ1dCBpdCB3aWxsIGludm9rZVxuICAgKiBgY29tcG9uZW50V2lsbFVwZGF0ZWAgYW5kIGBjb21wb25lbnREaWRVcGRhdGVgLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZUZvcmNlVXBkYXRlOiBmdW5jdGlvbihwdWJsaWNJbnN0YW5jZSwgY2FsbGJhY2ssIGNhbGxlck5hbWUpIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ2ZvcmNlVXBkYXRlJyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBvZiB0aGUgc3RhdGUuIEFsd2F5cyB1c2UgdGhpcyBvciBgc2V0U3RhdGVgIHRvIG11dGF0ZSBzdGF0ZS5cbiAgICogWW91IHNob3VsZCB0cmVhdCBgdGhpcy5zdGF0ZWAgYXMgaW1tdXRhYmxlLlxuICAgKlxuICAgKiBUaGVyZSBpcyBubyBndWFyYW50ZWUgdGhhdCBgdGhpcy5zdGF0ZWAgd2lsbCBiZSBpbW1lZGlhdGVseSB1cGRhdGVkLCBzb1xuICAgKiBhY2Nlc3NpbmcgYHRoaXMuc3RhdGVgIGFmdGVyIGNhbGxpbmcgdGhpcyBtZXRob2QgbWF5IHJldHVybiB0aGUgb2xkIHZhbHVlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IGNvbXBsZXRlU3RhdGUgTmV4dCBzdGF0ZS5cbiAgICogQHBhcmFtIHs/ZnVuY3Rpb259IGNhbGxiYWNrIENhbGxlZCBhZnRlciBjb21wb25lbnQgaXMgdXBkYXRlZC5cbiAgICogQHBhcmFtIHs/c3RyaW5nfSBjYWxsZXJOYW1lIG5hbWUgb2YgdGhlIGNhbGxpbmcgZnVuY3Rpb24gaW4gdGhlIHB1YmxpYyBBUEkuXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgZW5xdWV1ZVJlcGxhY2VTdGF0ZTogZnVuY3Rpb24oXG4gICAgcHVibGljSW5zdGFuY2UsXG4gICAgY29tcGxldGVTdGF0ZSxcbiAgICBjYWxsYmFjayxcbiAgICBjYWxsZXJOYW1lLFxuICApIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3JlcGxhY2VTdGF0ZScpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXRzIGEgc3Vic2V0IG9mIHRoZSBzdGF0ZS4gVGhpcyBvbmx5IGV4aXN0cyBiZWNhdXNlIF9wZW5kaW5nU3RhdGUgaXNcbiAgICogaW50ZXJuYWwuIFRoaXMgcHJvdmlkZXMgYSBtZXJnaW5nIHN0cmF0ZWd5IHRoYXQgaXMgbm90IGF2YWlsYWJsZSB0byBkZWVwXG4gICAqIHByb3BlcnRpZXMgd2hpY2ggaXMgY29uZnVzaW5nLiBUT0RPOiBFeHBvc2UgcGVuZGluZ1N0YXRlIG9yIGRvbid0IHVzZSBpdFxuICAgKiBkdXJpbmcgdGhlIG1lcmdlLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlYWN0Q2xhc3N9IHB1YmxpY0luc3RhbmNlIFRoZSBpbnN0YW5jZSB0aGF0IHNob3VsZCByZXJlbmRlci5cbiAgICogQHBhcmFtIHtvYmplY3R9IHBhcnRpYWxTdGF0ZSBOZXh0IHBhcnRpYWwgc3RhdGUgdG8gYmUgbWVyZ2VkIHdpdGggc3RhdGUuXG4gICAqIEBwYXJhbSB7P2Z1bmN0aW9ufSBjYWxsYmFjayBDYWxsZWQgYWZ0ZXIgY29tcG9uZW50IGlzIHVwZGF0ZWQuXG4gICAqIEBwYXJhbSB7P3N0cmluZ30gTmFtZSBvZiB0aGUgY2FsbGluZyBmdW5jdGlvbiBpbiB0aGUgcHVibGljIEFQSS5cbiAgICogQGludGVybmFsXG4gICAqL1xuICBlbnF1ZXVlU2V0U3RhdGU6IGZ1bmN0aW9uKFxuICAgIHB1YmxpY0luc3RhbmNlLFxuICAgIHBhcnRpYWxTdGF0ZSxcbiAgICBjYWxsYmFjayxcbiAgICBjYWxsZXJOYW1lLFxuICApIHtcbiAgICB3YXJuTm9vcChwdWJsaWNJbnN0YW5jZSwgJ3NldFN0YXRlJyk7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdE5vb3BVcGRhdGVRdWV1ZTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2014-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               */\n\nexports.default = forwardRef;\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction forwardRef(render) {\n  if (__DEV__) {\n    (0, _warning2.default)(typeof render === 'function', 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render === 'undefined' ? 'undefined' : _typeof(render));\n  }\n\n  return {\n    $$typeof: _ReactSymbols.REACT_FORWARD_REF_TYPE,\n    render: render\n  };\n}\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9yZWFjdC9zcmMvZm9yd2FyZFJlZi5qcyJdLCJuYW1lcyI6WyJmb3J3YXJkUmVmIiwicmVuZGVyIiwiX19ERVZfXyIsIiQkdHlwZW9mIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OzhRQUFBOzs7Ozs7O2tCQVd3QkEsVTs7QUFKeEI7O0FBRUE7Ozs7OztBQUVlLFNBQVNBLFVBQVQsQ0FDYkMsTUFEYSxFQUViO0FBQ0EsTUFBSUMsT0FBSixFQUFhO0FBQ1gsMkJBQ0UsT0FBT0QsTUFBUCxLQUFrQixVQURwQixFQUVFLHlEQUZGLEVBR0VBLFdBQVcsSUFBWCxHQUFrQixNQUFsQixVQUFrQ0EsTUFBbEMseUNBQWtDQSxNQUFsQyxDQUhGO0FBS0Q7O0FBRUQsU0FBTztBQUNMRSxjQUFVQyxvQ0FETDtBQUVMSDtBQUZLLEdBQVA7QUFJRCIsImZpbGUiOiJmb3J3YXJkUmVmLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IHtSRUFDVF9GT1JXQVJEX1JFRl9UWVBFfSBmcm9tICdzaGFyZWQvUmVhY3RTeW1ib2xzJztcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnZmJqcy9saWIvd2FybmluZyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcndhcmRSZWY8UHJvcHMsIEVsZW1lbnRUeXBlOiBSZWFjdCRFbGVtZW50VHlwZT4oXG4gIHJlbmRlcjogKHByb3BzOiBQcm9wcywgcmVmOiBSZWFjdCRFbGVtZW50UmVmPEVsZW1lbnRUeXBlPikgPT4gUmVhY3QkTm9kZSxcbikge1xuICBpZiAoX19ERVZfXykge1xuICAgIHdhcm5pbmcoXG4gICAgICB0eXBlb2YgcmVuZGVyID09PSAnZnVuY3Rpb24nLFxuICAgICAgJ2ZvcndhcmRSZWYgcmVxdWlyZXMgYSByZW5kZXIgZnVuY3Rpb24gYnV0IHdhcyBnaXZlbiAlcy4nLFxuICAgICAgcmVuZGVyID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIHJlbmRlcixcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAkJHR5cGVvZjogUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSxcbiAgICByZW5kZXIsXG4gIH07XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.cIC = exports.rIC = exports.now = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\n// This is a built-in polyfill for requestIdleCallback. It works by scheduling\n// a requestAnimationFrame, storing the time for the start of the frame, then\n// scheduling a postMessage which gets scheduled after paint. Within the\n// postMessage handler do as much work as possible until time + frame rate.\n// By separating the idle call into a separate event tick we ensure that\n// layout, paint and other browser work is counted against the available time.\n// The frame rate is dynamically adjusted.\n\nvar _ReactFeatureFlags = require('shared/ReactFeatureFlags');\n\nvar _ExecutionEnvironment = require('fbjs/lib/ExecutionEnvironment');\n\nvar _ExecutionEnvironment2 = _interopRequireDefault(_ExecutionEnvironment);\n\nvar _warning = require('fbjs/lib/warning');\n\nvar _warning2 = _interopRequireDefault(_warning);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nif (__DEV__) {\n  if (_ExecutionEnvironment2.default.canUseDOM && typeof requestAnimationFrame !== 'function') {\n    (0, _warning2.default)(false, 'React depends on requestAnimationFrame. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n  }\n}\n\nvar hasNativePerformanceNow = (typeof performance === 'undefined' ? 'undefined' : _typeof(performance)) === 'object' && typeof performance.now === 'function';\n\nvar now = void 0;\nif (hasNativePerformanceNow) {\n  exports.now = now = function now() {\n    return performance.now();\n  };\n} else {\n  exports.now = now = function now() {\n    return Date.now();\n  };\n}\n\n// TODO: There's no way to cancel, because Fiber doesn't atm.\nvar rIC = void 0;\nvar cIC = void 0;\n\nif (!_ExecutionEnvironment2.default.canUseDOM) {\n  exports.rIC = rIC = function rIC(frameCallback) {\n    return setTimeout(function () {\n      frameCallback({\n        timeRemaining: function timeRemaining() {\n          return Infinity;\n        },\n\n        didTimeout: false\n      });\n    });\n  };\n  exports.cIC = cIC = function cIC(timeoutID) {\n    clearTimeout(timeoutID);\n  };\n} else if (_ReactFeatureFlags.alwaysUseRequestIdleCallbackPolyfill || typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n  // Polyfill requestIdleCallback and cancelIdleCallback\n\n  var scheduledRICCallback = null;\n  var isIdleScheduled = false;\n  var timeoutTime = -1;\n\n  var isAnimationFrameScheduled = false;\n\n  var frameDeadline = 0;\n  // We start out assuming that we run at 30fps but then the heuristic tracking\n  // will adjust this value to a faster fps if we get more frequent animation\n  // frames.\n  var previousFrameTime = 33;\n  var activeFrameTime = 33;\n\n  var frameDeadlineObject = void 0;\n  if (hasNativePerformanceNow) {\n    frameDeadlineObject = {\n      didTimeout: false,\n      timeRemaining: function timeRemaining() {\n        // We assume that if we have a performance timer that the rAF callback\n        // gets a performance timer value. Not sure if this is always true.\n        var remaining = frameDeadline - performance.now();\n        return remaining > 0 ? remaining : 0;\n      }\n    };\n  } else {\n    frameDeadlineObject = {\n      didTimeout: false,\n      timeRemaining: function timeRemaining() {\n        // Fallback to Date.now()\n        var remaining = frameDeadline - Date.now();\n        return remaining > 0 ? remaining : 0;\n      }\n    };\n  }\n\n  // We use the postMessage trick to defer idle work until after the repaint.\n  var messageKey = '__reactIdleCallback$' + Math.random().toString(36).slice(2);\n  var idleTick = function idleTick(event) {\n    if (event.source !== window || event.data !== messageKey) {\n      return;\n    }\n\n    isIdleScheduled = false;\n\n    var currentTime = now();\n    if (frameDeadline - currentTime <= 0) {\n      // There's no time left in this idle period. Check if the callback has\n      // a timeout and whether it's been exceeded.\n      if (timeoutTime !== -1 && timeoutTime <= currentTime) {\n        // Exceeded the timeout. Invoke the callback even though there's no\n        // time left.\n        frameDeadlineObject.didTimeout = true;\n      } else {\n        // No timeout.\n        if (!isAnimationFrameScheduled) {\n          // Schedule another animation callback so we retry later.\n          isAnimationFrameScheduled = true;\n          requestAnimationFrame(animationTick);\n        }\n        // Exit without invoking the callback.\n        return;\n      }\n    } else {\n      // There's still time left in this idle period.\n      frameDeadlineObject.didTimeout = false;\n    }\n\n    timeoutTime = -1;\n    var callback = scheduledRICCallback;\n    scheduledRICCallback = null;\n    if (callback !== null) {\n      callback(frameDeadlineObject);\n    }\n  };\n  // Assumes that we have addEventListener in this environment. Might need\n  // something better for old IE.\n  window.addEventListener('message', idleTick, false);\n\n  var animationTick = function animationTick(rafTime) {\n    isAnimationFrameScheduled = false;\n    var nextFrameTime = rafTime - frameDeadline + activeFrameTime;\n    if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {\n      if (nextFrameTime < 8) {\n        // Defensive coding. We don't support higher frame rates than 120hz.\n        // If we get lower than that, it is probably a bug.\n        nextFrameTime = 8;\n      }\n      // If one frame goes long, then the next one can be short to catch up.\n      // If two frames are short in a row, then that's an indication that we\n      // actually have a higher frame rate than what we're currently optimizing.\n      // We adjust our heuristic dynamically accordingly. For example, if we're\n      // running on 120hz display or 90hz VR display.\n      // Take the max of the two in case one of them was an anomaly due to\n      // missed frame deadlines.\n      activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;\n    } else {\n      previousFrameTime = nextFrameTime;\n    }\n    frameDeadline = rafTime + activeFrameTime;\n    if (!isIdleScheduled) {\n      isIdleScheduled = true;\n      window.postMessage(messageKey, '*');\n    }\n  };\n\n  exports.rIC = rIC = function rIC(callback, options) {\n    // This assumes that we only schedule one callback at a time because that's\n    // how Fiber uses it.\n    scheduledRICCallback = callback;\n    if (options != null && typeof options.timeout === 'number') {\n      timeoutTime = now() + options.timeout;\n    }\n    if (!isAnimationFrameScheduled) {\n      // If rAF didn't already schedule one, we need to schedule a frame.\n      // TODO: If this rAF doesn't materialize because the browser throttles, we\n      // might want to still have setTimeout trigger rIC as a backup to ensure\n      // that we keep performing work.\n      isAnimationFrameScheduled = true;\n      requestAnimationFrame(animationTick);\n    }\n    return 0;\n  };\n\n  exports.cIC = cIC = function cIC() {\n    scheduledRICCallback = null;\n    isIdleScheduled = false;\n    timeoutTime = -1;\n  };\n} else {\n  exports.rIC = rIC = window.requestIdleCallback;\n  exports.cIC = cIC = window.cancelIdleCallback;\n}\n\nexports.now = now;\nexports.rIC = rIC;\nexports.cIC = cIC;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _invokeGuardedCallback2 = require('./invokeGuardedCallback');\n\nvar _invokeGuardedCallback3 = _interopRequireDefault(_invokeGuardedCallback2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar ReactErrorUtils = {\n  // Used by Fiber to simulate a try-catch.\n  _caughtError: null,\n  _hasCaughtError: false,\n\n  // Used by event system to capture/rethrow the first error.\n  _rethrowError: null,\n  _hasRethrowError: false,\n\n  /**\n   * Call a function while guarding against errors that happens within it.\n   * Returns an error if it throws, otherwise null.\n   *\n   * In production, this is implemented using a try-catch. The reason we don't\n   * use a try-catch directly is so that we can swap out a different\n   * implementation in DEV mode.\n   *\n   * @param {String} name of the guard to use for logging or debugging\n   * @param {Function} func The function to invoke\n   * @param {*} context The context to use when calling the function\n   * @param {...*} args Arguments for function\n   */\n  invokeGuardedCallback: function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n    _invokeGuardedCallback3.default.apply(ReactErrorUtils, arguments);\n  },\n\n  /**\n   * Same as invokeGuardedCallback, but instead of returning an error, it stores\n   * it in a global so it can be rethrown by `rethrowCaughtError` later.\n   * TODO: See if _caughtError and _rethrowError can be unified.\n   *\n   * @param {String} name of the guard to use for logging or debugging\n   * @param {Function} func The function to invoke\n   * @param {*} context The context to use when calling the function\n   * @param {...*} args Arguments for function\n   */\n  invokeGuardedCallbackAndCatchFirstError: function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {\n    ReactErrorUtils.invokeGuardedCallback.apply(this, arguments);\n    if (ReactErrorUtils.hasCaughtError()) {\n      var error = ReactErrorUtils.clearCaughtError();\n      if (!ReactErrorUtils._hasRethrowError) {\n        ReactErrorUtils._hasRethrowError = true;\n        ReactErrorUtils._rethrowError = error;\n      }\n    }\n  },\n\n  /**\n   * During execution of guarded functions we will capture the first error which\n   * we will rethrow to be handled by the top level error handler.\n   */\n  rethrowCaughtError: function rethrowCaughtError() {\n    return _rethrowCaughtError.apply(ReactErrorUtils, arguments);\n  },\n\n  hasCaughtError: function hasCaughtError() {\n    return ReactErrorUtils._hasCaughtError;\n  },\n\n  clearCaughtError: function clearCaughtError() {\n    if (ReactErrorUtils._hasCaughtError) {\n      var error = ReactErrorUtils._caughtError;\n      ReactErrorUtils._caughtError = null;\n      ReactErrorUtils._hasCaughtError = false;\n      return error;\n    } else {\n      (0, _invariant2.default)(false, 'clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');\n    }\n  }\n};\n\nvar _rethrowCaughtError = function _rethrowCaughtError() {\n  if (ReactErrorUtils._hasRethrowError) {\n    var error = ReactErrorUtils._rethrowError;\n    ReactErrorUtils._rethrowError = null;\n    ReactErrorUtils._hasRethrowError = false;\n    throw error;\n  }\n};\n\nexports.default = ReactErrorUtils;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RFcnJvclV0aWxzLmpzIl0sIm5hbWVzIjpbIlJlYWN0RXJyb3JVdGlscyIsIl9jYXVnaHRFcnJvciIsIl9oYXNDYXVnaHRFcnJvciIsIl9yZXRocm93RXJyb3IiLCJfaGFzUmV0aHJvd0Vycm9yIiwiaW52b2tlR3VhcmRlZENhbGxiYWNrIiwibmFtZSIsImZ1bmMiLCJjb250ZXh0IiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImVycm9yIiwiY2xlYXJDYXVnaHRFcnJvciIsInJldGhyb3dDYXVnaHRFcnJvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBU0E7Ozs7QUFDQTs7Ozs7O0FBVkE7Ozs7Ozs7OztBQVlBLElBQU1BLGtCQUFrQjtBQUN0QjtBQUNBQyxnQkFBZSxJQUZPO0FBR3RCQyxtQkFBa0IsS0FISTs7QUFLdEI7QUFDQUMsaUJBQWdCLElBTk07QUFPdEJDLG9CQUFtQixLQVBHOztBQVN0Qjs7Ozs7Ozs7Ozs7OztBQWFBQyx5QkFBdUIsK0JBQ3JCQyxJQURxQixFQUVyQkMsSUFGcUIsRUFHckJDLE9BSHFCLEVBSXJCQyxDQUpxQixFQUtyQkMsQ0FMcUIsRUFNckJDLENBTnFCLEVBT3JCQyxDQVBxQixFQVFyQkMsQ0FScUIsRUFTckJDLENBVHFCLEVBVWY7QUFDTlQsb0NBQXNCVSxLQUF0QixDQUE0QmYsZUFBNUIsRUFBNkNnQixTQUE3QztBQUNELEdBbENxQjs7QUFvQ3RCOzs7Ozs7Ozs7O0FBVUFDLDJDQUF5QyxpREFDdkNYLElBRHVDLEVBRXZDQyxJQUZ1QyxFQUd2Q0MsT0FIdUMsRUFJdkNDLENBSnVDLEVBS3ZDQyxDQUx1QyxFQU12Q0MsQ0FOdUMsRUFPdkNDLENBUHVDLEVBUXZDQyxDQVJ1QyxFQVN2Q0MsQ0FUdUMsRUFVakM7QUFDTmQsb0JBQWdCSyxxQkFBaEIsQ0FBc0NVLEtBQXRDLENBQTRDLElBQTVDLEVBQWtEQyxTQUFsRDtBQUNBLFFBQUloQixnQkFBZ0JrQixjQUFoQixFQUFKLEVBQXNDO0FBQ3BDLFVBQU1DLFFBQVFuQixnQkFBZ0JvQixnQkFBaEIsRUFBZDtBQUNBLFVBQUksQ0FBQ3BCLGdCQUFnQkksZ0JBQXJCLEVBQXVDO0FBQ3JDSix3QkFBZ0JJLGdCQUFoQixHQUFtQyxJQUFuQztBQUNBSix3QkFBZ0JHLGFBQWhCLEdBQWdDZ0IsS0FBaEM7QUFDRDtBQUNGO0FBQ0YsR0FqRXFCOztBQW1FdEI7Ozs7QUFJQUUsc0JBQW9CLDhCQUFXO0FBQzdCLFdBQU9BLG9CQUFtQk4sS0FBbkIsQ0FBeUJmLGVBQXpCLEVBQTBDZ0IsU0FBMUMsQ0FBUDtBQUNELEdBekVxQjs7QUEyRXRCRSxrQkFBZ0IsMEJBQVc7QUFDekIsV0FBT2xCLGdCQUFnQkUsZUFBdkI7QUFDRCxHQTdFcUI7O0FBK0V0QmtCLG9CQUFrQiw0QkFBVztBQUMzQixRQUFJcEIsZ0JBQWdCRSxlQUFwQixFQUFxQztBQUNuQyxVQUFNaUIsUUFBUW5CLGdCQUFnQkMsWUFBOUI7QUFDQUQsc0JBQWdCQyxZQUFoQixHQUErQixJQUEvQjtBQUNBRCxzQkFBZ0JFLGVBQWhCLEdBQWtDLEtBQWxDO0FBQ0EsYUFBT2lCLEtBQVA7QUFDRCxLQUxELE1BS087QUFDTCwrQkFDRSxLQURGLEVBRUUsdUVBQ0UsMkRBSEo7QUFLRDtBQUNGO0FBNUZxQixDQUF4Qjs7QUErRkEsSUFBSUUsc0JBQXFCLFNBQXJCQSxtQkFBcUIsR0FBVztBQUNsQyxNQUFJckIsZ0JBQWdCSSxnQkFBcEIsRUFBc0M7QUFDcEMsUUFBTWUsUUFBUW5CLGdCQUFnQkcsYUFBOUI7QUFDQUgsb0JBQWdCRyxhQUFoQixHQUFnQyxJQUFoQztBQUNBSCxvQkFBZ0JJLGdCQUFoQixHQUFtQyxLQUFuQztBQUNBLFVBQU1lLEtBQU47QUFDRDtBQUNGLENBUEQ7O2tCQVNlbkIsZSIsImZpbGUiOiJSZWFjdEVycm9yVXRpbHMuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnZmJqcy9saWIvaW52YXJpYW50JztcbmltcG9ydCBpbnZva2VHdWFyZGVkQ2FsbGJhY2sgZnJvbSAnLi9pbnZva2VHdWFyZGVkQ2FsbGJhY2snO1xuXG5jb25zdCBSZWFjdEVycm9yVXRpbHMgPSB7XG4gIC8vIFVzZWQgYnkgRmliZXIgdG8gc2ltdWxhdGUgYSB0cnktY2F0Y2guXG4gIF9jYXVnaHRFcnJvcjogKG51bGw6IG1peGVkKSxcbiAgX2hhc0NhdWdodEVycm9yOiAoZmFsc2U6IGJvb2xlYW4pLFxuXG4gIC8vIFVzZWQgYnkgZXZlbnQgc3lzdGVtIHRvIGNhcHR1cmUvcmV0aHJvdyB0aGUgZmlyc3QgZXJyb3IuXG4gIF9yZXRocm93RXJyb3I6IChudWxsOiBtaXhlZCksXG4gIF9oYXNSZXRocm93RXJyb3I6IChmYWxzZTogYm9vbGVhbiksXG5cbiAgLyoqXG4gICAqIENhbGwgYSBmdW5jdGlvbiB3aGlsZSBndWFyZGluZyBhZ2FpbnN0IGVycm9ycyB0aGF0IGhhcHBlbnMgd2l0aGluIGl0LlxuICAgKiBSZXR1cm5zIGFuIGVycm9yIGlmIGl0IHRocm93cywgb3RoZXJ3aXNlIG51bGwuXG4gICAqXG4gICAqIEluIHByb2R1Y3Rpb24sIHRoaXMgaXMgaW1wbGVtZW50ZWQgdXNpbmcgYSB0cnktY2F0Y2guIFRoZSByZWFzb24gd2UgZG9uJ3RcbiAgICogdXNlIGEgdHJ5LWNhdGNoIGRpcmVjdGx5IGlzIHNvIHRoYXQgd2UgY2FuIHN3YXAgb3V0IGEgZGlmZmVyZW50XG4gICAqIGltcGxlbWVudGF0aW9uIGluIERFViBtb2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBvZiB0aGUgZ3VhcmQgdG8gdXNlIGZvciBsb2dnaW5nIG9yIGRlYnVnZ2luZ1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2VcbiAgICogQHBhcmFtIHsqfSBjb250ZXh0IFRoZSBjb250ZXh0IHRvIHVzZSB3aGVuIGNhbGxpbmcgdGhlIGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7Li4uKn0gYXJncyBBcmd1bWVudHMgZm9yIGZ1bmN0aW9uXG4gICAqL1xuICBpbnZva2VHdWFyZGVkQ2FsbGJhY2s6IGZ1bmN0aW9uPEEsIEIsIEMsIEQsIEUsIEYsIENvbnRleHQ+KFxuICAgIG5hbWU6IHN0cmluZyB8IG51bGwsXG4gICAgZnVuYzogKGE6IEEsIGI6IEIsIGM6IEMsIGQ6IEQsIGU6IEUsIGY6IEYpID0+IG1peGVkLFxuICAgIGNvbnRleHQ6IENvbnRleHQsXG4gICAgYTogQSxcbiAgICBiOiBCLFxuICAgIGM6IEMsXG4gICAgZDogRCxcbiAgICBlOiBFLFxuICAgIGY6IEYsXG4gICk6IHZvaWQge1xuICAgIGludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseShSZWFjdEVycm9yVXRpbHMsIGFyZ3VtZW50cyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhbWUgYXMgaW52b2tlR3VhcmRlZENhbGxiYWNrLCBidXQgaW5zdGVhZCBvZiByZXR1cm5pbmcgYW4gZXJyb3IsIGl0IHN0b3Jlc1xuICAgKiBpdCBpbiBhIGdsb2JhbCBzbyBpdCBjYW4gYmUgcmV0aHJvd24gYnkgYHJldGhyb3dDYXVnaHRFcnJvcmAgbGF0ZXIuXG4gICAqIFRPRE86IFNlZSBpZiBfY2F1Z2h0RXJyb3IgYW5kIF9yZXRocm93RXJyb3IgY2FuIGJlIHVuaWZpZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIG9mIHRoZSBndWFyZCB0byB1c2UgZm9yIGxvZ2dpbmcgb3IgZGVidWdnaW5nXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZVxuICAgKiBAcGFyYW0geyp9IGNvbnRleHQgVGhlIGNvbnRleHQgdG8gdXNlIHdoZW4gY2FsbGluZyB0aGUgZnVuY3Rpb25cbiAgICogQHBhcmFtIHsuLi4qfSBhcmdzIEFyZ3VtZW50cyBmb3IgZnVuY3Rpb25cbiAgICovXG4gIGludm9rZUd1YXJkZWRDYWxsYmFja0FuZENhdGNoRmlyc3RFcnJvcjogZnVuY3Rpb248QSwgQiwgQywgRCwgRSwgRiwgQ29udGV4dD4oXG4gICAgbmFtZTogc3RyaW5nIHwgbnVsbCxcbiAgICBmdW5jOiAoYTogQSwgYjogQiwgYzogQywgZDogRCwgZTogRSwgZjogRikgPT4gdm9pZCxcbiAgICBjb250ZXh0OiBDb250ZXh0LFxuICAgIGE6IEEsXG4gICAgYjogQixcbiAgICBjOiBDLFxuICAgIGQ6IEQsXG4gICAgZTogRSxcbiAgICBmOiBGLFxuICApOiB2b2lkIHtcbiAgICBSZWFjdEVycm9yVXRpbHMuaW52b2tlR3VhcmRlZENhbGxiYWNrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgaWYgKFJlYWN0RXJyb3JVdGlscy5oYXNDYXVnaHRFcnJvcigpKSB7XG4gICAgICBjb25zdCBlcnJvciA9IFJlYWN0RXJyb3JVdGlscy5jbGVhckNhdWdodEVycm9yKCk7XG4gICAgICBpZiAoIVJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yKSB7XG4gICAgICAgIFJlYWN0RXJyb3JVdGlscy5faGFzUmV0aHJvd0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgUmVhY3RFcnJvclV0aWxzLl9yZXRocm93RXJyb3IgPSBlcnJvcjtcbiAgICAgIH1cbiAgICB9XG4gIH0sXG5cbiAgLyoqXG4gICAqIER1cmluZyBleGVjdXRpb24gb2YgZ3VhcmRlZCBmdW5jdGlvbnMgd2Ugd2lsbCBjYXB0dXJlIHRoZSBmaXJzdCBlcnJvciB3aGljaFxuICAgKiB3ZSB3aWxsIHJldGhyb3cgdG8gYmUgaGFuZGxlZCBieSB0aGUgdG9wIGxldmVsIGVycm9yIGhhbmRsZXIuXG4gICAqL1xuICByZXRocm93Q2F1Z2h0RXJyb3I6IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiByZXRocm93Q2F1Z2h0RXJyb3IuYXBwbHkoUmVhY3RFcnJvclV0aWxzLCBhcmd1bWVudHMpO1xuICB9LFxuXG4gIGhhc0NhdWdodEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gUmVhY3RFcnJvclV0aWxzLl9oYXNDYXVnaHRFcnJvcjtcbiAgfSxcblxuICBjbGVhckNhdWdodEVycm9yOiBmdW5jdGlvbigpIHtcbiAgICBpZiAoUmVhY3RFcnJvclV0aWxzLl9oYXNDYXVnaHRFcnJvcikge1xuICAgICAgY29uc3QgZXJyb3IgPSBSZWFjdEVycm9yVXRpbHMuX2NhdWdodEVycm9yO1xuICAgICAgUmVhY3RFcnJvclV0aWxzLl9jYXVnaHRFcnJvciA9IG51bGw7XG4gICAgICBSZWFjdEVycm9yVXRpbHMuX2hhc0NhdWdodEVycm9yID0gZmFsc2U7XG4gICAgICByZXR1cm4gZXJyb3I7XG4gICAgfSBlbHNlIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgZmFsc2UsXG4gICAgICAgICdjbGVhckNhdWdodEVycm9yIHdhcyBjYWxsZWQgYnV0IG5vIGVycm9yIHdhcyBjYXB0dXJlZC4gVGhpcyBlcnJvciAnICtcbiAgICAgICAgICAnaXMgbGlrZWx5IGNhdXNlZCBieSBhIGJ1ZyBpbiBSZWFjdC4gUGxlYXNlIGZpbGUgYW4gaXNzdWUuJyxcbiAgICAgICk7XG4gICAgfVxuICB9LFxufTtcblxubGV0IHJldGhyb3dDYXVnaHRFcnJvciA9IGZ1bmN0aW9uKCkge1xuICBpZiAoUmVhY3RFcnJvclV0aWxzLl9oYXNSZXRocm93RXJyb3IpIHtcbiAgICBjb25zdCBlcnJvciA9IFJlYWN0RXJyb3JVdGlscy5fcmV0aHJvd0Vycm9yO1xuICAgIFJlYWN0RXJyb3JVdGlscy5fcmV0aHJvd0Vycm9yID0gbnVsbDtcbiAgICBSZWFjdEVycm9yVXRpbHMuX2hhc1JldGhyb3dFcnJvciA9IGZhbHNlO1xuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdEVycm9yVXRpbHM7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.alwaysUseRequestIdleCallbackPolyfill = exports.warnAboutDeprecatedLifecycles = exports.replayFailedUnitOfWorkWithInvokeGuardedCallback = exports.debugRenderPhaseSideEffectsForStrictMode = exports.debugRenderPhaseSideEffects = exports.enableGetDerivedStateFromCatch = exports.enablePersistentReconciler = exports.enableNoopReconciler = exports.enableMutatingReconciler = exports.enableUserTimingAPI = undefined;\nexports.addUserTimingListener = addUserTimingListener;\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Exports ReactDOM.createRoot\nvar enableUserTimingAPI = exports.enableUserTimingAPI = __DEV__;\n\n// Mutating mode (React DOM, React ART, React Native):\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar enableMutatingReconciler = exports.enableMutatingReconciler = true;\n// Experimental noop mode (currently unused):\nvar enableNoopReconciler = exports.enableNoopReconciler = false;\n// Experimental persistent mode (Fabric):\nvar enablePersistentReconciler = exports.enablePersistentReconciler = false;\n// Experimental error-boundary API that can recover from errors within a single\n// render phase\nvar enableGetDerivedStateFromCatch = exports.enableGetDerivedStateFromCatch = false;\n// Helps identify side effects in begin-phase lifecycle hooks and setState reducers:\nvar debugRenderPhaseSideEffects = exports.debugRenderPhaseSideEffects = false;\n\n// In some cases, StrictMode should also double-render lifecycles.\n// This can be confusing for tests though,\n// And it can be bad for performance in production.\n// This feature flag can be used to control the behavior:\nvar debugRenderPhaseSideEffectsForStrictMode = exports.debugRenderPhaseSideEffectsForStrictMode = __DEV__;\n\n// To preserve the \"Pause on caught exceptions\" behavior of the debugger, we\n// replay the begin phase of a failed component inside invokeGuardedCallback.\nvar replayFailedUnitOfWorkWithInvokeGuardedCallback = exports.replayFailedUnitOfWorkWithInvokeGuardedCallback = __DEV__;\n\n// Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:\nvar warnAboutDeprecatedLifecycles = exports.warnAboutDeprecatedLifecycles = false;\n\nvar alwaysUseRequestIdleCallbackPolyfill = exports.alwaysUseRequestIdleCallbackPolyfill = false;\n\n// Only used in www builds.\nfunction addUserTimingListener() {\n  (0, _invariant2.default)(false, 'Not implemented.');\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RGZWF0dXJlRmxhZ3MuanMiXSwibmFtZXMiOlsiYWRkVXNlclRpbWluZ0xpc3RlbmVyIiwiZW5hYmxlVXNlclRpbWluZ0FQSSIsIl9fREVWX18iLCJlbmFibGVNdXRhdGluZ1JlY29uY2lsZXIiLCJlbmFibGVOb29wUmVjb25jaWxlciIsImVuYWJsZVBlcnNpc3RlbnRSZWNvbmNpbGVyIiwiZW5hYmxlR2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzIiwiZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzRm9yU3RyaWN0TW9kZSIsInJlcGxheUZhaWxlZFVuaXRPZldvcmtXaXRoSW52b2tlR3VhcmRlZENhbGxiYWNrIiwid2FybkFib3V0RGVwcmVjYXRlZExpZmVjeWNsZXMiLCJhbHdheXNVc2VSZXF1ZXN0SWRsZUNhbGxiYWNrUG9seWZpbGwiXSwibWFwcGluZ3MiOiI7Ozs7OztRQTBDZ0JBLHFCLEdBQUFBLHFCOztBQWpDaEI7Ozs7OztBQUVBO0FBQ08sSUFBTUMsb0RBQXNCQyxPQUE1Qjs7QUFFUDtBQWRBOzs7Ozs7Ozs7QUFlTyxJQUFNQyw4REFBMkIsSUFBakM7QUFDUDtBQUNPLElBQU1DLHNEQUF1QixLQUE3QjtBQUNQO0FBQ08sSUFBTUMsa0VBQTZCLEtBQW5DO0FBQ1A7QUFDQTtBQUNPLElBQU1DLDBFQUFpQyxLQUF2QztBQUNQO0FBQ08sSUFBTUMsb0VBQThCLEtBQXBDOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUMsOEZBQTJDTixPQUFqRDs7QUFFUDtBQUNBO0FBQ08sSUFBTU8sNEdBQWtEUCxPQUF4RDs7QUFFUDtBQUNPLElBQU1RLHdFQUFnQyxLQUF0Qzs7QUFFQSxJQUFNQyxzRkFBdUMsS0FBN0M7O0FBRVA7QUFDTyxTQUFTWCxxQkFBVCxHQUFpQztBQUN0QywyQkFBVSxLQUFWLEVBQWlCLGtCQUFqQjtBQUNEIiwiZmlsZSI6IlJlYWN0RmVhdHVyZUZsYWdzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ZianMvbGliL2ludmFyaWFudCc7XG5cbi8vIEV4cG9ydHMgUmVhY3RET00uY3JlYXRlUm9vdFxuZXhwb3J0IGNvbnN0IGVuYWJsZVVzZXJUaW1pbmdBUEkgPSBfX0RFVl9fO1xuXG4vLyBNdXRhdGluZyBtb2RlIChSZWFjdCBET00sIFJlYWN0IEFSVCwgUmVhY3QgTmF0aXZlKTpcbmV4cG9ydCBjb25zdCBlbmFibGVNdXRhdGluZ1JlY29uY2lsZXIgPSB0cnVlO1xuLy8gRXhwZXJpbWVudGFsIG5vb3AgbW9kZSAoY3VycmVudGx5IHVudXNlZCk6XG5leHBvcnQgY29uc3QgZW5hYmxlTm9vcFJlY29uY2lsZXIgPSBmYWxzZTtcbi8vIEV4cGVyaW1lbnRhbCBwZXJzaXN0ZW50IG1vZGUgKEZhYnJpYyk6XG5leHBvcnQgY29uc3QgZW5hYmxlUGVyc2lzdGVudFJlY29uY2lsZXIgPSBmYWxzZTtcbi8vIEV4cGVyaW1lbnRhbCBlcnJvci1ib3VuZGFyeSBBUEkgdGhhdCBjYW4gcmVjb3ZlciBmcm9tIGVycm9ycyB3aXRoaW4gYSBzaW5nbGVcbi8vIHJlbmRlciBwaGFzZVxuZXhwb3J0IGNvbnN0IGVuYWJsZUdldERlcml2ZWRTdGF0ZUZyb21DYXRjaCA9IGZhbHNlO1xuLy8gSGVscHMgaWRlbnRpZnkgc2lkZSBlZmZlY3RzIGluIGJlZ2luLXBoYXNlIGxpZmVjeWNsZSBob29rcyBhbmQgc2V0U3RhdGUgcmVkdWNlcnM6XG5leHBvcnQgY29uc3QgZGVidWdSZW5kZXJQaGFzZVNpZGVFZmZlY3RzID0gZmFsc2U7XG5cbi8vIEluIHNvbWUgY2FzZXMsIFN0cmljdE1vZGUgc2hvdWxkIGFsc28gZG91YmxlLXJlbmRlciBsaWZlY3ljbGVzLlxuLy8gVGhpcyBjYW4gYmUgY29uZnVzaW5nIGZvciB0ZXN0cyB0aG91Z2gsXG4vLyBBbmQgaXQgY2FuIGJlIGJhZCBmb3IgcGVyZm9ybWFuY2UgaW4gcHJvZHVjdGlvbi5cbi8vIFRoaXMgZmVhdHVyZSBmbGFnIGNhbiBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIGJlaGF2aW9yOlxuZXhwb3J0IGNvbnN0IGRlYnVnUmVuZGVyUGhhc2VTaWRlRWZmZWN0c0ZvclN0cmljdE1vZGUgPSBfX0RFVl9fO1xuXG4vLyBUbyBwcmVzZXJ2ZSB0aGUgXCJQYXVzZSBvbiBjYXVnaHQgZXhjZXB0aW9uc1wiIGJlaGF2aW9yIG9mIHRoZSBkZWJ1Z2dlciwgd2Vcbi8vIHJlcGxheSB0aGUgYmVnaW4gcGhhc2Ugb2YgYSBmYWlsZWQgY29tcG9uZW50IGluc2lkZSBpbnZva2VHdWFyZGVkQ2FsbGJhY2suXG5leHBvcnQgY29uc3QgcmVwbGF5RmFpbGVkVW5pdE9mV29ya1dpdGhJbnZva2VHdWFyZGVkQ2FsbGJhY2sgPSBfX0RFVl9fO1xuXG4vLyBXYXJuIGFib3V0IGRlcHJlY2F0ZWQsIGFzeW5jLXVuc2FmZSBsaWZlY3ljbGVzOyByZWxhdGVzIHRvIFJGQyAjNjpcbmV4cG9ydCBjb25zdCB3YXJuQWJvdXREZXByZWNhdGVkTGlmZWN5Y2xlcyA9IGZhbHNlO1xuXG5leHBvcnQgY29uc3QgYWx3YXlzVXNlUmVxdWVzdElkbGVDYWxsYmFja1BvbHlmaWxsID0gZmFsc2U7XG5cbi8vIE9ubHkgdXNlZCBpbiB3d3cgYnVpbGRzLlxuZXhwb3J0IGZ1bmN0aW9uIGFkZFVzZXJUaW1pbmdMaXN0ZW5lcigpIHtcbiAgaW52YXJpYW50KGZhbHNlLCAnTm90IGltcGxlbWVudGVkLicpO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getStackAddendumByWorkInProgressFiber = getStackAddendumByWorkInProgressFiber;\n\nvar _ReactTypeOfWork = require('./ReactTypeOfWork');\n\nvar _describeComponentFrame = require('./describeComponentFrame');\n\nvar _describeComponentFrame2 = _interopRequireDefault(_describeComponentFrame);\n\nvar _getComponentName = require('./getComponentName');\n\nvar _getComponentName2 = _interopRequireDefault(_getComponentName);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Copyright (c) 2016-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction describeFiber(fiber) {\n  switch (fiber.tag) {\n    case _ReactTypeOfWork.IndeterminateComponent:\n    case _ReactTypeOfWork.FunctionalComponent:\n    case _ReactTypeOfWork.ClassComponent:\n    case _ReactTypeOfWork.HostComponent:\n      var owner = fiber._debugOwner;\n      var source = fiber._debugSource;\n      var name = (0, _getComponentName2.default)(fiber);\n      var ownerName = null;\n      if (owner) {\n        ownerName = (0, _getComponentName2.default)(owner);\n      }\n      return (0, _describeComponentFrame2.default)(name, source, ownerName);\n    default:\n      return '';\n  }\n}\n\n// This function can only be called with a work-in-progress fiber and\n// only during begin or complete phase. Do not call it under any other\n// circumstances.\nfunction getStackAddendumByWorkInProgressFiber(workInProgress) {\n  var info = '';\n  var node = workInProgress;\n  do {\n    info += describeFiber(node);\n    // Otherwise this return pointer might point to the wrong tree:\n    node = node.return;\n  } while (node);\n  return info;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RGaWJlckNvbXBvbmVudFRyZWVIb29rLmpzIl0sIm5hbWVzIjpbImdldFN0YWNrQWRkZW5kdW1CeVdvcmtJblByb2dyZXNzRmliZXIiLCJkZXNjcmliZUZpYmVyIiwiZmliZXIiLCJ0YWciLCJJbmRldGVybWluYXRlQ29tcG9uZW50IiwiRnVuY3Rpb25hbENvbXBvbmVudCIsIkNsYXNzQ29tcG9uZW50IiwiSG9zdENvbXBvbmVudCIsIm93bmVyIiwiX2RlYnVnT3duZXIiLCJzb3VyY2UiLCJfZGVidWdTb3VyY2UiLCJuYW1lIiwib3duZXJOYW1lIiwid29ya0luUHJvZ3Jlc3MiLCJpbmZvIiwibm9kZSIsInJldHVybiJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUEwQ2dCQSxxQyxHQUFBQSxxQzs7QUEvQmhCOztBQU1BOzs7O0FBQ0E7Ozs7OztBQWxCQTs7Ozs7Ozs7O0FBb0JBLFNBQVNDLGFBQVQsQ0FBdUJDLEtBQXZCLEVBQTZDO0FBQzNDLFVBQVFBLE1BQU1DLEdBQWQ7QUFDRSxTQUFLQyx1Q0FBTDtBQUNBLFNBQUtDLG9DQUFMO0FBQ0EsU0FBS0MsK0JBQUw7QUFDQSxTQUFLQyw4QkFBTDtBQUNFLFVBQU1DLFFBQVFOLE1BQU1PLFdBQXBCO0FBQ0EsVUFBTUMsU0FBU1IsTUFBTVMsWUFBckI7QUFDQSxVQUFNQyxPQUFPLGdDQUFpQlYsS0FBakIsQ0FBYjtBQUNBLFVBQUlXLFlBQVksSUFBaEI7QUFDQSxVQUFJTCxLQUFKLEVBQVc7QUFDVEssb0JBQVksZ0NBQWlCTCxLQUFqQixDQUFaO0FBQ0Q7QUFDRCxhQUFPLHNDQUF1QkksSUFBdkIsRUFBNkJGLE1BQTdCLEVBQXFDRyxTQUFyQyxDQUFQO0FBQ0Y7QUFDRSxhQUFPLEVBQVA7QUFkSjtBQWdCRDs7QUFFRDtBQUNBO0FBQ0E7QUFDTyxTQUFTYixxQ0FBVCxDQUNMYyxjQURLLEVBRUc7QUFDUixNQUFJQyxPQUFPLEVBQVg7QUFDQSxNQUFJQyxPQUFPRixjQUFYO0FBQ0EsS0FBRztBQUNEQyxZQUFRZCxjQUFjZSxJQUFkLENBQVI7QUFDQTtBQUNBQSxXQUFPQSxLQUFLQyxNQUFaO0FBQ0QsR0FKRCxRQUlTRCxJQUpUO0FBS0EsU0FBT0QsSUFBUDtBQUNEIiwiZmlsZSI6IlJlYWN0RmliZXJDb21wb25lbnRUcmVlSG9vay5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHR5cGUge0ZpYmVyfSBmcm9tICdyZWFjdC1yZWNvbmNpbGVyL3NyYy9SZWFjdEZpYmVyJztcblxuaW1wb3J0IHtcbiAgSW5kZXRlcm1pbmF0ZUNvbXBvbmVudCxcbiAgRnVuY3Rpb25hbENvbXBvbmVudCxcbiAgQ2xhc3NDb21wb25lbnQsXG4gIEhvc3RDb21wb25lbnQsXG59IGZyb20gJy4vUmVhY3RUeXBlT2ZXb3JrJztcbmltcG9ydCBkZXNjcmliZUNvbXBvbmVudEZyYW1lIGZyb20gJy4vZGVzY3JpYmVDb21wb25lbnRGcmFtZSc7XG5pbXBvcnQgZ2V0Q29tcG9uZW50TmFtZSBmcm9tICcuL2dldENvbXBvbmVudE5hbWUnO1xuXG5mdW5jdGlvbiBkZXNjcmliZUZpYmVyKGZpYmVyOiBGaWJlcik6IHN0cmluZyB7XG4gIHN3aXRjaCAoZmliZXIudGFnKSB7XG4gICAgY2FzZSBJbmRldGVybWluYXRlQ29tcG9uZW50OlxuICAgIGNhc2UgRnVuY3Rpb25hbENvbXBvbmVudDpcbiAgICBjYXNlIENsYXNzQ29tcG9uZW50OlxuICAgIGNhc2UgSG9zdENvbXBvbmVudDpcbiAgICAgIGNvbnN0IG93bmVyID0gZmliZXIuX2RlYnVnT3duZXI7XG4gICAgICBjb25zdCBzb3VyY2UgPSBmaWJlci5fZGVidWdTb3VyY2U7XG4gICAgICBjb25zdCBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShmaWJlcik7XG4gICAgICBsZXQgb3duZXJOYW1lID0gbnVsbDtcbiAgICAgIGlmIChvd25lcikge1xuICAgICAgICBvd25lck5hbWUgPSBnZXRDb21wb25lbnROYW1lKG93bmVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZXNjcmliZUNvbXBvbmVudEZyYW1lKG5hbWUsIHNvdXJjZSwgb3duZXJOYW1lKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICcnO1xuICB9XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gY2FuIG9ubHkgYmUgY2FsbGVkIHdpdGggYSB3b3JrLWluLXByb2dyZXNzIGZpYmVyIGFuZFxuLy8gb25seSBkdXJpbmcgYmVnaW4gb3IgY29tcGxldGUgcGhhc2UuIERvIG5vdCBjYWxsIGl0IHVuZGVyIGFueSBvdGhlclxuLy8gY2lyY3Vtc3RhbmNlcy5cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGFja0FkZGVuZHVtQnlXb3JrSW5Qcm9ncmVzc0ZpYmVyKFxuICB3b3JrSW5Qcm9ncmVzczogRmliZXIsXG4pOiBzdHJpbmcge1xuICBsZXQgaW5mbyA9ICcnO1xuICBsZXQgbm9kZSA9IHdvcmtJblByb2dyZXNzO1xuICBkbyB7XG4gICAgaW5mbyArPSBkZXNjcmliZUZpYmVyKG5vZGUpO1xuICAgIC8vIE90aGVyd2lzZSB0aGlzIHJldHVybiBwb2ludGVyIG1pZ2h0IHBvaW50IHRvIHRoZSB3cm9uZyB0cmVlOlxuICAgIG5vZGUgPSBub2RlLnJldHVybjtcbiAgfSB3aGlsZSAobm9kZSk7XG4gIHJldHVybiBpbmZvO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactDebugCurrentFrame = exports.ReactCurrentOwner = undefined;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ReactInternals = _react2.default.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; /**\n                                                                                          * Copyright (c) 2013-present, Facebook, Inc.\n                                                                                          *\n                                                                                          * This source code is licensed under the MIT license found in the\n                                                                                          * LICENSE file in the root directory of this source tree.\n                                                                                          */\n\nvar ReactCurrentOwner = exports.ReactCurrentOwner = ReactInternals.ReactCurrentOwner;\nvar ReactDebugCurrentFrame = exports.ReactDebugCurrentFrame = __DEV__ ? ReactInternals.ReactDebugCurrentFrame : null;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RHbG9iYWxTaGFyZWRTdGF0ZS5qcyJdLCJuYW1lcyI6WyJSZWFjdEludGVybmFscyIsIlJlYWN0IiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJSZWFjdEN1cnJlbnRPd25lciIsIlJlYWN0RGVidWdDdXJyZW50RnJhbWUiLCJfX0RFVl9fIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBT0E7Ozs7OztBQUVBLElBQU1BLGlCQUFpQkMsZ0JBQU1DLGtEQUE3QixDLENBVEE7Ozs7Ozs7QUFXTyxJQUFNQyxnREFBb0JILGVBQWVHLGlCQUF6QztBQUNBLElBQU1DLDBEQUF5QkMsVUFDbENMLGVBQWVJLHNCQURtQixHQUVsQyxJQUZHIiwiZmlsZSI6IlJlYWN0R2xvYmFsU2hhcmVkU3RhdGUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5jb25zdCBSZWFjdEludGVybmFscyA9IFJlYWN0Ll9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuXG5leHBvcnQgY29uc3QgUmVhY3RDdXJyZW50T3duZXIgPSBSZWFjdEludGVybmFscy5SZWFjdEN1cnJlbnRPd25lcjtcbmV4cG9ydCBjb25zdCBSZWFjdERlYnVnQ3VycmVudEZyYW1lID0gX19ERVZfX1xuICA/IFJlYWN0SW50ZXJuYWxzLlJlYWN0RGVidWdDdXJyZW50RnJhbWVcbiAgOiBudWxsO1xuIl19","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.remove = remove;\nexports.get = get;\nexports.has = has;\nexports.set = set;\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * `ReactInstanceMap` maintains a mapping from a public facing stateful\n * instance (key) and the internal representation (value). This allows public\n * methods to accept the user facing instance as an argument and map them back\n * to internal methods.\n *\n * Note that this module is currently shared and assumed to be stateless.\n * If this becomes an actual Map, that will break.\n */\n\n/**\n * This API should be called `delete` but we'd have to make sure to always\n * transform these to strings for IE support. When this transform is fully\n * supported we can rename it.\n */\nfunction remove(key) {\n  key._reactInternalFiber = undefined;\n}\n\nfunction get(key) {\n  return key._reactInternalFiber;\n}\n\nfunction has(key) {\n  return key._reactInternalFiber !== undefined;\n}\n\nfunction set(key, value) {\n  key._reactInternalFiber = value;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RJbnN0YW5jZU1hcC5qcyJdLCJuYW1lcyI6WyJyZW1vdmUiLCJnZXQiLCJoYXMiLCJzZXQiLCJrZXkiLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwidW5kZWZpbmVkIiwidmFsdWUiXSwibWFwcGluZ3MiOiI7Ozs7O1FBc0JnQkEsTSxHQUFBQSxNO1FBSUFDLEcsR0FBQUEsRztRQUlBQyxHLEdBQUFBLEc7UUFJQUMsRyxHQUFBQSxHO0FBbENoQjs7Ozs7OztBQU9BOzs7Ozs7Ozs7O0FBVUE7Ozs7O0FBS08sU0FBU0gsTUFBVCxDQUFnQkksR0FBaEIsRUFBcUI7QUFDMUJBLE1BQUlDLG1CQUFKLEdBQTBCQyxTQUExQjtBQUNEOztBQUVNLFNBQVNMLEdBQVQsQ0FBYUcsR0FBYixFQUFrQjtBQUN2QixTQUFPQSxJQUFJQyxtQkFBWDtBQUNEOztBQUVNLFNBQVNILEdBQVQsQ0FBYUUsR0FBYixFQUFrQjtBQUN2QixTQUFPQSxJQUFJQyxtQkFBSixLQUE0QkMsU0FBbkM7QUFDRDs7QUFFTSxTQUFTSCxHQUFULENBQWFDLEdBQWIsRUFBa0JHLEtBQWxCLEVBQXlCO0FBQzlCSCxNQUFJQyxtQkFBSixHQUEwQkUsS0FBMUI7QUFDRCIsImZpbGUiOiJSZWFjdEluc3RhbmNlTWFwLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLyoqXG4gKiBgUmVhY3RJbnN0YW5jZU1hcGAgbWFpbnRhaW5zIGEgbWFwcGluZyBmcm9tIGEgcHVibGljIGZhY2luZyBzdGF0ZWZ1bFxuICogaW5zdGFuY2UgKGtleSkgYW5kIHRoZSBpbnRlcm5hbCByZXByZXNlbnRhdGlvbiAodmFsdWUpLiBUaGlzIGFsbG93cyBwdWJsaWNcbiAqIG1ldGhvZHMgdG8gYWNjZXB0IHRoZSB1c2VyIGZhY2luZyBpbnN0YW5jZSBhcyBhbiBhcmd1bWVudCBhbmQgbWFwIHRoZW0gYmFja1xuICogdG8gaW50ZXJuYWwgbWV0aG9kcy5cbiAqXG4gKiBOb3RlIHRoYXQgdGhpcyBtb2R1bGUgaXMgY3VycmVudGx5IHNoYXJlZCBhbmQgYXNzdW1lZCB0byBiZSBzdGF0ZWxlc3MuXG4gKiBJZiB0aGlzIGJlY29tZXMgYW4gYWN0dWFsIE1hcCwgdGhhdCB3aWxsIGJyZWFrLlxuICovXG5cbi8qKlxuICogVGhpcyBBUEkgc2hvdWxkIGJlIGNhbGxlZCBgZGVsZXRlYCBidXQgd2UnZCBoYXZlIHRvIG1ha2Ugc3VyZSB0byBhbHdheXNcbiAqIHRyYW5zZm9ybSB0aGVzZSB0byBzdHJpbmdzIGZvciBJRSBzdXBwb3J0LiBXaGVuIHRoaXMgdHJhbnNmb3JtIGlzIGZ1bGx5XG4gKiBzdXBwb3J0ZWQgd2UgY2FuIHJlbmFtZSBpdC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZShrZXkpIHtcbiAga2V5Ll9yZWFjdEludGVybmFsRmliZXIgPSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQoa2V5KSB7XG4gIHJldHVybiBrZXkuX3JlYWN0SW50ZXJuYWxGaWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhcyhrZXkpIHtcbiAgcmV0dXJuIGtleS5fcmVhY3RJbnRlcm5hbEZpYmVyICE9PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xuICBrZXkuX3JlYWN0SW50ZXJuYWxGaWJlciA9IHZhbHVlO1xufVxuIl19","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createPortal = createPortal;\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nfunction createPortal(children, containerInfo,\n// TODO: figure out the API for cross-renderer implementation.\nimplementation) {\n  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  return {\n    // This tag allow us to uniquely identify this as a React Portal\n    $$typeof: _ReactSymbols.REACT_PORTAL_TYPE,\n    key: key == null ? null : '' + key,\n    children: children,\n    containerInfo: containerInfo,\n    implementation: implementation\n  };\n} /**\n   * Copyright (c) 2014-present, Facebook, Inc.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *\n   * \n   */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RQb3J0YWwuanMiXSwibmFtZXMiOlsiY3JlYXRlUG9ydGFsIiwiY2hpbGRyZW4iLCJjb250YWluZXJJbmZvIiwiaW1wbGVtZW50YXRpb24iLCJrZXkiLCIkJHR5cGVvZiIsIlJFQUNUX1BPUlRBTF9UWVBFIl0sIm1hcHBpbmdzIjoiOzs7OztRQWFnQkEsWSxHQUFBQSxZOztBQUpoQjs7QUFJTyxTQUFTQSxZQUFULENBQ0xDLFFBREssRUFFTEMsYUFGSztBQUdMO0FBQ0FDLGNBSkssRUFNUTtBQUFBLE1BRGJDLEdBQ2EsdUVBREUsSUFDRjs7QUFDYixTQUFPO0FBQ0w7QUFDQUMsY0FBVUMsK0JBRkw7QUFHTEYsU0FBS0EsT0FBTyxJQUFQLEdBQWMsSUFBZCxHQUFxQixLQUFLQSxHQUgxQjtBQUlMSCxzQkFKSztBQUtMQyxnQ0FMSztBQU1MQztBQU5LLEdBQVA7QUFRRCxDLENBNUJEIiwiZmlsZSI6IlJlYWN0UG9ydGFsLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQge1JFQUNUX1BPUlRBTF9UWVBFfSBmcm9tICdzaGFyZWQvUmVhY3RTeW1ib2xzJztcblxuaW1wb3J0IHR5cGUge1JlYWN0Tm9kZUxpc3QsIFJlYWN0UG9ydGFsfSBmcm9tICdzaGFyZWQvUmVhY3RUeXBlcyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQb3J0YWwoXG4gIGNoaWxkcmVuOiBSZWFjdE5vZGVMaXN0LFxuICBjb250YWluZXJJbmZvOiBhbnksXG4gIC8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIEFQSSBmb3IgY3Jvc3MtcmVuZGVyZXIgaW1wbGVtZW50YXRpb24uXG4gIGltcGxlbWVudGF0aW9uOiBhbnksXG4gIGtleTogP3N0cmluZyA9IG51bGwsXG4pOiBSZWFjdFBvcnRhbCB7XG4gIHJldHVybiB7XG4gICAgLy8gVGhpcyB0YWcgYWxsb3cgdXMgdG8gdW5pcXVlbHkgaWRlbnRpZnkgdGhpcyBhcyBhIFJlYWN0IFBvcnRhbFxuICAgICQkdHlwZW9mOiBSRUFDVF9QT1JUQUxfVFlQRSxcbiAgICBrZXk6IGtleSA9PSBudWxsID8gbnVsbCA6ICcnICsga2V5LFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lckluZm8sXG4gICAgaW1wbGVtZW50YXRpb24sXG4gIH07XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getIteratorFn = getIteratorFn;\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n// The Symbol used to tag the ReactElement-like types. If there is no native Symbol\n// nor polyfill, then a plain number is used for performance.\nvar hasSymbol = typeof Symbol === 'function' && Symbol.for;\n\nvar REACT_ELEMENT_TYPE = exports.REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;\nvar REACT_CALL_TYPE = exports.REACT_CALL_TYPE = hasSymbol ? Symbol.for('react.call') : 0xeac8;\nvar REACT_RETURN_TYPE = exports.REACT_RETURN_TYPE = hasSymbol ? Symbol.for('react.return') : 0xeac9;\nvar REACT_PORTAL_TYPE = exports.REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;\nvar REACT_FRAGMENT_TYPE = exports.REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;\nvar REACT_STRICT_MODE_TYPE = exports.REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;\nvar REACT_PROVIDER_TYPE = exports.REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;\nvar REACT_CONTEXT_TYPE = exports.REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;\nvar REACT_ASYNC_MODE_TYPE = exports.REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;\nvar REACT_FORWARD_REF_TYPE = exports.REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;\n\nvar MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;\nvar FAUX_ITERATOR_SYMBOL = '@@iterator';\n\nfunction getIteratorFn(maybeIterable) {\n  if (maybeIterable === null || typeof maybeIterable === 'undefined') {\n    return null;\n  }\n  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];\n  if (typeof maybeIterator === 'function') {\n    return maybeIterator;\n  }\n  return null;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RTeW1ib2xzLmpzIl0sIm5hbWVzIjpbImdldEl0ZXJhdG9yRm4iLCJoYXNTeW1ib2wiLCJTeW1ib2wiLCJmb3IiLCJSRUFDVF9FTEVNRU5UX1RZUEUiLCJSRUFDVF9DQUxMX1RZUEUiLCJSRUFDVF9SRVRVUk5fVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1NUUklDVF9NT0RFX1RZUEUiLCJSRUFDVF9QUk9WSURFUl9UWVBFIiwiUkVBQ1RfQ09OVEVYVF9UWVBFIiwiUkVBQ1RfQVNZTkNfTU9ERV9UWVBFIiwiUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSIsIk1BWUJFX0lURVJBVE9SX1NZTUJPTCIsIml0ZXJhdG9yIiwiRkFVWF9JVEVSQVRPUl9TWU1CT0wiLCJtYXliZUl0ZXJhYmxlIiwibWF5YmVJdGVyYXRvciJdLCJtYXBwaW5ncyI6Ijs7Ozs7UUE2Q2dCQSxhLEdBQUFBLGE7QUE3Q2hCOzs7Ozs7Ozs7QUFTQTtBQUNBO0FBQ0EsSUFBTUMsWUFBWSxPQUFPQyxNQUFQLEtBQWtCLFVBQWxCLElBQWdDQSxPQUFPQyxHQUF6RDs7QUFFTyxJQUFNQyxrREFBcUJILFlBQzlCQyxPQUFPQyxHQUFQLENBQVcsZUFBWCxDQUQ4QixHQUU5QixNQUZHO0FBR0EsSUFBTUUsNENBQWtCSixZQUFZQyxPQUFPQyxHQUFQLENBQVcsWUFBWCxDQUFaLEdBQXVDLE1BQS9EO0FBQ0EsSUFBTUcsZ0RBQW9CTCxZQUM3QkMsT0FBT0MsR0FBUCxDQUFXLGNBQVgsQ0FENkIsR0FFN0IsTUFGRztBQUdBLElBQU1JLGdEQUFvQk4sWUFDN0JDLE9BQU9DLEdBQVAsQ0FBVyxjQUFYLENBRDZCLEdBRTdCLE1BRkc7QUFHQSxJQUFNSyxvREFBc0JQLFlBQy9CQyxPQUFPQyxHQUFQLENBQVcsZ0JBQVgsQ0FEK0IsR0FFL0IsTUFGRztBQUdBLElBQU1NLDBEQUF5QlIsWUFDbENDLE9BQU9DLEdBQVAsQ0FBVyxtQkFBWCxDQURrQyxHQUVsQyxNQUZHO0FBR0EsSUFBTU8sb0RBQXNCVCxZQUMvQkMsT0FBT0MsR0FBUCxDQUFXLGdCQUFYLENBRCtCLEdBRS9CLE1BRkc7QUFHQSxJQUFNUSxrREFBcUJWLFlBQzlCQyxPQUFPQyxHQUFQLENBQVcsZUFBWCxDQUQ4QixHQUU5QixNQUZHO0FBR0EsSUFBTVMsd0RBQXdCWCxZQUNqQ0MsT0FBT0MsR0FBUCxDQUFXLGtCQUFYLENBRGlDLEdBRWpDLE1BRkc7QUFHQSxJQUFNVSwwREFBeUJaLFlBQ2xDQyxPQUFPQyxHQUFQLENBQVcsbUJBQVgsQ0FEa0MsR0FFbEMsTUFGRzs7QUFJUCxJQUFNVyx3QkFBd0IsT0FBT1osTUFBUCxLQUFrQixVQUFsQixJQUFnQ0EsT0FBT2EsUUFBckU7QUFDQSxJQUFNQyx1QkFBdUIsWUFBN0I7O0FBRU8sU0FBU2hCLGFBQVQsQ0FBdUJpQixhQUF2QixFQUFpRTtBQUN0RSxNQUFJQSxrQkFBa0IsSUFBbEIsSUFBMEIsT0FBT0EsYUFBUCxLQUF5QixXQUF2RCxFQUFvRTtBQUNsRSxXQUFPLElBQVA7QUFDRDtBQUNELE1BQU1DLGdCQUNISix5QkFBeUJHLGNBQWNILHFCQUFkLENBQTFCLElBQ0FHLGNBQWNELG9CQUFkLENBRkY7QUFHQSxNQUFJLE9BQU9FLGFBQVAsS0FBeUIsVUFBN0IsRUFBeUM7QUFDdkMsV0FBT0EsYUFBUDtBQUNEO0FBQ0QsU0FBTyxJQUFQO0FBQ0QiLCJmaWxlIjoiUmVhY3RTeW1ib2xzLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG4vLyBUaGUgU3ltYm9sIHVzZWQgdG8gdGFnIHRoZSBSZWFjdEVsZW1lbnQtbGlrZSB0eXBlcy4gSWYgdGhlcmUgaXMgbm8gbmF0aXZlIFN5bWJvbFxuLy8gbm9yIHBvbHlmaWxsLCB0aGVuIGEgcGxhaW4gbnVtYmVyIGlzIHVzZWQgZm9yIHBlcmZvcm1hbmNlLlxuY29uc3QgaGFzU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xuXG5leHBvcnQgY29uc3QgUkVBQ1RfRUxFTUVOVF9UWVBFID0gaGFzU3ltYm9sXG4gID8gU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpXG4gIDogMHhlYWM3O1xuZXhwb3J0IGNvbnN0IFJFQUNUX0NBTExfVFlQRSA9IGhhc1N5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmNhbGwnKSA6IDB4ZWFjODtcbmV4cG9ydCBjb25zdCBSRUFDVF9SRVRVUk5fVFlQRSA9IGhhc1N5bWJvbFxuICA/IFN5bWJvbC5mb3IoJ3JlYWN0LnJldHVybicpXG4gIDogMHhlYWM5O1xuZXhwb3J0IGNvbnN0IFJFQUNUX1BPUlRBTF9UWVBFID0gaGFzU3ltYm9sXG4gID8gU3ltYm9sLmZvcigncmVhY3QucG9ydGFsJylcbiAgOiAweGVhY2E7XG5leHBvcnQgY29uc3QgUkVBQ1RfRlJBR01FTlRfVFlQRSA9IGhhc1N5bWJvbFxuICA/IFN5bWJvbC5mb3IoJ3JlYWN0LmZyYWdtZW50JylcbiAgOiAweGVhY2I7XG5leHBvcnQgY29uc3QgUkVBQ1RfU1RSSUNUX01PREVfVFlQRSA9IGhhc1N5bWJvbFxuICA/IFN5bWJvbC5mb3IoJ3JlYWN0LnN0cmljdF9tb2RlJylcbiAgOiAweGVhY2M7XG5leHBvcnQgY29uc3QgUkVBQ1RfUFJPVklERVJfVFlQRSA9IGhhc1N5bWJvbFxuICA/IFN5bWJvbC5mb3IoJ3JlYWN0LnByb3ZpZGVyJylcbiAgOiAweGVhY2Q7XG5leHBvcnQgY29uc3QgUkVBQ1RfQ09OVEVYVF9UWVBFID0gaGFzU3ltYm9sXG4gID8gU3ltYm9sLmZvcigncmVhY3QuY29udGV4dCcpXG4gIDogMHhlYWNlO1xuZXhwb3J0IGNvbnN0IFJFQUNUX0FTWU5DX01PREVfVFlQRSA9IGhhc1N5bWJvbFxuICA/IFN5bWJvbC5mb3IoJ3JlYWN0LmFzeW5jX21vZGUnKVxuICA6IDB4ZWFjZjtcbmV4cG9ydCBjb25zdCBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFID0gaGFzU3ltYm9sXG4gID8gU3ltYm9sLmZvcigncmVhY3QuZm9yd2FyZF9yZWYnKVxuICA6IDB4ZWFkMDtcblxuY29uc3QgTUFZQkVfSVRFUkFUT1JfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuaXRlcmF0b3I7XG5jb25zdCBGQVVYX0lURVJBVE9SX1NZTUJPTCA9ICdAQGl0ZXJhdG9yJztcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEl0ZXJhdG9yRm4obWF5YmVJdGVyYWJsZTogP2FueSk6ID8oKSA9PiA/SXRlcmF0b3I8Kj4ge1xuICBpZiAobWF5YmVJdGVyYWJsZSA9PT0gbnVsbCB8fCB0eXBlb2YgbWF5YmVJdGVyYWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBjb25zdCBtYXliZUl0ZXJhdG9yID1cbiAgICAoTUFZQkVfSVRFUkFUT1JfU1lNQk9MICYmIG1heWJlSXRlcmFibGVbTUFZQkVfSVRFUkFUT1JfU1lNQk9MXSkgfHxcbiAgICBtYXliZUl0ZXJhYmxlW0ZBVVhfSVRFUkFUT1JfU1lNQk9MXTtcbiAgaWYgKHR5cGVvZiBtYXliZUl0ZXJhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIG1heWJlSXRlcmF0b3I7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLowestCommonAncestor = getLowestCommonAncestor;\nexports.isAncestor = isAncestor;\nexports.getParentInstance = getParentInstance;\nexports.traverseTwoPhase = traverseTwoPhase;\nexports.traverseEnterLeave = traverseEnterLeave;\n\nvar _ReactTypeOfWork = require('./ReactTypeOfWork');\n\nfunction getParent(inst) {\n  do {\n    inst = inst.return;\n    // TODO: If this is a HostRoot we might want to bail out.\n    // That is depending on if we want nested subtrees (layers) to bubble\n    // events to their parent. We could also go through parentNode on the\n    // host node but that wouldn't work for React Native and doesn't let us\n    // do the portal feature.\n  } while (inst && inst.tag !== _ReactTypeOfWork.HostComponent);\n  if (inst) {\n    return inst;\n  }\n  return null;\n}\n\n/**\n * Return the lowest common ancestor of A and B, or null if they are in\n * different trees.\n */\n/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nfunction getLowestCommonAncestor(instA, instB) {\n  var depthA = 0;\n  for (var tempA = instA; tempA; tempA = getParent(tempA)) {\n    depthA++;\n  }\n  var depthB = 0;\n  for (var tempB = instB; tempB; tempB = getParent(tempB)) {\n    depthB++;\n  }\n\n  // If A is deeper, crawl up.\n  while (depthA - depthB > 0) {\n    instA = getParent(instA);\n    depthA--;\n  }\n\n  // If B is deeper, crawl up.\n  while (depthB - depthA > 0) {\n    instB = getParent(instB);\n    depthB--;\n  }\n\n  // Walk in lockstep until we find a match.\n  var depth = depthA;\n  while (depth--) {\n    if (instA === instB || instA === instB.alternate) {\n      return instA;\n    }\n    instA = getParent(instA);\n    instB = getParent(instB);\n  }\n  return null;\n}\n\n/**\n * Return if A is an ancestor of B.\n */\nfunction isAncestor(instA, instB) {\n  while (instB) {\n    if (instA === instB || instA === instB.alternate) {\n      return true;\n    }\n    instB = getParent(instB);\n  }\n  return false;\n}\n\n/**\n * Return the parent instance of the passed-in instance.\n */\nfunction getParentInstance(inst) {\n  return getParent(inst);\n}\n\n/**\n * Simulates the traversal of a two-phase, capture/bubble event dispatch.\n */\nfunction traverseTwoPhase(inst, fn, arg) {\n  var path = [];\n  while (inst) {\n    path.push(inst);\n    inst = getParent(inst);\n  }\n  var i = void 0;\n  for (i = path.length; i-- > 0;) {\n    fn(path[i], 'captured', arg);\n  }\n  for (i = 0; i < path.length; i++) {\n    fn(path[i], 'bubbled', arg);\n  }\n}\n\n/**\n * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that\n * should would receive a `mouseEnter` or `mouseLeave` event.\n *\n * Does not invoke the callback on the nearest common ancestor because nothing\n * \"entered\" or \"left\" that element.\n */\nfunction traverseEnterLeave(from, to, fn, argFrom, argTo) {\n  var common = from && to ? getLowestCommonAncestor(from, to) : null;\n  var pathFrom = [];\n  while (true) {\n    if (!from) {\n      break;\n    }\n    if (from === common) {\n      break;\n    }\n    var alternate = from.alternate;\n    if (alternate !== null && alternate === common) {\n      break;\n    }\n    pathFrom.push(from);\n    from = getParent(from);\n  }\n  var pathTo = [];\n  while (true) {\n    if (!to) {\n      break;\n    }\n    if (to === common) {\n      break;\n    }\n    var _alternate = to.alternate;\n    if (_alternate !== null && _alternate === common) {\n      break;\n    }\n    pathTo.push(to);\n    to = getParent(to);\n  }\n  for (var i = 0; i < pathFrom.length; i++) {\n    fn(pathFrom[i], 'bubbled', argFrom);\n  }\n  for (var _i = pathTo.length; _i-- > 0;) {\n    fn(pathTo[_i], 'captured', argTo);\n  }\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n\n// Don't change these two values. They're used by React Dev Tools.\nvar NoEffect = /*              */exports.NoEffect = 0; /**\n                                                        * Copyright (c) 2013-present, Facebook, Inc.\n                                                        *\n                                                        * This source code is licensed under the MIT license found in the\n                                                        * LICENSE file in the root directory of this source tree.\n                                                        *\n                                                        * \n                                                        */\n\nvar PerformedWork = /*         */exports.PerformedWork = 1;\n\n// You can change the rest (and add more).\nvar Placement = /*             */exports.Placement = 2;\nvar Update = /*                */exports.Update = 4;\nvar PlacementAndUpdate = /*    */exports.PlacementAndUpdate = 6;\nvar Deletion = /*              */exports.Deletion = 8;\nvar ContentReset = /*          */exports.ContentReset = 16;\nvar Callback = /*              */exports.Callback = 32;\nvar DidCapture = /*            */exports.DidCapture = 64;\nvar Ref = /*                   */exports.Ref = 128;\nvar ErrLog = /*                */exports.ErrLog = 256;\nvar Snapshot = /*              */exports.Snapshot = 2048;\n\n// Union of all host effects\nvar HostEffectMask = /*        */exports.HostEffectMask = 2559;\n\nvar Incomplete = /*            */exports.Incomplete = 512;\nvar ShouldCapture = /*         */exports.ShouldCapture = 1024;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RUeXBlT2ZTaWRlRWZmZWN0LmpzIl0sIm5hbWVzIjpbIk5vRWZmZWN0IiwiUGVyZm9ybWVkV29yayIsIlBsYWNlbWVudCIsIlVwZGF0ZSIsIlBsYWNlbWVudEFuZFVwZGF0ZSIsIkRlbGV0aW9uIiwiQ29udGVudFJlc2V0IiwiQ2FsbGJhY2siLCJEaWRDYXB0dXJlIiwiUmVmIiwiRXJyTG9nIiwiU25hcHNob3QiLCJIb3N0RWZmZWN0TWFzayIsIkluY29tcGxldGUiLCJTaG91bGRDYXB0dXJlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBV0E7QUFDTyxJQUFNQSxXQUFXLGtCQUFYLG1CQUE4QixDQUFwQyxDLENBWlA7Ozs7Ozs7OztBQWFPLElBQU1DLGdCQUFnQixhQUFoQix3QkFBOEIsQ0FBcEM7O0FBRVA7QUFDTyxJQUFNQyxZQUFZLGlCQUFaLG9CQUE4QixDQUFwQztBQUNBLElBQU1DLFNBQVMsb0JBQVQsaUJBQThCLENBQXBDO0FBQ0EsSUFBTUMscUJBQXFCLFFBQXJCLDZCQUE4QixDQUFwQztBQUNBLElBQU1DLFdBQVcsa0JBQVgsbUJBQThCLENBQXBDO0FBQ0EsSUFBTUMsZUFBZSxjQUFmLHVCQUE4QixFQUFwQztBQUNBLElBQU1DLFdBQVcsa0JBQVgsbUJBQThCLEVBQXBDO0FBQ0EsSUFBTUMsYUFBYSxnQkFBYixxQkFBOEIsRUFBcEM7QUFDQSxJQUFNQyxNQUFNLHVCQUFOLGNBQThCLEdBQXBDO0FBQ0EsSUFBTUMsU0FBUyxvQkFBVCxpQkFBOEIsR0FBcEM7QUFDQSxJQUFNQyxXQUFXLGtCQUFYLG1CQUE4QixJQUFwQzs7QUFFUDtBQUNPLElBQU1DLGlCQUFpQixZQUFqQix5QkFBOEIsSUFBcEM7O0FBRUEsSUFBTUMsYUFBYSxnQkFBYixxQkFBOEIsR0FBcEM7QUFDQSxJQUFNQyxnQkFBZ0IsYUFBaEIsd0JBQThCLElBQXBDIiwiZmlsZSI6IlJlYWN0VHlwZU9mU2lkZUVmZmVjdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZXhwb3J0IHR5cGUgVHlwZU9mU2lkZUVmZmVjdCA9IG51bWJlcjtcblxuLy8gRG9uJ3QgY2hhbmdlIHRoZXNlIHR3byB2YWx1ZXMuIFRoZXkncmUgdXNlZCBieSBSZWFjdCBEZXYgVG9vbHMuXG5leHBvcnQgY29uc3QgTm9FZmZlY3QgPSAvKiAgICAgICAgICAgICAgKi8gMGIwMDAwMDAwMDAwMDA7XG5leHBvcnQgY29uc3QgUGVyZm9ybWVkV29yayA9IC8qICAgICAgICAgKi8gMGIwMDAwMDAwMDAwMDE7XG5cbi8vIFlvdSBjYW4gY2hhbmdlIHRoZSByZXN0IChhbmQgYWRkIG1vcmUpLlxuZXhwb3J0IGNvbnN0IFBsYWNlbWVudCA9IC8qICAgICAgICAgICAgICovIDBiMDAwMDAwMDAwMDEwO1xuZXhwb3J0IGNvbnN0IFVwZGF0ZSA9IC8qICAgICAgICAgICAgICAgICovIDBiMDAwMDAwMDAwMTAwO1xuZXhwb3J0IGNvbnN0IFBsYWNlbWVudEFuZFVwZGF0ZSA9IC8qICAgICovIDBiMDAwMDAwMDAwMTEwO1xuZXhwb3J0IGNvbnN0IERlbGV0aW9uID0gLyogICAgICAgICAgICAgICovIDBiMDAwMDAwMDAxMDAwO1xuZXhwb3J0IGNvbnN0IENvbnRlbnRSZXNldCA9IC8qICAgICAgICAgICovIDBiMDAwMDAwMDEwMDAwO1xuZXhwb3J0IGNvbnN0IENhbGxiYWNrID0gLyogICAgICAgICAgICAgICovIDBiMDAwMDAwMTAwMDAwO1xuZXhwb3J0IGNvbnN0IERpZENhcHR1cmUgPSAvKiAgICAgICAgICAgICovIDBiMDAwMDAxMDAwMDAwO1xuZXhwb3J0IGNvbnN0IFJlZiA9IC8qICAgICAgICAgICAgICAgICAgICovIDBiMDAwMDEwMDAwMDAwO1xuZXhwb3J0IGNvbnN0IEVyckxvZyA9IC8qICAgICAgICAgICAgICAgICovIDBiMDAwMTAwMDAwMDAwO1xuZXhwb3J0IGNvbnN0IFNuYXBzaG90ID0gLyogICAgICAgICAgICAgICovIDBiMTAwMDAwMDAwMDAwO1xuXG4vLyBVbmlvbiBvZiBhbGwgaG9zdCBlZmZlY3RzXG5leHBvcnQgY29uc3QgSG9zdEVmZmVjdE1hc2sgPSAvKiAgICAgICAgKi8gMGIxMDAxMTExMTExMTE7XG5cbmV4cG9ydCBjb25zdCBJbmNvbXBsZXRlID0gLyogICAgICAgICAgICAqLyAwYjAwMTAwMDAwMDAwMDtcbmV4cG9ydCBjb25zdCBTaG91bGRDYXB0dXJlID0gLyogICAgICAgICAqLyAwYjAxMDAwMDAwMDAwMDtcbiJdfQ==","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar IndeterminateComponent = exports.IndeterminateComponent = 0; // Before we know whether it is functional or class\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar FunctionalComponent = exports.FunctionalComponent = 1;\nvar ClassComponent = exports.ClassComponent = 2;\nvar HostRoot = exports.HostRoot = 3; // Root of a host tree. Could be nested inside another node.\nvar HostPortal = exports.HostPortal = 4; // A subtree. Could be an entry point to a different renderer.\nvar HostComponent = exports.HostComponent = 5;\nvar HostText = exports.HostText = 6;\nvar CallComponent = exports.CallComponent = 7;\nvar CallHandlerPhase = exports.CallHandlerPhase = 8;\nvar ReturnComponent = exports.ReturnComponent = 9;\nvar Fragment = exports.Fragment = 10;\nvar Mode = exports.Mode = 11;\nvar ContextConsumer = exports.ContextConsumer = 12;\nvar ContextProvider = exports.ContextProvider = 13;\nvar ForwardRef = exports.ForwardRef = 14;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RUeXBlT2ZXb3JrLmpzIl0sIm5hbWVzIjpbIkluZGV0ZXJtaW5hdGVDb21wb25lbnQiLCJGdW5jdGlvbmFsQ29tcG9uZW50IiwiQ2xhc3NDb21wb25lbnQiLCJIb3N0Um9vdCIsIkhvc3RQb3J0YWwiLCJIb3N0Q29tcG9uZW50IiwiSG9zdFRleHQiLCJDYWxsQ29tcG9uZW50IiwiQ2FsbEhhbmRsZXJQaGFzZSIsIlJldHVybkNvbXBvbmVudCIsIkZyYWdtZW50IiwiTW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkZvcndhcmRSZWYiXSwibWFwcGluZ3MiOiI7Ozs7O0FBMEJPLElBQU1BLDBEQUF5QixDQUEvQixDLENBQWtDO0FBMUJ6Qzs7Ozs7Ozs7O0FBMkJPLElBQU1DLG9EQUFzQixDQUE1QjtBQUNBLElBQU1DLDBDQUFpQixDQUF2QjtBQUNBLElBQU1DLDhCQUFXLENBQWpCLEMsQ0FBb0I7QUFDcEIsSUFBTUMsa0NBQWEsQ0FBbkIsQyxDQUFzQjtBQUN0QixJQUFNQyx3Q0FBZ0IsQ0FBdEI7QUFDQSxJQUFNQyw4QkFBVyxDQUFqQjtBQUNBLElBQU1DLHdDQUFnQixDQUF0QjtBQUNBLElBQU1DLDhDQUFtQixDQUF6QjtBQUNBLElBQU1DLDRDQUFrQixDQUF4QjtBQUNBLElBQU1DLDhCQUFXLEVBQWpCO0FBQ0EsSUFBTUMsc0JBQU8sRUFBYjtBQUNBLElBQU1DLDRDQUFrQixFQUF4QjtBQUNBLElBQU1DLDRDQUFrQixFQUF4QjtBQUNBLElBQU1DLGtDQUFhLEVBQW5CIiwiZmlsZSI6IlJlYWN0VHlwZU9mV29yay5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuZXhwb3J0IHR5cGUgVHlwZU9mV29yayA9XG4gIHwgMFxuICB8IDFcbiAgfCAyXG4gIHwgM1xuICB8IDRcbiAgfCA1XG4gIHwgNlxuICB8IDdcbiAgfCA4XG4gIHwgOVxuICB8IDEwXG4gIHwgMTFcbiAgfCAxMlxuICB8IDEzXG4gIHwgMTQ7XG5cbmV4cG9ydCBjb25zdCBJbmRldGVybWluYXRlQ29tcG9uZW50ID0gMDsgLy8gQmVmb3JlIHdlIGtub3cgd2hldGhlciBpdCBpcyBmdW5jdGlvbmFsIG9yIGNsYXNzXG5leHBvcnQgY29uc3QgRnVuY3Rpb25hbENvbXBvbmVudCA9IDE7XG5leHBvcnQgY29uc3QgQ2xhc3NDb21wb25lbnQgPSAyO1xuZXhwb3J0IGNvbnN0IEhvc3RSb290ID0gMzsgLy8gUm9vdCBvZiBhIGhvc3QgdHJlZS4gQ291bGQgYmUgbmVzdGVkIGluc2lkZSBhbm90aGVyIG5vZGUuXG5leHBvcnQgY29uc3QgSG9zdFBvcnRhbCA9IDQ7IC8vIEEgc3VidHJlZS4gQ291bGQgYmUgYW4gZW50cnkgcG9pbnQgdG8gYSBkaWZmZXJlbnQgcmVuZGVyZXIuXG5leHBvcnQgY29uc3QgSG9zdENvbXBvbmVudCA9IDU7XG5leHBvcnQgY29uc3QgSG9zdFRleHQgPSA2O1xuZXhwb3J0IGNvbnN0IENhbGxDb21wb25lbnQgPSA3O1xuZXhwb3J0IGNvbnN0IENhbGxIYW5kbGVyUGhhc2UgPSA4O1xuZXhwb3J0IGNvbnN0IFJldHVybkNvbXBvbmVudCA9IDk7XG5leHBvcnQgY29uc3QgRnJhZ21lbnQgPSAxMDtcbmV4cG9ydCBjb25zdCBNb2RlID0gMTE7XG5leHBvcnQgY29uc3QgQ29udGV4dENvbnN1bWVyID0gMTI7XG5leHBvcnQgY29uc3QgQ29udGV4dFByb3ZpZGVyID0gMTM7XG5leHBvcnQgY29uc3QgRm9yd2FyZFJlZiA9IDE0O1xuIl19","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n// TODO: this is special because it gets imported during build.\n\nmodule.exports = '16.3.1';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvUmVhY3RWZXJzaW9uLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBT0E7O0FBRUE7O0FBQ0FBLE9BQU9DLE9BQVAsR0FBaUIsUUFBakIiLCJmaWxlIjoiUmVhY3RWZXJzaW9uLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vLyBUT0RPOiB0aGlzIGlzIHNwZWNpYWwgYmVjYXVzZSBpdCBnZXRzIGltcG9ydGVkIGR1cmluZyBidWlsZC5cbm1vZHVsZS5leHBvcnRzID0gJzE2LjMuMSc7XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (name, source, ownerName) {\n  return '\\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');\n};\n\nmodule.exports = exports['default']; /**\n                                      * Copyright (c) 2016-present, Facebook, Inc.\n                                      *\n                                      * This source code is licensed under the MIT license found in the\n                                      * LICENSE file in the root directory of this source tree.\n                                      *\n                                      * \n                                      */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvZGVzY3JpYmVDb21wb25lbnRGcmFtZS5qcyJdLCJuYW1lcyI6WyJuYW1lIiwic291cmNlIiwib3duZXJOYW1lIiwiZmlsZU5hbWUiLCJyZXBsYWNlIiwibGluZU51bWJlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O2tCQVNlLFVBQ2JBLElBRGEsRUFFYkMsTUFGYSxFQUdiQyxTQUhhLEVBSWI7QUFDQSxTQUNFLGVBQ0NGLFFBQVEsU0FEVCxLQUVDQyxTQUNHLFVBQ0FBLE9BQU9FLFFBQVAsQ0FBZ0JDLE9BQWhCLENBQXdCLFdBQXhCLEVBQXFDLEVBQXJDLENBREEsR0FFQSxHQUZBLEdBR0FILE9BQU9JLFVBSFAsR0FJQSxHQUxILEdBTUdILFlBQVksa0JBQWtCQSxTQUFsQixHQUE4QixHQUExQyxHQUFnRCxFQVJwRCxDQURGO0FBV0QsQzs7cUNBekJEIiwiZmlsZSI6ImRlc2NyaWJlQ29tcG9uZW50RnJhbWUuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3NwcmF5L3Byb2plY3RzL3JlYWN0LXJlcG8vcmVhY3QtMTYuMy4xLWJ1aWxkIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKFxuICBuYW1lOiBudWxsIHwgc3RyaW5nLFxuICBzb3VyY2U6IGFueSxcbiAgb3duZXJOYW1lOiBudWxsIHwgc3RyaW5nLFxuKSB7XG4gIHJldHVybiAoXG4gICAgJ1xcbiAgICBpbiAnICtcbiAgICAobmFtZSB8fCAnVW5rbm93bicpICtcbiAgICAoc291cmNlXG4gICAgICA/ICcgKGF0ICcgK1xuICAgICAgICBzb3VyY2UuZmlsZU5hbWUucmVwbGFjZSgvXi4qW1xcXFxcXC9dLywgJycpICtcbiAgICAgICAgJzonICtcbiAgICAgICAgc291cmNlLmxpbmVOdW1iZXIgK1xuICAgICAgICAnKSdcbiAgICAgIDogb3duZXJOYW1lID8gJyAoY3JlYXRlZCBieSAnICsgb3duZXJOYW1lICsgJyknIDogJycpXG4gICk7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nfunction getComponentName(fiber) {\n  var type = fiber.type;\n\n  if (typeof type === 'function') {\n    return type.displayName || type.name;\n  }\n  if (typeof type === 'string') {\n    return type;\n  }\n  switch (type) {\n    case _ReactSymbols.REACT_FRAGMENT_TYPE:\n      return 'ReactFragment';\n    case _ReactSymbols.REACT_PORTAL_TYPE:\n      return 'ReactPortal';\n    case _ReactSymbols.REACT_CALL_TYPE:\n      return 'ReactCall';\n    case _ReactSymbols.REACT_RETURN_TYPE:\n      return 'ReactReturn';\n  }\n  return null;\n}\n\nexports.default = getComponentName;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvZ2V0Q29tcG9uZW50TmFtZS5qcyJdLCJuYW1lcyI6WyJnZXRDb21wb25lbnROYW1lIiwiZmliZXIiLCJ0eXBlIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiUkVBQ1RfRlJBR01FTlRfVFlQRSIsIlJFQUNUX1BPUlRBTF9UWVBFIiwiUkVBQ1RfQ0FMTF9UWVBFIiwiUkVBQ1RfUkVUVVJOX1RZUEUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQVdBOztBQVhBOzs7Ozs7Ozs7QUFrQkEsU0FBU0EsZ0JBQVQsQ0FBMEJDLEtBQTFCLEVBQXVEO0FBQUEsTUFDOUNDLElBRDhDLEdBQ3RDRCxLQURzQyxDQUM5Q0MsSUFEOEM7O0FBRXJELE1BQUksT0FBT0EsSUFBUCxLQUFnQixVQUFwQixFQUFnQztBQUM5QixXQUFPQSxLQUFLQyxXQUFMLElBQW9CRCxLQUFLRSxJQUFoQztBQUNEO0FBQ0QsTUFBSSxPQUFPRixJQUFQLEtBQWdCLFFBQXBCLEVBQThCO0FBQzVCLFdBQU9BLElBQVA7QUFDRDtBQUNELFVBQVFBLElBQVI7QUFDRSxTQUFLRyxpQ0FBTDtBQUNFLGFBQU8sZUFBUDtBQUNGLFNBQUtDLCtCQUFMO0FBQ0UsYUFBTyxhQUFQO0FBQ0YsU0FBS0MsNkJBQUw7QUFDRSxhQUFPLFdBQVA7QUFDRixTQUFLQywrQkFBTDtBQUNFLGFBQU8sYUFBUDtBQVJKO0FBVUEsU0FBTyxJQUFQO0FBQ0Q7O2tCQUVjUixnQiIsImZpbGUiOiJnZXRDb21wb25lbnROYW1lLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9zcHJheS9wcm9qZWN0cy9yZWFjdC1yZXBvL3JlYWN0LTE2LjMuMS1idWlsZCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQGZsb3dcbiAqL1xuXG5pbXBvcnQgdHlwZSB7RmliZXJ9IGZyb20gJ3JlYWN0LXJlY29uY2lsZXIvc3JjL1JlYWN0RmliZXInO1xuXG5pbXBvcnQge1xuICBSRUFDVF9DQUxMX1RZUEUsXG4gIFJFQUNUX0ZSQUdNRU5UX1RZUEUsXG4gIFJFQUNUX1JFVFVSTl9UWVBFLFxuICBSRUFDVF9QT1JUQUxfVFlQRSxcbn0gZnJvbSAnc2hhcmVkL1JlYWN0U3ltYm9scyc7XG5cbmZ1bmN0aW9uIGdldENvbXBvbmVudE5hbWUoZmliZXI6IEZpYmVyKTogc3RyaW5nIHwgbnVsbCB7XG4gIGNvbnN0IHt0eXBlfSA9IGZpYmVyO1xuICBpZiAodHlwZW9mIHR5cGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdHlwZS5kaXNwbGF5TmFtZSB8fCB0eXBlLm5hbWU7XG4gIH1cbiAgaWYgKHR5cGVvZiB0eXBlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB0eXBlO1xuICB9XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgUkVBQ1RfRlJBR01FTlRfVFlQRTpcbiAgICAgIHJldHVybiAnUmVhY3RGcmFnbWVudCc7XG4gICAgY2FzZSBSRUFDVF9QT1JUQUxfVFlQRTpcbiAgICAgIHJldHVybiAnUmVhY3RQb3J0YWwnO1xuICAgIGNhc2UgUkVBQ1RfQ0FMTF9UWVBFOlxuICAgICAgcmV0dXJuICdSZWFjdENhbGwnO1xuICAgIGNhc2UgUkVBQ1RfUkVUVVJOX1RZUEU6XG4gICAgICByZXR1cm4gJ1JlYWN0UmV0dXJuJztcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0Q29tcG9uZW50TmFtZTtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _invariant = require('fbjs/lib/invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar invokeGuardedCallback = function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {\n  this._hasCaughtError = false;\n  this._caughtError = null;\n  var funcArgs = Array.prototype.slice.call(arguments, 3);\n  try {\n    func.apply(context, funcArgs);\n  } catch (error) {\n    this._caughtError = error;\n    this._hasCaughtError = true;\n  }\n}; /**\n    * Copyright (c) 2013-present, Facebook, Inc.\n    *\n    * This source code is licensed under the MIT license found in the\n    * LICENSE file in the root directory of this source tree.\n    *\n    * \n    */\n\nif (__DEV__) {\n  // In DEV mode, we swap out invokeGuardedCallback for a special version\n  // that plays more nicely with the browser's DevTools. The idea is to preserve\n  // \"Pause on exceptions\" behavior. Because React wraps all user-provided\n  // functions in invokeGuardedCallback, and the production version of\n  // invokeGuardedCallback uses a try-catch, all user exceptions are treated\n  // like caught exceptions, and the DevTools won't pause unless the developer\n  // takes the extra step of enabling pause on caught exceptions. This is\n  // untintuitive, though, because even though React has caught the error, from\n  // the developer's perspective, the error is uncaught.\n  //\n  // To preserve the expected \"Pause on exceptions\" behavior, we don't use a\n  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake\n  // DOM node, and call the user-provided callback from inside an event handler\n  // for that fake event. If the callback throws, the error is \"captured\" using\n  // a global event handler. But because the error happens in a different\n  // event loop context, it does not interrupt the normal program flow.\n  // Effectively, this gives us try-catch behavior without actually using\n  // try-catch. Neat!\n\n  // Check that the browser supports the APIs we need to implement our special\n  // DEV version of invokeGuardedCallback\n  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {\n    var fakeNode = document.createElement('react');\n\n    var invokeGuardedCallbackDev = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {\n      // If document doesn't exist we know for sure we will crash in this method\n      // when we call document.createEvent(). However this can cause confusing\n      // errors: https://github.com/facebookincubator/create-react-app/issues/3482\n      // So we preemptively throw with a better message instead.\n      (0, _invariant2.default)(typeof document !== 'undefined', 'The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');\n      var evt = document.createEvent('Event');\n\n      // Keeps track of whether the user-provided callback threw an error. We\n      // set this to true at the beginning, then set it to false right after\n      // calling the function. If the function errors, `didError` will never be\n      // set to false. This strategy works even if the browser is flaky and\n      // fails to call our global error handler, because it doesn't rely on\n      // the error event at all.\n      var didError = true;\n\n      // Create an event handler for our fake event. We will synchronously\n      // dispatch our fake event using `dispatchEvent`. Inside the handler, we\n      // call the user-provided callback.\n      var funcArgs = Array.prototype.slice.call(arguments, 3);\n      function callCallback() {\n        // We immediately remove the callback from event listeners so that\n        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a\n        // nested call would trigger the fake event handlers of any call higher\n        // in the stack.\n        fakeNode.removeEventListener(evtType, callCallback, false);\n        func.apply(context, funcArgs);\n        didError = false;\n      }\n\n      // Create a global error event handler. We use this to capture the value\n      // that was thrown. It's possible that this error handler will fire more\n      // than once; for example, if non-React code also calls `dispatchEvent`\n      // and a handler for that event throws. We should be resilient to most of\n      // those cases. Even if our error event handler fires more than once, the\n      // last error event is always used. If the callback actually does error,\n      // we know that the last error event is the correct one, because it's not\n      // possible for anything else to have happened in between our callback\n      // erroring and the code that follows the `dispatchEvent` call below. If\n      // the callback doesn't error, but the error event was fired, we know to\n      // ignore it because `didError` will be false, as described above.\n      var error = void 0;\n      // Use this to track whether the error event is ever called.\n      var didSetError = false;\n      var isCrossOriginError = false;\n\n      function onError(event) {\n        error = event.error;\n        didSetError = true;\n        if (error === null && event.colno === 0 && event.lineno === 0) {\n          isCrossOriginError = true;\n        }\n      }\n\n      // Create a fake event type.\n      var evtType = 'react-' + (name ? name : 'invokeguardedcallback');\n\n      // Attach our event handlers\n      window.addEventListener('error', onError);\n      fakeNode.addEventListener(evtType, callCallback, false);\n\n      // Synchronously dispatch our fake event. If the user-provided function\n      // errors, it will trigger our global error handler.\n      evt.initEvent(evtType, false, false);\n      fakeNode.dispatchEvent(evt);\n\n      if (didError) {\n        if (!didSetError) {\n          // The callback errored, but the error event never fired.\n          error = new Error('An error was thrown inside one of your components, but React ' + \"doesn't know what it was. This is likely due to browser \" + 'flakiness. React does its best to preserve the \"Pause on ' + 'exceptions\" behavior of the DevTools, which requires some ' + \"DEV-mode only tricks. It's possible that these don't work in \" + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');\n        } else if (isCrossOriginError) {\n          error = new Error(\"A cross-origin error was thrown. React doesn't have access to \" + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');\n        }\n        this._hasCaughtError = true;\n        this._caughtError = error;\n      } else {\n        this._hasCaughtError = false;\n        this._caughtError = null;\n      }\n\n      // Remove our event listeners\n      window.removeEventListener('error', onError);\n    };\n\n    invokeGuardedCallback = invokeGuardedCallbackDev;\n  }\n}\n\nexports.default = invokeGuardedCallback;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\nvar supportedInputTypes = {\n  color: true,\n  date: true,\n  datetime: true,\n  'datetime-local': true,\n  email: true,\n  month: true,\n  number: true,\n  password: true,\n  range: true,\n  search: true,\n  tel: true,\n  text: true,\n  time: true,\n  url: true,\n  week: true\n};\n\nfunction isTextInputElement(elem) {\n  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();\n\n  if (nodeName === 'input') {\n    return !!supportedInputTypes[elem.type];\n  }\n\n  if (nodeName === 'textarea') {\n    return true;\n  }\n\n  return false;\n}\n\nexports.default = isTextInputElement;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvaXNUZXh0SW5wdXRFbGVtZW50LmpzIl0sIm5hbWVzIjpbInN1cHBvcnRlZElucHV0VHlwZXMiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJudW1iZXIiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwiaXNUZXh0SW5wdXRFbGVtZW50IiwiZWxlbSIsIm5vZGVOYW1lIiwidG9Mb3dlckNhc2UiLCJ0eXBlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7Ozs7QUFZQSxJQUFNQSxzQkFBb0Q7QUFDeERDLFNBQU8sSUFEaUQ7QUFFeERDLFFBQU0sSUFGa0Q7QUFHeERDLFlBQVUsSUFIOEM7QUFJeEQsb0JBQWtCLElBSnNDO0FBS3hEQyxTQUFPLElBTGlEO0FBTXhEQyxTQUFPLElBTmlEO0FBT3hEQyxVQUFRLElBUGdEO0FBUXhEQyxZQUFVLElBUjhDO0FBU3hEQyxTQUFPLElBVGlEO0FBVXhEQyxVQUFRLElBVmdEO0FBV3hEQyxPQUFLLElBWG1EO0FBWXhEQyxRQUFNLElBWmtEO0FBYXhEQyxRQUFNLElBYmtEO0FBY3hEQyxPQUFLLElBZG1EO0FBZXhEQyxRQUFNO0FBZmtELENBQTFEOztBQWtCQSxTQUFTQyxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBeUQ7QUFDdkQsTUFBTUMsV0FBV0QsUUFBUUEsS0FBS0MsUUFBYixJQUF5QkQsS0FBS0MsUUFBTCxDQUFjQyxXQUFkLEVBQTFDOztBQUVBLE1BQUlELGFBQWEsT0FBakIsRUFBMEI7QUFDeEIsV0FBTyxDQUFDLENBQUNqQixvQkFBc0JnQixJQUFGLENBQWdDRyxJQUFwRCxDQUFUO0FBQ0Q7O0FBRUQsTUFBSUYsYUFBYSxVQUFqQixFQUE2QjtBQUMzQixXQUFPLElBQVA7QUFDRDs7QUFFRCxTQUFPLEtBQVA7QUFDRDs7a0JBRWNGLGtCIiwiZmlsZSI6ImlzVGV4dElucHV0RWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuLyoqXG4gKiBAc2VlIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL3RoZS1pbnB1dC1lbGVtZW50Lmh0bWwjaW5wdXQtdHlwZS1hdHRyLXN1bW1hcnlcbiAqL1xuY29uc3Qgc3VwcG9ydGVkSW5wdXRUeXBlczoge1trZXk6IHN0cmluZ106IHRydWUgfCB2b2lkfSA9IHtcbiAgY29sb3I6IHRydWUsXG4gIGRhdGU6IHRydWUsXG4gIGRhdGV0aW1lOiB0cnVlLFxuICAnZGF0ZXRpbWUtbG9jYWwnOiB0cnVlLFxuICBlbWFpbDogdHJ1ZSxcbiAgbW9udGg6IHRydWUsXG4gIG51bWJlcjogdHJ1ZSxcbiAgcGFzc3dvcmQ6IHRydWUsXG4gIHJhbmdlOiB0cnVlLFxuICBzZWFyY2g6IHRydWUsXG4gIHRlbDogdHJ1ZSxcbiAgdGV4dDogdHJ1ZSxcbiAgdGltZTogdHJ1ZSxcbiAgdXJsOiB0cnVlLFxuICB3ZWVrOiB0cnVlLFxufTtcblxuZnVuY3Rpb24gaXNUZXh0SW5wdXRFbGVtZW50KGVsZW06ID9IVE1MRWxlbWVudCk6IGJvb2xlYW4ge1xuICBjb25zdCBub2RlTmFtZSA9IGVsZW0gJiYgZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cbiAgaWYgKG5vZGVOYW1lID09PSAnaW5wdXQnKSB7XG4gICAgcmV0dXJuICEhc3VwcG9ydGVkSW5wdXRUeXBlc1soKGVsZW06IGFueSk6IEhUTUxJbnB1dEVsZW1lbnQpLnR5cGVdO1xuICB9XG5cbiAgaWYgKG5vZGVOYW1lID09PSAndGV4dGFyZWEnKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzVGV4dElucHV0RWxlbWVudDtcbiJdfQ==","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; /**\n                                                                                                                                                                                                                                                                               * Copyright (c) 2016-present, Facebook, Inc.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * This source code is licensed under the MIT license found in the\n                                                                                                                                                                                                                                                                               * LICENSE file in the root directory of this source tree.\n                                                                                                                                                                                                                                                                               *\n                                                                                                                                                                                                                                                                               * \n                                                                                                                                                                                                                                                                               */\n\nexports.default = isValidElementType;\n\nvar _ReactSymbols = require('shared/ReactSymbols');\n\nfunction isValidElementType(type) {\n  return typeof type === 'string' || typeof type === 'function' ||\n  // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.\n  type === _ReactSymbols.REACT_FRAGMENT_TYPE || type === _ReactSymbols.REACT_ASYNC_MODE_TYPE || type === _ReactSymbols.REACT_STRICT_MODE_TYPE || (typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object' && type !== null && (type.$$typeof === _ReactSymbols.REACT_PROVIDER_TYPE || type.$$typeof === _ReactSymbols.REACT_CONTEXT_TYPE || type.$$typeof === _ReactSymbols.REACT_FORWARD_REF_TYPE);\n}\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvaXNWYWxpZEVsZW1lbnRUeXBlLmpzIl0sIm5hbWVzIjpbImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGUiLCJSRUFDVF9GUkFHTUVOVF9UWVBFIiwiUkVBQ1RfQVNZTkNfTU9ERV9UWVBFIiwiUkVBQ1RfU1RSSUNUX01PREVfVFlQRSIsIiQkdHlwZW9mIiwiUkVBQ1RfUFJPVklERVJfVFlQRSIsIlJFQUNUX0NPTlRFWFRfVFlQRSIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs4UUFBQTs7Ozs7Ozs7O2tCQWtCd0JBLGtCOztBQVR4Qjs7QUFTZSxTQUFTQSxrQkFBVCxDQUE0QkMsSUFBNUIsRUFBeUM7QUFDdEQsU0FDRSxPQUFPQSxJQUFQLEtBQWdCLFFBQWhCLElBQ0EsT0FBT0EsSUFBUCxLQUFnQixVQURoQjtBQUVBO0FBQ0FBLFdBQVNDLGlDQUhULElBSUFELFNBQVNFLG1DQUpULElBS0FGLFNBQVNHLG9DQUxULElBTUMsUUFBT0gsSUFBUCx5Q0FBT0EsSUFBUCxPQUFnQixRQUFoQixJQUNDQSxTQUFTLElBRFYsS0FFRUEsS0FBS0ksUUFBTCxLQUFrQkMsaUNBQWxCLElBQ0NMLEtBQUtJLFFBQUwsS0FBa0JFLGdDQURuQixJQUVDTixLQUFLSSxRQUFMLEtBQWtCRyxvQ0FKckIsQ0FQSDtBQWFEIiwiZmlsZSI6ImlzVmFsaWRFbGVtZW50VHlwZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNi1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IHtcbiAgUkVBQ1RfRlJBR01FTlRfVFlQRSxcbiAgUkVBQ1RfQVNZTkNfTU9ERV9UWVBFLFxuICBSRUFDVF9TVFJJQ1RfTU9ERV9UWVBFLFxuICBSRUFDVF9QUk9WSURFUl9UWVBFLFxuICBSRUFDVF9DT05URVhUX1RZUEUsXG4gIFJFQUNUX0ZPUldBUkRfUkVGX1RZUEUsXG59IGZyb20gJ3NoYXJlZC9SZWFjdFN5bWJvbHMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkRWxlbWVudFR5cGUodHlwZTogbWl4ZWQpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdHlwZSA9PT0gJ3N0cmluZycgfHxcbiAgICB0eXBlb2YgdHlwZSA9PT0gJ2Z1bmN0aW9uJyB8fFxuICAgIC8vIE5vdGU6IGl0cyB0eXBlb2YgbWlnaHQgYmUgb3RoZXIgdGhhbiAnc3ltYm9sJyBvciAnbnVtYmVyJyBpZiBpdCdzIGEgcG9seWZpbGwuXG4gICAgdHlwZSA9PT0gUkVBQ1RfRlJBR01FTlRfVFlQRSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX0FTWU5DX01PREVfVFlQRSB8fFxuICAgIHR5cGUgPT09IFJFQUNUX1NUUklDVF9NT0RFX1RZUEUgfHxcbiAgICAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmXG4gICAgICB0eXBlICE9PSBudWxsICYmXG4gICAgICAodHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfUFJPVklERVJfVFlQRSB8fFxuICAgICAgICB0eXBlLiQkdHlwZW9mID09PSBSRUFDVF9DT05URVhUX1RZUEUgfHxcbiAgICAgICAgdHlwZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSkpXG4gICk7XG59XG4iXX0=","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Forked from fbjs/warning:\n * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js\n *\n * Only change is we use console.warn instead of console.error,\n * and do nothing when 'console' is not supported.\n * This really simplifies the code.\n * ---\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar lowPriorityWarning = function lowPriorityWarning() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var argIndex = 0;\n    var message = 'Warning: ' + format.replace(/%s/g, function () {\n      return args[argIndex++];\n    });\n    if (typeof console !== 'undefined') {\n      console.warn(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n\n  lowPriorityWarning = function lowPriorityWarning(condition, format) {\n    if (format === undefined) {\n      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');\n    }\n    if (!condition) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n      }\n\n      printWarning.apply(undefined, [format].concat(args));\n    }\n  };\n}\n\nexports.default = lowPriorityWarning;\nmodule.exports = exports['default'];\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9wYWNrYWdlcy9zaGFyZWQvbG93UHJpb3JpdHlXYXJuaW5nLmpzIl0sIm5hbWVzIjpbImxvd1ByaW9yaXR5V2FybmluZyIsIl9fREVWX18iLCJwcmludFdhcm5pbmciLCJmb3JtYXQiLCJhcmdzIiwiYXJnSW5kZXgiLCJtZXNzYWdlIiwicmVwbGFjZSIsImNvbnNvbGUiLCJ3YXJuIiwiRXJyb3IiLCJ4IiwiY29uZGl0aW9uIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBOzs7Ozs7O0FBT0E7Ozs7Ozs7Ozs7Ozs7O0FBY0EsSUFBSUEscUJBQXFCLDhCQUFXLENBQUUsQ0FBdEM7O0FBRUEsSUFBSUMsT0FBSixFQUFhO0FBQ1gsTUFBTUMsZUFBZSxTQUFmQSxZQUFlLENBQVNDLE1BQVQsRUFBMEI7QUFBQSxzQ0FBTkMsSUFBTTtBQUFOQSxVQUFNO0FBQUE7O0FBQzdDLFFBQUlDLFdBQVcsQ0FBZjtBQUNBLFFBQU1DLFVBQVUsY0FBY0gsT0FBT0ksT0FBUCxDQUFlLEtBQWYsRUFBc0I7QUFBQSxhQUFNSCxLQUFLQyxVQUFMLENBQU47QUFBQSxLQUF0QixDQUE5QjtBQUNBLFFBQUksT0FBT0csT0FBUCxLQUFtQixXQUF2QixFQUFvQztBQUNsQ0EsY0FBUUMsSUFBUixDQUFhSCxPQUFiO0FBQ0Q7QUFDRCxRQUFJO0FBQ0Y7QUFDQTtBQUNBO0FBQ0EsWUFBTSxJQUFJSSxLQUFKLENBQVVKLE9BQVYsQ0FBTjtBQUNELEtBTEQsQ0FLRSxPQUFPSyxDQUFQLEVBQVUsQ0FBRTtBQUNmLEdBWkQ7O0FBY0FYLHVCQUFxQiw0QkFBU1ksU0FBVCxFQUFvQlQsTUFBcEIsRUFBcUM7QUFDeEQsUUFBSUEsV0FBV1UsU0FBZixFQUEwQjtBQUN4QixZQUFNLElBQUlILEtBQUosQ0FDSiw4REFDRSxrQkFGRSxDQUFOO0FBSUQ7QUFDRCxRQUFJLENBQUNFLFNBQUwsRUFBZ0I7QUFBQSx5Q0FQa0NSLElBT2xDO0FBUGtDQSxZQU9sQztBQUFBOztBQUNkRixxQ0FBYUMsTUFBYixTQUF3QkMsSUFBeEI7QUFDRDtBQUNGLEdBVkQ7QUFXRDs7a0JBRWNKLGtCIiwiZmlsZSI6Imxvd1ByaW9yaXR5V2FybmluZy5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvc3ByYXkvcHJvamVjdHMvcmVhY3QtcmVwby9yZWFjdC0xNi4zLjEtYnVpbGQiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbi8qKlxuICogRm9ya2VkIGZyb20gZmJqcy93YXJuaW5nOlxuICogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2ZianMvYmxvYi9lNjZiYTIwYWQ1YmU0MzNlYjU0NDIzZjJiMDk3ZDgyOTMyNGQ5ZGU2L3BhY2thZ2VzL2ZianMvc3JjL19fZm9ya3NfXy93YXJuaW5nLmpzXG4gKlxuICogT25seSBjaGFuZ2UgaXMgd2UgdXNlIGNvbnNvbGUud2FybiBpbnN0ZWFkIG9mIGNvbnNvbGUuZXJyb3IsXG4gKiBhbmQgZG8gbm90aGluZyB3aGVuICdjb25zb2xlJyBpcyBub3Qgc3VwcG9ydGVkLlxuICogVGhpcyByZWFsbHkgc2ltcGxpZmllcyB0aGUgY29kZS5cbiAqIC0tLVxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbmxldCBsb3dQcmlvcml0eVdhcm5pbmcgPSBmdW5jdGlvbigpIHt9O1xuXG5pZiAoX19ERVZfXykge1xuICBjb25zdCBwcmludFdhcm5pbmcgPSBmdW5jdGlvbihmb3JtYXQsIC4uLmFyZ3MpIHtcbiAgICBsZXQgYXJnSW5kZXggPSAwO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSAnV2FybmluZzogJyArIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCAoKSA9PiBhcmdzW2FyZ0luZGV4KytdKTtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH07XG5cbiAgbG93UHJpb3JpdHlXYXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2B3YXJuaW5nKGNvbmRpdGlvbiwgZm9ybWF0LCAuLi5hcmdzKWAgcmVxdWlyZXMgYSB3YXJuaW5nICcgK1xuICAgICAgICAgICdtZXNzYWdlIGFyZ3VtZW50JyxcbiAgICAgICk7XG4gICAgfVxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICBwcmludFdhcm5pbmcoZm9ybWF0LCAuLi5hcmdzKTtcbiAgICB9XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxvd1ByaW9yaXR5V2FybmluZztcbiJdfQ=="],"sourceRoot":""}